import {
  E,
  y as y2,
  z
} from "./chunk-3AFEB5FG.js";
import {
  s as s3
} from "./chunk-PY3FVAQV.js";
import "./chunk-7F2ZL2BI.js";
import "./chunk-E5VMCRLK.js";
import "./chunk-OJ2HHY2O.js";
import "./chunk-4BIBXEQB.js";
import "./chunk-E4KPV765.js";
import "./chunk-OOOPZLJE.js";
import "./chunk-U2WD23Z5.js";
import "./chunk-VYG3YGZX.js";
import {
  i
} from "./chunk-VGNX3TFX.js";
import "./chunk-6BYMCM5A.js";
import "./chunk-BR5PSTJI.js";
import "./chunk-2T7LFOXQ.js";
import "./chunk-NCONZRBI.js";
import "./chunk-76CXRT5P.js";
import "./chunk-7Q5M7ANT.js";
import {
  o as o2
} from "./chunk-7N45W3EA.js";
import "./chunk-MQVQXXLV.js";
import {
  p as p2
} from "./chunk-HAVCYBU2.js";
import "./chunk-A4HIS5ZJ.js";
import "./chunk-AMLHWG76.js";
import "./chunk-OFQYIOO7.js";
import {
  v
} from "./chunk-G3HEFWHV.js";
import {
  p
} from "./chunk-3GENFQBG.js";
import {
  c
} from "./chunk-FX6IXM55.js";
import {
  O
} from "./chunk-QFFP6A5Q.js";
import {
  d,
  g,
  m
} from "./chunk-J5VTDQTQ.js";
import "./chunk-YF2CRSQX.js";
import "./chunk-JP3KAUQB.js";
import "./chunk-INL7BDTP.js";
import "./chunk-PDEVQZ7U.js";
import "./chunk-7XXQ7762.js";
import "./chunk-DVGM5RQS.js";
import "./chunk-R6OA44DQ.js";
import "./chunk-QTYVDCOW.js";
import {
  f
} from "./chunk-YGVY4EIZ.js";
import "./chunk-HSDU7DIL.js";
import "./chunk-FWRLW4G5.js";
import "./chunk-JNNRJ7GQ.js";
import "./chunk-E52E6T7N.js";
import "./chunk-GLGOVVCK.js";
import "./chunk-BUVDI6S7.js";
import "./chunk-6Z6ZAVRA.js";
import "./chunk-PK4W65H4.js";
import "./chunk-GY2AJLN6.js";
import "./chunk-W62B63EU.js";
import "./chunk-N43PI2UO.js";
import "./chunk-O6VYMEIX.js";
import "./chunk-NDQ5FHGV.js";
import "./chunk-HUQX7WZO.js";
import "./chunk-BYSA56OH.js";
import "./chunk-US2IWMHE.js";
import "./chunk-ZPYDYUP5.js";
import {
  n as n2
} from "./chunk-TDV3ZXCQ.js";
import {
  t
} from "./chunk-XJCUKRCO.js";
import {
  b
} from "./chunk-SOEQPPQP.js";
import "./chunk-22F6X66Z.js";
import "./chunk-AIDV7EKX.js";
import "./chunk-FZQZIM7U.js";
import "./chunk-YM6PUX7G.js";
import "./chunk-QEYOWTXD.js";
import "./chunk-CZBRZ6SU.js";
import "./chunk-KDO6J2FO.js";
import "./chunk-RT3T2K4S.js";
import "./chunk-WJCI2CGX.js";
import {
  a
} from "./chunk-REIQNAQW.js";
import "./chunk-J6LQZWZI.js";
import "./chunk-OD3FDQCI.js";
import "./chunk-J2PJNRU7.js";
import "./chunk-56SPM3WK.js";
import "./chunk-XMZAPOBR.js";
import "./chunk-BLJKKR5D.js";
import "./chunk-ZGNCYHMZ.js";
import "./chunk-X2S4RQJ4.js";
import "./chunk-FUPLN7UM.js";
import "./chunk-376OPXM4.js";
import "./chunk-DER356EU.js";
import "./chunk-MZIWIEIR.js";
import "./chunk-TQEOEDAZ.js";
import "./chunk-SHFHZMHO.js";
import "./chunk-NRP45AHD.js";
import "./chunk-IWQ7452U.js";
import "./chunk-NAN5J6QS.js";
import "./chunk-B4DKBAM3.js";
import "./chunk-6M2AHKYV.js";
import "./chunk-SZIJNKCV.js";
import "./chunk-6O43OEU5.js";
import "./chunk-J2K7ZDSV.js";
import "./chunk-2UML3WQZ.js";
import "./chunk-KXVMEIWT.js";
import "./chunk-UDND2Z3V.js";
import "./chunk-23Y3DIC6.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-RAX2HD42.js";
import "./chunk-ZYRIJWLX.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import "./chunk-3MNMDUQZ.js";
import "./chunk-UWG37XSU.js";
import {
  k2 as k
} from "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import {
  r as r2
} from "./chunk-HLM6QCL2.js";
import {
  o
} from "./chunk-RXYULINL.js";
import "./chunk-5NXILPDI.js";
import "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-XQN7F674.js";
import {
  U
} from "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import {
  I,
  Q,
  j
} from "./chunk-KAN4HXCG.js";
import "./chunk-4FEGON7M.js";
import {
  s as s2
} from "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-CXFRNDG4.js";
import "./chunk-7QMMKGW4.js";
import {
  e,
  n2 as n,
  y
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import {
  w
} from "./chunk-MJXQTGI2.js";
import {
  s
} from "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import {
  r
} from "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/layers/TileLayer.js
var M = ["Canvas/World_Dark_Gray_Base", "Canvas/World_Dark_Gray_Reference", "Canvas/World_Light_Gray_Base", "Canvas/World_Light_Gray_Reference", "Elevation/World_Hillshade", "Elevation/World_Hillshade_Dark", "Ocean/World_Ocean_Base", "Ocean/World_Ocean_Reference", "Ocean_Basemap", "Reference/World_Boundaries_and_Places", "Reference/World_Boundaries_and_Places_Alternate", "Reference/World_Transportation", "World_Imagery", "World_Street_Map", "World_Topo_Map"];
var W = class extends n2(E(t(c(v(s3(y2(p2(O(a(p(i(o2(b))))))))))))) {
  constructor(...e2) {
    super(...e2), this.listMode = "show", this.isReference = null, this.operationalLayerType = "ArcGISTiledMapServiceLayer", this.resampling = true, this.sourceJSON = null, this.spatialReference = null, this.path = null, this.sublayers = null, this.type = "tile", this.url = null;
  }
  normalizeCtorArgs(e2, r3) {
    return "string" == typeof e2 ? { url: e2, ...r3 } : e2;
  }
  load(e2) {
    const r3 = r(e2) ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e2).catch(w).then(() => this._fetchService(r3))), Promise.resolve(this);
  }
  get attributionDataUrl() {
    var _a;
    const e2 = (_a = this.parsedUrl) == null ? void 0 : _a.path.toLowerCase();
    return e2 ? this._getDefaultAttribution(this._getMapName(e2)) : null;
  }
  readSpatialReference(e2, r3) {
    return (e2 = e2 || r3.tileInfo && r3.tileInfo.spatialReference) && k.fromJSON(e2);
  }
  writeSublayers(e2, r3, t2, s4) {
    if (!this.loaded || !e2)
      return;
    const i2 = e2.slice().reverse().flatten(({ sublayers: e3 }) => e3 && e3.toArray().reverse()).toArray(), o3 = [], a2 = { writeSublayerStructure: false, ...s4 };
    i2.forEach((e3) => {
      const r4 = e3.write({}, a2);
      o3.push(r4);
    });
    o3.some((e3) => Object.keys(e3).length > 1) && (r3.layers = o3);
  }
  get tileServers() {
    return this._getDefaultTileServers(this.parsedUrl.path);
  }
  castTileServers(e2) {
    return Array.isArray(e2) ? e2.map((e3) => j(e3).path) : null;
  }
  fetchTile(e2, t2, s4, i2 = {}) {
    const { signal: o3 } = i2, a2 = this.getTileUrl(e2, t2, s4), l = { responseType: "image", signal: o3, query: { ...this.refreshParameters } };
    return U(a2, l).then((e3) => e3.data);
  }
  async fetchImageBitmapTile(e2, t2, s4, i2 = {}) {
    const { signal: o3 } = i2, a2 = this.getTileUrl(e2, t2, s4), l = { responseType: "blob", signal: o3, query: { ...this.refreshParameters } }, n3 = await U(a2, l);
    return createImageBitmap(n3.data);
  }
  getTileUrl(e2, r3, t2) {
    const s4 = !this.tilemapCache && this.supportsBlankTile, i2 = I({ ...this.parsedUrl.query, blankTile: !s4 && null, ...this.customParameters, token: this.apiKey }), o3 = this.tileServers;
    return `${o3 && o3.length ? o3[r3 % o3.length] : this.parsedUrl.path}/tile/${e2}/${r3}/${t2}${i2 ? "?" + i2 : ""}`;
  }
  _fetchService(e2) {
    return new Promise((s4, o3) => {
      if (this.sourceJSON) {
        if (null != this.sourceJSON.bandCount && null != this.sourceJSON.pixelSizeX)
          throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
        return void s4({ data: this.sourceJSON });
      }
      if (!this.parsedUrl)
        throw new s("tile-layer:undefined-url", "layer's url is not defined");
      const a2 = m(this.parsedUrl.path);
      if (r(a2) && "ImageServer" === a2.serverType)
        throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
      U(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, responseType: "json", signal: e2 }).then(s4, o3);
    }).then((r3) => {
      if (r3.ssl && (this.url = this.url.replace(/^http:/i, "https:")), this.sourceJSON = r3.data, this.read(r3.data, { origin: "service", url: this.parsedUrl }), 10.1 === this.version && !g(this.url))
        return this._fetchServerVersion(this.url, e2).then((e3) => {
          this.read({ currentVersion: e3 });
        }).catch(() => {
        });
    });
  }
  _fetchServerVersion(e2, s4) {
    if (!d(e2))
      return Promise.reject();
    const i2 = e2.replace(/(.*\/rest)\/.*/i, "$1") + "/info";
    return U(i2, { query: { f: "json", ...this.customParameters, token: this.apiKey }, responseType: "json", signal: s4 }).then((e3) => {
      if (e3.data && e3.data.currentVersion)
        return e3.data.currentVersion;
      throw new s("tile-layer:version-not-available");
    });
  }
  _getMapName(e2) {
    const r3 = e2.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);
    return r3 && r3[2];
  }
  _getDefaultAttribution(e2) {
    if (!e2)
      return;
    let r3;
    e2 = e2.toLowerCase();
    for (let t2 = 0, s4 = M.length; t2 < s4; t2++)
      if (r3 = M[t2], r3.toLowerCase().includes(e2))
        return Q("//static.arcgis.com/attribution/" + r3);
  }
  _getDefaultTileServers(e2) {
    const r3 = -1 !== e2.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i), t2 = -1 !== e2.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);
    return r3 || t2 ? [e2, e2.replace(r3 ? /server\.arcgisonline/i : /services\.arcgisonline/i, r3 ? "services.arcgisonline" : "server.arcgisonline")] : [];
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile.__isDefault__;
  }
};
e([y({ readOnly: true })], W.prototype, "attributionDataUrl", null), e([y({ type: ["show", "hide", "hide-children"] })], W.prototype, "listMode", void 0), e([y({ json: { read: true, write: true } })], W.prototype, "blendMode", void 0), e([y({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], W.prototype, "isReference", void 0), e([y({ readOnly: true, type: ["ArcGISTiledMapServiceLayer"] })], W.prototype, "operationalLayerType", void 0), e([y({ type: Boolean })], W.prototype, "resampling", void 0), e([y()], W.prototype, "sourceJSON", void 0), e([y({ type: k })], W.prototype, "spatialReference", void 0), e([o("spatialReference", ["spatialReference", "tileInfo"])], W.prototype, "readSpatialReference", null), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], W.prototype, "path", void 0), e([y({ readOnly: true })], W.prototype, "sublayers", void 0), e([r2("sublayers", { layers: { type: [z] } })], W.prototype, "writeSublayers", null), e([y({ json: { read: false, write: false } })], W.prototype, "popupEnabled", void 0), e([y()], W.prototype, "tileServers", null), e([s2("tileServers")], W.prototype, "castTileServers", null), e([y({ readOnly: true, json: { read: false } })], W.prototype, "type", void 0), e([y(f)], W.prototype, "url", void 0), W = e([n("esri.layers.TileLayer")], W), W.prototype.fetchTile.__isDefault__ = true;
var B = W;
export {
  B as default
};
//# sourceMappingURL=TileLayer-R4DAROGU.js.map
