import {
  e as e2
} from "./chunk-6ZCPLPAF.js";
import {
  n as n2
} from "./chunk-L7GGOP5S.js";
import {
  a
} from "./chunk-TGHV3HKU.js";
import {
  e,
  f
} from "./chunk-BQL7VXQR.js";
import {
  o
} from "./chunk-735C75BI.js";
import {
  n
} from "./chunk-ZLTZ3KAT.js";
import {
  r
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/Laserline.glsl.js
function i(i2, s) {
  i2.extensions.add("GL_OES_standard_derivatives");
  const p = i2.fragment;
  p.include(a), i2.include(n2), p.uniforms.add([new o("globalAlpha", (o2) => o2.globalAlpha), new e2("glowColor", (o2) => o2.glowColor), new o("glowWidth", (o2, e3) => o2.glowWidth * e3.camera.pixelRatio), new o("glowFalloff", (o2) => o2.glowFalloff), new e2("innerColor", (o2) => o2.innerColor), new o("innerWidth", (o2, e3) => o2.innerWidth * e3.camera.pixelRatio), new f("depthMap", (o2, e3) => e3.linearDepthTexture), new e("nearFar", (o2, e3) => e3.camera.nearFar), new f("frameColor", (o2, e3) => e3.mainColorTexture)]), p.code.add(n`vec4 blendPremultiplied(vec4 source, vec4 dest) {
float oneMinusSourceAlpha = 1.0 - source.a;
return vec4(
source.rgb + dest.rgb * oneMinusSourceAlpha,
source.a + dest.a * oneMinusSourceAlpha
);
}`), p.code.add(n`vec4 premultipliedColor(vec3 rgb, float alpha) {
return vec4(rgb * alpha, alpha);
}`), p.code.add(n`vec4 laserlineProfile(float dist) {
if (dist > glowWidth) {
return vec4(0.0);
}
float innerAlpha = (1.0 - smoothstep(0.0, innerWidth, dist));
float glowAlpha = pow(max(0.0, 1.0 - dist / glowWidth), glowFalloff);
return blendPremultiplied(
premultipliedColor(innerColor, innerAlpha),
premultipliedColor(glowColor, glowAlpha)
);
}`), p.code.add(n`bool laserlineReconstructFromDepth(out vec3 pos, out vec3 normal, out float depthDiscontinuityAlpha) {
float depth = linearDepthFromTexture(depthMap, uv, nearFar);
if (-depth == nearFar[0]) {
return false;
}
pos = reconstructPosition(gl_FragCoord.xy, depth);
normal = normalize(cross(dFdx(pos), dFdy(pos)));
float ddepth = fwidth(depth);
depthDiscontinuityAlpha = 1.0 - smoothstep(0.0, 0.01, -ddepth / depth);
return true;
}`), s.contrastControlEnabled ? (p.uniforms.add(new o("globalAlphaContrastBoost", (e3) => r(e3.globalAlphaContrastBoost) ? e3.globalAlphaContrastBoost : 1)), p.code.add(n`float rgbToLuminance(vec3 color) {
return dot(vec3(0.2126, 0.7152, 0.0722), color);
}
vec4 laserlineOutput(vec4 color) {
float backgroundLuminance = rgbToLuminance(texture2D(frameColor, uv).rgb);
float alpha = clamp(globalAlpha * max(backgroundLuminance * globalAlphaContrastBoost, 1.0), 0.0, 1.0);
return color * alpha;
}`)) : p.code.add(n`vec4 laserlineOutput(vec4 color) {
return color * globalAlpha;
}`);
}

export {
  i
};
//# sourceMappingURL=chunk-X3TCLMHI.js.map
