{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/materials/PatternStyle.js", "../../@arcgis/core/chunks/Pattern.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nvar a;!function(a){a[a.Horizontal=0]=\"Horizontal\",a[a.Vertical=1]=\"Vertical\",a[a.Cross=2]=\"Cross\",a[a.ForwardDiagonal=3]=\"ForwardDiagonal\",a[a.BackwardDiagonal=4]=\"BackwardDiagonal\",a[a.DiagonalCross=5]=\"DiagonalCross\",a[a.COUNT=6]=\"COUNT\"}(a||(a={}));export{a as Style};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nimport{addNearFar as e,addLinearDepth as o}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{ShaderOutput as t}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{VertexColor as i}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{OutputDepth as n}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js\";import{OutputHighlight as l}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{multipassTerrainTest as c}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{symbolAlphaCutoff as d}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{ColorConversion as s}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as p,addCameraPosition as g}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float4PassUniform as u}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as v}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as m}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as f}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{TransparencyPassType as h}from\"../views/3d/webgl-engine/lib/TransparencyPassType.js\";import{VertexAttribute as w}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{Style as b}from\"../views/3d/webgl-engine/materials/PatternStyle.js\";const y=.70710678118,S=y,j=.08715574274;function x(x){const T=new f,C=x.hasMultipassTerrain&&(x.output===t.Color||x.output===t.Alpha);x.draped||T.extensions.add(\"GL_OES_standard_derivatives\");const{vertex:R,fragment:D}=T;p(R,x),T.include(a,x),T.include(i,x),x.draped?R.uniforms.add(new v(\"worldToScreenRatio\",((e,o)=>1/o.screenToPCSRatio))):T.attributes.add(w.BOUNDINGRECT,\"mat3\"),T.attributes.add(w.POSITION,\"vec3\"),T.attributes.add(w.UVMAPSPACE,\"vec4\"),T.varyings.add(\"vpos\",\"vec3\"),T.varyings.add(\"vuv\",\"vec2\"),C&&T.varyings.add(\"depth\",\"float\");const $=x.style===b.ForwardDiagonal||x.style===b.BackwardDiagonal||x.style===b.DiagonalCross;$&&R.code.add(m`\n      const mat2 rotate45 = mat2(${m.float(y)}, ${m.float(-S)},\n                                 ${m.float(S)}, ${m.float(y)});\n    `),x.draped||(g(R,x),R.uniforms.add(new v(\"worldToScreenPerDistanceRatio\",((e,o)=>1/o.camera.perScreenPixelRatio))),R.code.add(m`vec3 projectPointToLineSegment(vec3 center, vec3 halfVector, vec3 point) {\nfloat projectedLength = dot(halfVector, point - center) / dot(halfVector, halfVector);\nreturn center + halfVector * clamp(projectedLength, -1.0, 1.0);\n}`),R.code.add(m`vec3 intersectRayPlane(vec3 rayDir, vec3 rayOrigin, vec3 planeNormal, vec3 planePoint) {\nfloat d = dot(planeNormal, planePoint);\nfloat t = (d - dot(planeNormal, rayOrigin)) / dot(planeNormal, rayDir);\nreturn rayOrigin + t * rayDir;\n}`),R.code.add(m`\n      float boundingRectDistanceToCamera() {\n        vec3 center = vec3(boundingRect[0][0], boundingRect[0][1], boundingRect[0][2]);\n        vec3 halfU = vec3(boundingRect[1][0], boundingRect[1][1], boundingRect[1][2]);\n        vec3 halfV = vec3(boundingRect[2][0], boundingRect[2][1], boundingRect[2][2]);\n        vec3 n = normalize(cross(halfU, halfV));\n\n        vec3 viewDir = - vec3(view[0][2], view[1][2], view[2][2]);\n\n        float viewAngle = dot(viewDir, n);\n        float minViewAngle = ${m.float(j)};\n\n        if (abs(viewAngle) < minViewAngle) {\n          // view direction is (almost) parallel to plane -> clamp it to min angle\n          float normalComponent = sign(viewAngle) * minViewAngle - viewAngle;\n          viewDir = normalize(viewDir + normalComponent * n);\n        }\n\n        // intersect view direction with infinite plane that contains bounding rect\n        vec3 planeProjected = intersectRayPlane(viewDir, cameraPosition, n, center);\n\n        // clip to bounds by projecting to u and v line segments individually\n        vec3 uProjected = projectPointToLineSegment(center, halfU, planeProjected);\n        vec3 vProjected = projectPointToLineSegment(center, halfV, planeProjected);\n\n        // use to calculate the closest point to camera on bounding rect\n        vec3 closestPoint = uProjected + vProjected - center;\n\n        return length(closestPoint - cameraPosition);\n      }\n    `)),R.code.add(m`\n    vec2 scaledUV() {\n      vec2 uv = uvMapSpace.xy ${$?\" * rotate45\":\"\"};\n      vec2 uvCellOrigin = uvMapSpace.zw ${$?\" * rotate45\":\"\"};\n\n      ${x.draped?\"\":m`\n            float distanceToCamera = boundingRectDistanceToCamera();\n            float worldToScreenRatio = worldToScreenPerDistanceRatio / distanceToCamera;\n          `}\n\n      // Logarithmically discretize ratio to avoid jittering\n      float step = 0.1;\n      float discreteWorldToScreenRatio = log(worldToScreenRatio);\n      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;\n      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);\n\n      vec2 uvOffset = mod(uvCellOrigin * discreteWorldToScreenRatio, ${m.float(x.patternSpacing)});\n      return uvOffset + (uv * discreteWorldToScreenRatio);\n    }\n  `);const V=x.output===t.Depth;return V&&(T.include(n,x),e(T),o(T)),R.code.add(m`\n    void main(void) {\n      vuv = scaledUV();\n      vpos = position;\n      ${C?\"depth = (view * vec4(vpos, 1.0)).z;\":\"\"}\n      forwardNormalizedVertexColor();\n      gl_Position = ${V?m`transformPositionWithDepth(proj, view, vpos, nearFar, linearDepth);`:m`transformPosition(proj, view, vpos);`}\n    }\n  `),T.include(r,x),D.include(s),x.draped&&D.uniforms.add(new v(\"texelSize\",((e,o)=>1/o.camera.pixelRatio))),x.output===t.Highlight&&T.include(l,x),C&&T.include(c,x),x.output!==t.Highlight&&(D.code.add(m`\n      const float lineWidth = ${m.float(x.lineWidth)};\n      const float spacing = ${m.float(x.patternSpacing)};\n      const float spacingINV = ${m.float(1/x.patternSpacing)};\n\n      float coverage(float p, float txlSize) {\n        p = mod(p, spacing);\n\n        float halfTxlSize = txlSize / 2.0;\n\n        float start = p - halfTxlSize;\n        float end = p + halfTxlSize;\n\n        float coverage = (ceil(end * spacingINV) - floor(start * spacingINV)) * lineWidth;\n        coverage -= min(lineWidth, mod(start, spacing));\n        coverage -= max(lineWidth - mod(end, spacing), 0.0);\n\n        return coverage / txlSize;\n      }\n    `),x.draped||D.code.add(m`const int maxSamples = 5;\nfloat sample(float p) {\nvec2 dxdy = abs(vec2(dFdx(p), dFdy(p)));\nfloat fwidth = dxdy.x + dxdy.y;\nivec2 samples = 1 + ivec2(clamp(dxdy, 0.0, float(maxSamples - 1)));\nvec2 invSamples = 1.0 / vec2(samples);\nfloat accumulator = 0.0;\nfor (int j = 0; j < maxSamples; j++) {\nif(j >= samples.y) {\nbreak;\n}\nfor (int i = 0; i < maxSamples; i++) {\nif(i >= samples.x) {\nbreak;\n}\nvec2 step = vec2(i,j) * invSamples - 0.5;\naccumulator += coverage(p + step.x * dxdy.x + step.y * dxdy.y, fwidth);\n}\n}\naccumulator /= float(samples.x * samples.y);\nreturn accumulator;\n}`)),D.uniforms.add(new u(\"uColor\",(e=>e.color))),D.code.add(m`\n    void main() {\n      discardBySlice(vpos);\n      ${C?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n      vec4 color = ${x.hasVertexColors?\"vColor * uColor;\":\"uColor;\"}\n      color = highlightSlice(color, vpos);\n\n      ${x.output!==t.Highlight?m`color.a *= ${P(x)};`:\"\"}\n\n      if (color.a < ${m.float(d)}) {\n        discard;\n      }\n\n      ${x.output===t.Alpha?m`gl_FragColor = vec4(color.a);`:\"\"}\n\n      ${x.output===t.Color?m`gl_FragColor = color; ${x.transparencyPassType===h.Color?\"gl_FragColor = premultiplyAlpha(gl_FragColor);\":\"\"}`:\"\"}\n      ${x.output===t.Highlight?m`outputHighlight();`:\"\"}\n      ${x.output===t.Depth?m`outputDepth(linearDepth);`:\"\"};\n    }\n  `),T}function P(e){function o(o){return e.draped?m`coverage(vuv.${o}, texelSize)`:m`sample(vuv.${o})`}switch(e.style){case b.ForwardDiagonal:case b.Horizontal:return o(\"y\");case b.BackwardDiagonal:case b.Vertical:return o(\"x\");case b.DiagonalCross:case b.Cross:return m`\n        1.0 - (1.0 - ${o(\"x\")}) * (1.0 - ${o(\"y\")})\n      `;default:return\"0.0\"}}const T=Object.freeze(Object.defineProperty({__proto__:null,build:x},Symbol.toStringTag,{value:\"Module\"}));export{T as P,x as b};\n"],
  "mappings": "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",
  "names": ["a", "x", "T", "e", "o", "a", "t", "n"]
}
