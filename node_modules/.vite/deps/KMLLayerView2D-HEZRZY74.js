import {
  a as a2
} from "./chunk-CWBK2DDW.js";
import {
  o,
  y as y2
} from "./chunk-D7GFA2UU.js";
import {
  i as i2
} from "./chunk-QTDVBI5T.js";
import {
  oe
} from "./chunk-L26SDFYA.js";
import "./chunk-6TQO4FJO.js";
import "./chunk-T5JB7HTP.js";
import "./chunk-BU5AMSMP.js";
import "./chunk-DPGI5XTT.js";
import {
  R,
  S,
  T
} from "./chunk-QPAL3PC4.js";
import "./chunk-QXJIQKLY.js";
import {
  c,
  n as n2
} from "./chunk-GRWIJKD6.js";
import "./chunk-WGK2FJEK.js";
import "./chunk-CNTOSDAN.js";
import "./chunk-LL5ZGGZR.js";
import "./chunk-Q5IFLFM5.js";
import {
  y as y3
} from "./chunk-L4LV52OG.js";
import {
  u
} from "./chunk-PCWW275T.js";
import "./chunk-EWYYYS2T.js";
import "./chunk-7N2Z7KNR.js";
import "./chunk-DBT4KOKX.js";
import "./chunk-4Y3VLNR2.js";
import "./chunk-MU26VSON.js";
import "./chunk-5HIF32ZE.js";
import "./chunk-57QYUXCA.js";
import "./chunk-J42Y5N2P.js";
import "./chunk-DWAZ7HI7.js";
import "./chunk-POI555WS.js";
import "./chunk-JHLU6RPN.js";
import "./chunk-EPMXCACW.js";
import "./chunk-UCPKJYXN.js";
import "./chunk-KFLNKWNF.js";
import "./chunk-KUO7OCMN.js";
import "./chunk-KG5RWWIW.js";
import "./chunk-27YO3FKC.js";
import "./chunk-XNT3PUPA.js";
import "./chunk-JMGHYNUW.js";
import "./chunk-SFYX532J.js";
import "./chunk-XBFCIW4K.js";
import "./chunk-6TBB7UXB.js";
import "./chunk-UO3LS2M5.js";
import "./chunk-EQNT4A7P.js";
import "./chunk-ESF7LLEL.js";
import "./chunk-IOZMLQTF.js";
import "./chunk-2GP5D74I.js";
import "./chunk-R24MO4IV.js";
import "./chunk-YQBYWPBD.js";
import "./chunk-QISOH77W.js";
import "./chunk-XO5VJRK4.js";
import "./chunk-5SEVEYDG.js";
import {
  $,
  C
} from "./chunk-DQCR5QA4.js";
import "./chunk-OAXPH6DL.js";
import {
  b,
  d,
  g
} from "./chunk-HAM3OFUR.js";
import "./chunk-MOPTUDCV.js";
import "./chunk-6VLXCUNV.js";
import "./chunk-D2XA6Z6P.js";
import "./chunk-MYQCUAHK.js";
import {
  x
} from "./chunk-O4DPVR3F.js";
import {
  E
} from "./chunk-MATM5L52.js";
import "./chunk-4OM3EX6P.js";
import "./chunk-A22ACVMF.js";
import {
  D,
  G,
  L as L2,
  P,
  V,
  Y,
  f as f2
} from "./chunk-3OFVLRSL.js";
import "./chunk-UWKVAZQ6.js";
import "./chunk-FV3CMB37.js";
import "./chunk-4HL6BBWO.js";
import "./chunk-OEFH2SLX.js";
import "./chunk-I4YZGF7W.js";
import "./chunk-FZSI6IGI.js";
import "./chunk-7DLBSBVE.js";
import "./chunk-4XFEPZ26.js";
import "./chunk-FERTI5PU.js";
import "./chunk-VWCRJ6R6.js";
import "./chunk-MKNNZ33G.js";
import "./chunk-JQUWFKNU.js";
import "./chunk-UVQQJ3R6.js";
import "./chunk-QU433TMZ.js";
import "./chunk-IIAN3QNN.js";
import "./chunk-GX2FDWTU.js";
import "./chunk-TFHLTN6F.js";
import "./chunk-UDYHZLTE.js";
import "./chunk-IQBIGNPU.js";
import "./chunk-4JNOVZUK.js";
import "./chunk-ZNRXLY4R.js";
import "./chunk-JEA4MMTV.js";
import "./chunk-RG3AHHRL.js";
import "./chunk-SQSR6K2M.js";
import "./chunk-75RMBUYZ.js";
import "./chunk-TJ2I6XQT.js";
import "./chunk-EDHROVWI.js";
import "./chunk-34YPGGJT.js";
import "./chunk-NCXAKZRR.js";
import "./chunk-DUCSW4OU.js";
import {
  f
} from "./chunk-WVDA5Z37.js";
import "./chunk-ZEEU5HOK.js";
import {
  rn,
  tn
} from "./chunk-FFVIDMFN.js";
import "./chunk-XGEPEYGB.js";
import "./chunk-2T7LFOXQ.js";
import "./chunk-NCONZRBI.js";
import "./chunk-76CXRT5P.js";
import "./chunk-7Q5M7ANT.js";
import "./chunk-A4HIS5ZJ.js";
import "./chunk-OFQYIOO7.js";
import "./chunk-YF2CRSQX.js";
import "./chunk-JP3KAUQB.js";
import "./chunk-INL7BDTP.js";
import "./chunk-PDEVQZ7U.js";
import "./chunk-7XXQ7762.js";
import "./chunk-DVGM5RQS.js";
import "./chunk-R6OA44DQ.js";
import "./chunk-QTYVDCOW.js";
import "./chunk-HSDU7DIL.js";
import "./chunk-FWRLW4G5.js";
import "./chunk-JNNRJ7GQ.js";
import "./chunk-E52E6T7N.js";
import "./chunk-UK3I5WXR.js";
import "./chunk-GLGOVVCK.js";
import "./chunk-BUVDI6S7.js";
import "./chunk-6Z6ZAVRA.js";
import "./chunk-PK4W65H4.js";
import "./chunk-W62B63EU.js";
import "./chunk-N43PI2UO.js";
import "./chunk-O6VYMEIX.js";
import "./chunk-NDQ5FHGV.js";
import "./chunk-ZWUEORSX.js";
import "./chunk-QWNKYSI4.js";
import "./chunk-ZPYDYUP5.js";
import {
  i
} from "./chunk-CYI2FLSH.js";
import "./chunk-AIDV7EKX.js";
import "./chunk-FZQZIM7U.js";
import "./chunk-CZBRZ6SU.js";
import "./chunk-KDO6J2FO.js";
import "./chunk-RT3T2K4S.js";
import "./chunk-WJCI2CGX.js";
import "./chunk-REIQNAQW.js";
import "./chunk-J6LQZWZI.js";
import "./chunk-OD3FDQCI.js";
import "./chunk-J2PJNRU7.js";
import "./chunk-56SPM3WK.js";
import "./chunk-XMZAPOBR.js";
import "./chunk-BLJKKR5D.js";
import "./chunk-ZGNCYHMZ.js";
import "./chunk-X2S4RQJ4.js";
import "./chunk-FUPLN7UM.js";
import "./chunk-376OPXM4.js";
import "./chunk-DER356EU.js";
import "./chunk-MZIWIEIR.js";
import "./chunk-TQEOEDAZ.js";
import "./chunk-SHFHZMHO.js";
import "./chunk-NRP45AHD.js";
import "./chunk-IWQ7452U.js";
import "./chunk-NAN5J6QS.js";
import "./chunk-B4DKBAM3.js";
import "./chunk-6M2AHKYV.js";
import "./chunk-SZIJNKCV.js";
import "./chunk-6O43OEU5.js";
import "./chunk-J2K7ZDSV.js";
import "./chunk-2UML3WQZ.js";
import "./chunk-KXVMEIWT.js";
import {
  j
} from "./chunk-UDND2Z3V.js";
import "./chunk-23Y3DIC6.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-RAX2HD42.js";
import "./chunk-ZYRIJWLX.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import "./chunk-3MNMDUQZ.js";
import {
  w,
  w2
} from "./chunk-UWG37XSU.js";
import {
  k2 as k
} from "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import "./chunk-RXYULINL.js";
import {
  l
} from "./chunk-5NXILPDI.js";
import "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-XQN7F674.js";
import {
  U
} from "./chunk-DMI7A7TC.js";
import {
  a2 as a
} from "./chunk-ZHAW7FZS.js";
import {
  I,
  L
} from "./chunk-KAN4HXCG.js";
import "./chunk-4FEGON7M.js";
import "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-CXFRNDG4.js";
import "./chunk-7QMMKGW4.js";
import {
  e,
  n2 as n,
  y
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import "./chunk-MJXQTGI2.js";
import "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import {
  r,
  t
} from "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/views/support/imageReprojection.js
var b2 = class {
  constructor(t2) {
    if (t2)
      this._ownsRctx = false, this._rctx = t2;
    else {
      if (b2._instance)
        return b2._instanceRefCount++, b2._instance;
      b2._instanceRefCount = 1, b2._instance = this, this._ownsRctx = true;
      const t3 = document.createElement("canvas").getContext("webgl");
      t3.getExtension("OES_texture_float"), this._rctx = new y2(t3, {});
    }
    const e2 = { applyProjection: true, bilinear: false, bicubic: false }, r2 = o("raster/reproject", "raster/reproject", /* @__PURE__ */ new Map([["a_position", 0]]), e2);
    this._program = this._rctx.programCache.acquire(r2.shaders.vertexShader, r2.shaders.fragmentShader, r2.attributes), this._rctx.useProgram(this._program), this._program.setUniform1f("u_opacity", 1), this._program.setUniform1i("u_image", 0), this._program.setUniform1i("u_flipY", 0), this._program.setUniform1i("u_transformGrid", 1), this._quad = new n2(this._rctx, [0, 0, 1, 0, 0, 1, 1, 1]);
  }
  reprojectTexture(t2, s, n3 = false) {
    const o2 = rn(t2.extent, s), m = new w({ x: (t2.extent.xmax - t2.extent.xmin) / t2.texture.descriptor.width, y: (t2.extent.ymax - t2.extent.ymin) / t2.texture.descriptor.height, spatialReference: t2.extent.spatialReference }), { x: l2, y: b3 } = C(m, s, t2.extent);
    let D2 = (l2 + b3) / 2;
    const T2 = Math.round((o2.xmax - o2.xmin) / D2), j3 = Math.round((o2.ymax - o2.ymin) / D2);
    D2 = (o2.width / T2 + o2.height / j3) / 2;
    const E2 = new w({ x: D2, y: D2, spatialReference: o2.spatialReference }), R2 = $({ projectedExtent: o2, srcBufferExtent: t2.extent, pixelSize: E2, hasWrapAround: true, spacing: [16, 16] }), C3 = c(this._rctx, R2), y4 = new E(this._rctx, { width: T2, height: j3, pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L2.LINEAR, hasMipmap: false }), M = new x(this._rctx, { colorTarget: Y.TEXTURE, depthStencilTarget: V.NONE, width: T2, height: j3 }, y4);
    if (this._rctx.bindFramebuffer(M), this._rctx.setViewport(0, 0, T2, j3), this._rctx.useProgram(this._program), this._rctx.bindTexture(t2.texture, 0), this._rctx.bindTexture(C3, 1), this._quad.bind(), this._program.setUniform2f("u_srcImageSize", t2.texture.descriptor.width, t2.texture.descriptor.height), this._program.setUniform2fv("u_transformSpacing", R2.spacing), this._program.setUniform2fv("u_transformGridSize", R2.size), this._program.setUniform2f("u_targetImageSize", T2, j3), this._quad.draw(), this._quad.unbind(), this._rctx.useProgram(null), this._rctx.bindFramebuffer(null), C3.dispose(), n3) {
      const t3 = new ImageData(M.descriptor.width, M.descriptor.height);
      return M.readPixels(0, 0, M.descriptor.width, M.descriptor.height, P.RGBA, G.UNSIGNED_BYTE, t3.data), M.detachColorTexture(f2.COLOR_ATTACHMENT0), M.dispose(), { texture: y4, extent: o2, imageData: t3 };
    }
    return M.detachColorTexture(f2.COLOR_ATTACHMENT0), M.dispose(), { texture: y4, extent: o2 };
  }
  reprojectBitmapData(t2, e2) {
    const r2 = S(t2.bitmapData) ? T(t2.bitmapData) : t2.bitmapData, i3 = new E(this._rctx, { width: t2.bitmapData.width, height: t2.bitmapData.height, pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L2.LINEAR, hasMipmap: false }, r2), a3 = this.reprojectTexture({ texture: i3, extent: t2.extent }, e2, true);
    a3.texture.dispose();
    const o2 = document.createElement("canvas");
    o2.width = a3.imageData.width, o2.height = a3.imageData.height;
    return o2.getContext("2d").putImageData(a3.imageData, 0, 0), { bitmapData: o2, extent: a3.extent };
  }
  async loadAndReprojectBitmapData(e2, r2, i3) {
    const a3 = (await U(e2, { responseType: "image" })).data, s = document.createElement("canvas");
    s.width = a3.width, s.height = a3.height;
    const n3 = s.getContext("2d");
    n3.drawImage(a3, 0, 0);
    const o2 = n3.getImageData(0, 0, s.width, s.height);
    if (r2.spatialReference.equals(i3))
      return { bitmapData: o2, extent: r2 };
    const m = this.reprojectBitmapData({ bitmapData: o2, extent: r2 }, i3);
    return { bitmapData: m.bitmapData, extent: m.extent };
  }
  destroy() {
    this._ownsRctx ? (b2._instanceRefCount--, 0 === b2._instanceRefCount && (this._quad.dispose(), this._program.dispose(), this._rctx.dispose(), b2._instance = null)) : (this._quad.dispose(), this._program.dispose());
  }
};
b2._instanceRefCount = 0;

// node_modules/@arcgis/core/views/2d/layers/KMLLayerView2D.js
var C2 = class {
  constructor() {
    this.allSublayers = /* @__PURE__ */ new Map(), this.allPoints = [], this.allPolylines = [], this.allPolygons = [], this.allMapImages = [];
  }
};
var j2 = class extends y3(u) {
  constructor() {
    super(...arguments), this._bitmapIndex = /* @__PURE__ */ new Map(), this._mapImageContainer = new a2(), this._kmlVisualData = new C2(), this.allVisiblePoints = new i(), this.allVisiblePolylines = new i(), this.allVisiblePolygons = new i(), this.allVisibleMapImages = new j();
  }
  async hitTest(e2, i3) {
    var _a, _b, _c;
    const t2 = this.layer;
    return [(_a = this._pointsView) == null ? void 0 : _a.hitTest(e2), (_b = this._polylinesView) == null ? void 0 : _b.hitTest(e2), (_c = this._polygonsView) == null ? void 0 : _c.hitTest(e2)].flat().filter(Boolean).map((i4) => (i4.layer = t2, i4.sourceLayer = t2, { type: "graphic", graphic: i4, layer: t2, mapPoint: e2 }));
  }
  update(e2) {
    this._polygonsView && this._polygonsView.processUpdate(e2), this._polylinesView && this._polylinesView.processUpdate(e2), this._pointsView && this._pointsView.processUpdate(e2);
  }
  attach() {
    this._fetchController = new AbortController(), this.container.addChild(this._mapImageContainer), this._polygonsView = new oe({ view: this.view, graphics: this.allVisiblePolygons, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._polygonsView.container), this._polylinesView = new oe({ view: this.view, graphics: this.allVisiblePolylines, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._polylinesView.container), this._pointsView = new oe({ view: this.view, graphics: this.allVisiblePoints, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._pointsView.container), this.handles.add([this.allVisibleMapImages.on("change", (e2) => {
      e2.added.forEach((e3) => this._addMapImage(e3)), e2.removed.forEach((e3) => this._removeMapImage(e3));
    }), l(() => this.layer.visibleSublayers, (e2) => {
      for (const [i3, t2] of this._kmlVisualData.allSublayers)
        t2.visibility = 0;
      for (const i3 of e2) {
        const e3 = this._kmlVisualData.allSublayers.get(i3.id);
        e3 && (e3.visibility = 1);
      }
      this._refreshCollections();
    })]), this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)), this._imageReprojector = new b2();
  }
  detach() {
    this._fetchController.abort(), this._fetchController = null, this._mapImageContainer.removeAllChildren(), this.container.removeAllChildren(), this._bitmapIndex.clear(), this._polygonsView && (this._polygonsView.destroy(), this._polygonsView = null), this._polylinesView && (this._polylinesView.destroy(), this._polylinesView = null), this._pointsView && (this._pointsView.destroy(), this._pointsView = null), this._imageReprojector && (this._imageReprojector.destroy(), this._imageReprojector = null);
  }
  moveStart() {
  }
  viewChange() {
    this._polygonsView.viewChange(), this._polylinesView.viewChange(), this._pointsView.viewChange();
  }
  moveEnd() {
  }
  isUpdating() {
    return this._pointsView.updating || this._polygonsView.updating || this._polylinesView.updating;
  }
  _addMapImage(e2) {
    (this.view.spatialReference.isWGS84 || this.view.spatialReference.isWebMercator) && this._imageReprojector.loadAndReprojectBitmapData(e2.href, w2.fromJSON(e2.extent), this.view.spatialReference).then((i3) => {
      const t2 = new R(i3.bitmapData, { immutable: false, requestRenderOnSourceChangedEnabled: true });
      t2.x = i3.extent.xmin, t2.y = i3.extent.ymax, t2.resolution = i3.extent.width / i3.bitmapData.width, t2.rotation = e2.rotation, this._mapImageContainer.addChild(t2), this._bitmapIndex.set(e2, t2);
    });
  }
  async _getViewDependentUrl(e2, t2) {
    const { viewFormat: o2, viewBoundScale: n3, httpQuery: h } = e2;
    if (r(o2)) {
      if (t(t2))
        throw new Error("Loading this network link requires a view state.");
      let y4;
      if (await tn(), r(n3) && 1 !== n3) {
        const e3 = new w2(t2.extent);
        e3.expand(n3), y4 = e3;
      } else
        y4 = t2.extent;
      y4 = rn(y4, k.WGS84);
      const g2 = rn(y4, k.WebMercator), w3 = y4.xmin, _ = y4.xmax, b3 = y4.ymin, V2 = y4.ymax, f3 = t2.size[0] * t2.pixelRatio, v = t2.size[1] * t2.pixelRatio, S2 = Math.max(g2.width, g2.height), I2 = { "[bboxWest]": w3.toString(), "[bboxEast]": _.toString(), "[bboxSouth]": b3.toString(), "[bboxNorth]": V2.toString(), "[lookatLon]": y4.center.x.toString(), "[lookatLat]": y4.center.y.toString(), "[lookatRange]": S2.toString(), "[lookatTilt]": "0", "[lookatHeading]": t2.rotation.toString(), "[lookatTerrainLon]": y4.center.x.toString(), "[lookatTerrainLat]": y4.center.y.toString(), "[lookatTerrainAlt]": "0", "[cameraLon]": y4.center.x.toString(), "[cameraLat]": y4.center.y.toString(), "[cameraAlt]": S2.toString(), "[horizFov]": "60", "[vertFov]": "60", "[horizPixels]": f3.toString(), "[vertPixels]": v.toString(), "[terrainEnabled]": "0", "[clientVersion]": a, "[kmlVersion]": "2.2", "[clientName]": "ArcGIS API for JavaScript", "[language]": "en-US" }, x2 = (e3) => {
        for (const i3 in e3)
          for (const t3 in I2)
            e3[i3] = e3[i3].replace(t3, I2[t3]);
      }, C3 = L(o2);
      x2(C3);
      let j3 = {};
      r(h) && (j3 = L(h), x2(j3));
      const k3 = f(e2.href);
      k3.query = { ...k3.query, ...C3, ...j3 };
      return `${k3.path}?${I(C3)}`;
    }
    return e2.href;
  }
  async _fetchService(e2) {
    const i3 = new C2();
    await this._loadVisualData(this.layer.url, i3, e2), this._kmlVisualData = i3, this._refreshCollections();
  }
  _refreshCollections() {
    this.allVisiblePoints.removeAll(), this.allVisiblePolylines.removeAll(), this.allVisiblePolygons.removeAll(), this.allVisibleMapImages.removeAll(), this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2)), this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2)), this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2)), this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2));
  }
  _isSublayerVisible(e2) {
    const i3 = this._kmlVisualData.allSublayers.get(e2);
    return !!i3.visibility && (-1 === i3.parentFolderId || this._isSublayerVisible(i3.parentFolderId));
  }
  _loadVisualData(e2, i3, t2) {
    return this._fetchParsedKML(e2, t2).then(async (e3) => {
      for (const s of e3.sublayers) {
        i3.allSublayers.set(s.id, s);
        const e4 = s.points ? await b(s.points) : [], a3 = s.polylines ? await b(s.polylines) : [], o2 = s.polygons ? await b(s.polygons) : [], l2 = s.mapImages || [];
        if (i3.allPoints.push(...e4.map((e5) => ({ item: e5, sublayerId: s.id }))), i3.allPolylines.push(...a3.map((e5) => ({ item: e5, sublayerId: s.id }))), i3.allPolygons.push(...o2.map((e5) => ({ item: e5, sublayerId: s.id }))), i3.allMapImages.push(...l2.map((e5) => ({ item: e5, sublayerId: s.id }))), s.networkLink) {
          const e5 = await this._getViewDependentUrl(s.networkLink, this.view.state);
          await this._loadVisualData(e5, i3, t2);
        }
      }
    });
  }
  _fetchParsedKML(e2, i3) {
    return g(e2, this.layer.spatialReference, this.layer.refreshInterval, i3).then((e3) => d(e3.data));
  }
  _removeMapImage(e2) {
    const i3 = this._bitmapIndex.get(e2);
    i3 && (this._mapImageContainer.removeChild(i3), this._bitmapIndex.delete(e2));
  }
};
e([y()], j2.prototype, "_pointsView", void 0), e([y()], j2.prototype, "_polylinesView", void 0), e([y()], j2.prototype, "_polygonsView", void 0), e([y()], j2.prototype, "updating", void 0), j2 = e([n("esri.views.2d.layers.KMLLayerView2D")], j2);
var k2 = j2;
export {
  k2 as default
};
//# sourceMappingURL=KMLLayerView2D-HEZRZY74.js.map
