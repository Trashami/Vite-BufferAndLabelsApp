import {
  A,
  C,
  P,
  k2 as k,
  r as r2,
  s,
  w
} from "./chunk-LNZAOBFW.js";
import {
  e,
  s as s2,
  t as t2
} from "./chunk-PF5I4XZQ.js";
import {
  o
} from "./chunk-M5VHU5LK.js";
import {
  i,
  r,
  t
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/geometry/projectionEllipsoid.js
function G(n) {
  return new k({ wkt: `GEOCCS["Spherical geocentric",
    DATUM["Not specified",
      SPHEROID["Sphere",${n.radius},0]],
    PRIMEM["Greenwich",0.0,
      AUTHORITY["EPSG","8901"]],
    UNIT["m",1.0],
    AXIS["Geocentric X",OTHER],
    AXIS["Geocentric Y",EAST],
    AXIS["Geocentric Z",NORTH]
  ]` });
}
var I = G(s2);
var E = G(t2);
var R = G(e);
var p = new k({ wkt: `GEOCCS["WGS 84",
  DATUM["WGS_1984",
    SPHEROID["WGS 84",${s2.radius},298.257223563,
      AUTHORITY["EPSG","7030"]],
    AUTHORITY["EPSG","6326"]],
  PRIMEM["Greenwich",0,
    AUTHORITY["EPSG","8901"]],
  UNIT["m",1.0,
    AUTHORITY["EPSG","9001"]],
  AXIS["Geocentric X",OTHER],
  AXIS["Geocentric Y",OTHER],
  AXIS["Geocentric Z",NORTH],
  AUTHORITY["EPSG","4978"]
]` });
function O(n) {
  return n && (P(n) || n === E) ? E : n && (s(n) || n === R) ? R : I;
}
function u(e2) {
  return r(e2) && (P(e2) || e2 === E) ? t2 : r(e2) && (s(e2) || e2 === R) ? e : s2;
}
function s3(n) {
  return w(n) ? t2 : C(n) ? e : s2;
}

// node_modules/@arcgis/core/core/unitUtils.js
var f = 39.37;
var d = s2.radius * Math.PI / 200;
var U = /UNIT\[([^\]]+)\]\]$/i;
var q = r2;
var h = /UNIT\[([^\]]+)\]/i;
var B = /* @__PURE__ */ new Set([4261, 4305, 4807, 4810, 4811, 4812, 4816, 4819, 4821, 4901, 4902, 37225, 104139, 104140]);
var p2 = o()({ meter: "meters", foot: "feet", foot_us: "us-feet", foot_clarke: "clarke-feet", yard_clarke: "clarke-yards", link_clarke: "clarke-links", yard_sears: "sears-yards", foot_sears: "sears-feet", chain_sears: "sears-chains", chain_benoit_1895_b: "benoit-1895-b-chains", yard_indian: "indian-yards", yard_indian_1937: "indian-1937-yards", foot_gold_coast: "gold-coast-feet", chain_sears_1922_truncated: "sears-1922-truncated-chains", "50_kilometers": "50-kilometers", "150_kilometers": "150-kilometers" });
var k2 = (e2) => e2 * e2;
var b = (e2) => e2 * e2 * e2;
var y = { length: { baseUnit: "meters", units: { millimeters: { inBaseUnits: 1e-3 }, centimeters: { inBaseUnits: 0.01 }, decimeters: { inBaseUnits: 0.1 }, meters: { inBaseUnits: 1 }, kilometers: { inBaseUnits: 1e3 }, inches: { inBaseUnits: 0.0254 }, feet: { inBaseUnits: 0.3048 }, yards: { inBaseUnits: 0.9144 }, miles: { inBaseUnits: 1609.344 }, "nautical-miles": { inBaseUnits: 1852 }, "us-feet": { inBaseUnits: 1200 / 3937 } } }, area: { baseUnit: "square-meters", units: { "square-millimeters": { inBaseUnits: k2(1e-3) }, "square-centimeters": { inBaseUnits: k2(0.01) }, "square-decimeters": { inBaseUnits: k2(0.1) }, "square-meters": { inBaseUnits: 1 }, "square-kilometers": { inBaseUnits: k2(1e3) }, "square-inches": { inBaseUnits: k2(0.0254) }, "square-feet": { inBaseUnits: k2(0.3048) }, "square-yards": { inBaseUnits: k2(0.9144) }, "square-miles": { inBaseUnits: k2(1609.344) }, "square-us-feet": { inBaseUnits: k2(1200 / 3937) }, acres: { inBaseUnits: 15625e-7 * k2(1609.344) }, ares: { inBaseUnits: 100 }, hectares: { inBaseUnits: 1e4 } } }, volume: { baseUnit: "liters", units: { liters: { inBaseUnits: 1 }, "cubic-millimeters": { inBaseUnits: 1e3 * b(1e-3) }, "cubic-centimeters": { inBaseUnits: 1e3 * b(0.01) }, "cubic-decimeters": { inBaseUnits: 1e3 * b(0.1) }, "cubic-meters": { inBaseUnits: 1e3 }, "cubic-kilometers": { inBaseUnits: 1e3 * b(1e3) }, "cubic-inches": { inBaseUnits: 1e3 * b(0.0254) }, "cubic-feet": { inBaseUnits: 1e3 * b(0.3048) }, "cubic-yards": { inBaseUnits: 1e3 * b(0.9144) }, "cubic-miles": { inBaseUnits: 1e3 * b(1609.344) } } }, angle: { baseUnit: "radians", units: { radians: { inBaseUnits: 1 }, degrees: { inBaseUnits: Math.PI / 180 } } } };
var _ = (() => {
  const e2 = {};
  for (const s4 in y)
    for (const t3 in y[s4].units)
      e2[t3] = s4;
  return e2;
})();
function M(e2, s4, t3) {
  return e2 * y[t3].units[s4].inBaseUnits;
}
function g(e2, s4, t3) {
  return e2 / y[t3].units[s4].inBaseUnits;
}
var S = ["metric", "imperial", "inches", "feet", "yards", "miles", "nautical-miles", "us-feet", "meters", "kilometers"];
var I2 = /* @__PURE__ */ new Map([["meters", "square-meters"], ["feet", "square-feet"], ["us-feet", "square-us-feet"]]);
function P2(e2) {
  const s4 = _[e2];
  if (!s4)
    throw new Error("unknown type");
  return s4;
}
function x(e2, s4 = null) {
  return s4 = s4 || P2(e2), y[s4].baseUnit === e2;
}
function E2(e2, s4, t3) {
  if (s4 === t3)
    return e2;
  const r3 = P2(s4);
  if (r3 !== P2(t3))
    throw new Error("incompatible units");
  const i2 = x(s4, r3) ? e2 : M(e2, s4, r3);
  return x(t3, r3) ? i2 : g(i2, t3, r3);
}
function O2(e2, s4) {
  const t3 = E2(e2, s4, "meters");
  return Math.abs(t3) < 3e3 ? "meters" : "kilometers";
}
function J(e2, s4) {
  const t3 = E2(e2, s4, "meters");
  return Math.abs(t3) < 1e5 ? "meters" : "kilometers";
}
function K(e2, s4) {
  const t3 = E2(e2, s4, "feet");
  return Math.abs(t3) < 1e3 ? "feet" : "miles";
}
function R2(e2, s4) {
  const t3 = E2(e2, s4, "feet");
  return Math.abs(t3) < 1e5 ? "feet" : "miles";
}
function A2(e2, s4) {
  const t3 = E2(e2, s4, "square-meters");
  return Math.abs(t3) < 3e6 ? "square-meters" : "square-kilometers";
}
function T(e2, s4) {
  const t3 = E2(e2, s4, "square-feet");
  return Math.abs(t3) < 1e6 ? "square-feet" : "square-miles";
}
function Y(e2, s4, t3) {
  return E2(e2, s4, "meters") / (t3 * Math.PI / 180);
}
function G2(e2) {
  return p2.fromJSON(e2.toLowerCase()) || null;
}
function L(e2) {
  if (r(e2) && !A(e2))
    return 1;
  const t3 = $(e2);
  return t3 > 1e5 ? 1 : t3;
}
function W(e2) {
  return $(e2) >= u(e2).metersPerDegree ? "meters" : X(e2);
}
function $(e2, s4 = s2.metersPerDegree) {
  return i(z(e2, true), s4);
}
function z(e2, t3 = false) {
  const r3 = r(e2) ? e2.wkid : null, i2 = r(e2) ? e2.wkt : null;
  let n = null;
  if (r3) {
    if (w(r3))
      return t2.metersPerDegree;
    if (C(r3))
      return e.metersPerDegree;
    n = q.values[q[r3]], !n && t3 && B.has(r3) && (n = d);
  } else
    i2 && (re(i2) ? n = Q(U.exec(i2), n) : te(i2) && (n = Q(h.exec(i2), n)));
  return n;
}
function Q(e2, s4) {
  return e2 && e2[1] ? V(e2[1]) : s4;
}
function V(e2) {
  return parseFloat(e2.split(",")[1]);
}
function X(e2) {
  const t3 = r(e2) ? e2.wkid : null, r3 = r(e2) ? e2.wkt : null;
  let i2 = null;
  if (t3)
    i2 = q.units[q[t3]];
  else if (r3) {
    const e3 = re(r3) ? U : te(r3) ? h : null;
    if (e3) {
      const s4 = e3.exec(r3);
      s4 && s4[1] && (i2 = ne(s4[1]));
    }
  }
  return r(i2) ? G2(i2) : null;
}
function Z(e2) {
  const s4 = X(e2);
  return t(s4) || !S.includes(s4) ? null : s4;
}
function ee(e2) {
  const s4 = W(e2);
  return t(s4) || !S.includes(s4) ? null : s4;
}
function se(e2) {
  const s4 = X(e2);
  return t(s4) ? null : I2.get(s4);
}
function te(e2) {
  return /^GEOCCS/i.test(e2);
}
function re(e2) {
  return /^PROJCS/i.test(e2);
}
var ie = 1e-7;
function ne(e2) {
  const s4 = /[\\"\\']{1}([^\\"\\']+)/.exec(e2);
  let t3 = s4 && s4[1];
  if (!t3 || !q.units.includes(t3)) {
    const s5 = V(e2);
    t3 = null;
    const r3 = q.values;
    for (let e3 = 0; e3 < r3.length; ++e3)
      if (Math.abs(s5 - r3[e3]) < ie) {
        t3 = q.units[e3];
        break;
      }
  }
  return t3;
}
function ae(e2) {
  const s4 = X(e2);
  if (t(s4))
    return null;
  switch (s4) {
    case "feet":
    case "us-feet":
    case "clarke-feet":
    case "clarke-yards":
    case "clarke-links":
    case "sears-yards":
    case "sears-feet":
    case "sears-chains":
    case "benoit-1895-b-chains":
    case "indian-yards":
    case "indian-1937-yards":
    case "gold-coast-feet":
    case "sears-1922-truncated-chains":
      return "imperial";
    case "50-kilometers":
    case "150-kilometers":
    case "meters":
      return "metric";
  }
  return null;
}
function ue(e2) {
  var _a, _b, _c;
  const s4 = "metric";
  if (t(e2))
    return s4;
  const i2 = e2.map, n = i2 && "portalItem" in i2 ? (_a = i2.portalItem) == null ? void 0 : _a.portal : null;
  if (n) {
    switch ((_c = (_b = n == null ? void 0 : n.user) == null ? void 0 : _b.units) != null ? _c : n.units) {
      case s4:
        return s4;
      case "english":
        return "imperial";
    }
  }
  return i(ae(e2.spatialReference), s4);
}
var ce = { esriAcres: "acres", esriAres: "ares", esriHectares: "hectares", esriSquareCentimeters: "square-centimeters", esriSquareDecimeters: "square-decimeters", esriSquareFeet: "square-feet", esriSquareInches: "square-inches", esriSquareKilometers: "square-kilometers", esriSquareMeters: "square-meters", esriSquareMiles: "square-miles", esriSquareMillimeters: "square-millimeters", esriSquareUsFeet: "square-us-feet", esriSquareYards: "square-yards" };
var oe = { esriCentimeters: "centimeters", esriDecimeters: "decimeters", esriFeet: "feet", esriInches: "inches", esriKilometers: "kilometers", esriMeters: "meters", esriMiles: "miles", esriMillimeters: "millimeters", esriNauticalMiles: "nautical-miles", esriYards: "yards" };
var le = o()(ce);
var me = o()(oe);
var fe = o()({ ...ce, ...oe });

export {
  I,
  E,
  R,
  p,
  O,
  u,
  s3 as s,
  f,
  P2 as P,
  E2,
  O2,
  J,
  K,
  R2,
  A2 as A,
  T,
  Y,
  G2 as G,
  L,
  W,
  $,
  X,
  Z,
  ee,
  se,
  ue,
  le,
  me
};
//# sourceMappingURL=chunk-WJCI2CGX.js.map
