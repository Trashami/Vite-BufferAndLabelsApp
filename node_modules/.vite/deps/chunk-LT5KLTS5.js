import {
  p as p2
} from "./chunk-SERWCSJG.js";
import {
  t as t2
} from "./chunk-RW4M3CI3.js";
import {
  f,
  h as h2,
  l as l2
} from "./chunk-5NXILPDI.js";
import {
  e3 as e,
  l,
  n5 as n,
  t5 as t
} from "./chunk-OOLCFNXJ.js";
import {
  $,
  C,
  a,
  p
} from "./chunk-MJXQTGI2.js";
import {
  s2 as s
} from "./chunk-UA3YPL2R.js";
import {
  h,
  r
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/layers/support/PromiseQueue.js
var n2 = class {
  constructor() {
    this._tasks = new Array(), this._running = new t2(false);
  }
  get length() {
    return this._tasks.length;
  }
  get running() {
    return this._running.get();
  }
  destroy() {
    this.cancelAll();
  }
  runTask(s2) {
    for (; !s2.done && this._process(s2); )
      s2.madeProgress();
  }
  push(s2, t3, e2) {
    return this._running.set(true), new Promise((r2, n3) => this._tasks.push(new i(r2, n3, s2, t3, e2)));
  }
  unshift(s2, t3, e2) {
    return this._running.set(true), new Promise((r2, n3) => this._tasks.unshift(new i(r2, n3, s2, t3, e2)));
  }
  _process(r2) {
    var _a;
    if (0 === this._tasks.length)
      return false;
    const n3 = this._tasks.shift();
    try {
      const i2 = p(n3.signal);
      if (i2 && !n3.abortCallback)
        n3.reject(a());
      else {
        const s2 = i2 ? (_a = n3.abortCallback) == null ? void 0 : _a.call(n3, a()) : n3.callback(r2);
        C(s2) ? s2.then(n3.resolve, n3.reject) : n3.resolve(s2);
      }
    } catch (i2) {
      n3.reject(i2);
    }
    return this._running.set(this._tasks.length > 0), true;
  }
  cancelAll() {
    const s2 = a();
    for (const t3 of this._tasks)
      if (t3.abortCallback) {
        const e2 = t3.abortCallback(s2);
        t3.resolve(e2);
      } else
        t3.reject(s2);
    this._tasks.length = 0, this._running.set(false);
  }
};
var i = class {
  constructor(s2, t3, e2, r2, n3) {
    this.resolve = s2, this.reject = t3, this.callback = e2, this.signal = r2, this.abortCallback = n3;
  }
};

// node_modules/@arcgis/core/views/support/RenderState.js
var I;
!function(I3) {
  I3[I3.ANIMATING = 0] = "ANIMATING", I3[I3.INTERACTING = 1] = "INTERACTING", I3[I3.IDLE = 2] = "IDLE";
}(I || (I = {}));

// node_modules/@arcgis/core/views/support/Scheduler.js
var I2;
!function(e2) {
  e2.RESOURCE_CONTROLLER = "schedule", e2.SLIDE = "slide", e2.STREAM_DATA_LOADER = "stream loader", e2.ELEVATION_QUERY = "elevation query", e2.TERRAIN_SURFACE = "terrain", e2.SURFACE_GEOMETRY_UPDATES = "surface geometry updates", e2.GRAPHICS_CORE = "Graphics3D", e2.I3S_CONTROLLER = "I3S", e2.POINT_CLOUD_LAYER = "point cloud", e2.FEATURE_TILE_FETCHER = "feature fetcher", e2.OVERLAY = "overlay", e2.STAGE = "stage", e2.GRAPHICS_DECONFLICTOR = "graphics deconflictor", e2.FILTER_VISIBILITY = "Graphics3D filter visibility", e2.SCALE_VISIBILITY = "Graphics3D scale visibility", e2.FRUSTUM_VISIBILITY = "Graphics3D frustum visibility", e2.POINT_OF_INTEREST_FREQUENT = "POI frequent", e2.POINT_OF_INTEREST_INFREQUENT = "POI infrequent", e2.LABELER = "labeler", e2.FEATURE_QUERY_ENGINE = "feature query", e2.FEATURE_TILE_TREE = "feature tile tree", e2.FEATURE_TILE_TREE_ACTIVE = "fast feature tile tree", e2.ELEVATION_ALIGNMENT = "elevation alignment", e2.TEXT_TEXTURE_ATLAS = "text texture atlas", e2.TEXTURE_UNLOAD = "texture unload", e2.LINE_OF_SIGHT_TOOL = "line of sight tool", e2.LINE_OF_SIGHT_TOOL_INTERACTIVE = "interactive line of sight tool", e2.ELEVATION_PROFILE = "elevation profile", e2.SNAPPING = "snapping", e2.SHADOW_ACCUMULATOR = "shadow accumulator", e2.CLOUDS_GENERATOR = "cloud generator", e2[e2.TEST_PRIO = 1] = "TEST_PRIO";
}(I2 || (I2 = {}));
var R = 0;
var p3 = /* @__PURE__ */ new Map([[I2.RESOURCE_CONTROLLER, R], [I2.SLIDE, R], [I2.STREAM_DATA_LOADER, R], [I2.ELEVATION_QUERY, R], [I2.TERRAIN_SURFACE, 1], [I2.SURFACE_GEOMETRY_UPDATES, 1], [I2.GRAPHICS_CORE, 2], [I2.I3S_CONTROLLER, 2], [I2.POINT_CLOUD_LAYER, 2], [I2.FEATURE_TILE_FETCHER, 2], [I2.OVERLAY, 4], [I2.STAGE, 4], [I2.GRAPHICS_DECONFLICTOR, 4], [I2.FILTER_VISIBILITY, 4], [I2.SCALE_VISIBILITY, 4], [I2.FRUSTUM_VISIBILITY, 4], [I2.CLOUDS_GENERATOR, 4], [I2.POINT_OF_INTEREST_FREQUENT, 6], [I2.POINT_OF_INTEREST_INFREQUENT, 30], [I2.LABELER, 8], [I2.FEATURE_QUERY_ENGINE, 8], [I2.FEATURE_TILE_TREE, 16], [I2.FEATURE_TILE_TREE_ACTIVE, R], [I2.ELEVATION_ALIGNMENT, 12], [I2.TEXT_TEXTURE_ATLAS, 12], [I2.TEXTURE_UNLOAD, 12], [I2.LINE_OF_SIGHT_TOOL, 16], [I2.LINE_OF_SIGHT_TOOL_INTERACTIVE, R], [I2.SNAPPING, R], [I2.SHADOW_ACCUMULATOR, 30]]);
var f2 = 32;
function A(e2) {
  return p3.has(e2) ? p3.get(e2) : "number" == typeof e2 ? e2 : 1;
}
var b = n(6.5);
var L = n(1);
var S = n(30);
var k = n(1e3 / 30);
var O = n(100);
var U = 0.9;
var N;
var P;
!function(n3) {
  class u {
    constructor() {
      this._updating = new t2(true), this._microTaskQueued = false, this._frameNumber = 0, this.performanceInfo = { total: new e("total"), tasks: /* @__PURE__ */ new Map() }, this._frameTaskTimes = /* @__PURE__ */ new Map(), this._budget = new g(), this._state = I.INTERACTING, this._tasks = new l(), this._runQueue = new l(), this._load = 0, this._idleStateCallbacks = new l(), this._idleUpdatesStartFired = false, this._maxReschedule = f2, this._forceTask = false, this._debug = false, this._debugHandle = l2(() => p2.SCHEDULER_LOG_SLOW_TASKS, (e3) => this._debug = e3, h2);
      for (const t3 of Object.keys(I2))
        this.performanceInfo.tasks.set(I2[t3], new e(I2[t3]));
      const e2 = this;
      this._test = { FRAME_SAFETY_BUDGET: b, INTERACTING_BUDGET: k, IDLE_BUDGET: O, get availableBudget() {
        return e2._budget.budget;
      }, usedBudget: 0, getBudget: () => e2._budget, setBudget: (t3) => e2._budget = t3, updateTask: (e3) => this._updateTask(e3), getState: (e3) => this._getState(e3), getRuntime: (e3) => this._getRuntime(e3), frameTaskTimes: this._frameTaskTimes, resetRuntimes: () => this._resetRuntimes(), getRunning: () => this._getRunning() };
    }
    get updating() {
      return this._updating.get();
    }
    set updating(e2) {
      this._updating.set(e2);
    }
    destroy() {
      this._tasks.toArray().forEach((e2) => e2.remove()), this._tasks.clear(), h(this._debugHandle), this._microTaskQueued = false, this._updating.set(false);
    }
    activate() {
      this._budget.done || this._microTaskQueued || (this._microTaskQueued = true, queueMicrotask(() => {
        this._microTaskQueued && (this._microTaskQueued = false, this._budget.done || (this._maxReschedule = f2, this._schedule(), this.frame()));
      }));
    }
    registerTask(e2, t3) {
      const s2 = A(e2), i2 = new _(this, e2, t3, s2);
      return this._tasks.push(i2), this.performanceInfo.tasks.has(e2) || this.performanceInfo.tasks.set(e2, new e(e2)), i2;
    }
    registerIdleStateCallbacks(e2, t3) {
      const s2 = { idleBegin: e2, idleEnd: t3 };
      this._idleStateCallbacks.push(s2), this.state === I.IDLE && this._idleUpdatesStartFired && s2.idleBegin();
      const i2 = this;
      return { remove: () => this._removeIdleStateCallbacks(s2), set idleBegin(e3) {
        i2._idleUpdatesStartFired && (s2.idleEnd(), i2._state === I.IDLE && e3()), s2.idleBegin = e3;
      }, set idleEnd(e3) {
        s2.idleEnd = e3;
      } };
    }
    get load() {
      return this._load;
    }
    set state(e2) {
      this._state !== e2 && (this._state = e2, this.state !== I.IDLE && this._idleUpdatesStartFired && (this._idleUpdatesStartFired = false, this._idleStateCallbacks.forAll((e3) => e3.idleEnd())));
    }
    get state() {
      return this._state;
    }
    updateBudget(e2) {
      this._test.usedBudget = 0, ++this._frameNumber;
      let t3 = b, s2 = e2.frameDuration, i2 = L;
      switch (this.state) {
        case I.IDLE:
          t3 = n(0), s2 = n(Math.max(O, e2.frameDuration)), i2 = S;
          break;
        case I.INTERACTING:
          s2 = n(Math.max(k, e2.frameDuration));
        case I.ANIMATING:
      }
      return s2 = n(s2 - e2.elapsedFrameTime - t3), this.state !== I.IDLE && s2 < L && !this._forceTask ? (this._forceTask = true, false) : (s2 = n(Math.max(s2, i2)), this._budget.reset(s2, this.state), this._maxReschedule = f2, this._updateLoad(), this._schedule());
    }
    frame() {
      switch (this._forceTask = false, this._microTaskQueued = false, this.state) {
        case I.IDLE:
          this._idleUpdatesStartFired || (this._idleUpdatesStartFired = true, this._idleStateCallbacks.forAll((e2) => e2.idleBegin())), this._runIdle();
          break;
        case I.INTERACTING:
          this._runInteracting();
          break;
        default:
          this._runAnimating();
      }
      this._test.usedBudget = this._budget.elapsed;
    }
    stopFrame() {
      this._budget.reset(n(0), this._state), this._budget.madeProgress();
    }
    _removeIdleStateCallbacks(e2) {
      this._idleUpdatesStartFired && e2.idleEnd(), this._idleStateCallbacks.removeUnordered(e2);
    }
    removeTask(e2) {
      this._tasks.removeUnordered(e2), this._runQueue.removeUnordered(e2);
    }
    _updateTask(e2) {
      this._tasks.forAll((t3) => {
        t3.name === e2 && t3.setPriority(e2);
      });
    }
    _getState(e2) {
      if (this._runQueue.some((t4) => t4.name === e2))
        return P.SCHEDULED;
      let t3 = P.IDLE;
      return this._tasks.forAll((s2) => {
        s2.name === e2 && s2.needsUpdate && (s2.schedulePriority <= 1 ? t3 = P.READY : t3 !== P.READY && (t3 = P.WAITING));
      }), t3;
    }
    _getRuntime(e2) {
      let t3 = 0;
      return this._tasks.forAll((s2) => {
        s2.name === e2 && (t3 += s2.runtime);
      }), t3;
    }
    _resetRuntimes() {
      this._tasks.forAll((e2) => e2.runtime = 0);
    }
    _getRunning() {
      const e2 = /* @__PURE__ */ new Map();
      if (this._tasks.forAll((t4) => {
        t4.needsUpdate && e2.set(t4.name, (e2.get(t4.name) || 0) + 1);
      }), 0 === e2.size)
        return null;
      let t3 = "";
      return e2.forEach((e3, s2) => {
        t3 += e3 > 1 ? ` ${e3}x ${s2}` : ` ${s2}`;
      }), t3;
    }
    _runIdle() {
      this._run();
    }
    _runInteracting() {
      this._run();
    }
    _runAnimating() {
      this._run();
    }
    _updateLoad() {
      const e2 = this._tasks.reduce((e3, t3) => t3.needsUpdate ? ++e3 : e3, 0);
      this._load = this._load * U + e2 * (1 - U);
    }
    _schedule() {
      if (this._maxReschedule <= 0)
        return false;
      for (this._runQueue.filterInPlace((e2) => !!e2.needsUpdate || (e2.schedulePriority = e2.basePriority, false)), this._tasks.forAll((e2) => {
        e2.basePriority === R && e2.needsUpdate && !this._runQueue.includes(e2) && this._runQueue.unshift(e2);
      }); 0 === this._runQueue.length; ) {
        let e2 = false, t3 = 0;
        if (this._tasks.forAll((s2) => {
          if (s2.needsUpdate && 0 !== s2.schedulePriority && s2.basePriority !== R && (!s2.task.runOncePerFrame || s2.lastFrameRun !== this._frameNumber))
            if (e2 = true, t3 = Math.max(t3, s2.basePriority), 1 === s2.schedulePriority)
              s2.schedulePriority = 0, this._runQueue.push(s2);
            else
              --s2.schedulePriority;
        }), !e2)
          return this._updating.set(false), false;
        --this._maxReschedule;
      }
      return this._updating.set(true), true;
    }
    _run() {
      const e2 = this._budget.now();
      this._startFrameTaskTimes();
      do {
        for (; this._runQueue.length > 0; ) {
          const i2 = this._budget.now(), r2 = this._runQueue.pop();
          this._budget.resetProgress();
          try {
            r2.task.runTask(this._budget);
          } catch (s2) {
            s.getLogger("esri.views.support.Scheduler").error(`Exception in task "${r2.name}"`, s2);
          }
          r2.schedulePriority = r2.basePriority, r2.lastFrameRun = this._frameNumber;
          const a2 = this._budget.now() - i2;
          if (r2.runtime += a2, this._frameTaskTimes.set(r2.priority, this._frameTaskTimes.get(r2.priority) + a2), this._debug && this._budget.elapsed > 2 * this._budget.budget && console.log("Task", r2.name, "used", this._budget.elapsed, "of max", this._budget.budget, "ms"), this._budget.remaining <= 0)
            return this._updating.set(this._tasks.some((e3) => e3.needsUpdate)), void this._recordFrameTaskTimes(this._budget.now() - e2);
        }
      } while (this._schedule());
      this._updating.set(this._tasks.some((e3) => e3.needsUpdate)), this._recordFrameTaskTimes(this._budget.now() - e2);
    }
    _startFrameTaskTimes() {
      for (const e2 of Object.keys(I2))
        this._frameTaskTimes.set(I2[e2], 0);
    }
    _recordFrameTaskTimes(e2) {
      this._frameTaskTimes.forEach((e3, t3) => this.performanceInfo.tasks.get(t3).record(e3)), this.performanceInfo.total.record(e2);
    }
    get test() {
      return this._test;
    }
  }
  n3.Scheduler = u;
  class _ {
    constructor(t3, s2, r2, a2) {
      this._scheduler = t3, this.name = s2, this._basePriority = a2, this.lastFrameRun = 0, this.runtime = 0, this._queue = new n2(), this._handles = new t(), this.schedulePriority = this._basePriority, this._task = new t2(r(r2) ? r2 : this._queue), this._handles.add(f(() => this.task.running, () => t3.activate()));
    }
    get task() {
      return this._task.get();
    }
    get updating() {
      return this._queue.running;
    }
    remove() {
      this.processQueue(F), this._scheduler.removeTask(this), this.schedule = y.schedule, this.reschedule = y.reschedule, this._handles.destroy();
    }
    get basePriority() {
      return this._basePriority;
    }
    setPriority(e2) {
      this.name = e2;
      const t3 = A(e2);
      this._basePriority !== R && 0 === this.schedulePriority || (this.schedulePriority = t3), this._basePriority = t3;
    }
    get priority() {
      return this.name;
    }
    set priority(e2) {
      this.setPriority(e2);
    }
    get needsUpdate() {
      return this.updating || this.task.running;
    }
    schedule(e2, t3, s2) {
      return this._queue.push(e2, t3, s2);
    }
    reschedule(e2, t3, s2) {
      return this._queue.unshift(e2, t3, s2);
    }
    processQueue(e2) {
      this._queue.runTask(e2);
    }
  }
  class g {
    constructor() {
      this._begin = "undefined" != typeof performance ? performance.now() : 0, this._budget = 0, this._state = I.IDLE, this._done = false, this._enabled = true;
    }
    run(e2) {
      return !this.done && (true === e2() && this.madeProgress(), true);
    }
    get done() {
      return this._done;
    }
    get budget() {
      return this._budget;
    }
    madeProgress() {
      this._done = this.elapsed >= this._budget && this._enabled;
    }
    get state() {
      return this._state;
    }
    get enabled() {
      return this._enabled;
    }
    set enabled(e2) {
      this._enabled = e2;
    }
    reset(e2, t3) {
      this._begin = this.now(), this._budget = e2, this._state = t3, this._done = false;
    }
    get remaining() {
      return Math.max(this._budget - this.elapsed, 0);
    }
    now() {
      return performance.now();
    }
    get elapsed() {
      return performance.now() - this._begin;
    }
    resetProgress() {
      this._done = false;
    }
    get hasProgressed() {
      return this._done;
    }
  }
  n3.Budget = g;
}(N || (N = {})), function(e2) {
  e2.SCHEDULED = "s", e2.READY = "r", e2.WAITING = "w", e2.IDLE = "i";
}(P || (P = {}));
var F = (() => {
  const e2 = new N.Budget();
  return e2.enabled = false, e2;
})();
var C2 = class {
  remove() {
  }
  processQueue() {
  }
  schedule(e2, t3, s2) {
    try {
      if (p(t3)) {
        const e3 = a();
        return s2 ? Promise.resolve(s2(e3)) : Promise.reject(e3);
      }
      return $(e2(F));
    } catch (i2) {
      return Promise.reject(i2);
    }
  }
  reschedule(e2, t3, s2) {
    return this.schedule(e2, t3, s2);
  }
};
var y = new C2();

export {
  I2 as I,
  F,
  y
};
//# sourceMappingURL=chunk-LT5KLTS5.js.map
