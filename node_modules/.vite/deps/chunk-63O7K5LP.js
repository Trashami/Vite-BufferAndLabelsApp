import {
  e as e2
} from "./chunk-QFWDN2OM.js";
import {
  a
} from "./chunk-372DRRBO.js";
import {
  r
} from "./chunk-X7GQR2IY.js";
import {
  o as o3
} from "./chunk-ZSBQER52.js";
import {
  n as n2
} from "./chunk-S6WNSMC7.js";
import {
  e as e3
} from "./chunk-JPRTIOCM.js";
import {
  i2 as i,
  t as t2
} from "./chunk-AMNM3DGI.js";
import {
  t
} from "./chunk-RNRS2JL4.js";
import {
  h
} from "./chunk-SBPLVEUA.js";
import {
  u
} from "./chunk-3IISYLTT.js";
import {
  c,
  v
} from "./chunk-7QNA4ADD.js";
import {
  o as o2
} from "./chunk-MYQCUAHK.js";
import {
  e
} from "./chunk-C6PUUIY2.js";
import {
  o as o4
} from "./chunk-735C75BI.js";
import {
  n,
  o
} from "./chunk-ZLTZ3KAT.js";
import {
  O
} from "./chunk-RUM3DXFX.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/PatternStyle.js
var a2;
!function(a3) {
  a3[a3.Horizontal = 0] = "Horizontal", a3[a3.Vertical = 1] = "Vertical", a3[a3.Cross = 2] = "Cross", a3[a3.ForwardDiagonal = 3] = "ForwardDiagonal", a3[a3.BackwardDiagonal = 4] = "BackwardDiagonal", a3[a3.DiagonalCross = 5] = "DiagonalCross", a3[a3.COUNT = 6] = "COUNT";
}(a2 || (a2 = {}));

// node_modules/@arcgis/core/chunks/Pattern.glsl.js
var y = 0.70710678118;
var S = y;
var j = 0.08715574274;
function x(x2) {
  const T2 = new o(), C = x2.hasMultipassTerrain && (x2.output === h.Color || x2.output === h.Alpha);
  x2.draped || T2.extensions.add("GL_OES_standard_derivatives");
  const { vertex: R, fragment: D } = T2;
  v(R, x2), T2.include(r, x2), T2.include(e2, x2), x2.draped ? R.uniforms.add(new o4("worldToScreenRatio", (e4, o5) => 1 / o5.screenToPCSRatio)) : T2.attributes.add(O.BOUNDINGRECT, "mat3"), T2.attributes.add(O.POSITION, "vec3"), T2.attributes.add(O.UVMAPSPACE, "vec4"), T2.varyings.add("vpos", "vec3"), T2.varyings.add("vuv", "vec2"), C && T2.varyings.add("depth", "float");
  const $ = x2.style === a2.ForwardDiagonal || x2.style === a2.BackwardDiagonal || x2.style === a2.DiagonalCross;
  $ && R.code.add(n`
      const mat2 rotate45 = mat2(${n.float(y)}, ${n.float(-S)},
                                 ${n.float(S)}, ${n.float(y)});
    `), x2.draped || (c(R, x2), R.uniforms.add(new o4("worldToScreenPerDistanceRatio", (e4, o5) => 1 / o5.camera.perScreenPixelRatio)), R.code.add(n`vec3 projectPointToLineSegment(vec3 center, vec3 halfVector, vec3 point) {
float projectedLength = dot(halfVector, point - center) / dot(halfVector, halfVector);
return center + halfVector * clamp(projectedLength, -1.0, 1.0);
}`), R.code.add(n`vec3 intersectRayPlane(vec3 rayDir, vec3 rayOrigin, vec3 planeNormal, vec3 planePoint) {
float d = dot(planeNormal, planePoint);
float t = (d - dot(planeNormal, rayOrigin)) / dot(planeNormal, rayDir);
return rayOrigin + t * rayDir;
}`), R.code.add(n`
      float boundingRectDistanceToCamera() {
        vec3 center = vec3(boundingRect[0][0], boundingRect[0][1], boundingRect[0][2]);
        vec3 halfU = vec3(boundingRect[1][0], boundingRect[1][1], boundingRect[1][2]);
        vec3 halfV = vec3(boundingRect[2][0], boundingRect[2][1], boundingRect[2][2]);
        vec3 n = normalize(cross(halfU, halfV));

        vec3 viewDir = - vec3(view[0][2], view[1][2], view[2][2]);

        float viewAngle = dot(viewDir, n);
        float minViewAngle = ${n.float(j)};

        if (abs(viewAngle) < minViewAngle) {
          // view direction is (almost) parallel to plane -> clamp it to min angle
          float normalComponent = sign(viewAngle) * minViewAngle - viewAngle;
          viewDir = normalize(viewDir + normalComponent * n);
        }

        // intersect view direction with infinite plane that contains bounding rect
        vec3 planeProjected = intersectRayPlane(viewDir, cameraPosition, n, center);

        // clip to bounds by projecting to u and v line segments individually
        vec3 uProjected = projectPointToLineSegment(center, halfU, planeProjected);
        vec3 vProjected = projectPointToLineSegment(center, halfV, planeProjected);

        // use to calculate the closest point to camera on bounding rect
        vec3 closestPoint = uProjected + vProjected - center;

        return length(closestPoint - cameraPosition);
      }
    `)), R.code.add(n`
    vec2 scaledUV() {
      vec2 uv = uvMapSpace.xy ${$ ? " * rotate45" : ""};
      vec2 uvCellOrigin = uvMapSpace.zw ${$ ? " * rotate45" : ""};

      ${x2.draped ? "" : n`
            float distanceToCamera = boundingRectDistanceToCamera();
            float worldToScreenRatio = worldToScreenPerDistanceRatio / distanceToCamera;
          `}

      // Logarithmically discretize ratio to avoid jittering
      float step = 0.1;
      float discreteWorldToScreenRatio = log(worldToScreenRatio);
      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;
      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);

      vec2 uvOffset = mod(uvCellOrigin * discreteWorldToScreenRatio, ${n.float(x2.patternSpacing)});
      return uvOffset + (uv * discreteWorldToScreenRatio);
    }
  `);
  const V = x2.output === h.Depth;
  return V && (T2.include(o3, x2), i(T2), t2(T2)), R.code.add(n`
    void main(void) {
      vuv = scaledUV();
      vpos = position;
      ${C ? "depth = (view * vec4(vpos, 1.0)).z;" : ""}
      forwardNormalizedVertexColor();
      gl_Position = ${V ? n`transformPositionWithDepth(proj, view, vpos, nearFar, linearDepth);` : n`transformPosition(proj, view, vpos);`}
    }
  `), T2.include(u, x2), D.include(e3), x2.draped && D.uniforms.add(new o4("texelSize", (e4, o5) => 1 / o5.camera.pixelRatio)), x2.output === h.Highlight && T2.include(a, x2), C && T2.include(n2, x2), x2.output !== h.Highlight && (D.code.add(n`
      const float lineWidth = ${n.float(x2.lineWidth)};
      const float spacing = ${n.float(x2.patternSpacing)};
      const float spacingINV = ${n.float(1 / x2.patternSpacing)};

      float coverage(float p, float txlSize) {
        p = mod(p, spacing);

        float halfTxlSize = txlSize / 2.0;

        float start = p - halfTxlSize;
        float end = p + halfTxlSize;

        float coverage = (ceil(end * spacingINV) - floor(start * spacingINV)) * lineWidth;
        coverage -= min(lineWidth, mod(start, spacing));
        coverage -= max(lineWidth - mod(end, spacing), 0.0);

        return coverage / txlSize;
      }
    `), x2.draped || D.code.add(n`const int maxSamples = 5;
float sample(float p) {
vec2 dxdy = abs(vec2(dFdx(p), dFdy(p)));
float fwidth = dxdy.x + dxdy.y;
ivec2 samples = 1 + ivec2(clamp(dxdy, 0.0, float(maxSamples - 1)));
vec2 invSamples = 1.0 / vec2(samples);
float accumulator = 0.0;
for (int j = 0; j < maxSamples; j++) {
if(j >= samples.y) {
break;
}
for (int i = 0; i < maxSamples; i++) {
if(i >= samples.x) {
break;
}
vec2 step = vec2(i,j) * invSamples - 0.5;
accumulator += coverage(p + step.x * dxdy.x + step.y * dxdy.y, fwidth);
}
}
accumulator /= float(samples.x * samples.y);
return accumulator;
}`)), D.uniforms.add(new e("uColor", (e4) => e4.color)), D.code.add(n`
    void main() {
      discardBySlice(vpos);
      ${C ? "terrainDepthTest(gl_FragCoord, depth);" : ""}
      vec4 color = ${x2.hasVertexColors ? "vColor * uColor;" : "uColor;"}
      color = highlightSlice(color, vpos);

      ${x2.output !== h.Highlight ? n`color.a *= ${P(x2)};` : ""}

      if (color.a < ${n.float(t)}) {
        discard;
      }

      ${x2.output === h.Alpha ? n`gl_FragColor = vec4(color.a);` : ""}

      ${x2.output === h.Color ? n`gl_FragColor = color; ${x2.transparencyPassType === o2.Color ? "gl_FragColor = premultiplyAlpha(gl_FragColor);" : ""}` : ""}
      ${x2.output === h.Highlight ? n`outputHighlight();` : ""}
      ${x2.output === h.Depth ? n`outputDepth(linearDepth);` : ""};
    }
  `), T2;
}
function P(e4) {
  function o5(o6) {
    return e4.draped ? n`coverage(vuv.${o6}, texelSize)` : n`sample(vuv.${o6})`;
  }
  switch (e4.style) {
    case a2.ForwardDiagonal:
    case a2.Horizontal:
      return o5("y");
    case a2.BackwardDiagonal:
    case a2.Vertical:
      return o5("x");
    case a2.DiagonalCross:
    case a2.Cross:
      return n`
        1.0 - (1.0 - ${o5("x")}) * (1.0 - ${o5("y")})
      `;
    default:
      return "0.0";
  }
}
var T = Object.freeze(Object.defineProperty({ __proto__: null, build: x }, Symbol.toStringTag, { value: "Module" }));

export {
  a2 as a,
  x,
  T
};
//# sourceMappingURL=chunk-63O7K5LP.js.map
