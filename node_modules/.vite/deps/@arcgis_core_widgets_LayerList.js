import {
  L,
  c,
  f,
  o,
  s as s2,
  v
} from "./chunk-6MUVDDLI.js";
import {
  sortable_esm_default
} from "./chunk-R3XXLRWM.js";
import "./chunk-QXHTRQEZ.js";
import "./chunk-KYSY3ZPW.js";
import {
  t as t2
} from "./chunk-RDNOEC45.js";
import {
  e as e3
} from "./chunk-QRBRKBU3.js";
import {
  M,
  e2
} from "./chunk-NWBHRPMR.js";
import {
  n2
} from "./chunk-IIUWTGWW.js";
import "./chunk-K6AYGXUT.js";
import "./chunk-BHXTNOEK.js";
import "./chunk-IS4TIT4N.js";
import "./chunk-I4RYNNL6.js";
import "./chunk-FMJZBZWF.js";
import "./chunk-GOYVJTGW.js";
import "./chunk-ZPYDYUP5.js";
import "./chunk-REIQNAQW.js";
import "./chunk-MZIWIEIR.js";
import {
  j
} from "./chunk-UDND2Z3V.js";
import "./chunk-23Y3DIC6.js";
import "./chunk-JUVQV3R3.js";
import {
  a,
  h,
  l,
  w
} from "./chunk-5NXILPDI.js";
import "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-XQN7F674.js";
import "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import "./chunk-KAN4HXCG.js";
import "./chunk-4FEGON7M.js";
import {
  s
} from "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import {
  e,
  n2 as n,
  t5 as t,
  y
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import {
  i
} from "./chunk-MJXQTGI2.js";
import "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import "./chunk-UA3YPL2R.js";
import {
  has
} from "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import {
  r
} from "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/widgets/LayerList.js
function A(e4, t3, i2) {
  e4.splice(i2, 0, e4.splice(t3, 1)[0]);
}
var S = "esri-layerlist-new-ui";
var k = j.ofType(L);
var L2 = "data-sort-filter";
var M2 = "data-layer-uid";
var T = "layerUid";
var E = { base: "esri-layer-list esri-widget esri-widget--panel", newUI: "esri-layer-list--new-ui", noItems: "esri-layer-list__no-items", list: "esri-layer-list__list", listRoot: "esri-layer-list__list--root", listExclusive: "esri-layer-list__list--exclusive", listInherited: "esri-layer-list__list--inherited", listIndependent: "esri-layer-list__list--independent", item: "esri-layer-list__item", itemContent: "esri-layer-list__item-content", itemMessage: "esri-layer-list__item--has-message", itemInvisible: "esri-layer-list__item--invisible", itemInvisibleAtScale: "esri-layer-list__item--invisible-at-scale", itemChildren: "esri-layer-list__item--has-children", itemSelectable: "esri-layer-list__item--selectable", itemContainer: "esri-layer-list__item-container", actionsMenu: "esri-layer-list__item-actions-menu", actionsMenuItem: "esri-layer-list__item-actions-menu-item", actionsMenuItemActive: "esri-layer-list__item-actions-menu-item--active", actions: "esri-layer-list__item-actions", actionsList: "esri-layer-list__item-actions-list", action: "esri-layer-list__item-action", actionIcon: "esri-layer-list__item-action-icon", actionImage: "esri-layer-list__item-action-image", actionTitle: "esri-layer-list__item-action-title", actionToggle: "esri-layer-list__action-toggle", actionToggleOn: "esri-layer-list__action-toggle--on", label: "esri-layer-list__item-label", message: "esri-layer-list__item-message", title: "esri-layer-list__item-title", statusIndicator: "esri-layer-list__status-indicator", publishing: "esri-layer-list__publishing", updating: "esri-layer-list__updating", connectionStatus: "esri-layer-list__connection-status", connectionStatusConnected: "esri-layer-list__connection-status--connected", toggleVisible: "esri-layer-list__item-toggle", toggleVisibleIcon: "esri-layer-list__item-toggle-icon", toggleIcon: "esri-layer-list__item-toggle-icon", radioIcon: "esri-layer-list__item-radio-icon", childToggle: "esri-layer-list__child-toggle", childToggleOpen: "esri-layer-list__child-toggle--open", childOpened: "esri-layer-list__child-toggle-icon--opened", childClosed: "esri-layer-list__child-toggle-icon--closed", childClosed_RTL: "esri-layer-list__child-toggle-icon--closed-rtl", sortableChosen: "esri-layer-list--chosen", disabled: "esri-disabled", disabledElement: "esri-disabled-element", hidden: "esri-hidden", rotating: "esri-rotating", iconEllipses: "esri-icon-handle-horizontal", iconVisible: "esri-icon-visible", iconInvisible: "esri-icon-non-visible", iconRadioSelected: "esri-icon-radio-checked", iconRadioUnselected: "esri-icon-radio-unchecked", iconNoticeTriangle: "esri-icon-notice-triangle", iconChildrenOpen: "esri-icon-down-arrow", iconDownArrow: "esri-icon-down-arrow", iconRightArrow: "esri-icon-right-triangle-arrow", iconLeftArrow: "esri-icon-left-triangle-arrow", iconLoading: "esri-icon-loading-indicator", iconDefaultAction: "esri-icon-default-action", widgetIcon: "esri-icon-layers" };
var R = { actions: "actions", actionSection: "action-section", items: "items" };
var x = { exclusive: "exclusive", inherited: "inherited", independent: "independent" };
function U(e4) {
  const { actionsOpen: t3, children: i2 } = e4;
  t3 && (e4.actionsOpen = false), i2.forEach((e5) => U(e5));
}
var N = "root";
var O = { statusIndicators: true, errors: false };
var j2 = class extends M {
  constructor(e4, t3) {
    super(e4, t3), this._handles = new t(), this._sortableNodes = /* @__PURE__ */ new Map(), this._sortableMap = /* @__PURE__ */ new Map(), this._focusSortUid = null, this._newUI = has(S), this._tooltipReferenceMap = /* @__PURE__ */ new Map(), this.visibleItems = null, this.iconClass = E.widgetIcon, this.listItemCanGiveFunction = null, this.listItemCanReceiveFunction = null, this.messages = null, this.messagesCommon = null, this.multipleSelectionEnabled = false, this.selectionEnabled = false, this.selectedItems = new k(), this.viewModel = new v(), this.visibleElements = { ...O }, this._onSortableSort = ({ to: e5, from: t4, item: i2, newIndex: s3 }) => {
      t4 && e5 && (t4 === e5 ? this._sortLayers(this._sortableMap.get(t4.dataset.group)) : this._moveLayerFromChildList({ to: e5, from: t4, item: i2, newIndex: s3 }));
    }, this._sortableCanSort = (e5, t4) => !(!e5.el.dataset.group || !t4.el.dataset.group), this._sortableCanPull = (e5, t4, i2) => {
      const { listItemCanGiveFunction: s3 } = this, n3 = { selected: i2["data-item"], from: t4.el["data-item"], to: e5.el["data-item"] };
      return !this._sortableCanSort(e5, t4) || "function" != typeof s3 || s3.call(null, n3);
    }, this._sortableCanPut = (e5, t4, i2) => {
      const { listItemCanReceiveFunction: s3 } = this, n3 = { selected: i2["data-item"], from: t4.el["data-item"], to: e5.el["data-item"] };
      return !this._sortableCanSort(e5, t4) || "function" != typeof s3 || s3.call(null, n3);
    }, this._onSortableEnd = ({ oldIndex: e5, from: t4, to: i2, item: s3 }) => {
      t4 !== i2 && t4.insertBefore(s3, t4.children[e5]);
    };
  }
  initialize() {
    const e4 = this.operationalItems;
    this._setVisibleItems(e4), this.addHandles([a(() => this.operationalItems, "change", () => this._itemsChanged(e4)), l(() => this.visibleElements, () => this._itemsChanged(e4)), l(() => this.selectionEnabled, () => this._toggleAllSorting(), h)]);
  }
  loadDependencies() {
    return Promise.all([import("./calcite-icon-D7JSDQFP.js"), import("./calcite-tooltip-G5R5ZUIB.js")]);
  }
  destroy() {
    this._destroySortables(), this._tooltipReferenceMap.clear(), this._handles.destroy(), this._handles = null;
  }
  get label() {
    var _a, _b;
    return (_b = (_a = this.messages) == null ? void 0 : _a.widgetLabel) != null ? _b : "";
  }
  set label(e4) {
    this._overrideIfSome("label", e4);
  }
  get listItemCreatedFunction() {
    return this.viewModel.listItemCreatedFunction;
  }
  set listItemCreatedFunction(e4) {
    this.viewModel.listItemCreatedFunction = e4;
  }
  get operationalItems() {
    return this.viewModel.operationalItems;
  }
  set operationalItems(e4) {
    this.viewModel.operationalItems = e4;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e4) {
    this.viewModel.view = e4;
  }
  castVisibleElements(e4) {
    return { ...O, ...e4 };
  }
  triggerAction(e4, t3) {
    return this.viewModel.triggerAction(e4, t3);
  }
  render() {
    var _a;
    const { visibleItems: e4, _newUI: t3 } = this, i2 = (_a = this.viewModel) == null ? void 0 : _a.state, s3 = { [E.newUI]: t3, [E.hidden]: "loading" === i2, [E.disabled]: "disabled" === i2 }, n3 = this.renderItemTooltips(), o2 = this.renderItems();
    return n2("div", { class: this.classes(E.base, s3) }, (e4 == null ? void 0 : e4.length) ? [n3, o2] : this.renderNoItems());
  }
  renderItemTooltip(e4) {
    const { _tooltipReferenceMap: t3, messages: i2 } = this;
    return e4 ? n2("calcite-tooltip", { label: i2.layerIncompatible, referenceElement: t3.get(e4.uid) }, i2.layerIncompatibleTooltip) : null;
  }
  renderItemTooltipNodes(e4) {
    const { incompatible: t3, children: i2 } = e4;
    return [t3 ? this.renderItemTooltip(e4) : null, ...t3 ? [] : i2 == null ? void 0 : i2.toArray().map((e5) => this.renderItemTooltipNodes(e5))];
  }
  renderItemTooltips() {
    return this.visibleItems.toArray().map((e4) => this.renderItemTooltipNodes(e4));
  }
  renderNoItems() {
    return n2("div", { class: E.noItems }, this.messages.noItemsToDisplay);
  }
  renderItems() {
    const { visibleItems: e4, selectionEnabled: t3, messages: i2 } = this;
    return n2("ul", { "aria-label": i2.widgetLabel, role: t3 ? "listbox" : void 0, afterCreate: this._sortNodeCreated, afterUpdate: this._sortNodeCreated, afterRemoved: this._sortNodeRemoved, "data-group": N, bind: this, class: this.classes(E.list, E.listRoot, E.listIndependent) }, e4 == null ? void 0 : e4.map((e5) => this.renderItem(e5, null)).toArray());
  }
  renderActionsMenuIcon(e4, t3) {
    const { messagesCommon: i2 } = this, s3 = { [E.actionsMenuItemActive]: e4.actionsOpen };
    return n2("div", { key: "actions-menu-toggle", "data-item": e4, bind: this, onclick: this._toggleActionsOpen, onkeydown: this._toggleActionsOpen, class: this.classes(E.actionsMenuItem, s3), tabindex: "0", role: "button", "aria-controls": t3, "aria-label": i2.options, title: i2.options }, n2("span", { "aria-hidden": "true", class: E.iconEllipses }));
  }
  renderActionsMenu(e4, t3, i2, s3) {
    const { panel: n3 } = e4, o2 = n3 && n3.visible ? this.renderPanelButton(n3) : null, l2 = 1 === i2 && this._getSingleActionButton(t3), r2 = l2 ? this.renderAction({ item: e4, action: l2, singleAction: true }) : null, a2 = !l2 && i2 ? this.renderActionsMenuIcon(e4, s3) : null;
    return a2 || o2 || l2 ? n2("div", { key: "actions-menu", class: E.actionsMenu }, o2, r2, a2) : null;
  }
  renderChildList(e4, t3) {
    var _a;
    const { selectionEnabled: i2 } = this, { visibilityMode: s3, children: n3 } = e4, o2 = this._hasChildren(e4), l2 = !o2 && i2 && "group" === ((_a = e4.layer) == null ? void 0 : _a.type), { exclusive: r2, inherited: a2 } = x, c2 = { [E.listExclusive]: s3 === r2, [E.listInherited]: s3 === a2, [E.listIndependent]: s3 !== a2 && s3 !== r2 };
    return o2 || l2 ? n2("ul", { bind: this, key: "list-items", id: t3, "data-group": e4.uid, "data-item": e4, afterCreate: this._sortNodeCreated, afterUpdate: this._sortNodeCreated, afterRemoved: this._sortNodeRemoved, class: this.classes(E.list, c2), "aria-expanded": e4.open ? "true" : "false", role: i2 ? "listbox" : s3 === r2 ? "radiogroup" : "group", hidden: !e4.open && !l2 || null }, n3 == null ? void 0 : n3.map((t4) => this.renderItem(t4, e4)).toArray()) : null;
  }
  renderChildrenToggle(e4, t3) {
    const { messagesCommon: i2 } = this, s3 = this._hasChildren(e4), n3 = { [E.childToggleOpen]: e4.open }, o2 = e4.open ? i2.collapse : i2.expand;
    return s3 ? n2("span", { onclick: this._toggleChildrenClick, onkeydown: this._toggleChildrenClick, "data-item": e4, key: "toggle-children", class: this.classes(E.childToggle, n3), tabindex: "0", role: "button", "aria-controls": t3, "aria-label": o2, title: o2 }, n2("span", { "aria-hidden": "true", class: this.classes(E.childClosed, E.iconRightArrow) }), n2("span", { "aria-hidden": "true", class: this.classes(E.childOpened, E.iconDownArrow) }), n2("span", { "aria-hidden": "true", class: this.classes(E.childClosed_RTL, E.iconLeftArrow) })) : null;
  }
  renderItemMessage(e4) {
    return e4.error ? n2("div", { key: "esri-layer-list__error", class: E.message, role: "alert" }, n2("span", { "aria-hidden": "true", class: E.iconNoticeTriangle }), this.messages.layerError) : e4.incompatible ? n2("div", { key: "esri-layer-list__incompatible", class: E.message, role: "alert" }, n2("span", { bind: this, tabIndex: 0, "aria-hidden": "true", class: E.iconNoticeTriangle, afterCreate: (t3) => this._setTooltipReference(t3, e4) }), this.messages.layerIncompatible) : null;
  }
  renderItemContent(e4, t3, i2) {
    const { id: s3 } = this, n3 = `${s3}_${e4.uid}`, o2 = `${n3}_actions`, l2 = `${n3}__list`, { panel: r2 } = e4, a2 = this._filterActions(e4.actionsSections), c2 = this._countActions(a2);
    return [n2("div", { key: "list-item-container", class: E.itemContainer }, this.renderChildrenToggle(e4, l2), this.renderLabel(e4, t3, i2), this.renderActionsMenu(e4, a2, c2, o2)), this.renderItemMessage(e4), c2 ? this.renderActionsSections(e4, a2, o2) : null, r2 && r2.open && !r2.disabled ? r2.render() : null, this.renderChildList(e4, l2)];
  }
  renderItem(e4, t3) {
    var _a;
    const { _newUI: i2, id: s3, selectionEnabled: n3, selectedItems: o2 } = this, l2 = `${`${s3}_${e4.uid}`}__title`, r2 = this._hasMessage(e4), a2 = this._hasChildren(e4), c2 = { [E.itemChildren]: a2, [E.itemMessage]: !!r2, [E.itemInvisible]: i2 && !e4.visible, [E.itemInvisibleAtScale]: !e4.visibleAtCurrentScale, [E.itemSelectable]: n3 };
    if (n3) {
      const i3 = { [M2]: (_a = e4.layer) == null ? void 0 : _a.uid, [L2]: (!e4.sortable).toString() };
      return n2("li", { key: `item-with-selection-${e4.uid}`, bind: this, afterCreate: this._focusListItem, afterUpdate: this._focusListItem, class: this.classes(E.item, c2), "aria-labelledby": l2, onclick: this._toggleSelection, onkeydown: this._selectionKeydown, "data-item": e4, "data-group": t3 ? t3.uid : N, tabIndex: 0, "aria-selected": f(e4, o2) ? "true" : "false", role: "option", ...i3 }, this.renderItemContent(e4, t3, l2));
    }
    return n2("li", { key: `item-no-selection-${e4.uid}`, bind: this, afterCreate: this._focusListItem, afterUpdate: this._focusListItem, class: this.classes(E.item, c2), "aria-labelledby": l2 }, this.renderItemContent(e4, t3, l2));
  }
  renderConnectionIcon(e4) {
    const { connectionStatus: t3 } = e4;
    return r(t3) ? n2("calcite-icon", { icon: "connected" === t3 ? "check-circle" : "offline", scale: "s" }) : null;
  }
  renderItemStatus(e4, t3) {
    const { visibleElements: i2 } = this;
    if (!i2.statusIndicators)
      return null;
    const { connectionStatus: s3, publishing: n3, updating: o2 } = e4, l2 = o2 && !t3, r2 = !!s3;
    return n2("span", { class: this.classes({ [E.statusIndicator]: true, [E.publishing]: n3, [E.updating]: l2, [E.connectionStatus]: r2, [E.connectionStatusConnected]: r2 && "connected" === s3 }), key: "layer-item-status" }, this.renderConnectionIcon(e4));
  }
  renderItemTitle(e4, t3) {
    const { messages: i2 } = this;
    if (!e4)
      return null;
    const s3 = e4.title || i2.untitledLayer, n3 = e4.visibleAtCurrentScale ? s3 : `${s3} (${i2.layerInvisibleAtScale})`;
    return n2("span", { key: "layer-title-container", id: t3, title: n3, "aria-label": n3, class: E.title }, s3);
  }
  renderItemToggleIcon(e4, t3) {
    const { _newUI: i2 } = this, { exclusive: s3 } = x, n3 = t3 && t3.visibilityMode, o2 = { [E.toggleVisibleIcon]: i2, [E.toggleIcon]: i2 && n3 !== s3, [E.radioIcon]: i2 && n3 === s3, [E.iconRadioSelected]: n3 === s3 && e4.visible, [E.iconRadioUnselected]: n3 === s3 && !e4.visible, [E.iconVisible]: n3 !== s3 && e4.visible, [E.iconInvisible]: n3 !== s3 && !e4.visible };
    return n2("span", { key: "item-toggle-icon", class: this.classes(o2), "aria-hidden": "true" });
  }
  renderItemToggle(e4, t3, i2) {
    const { selectionEnabled: s3, messages: n3 } = this, { exclusive: o2 } = x, l2 = t3 && t3.visibilityMode, r2 = l2 === o2 ? "radio" : "switch";
    return n2("span", s3 ? { key: "item-toggle-selection-enabled", class: E.toggleVisible, bind: this, onclick: this._toggleVisibility, onkeydown: this._toggleVisibility, "data-item": e4, "data-parent-visibility": l2, tabIndex: 0, title: e4.visible ? n3.hideLayer : n3.showLayer, "aria-checked": e4.visible ? "true" : "false", role: r2, "aria-labelledby": i2 } : { key: "item-toggle", class: E.toggleVisible }, this.renderItemToggleIcon(e4, t3));
  }
  renderLabel(e4, t3, i2) {
    const { selectionEnabled: s3, _newUI: n3, messages: o2 } = this, { inherited: l2, exclusive: r2 } = x, a2 = t3 == null ? void 0 : t3.visibilityMode, c2 = a2 === r2 ? "radio" : "switch", d = n3 ? [this.renderItemTitle(e4, i2), this.renderItemStatus(e4, t3), this.renderItemToggle(e4, t3, i2)] : [this.renderItemToggle(e4, t3, i2), this.renderItemTitle(e4, i2), this.renderItemStatus(e4, t3)], h2 = n2("div", s3 ? { key: `item-label-no-selection-${e4.uid}`, class: E.label } : { key: `item-label-with-selection-${e4.uid}`, class: E.label, bind: this, onclick: this._toggleVisibility, onkeydown: this._toggleVisibility, "data-item": e4, "data-parent-visibility": a2, tabIndex: 0, "aria-checked": e4.visible ? "true" : "false", title: e4.visible ? o2.hideLayer : o2.showLayer, role: c2, "aria-labelledby": i2 }, d);
    return a2 === l2 || e4.error ? n2("div", { key: `item-label-container-${e4.uid}`, class: E.label }, this.renderItemTitle(e4, i2), this.renderItemStatus(e4, t3)) : h2;
  }
  renderPanelButton(e4) {
    const { className: t3, open: i2, title: s3, image: n3 } = e4, o2 = n3 || t3 ? t3 : E.iconDefaultAction, l2 = this._getIconImageStyles(e4), r2 = { [E.actionsMenuItemActive]: i2 }, a2 = { [E.actionImage]: !!l2["background-image"], [E.disabledElement]: e4.disabled };
    return o2 && (a2[o2] = !!o2), n2("div", { "aria-disabled": e4.disabled.toString(), key: `panel-${e4.uid}`, bind: this, "data-panel": e4, onclick: this._triggerPanel, onkeydown: this._triggerPanel, class: this.classes(E.actionsMenuItem, r2), role: "button", tabindex: e4.disabled ? null : 0, title: s3, "aria-label": s3 }, n2("span", { class: this.classes(a2), styles: l2 }));
  }
  renderActionsSections(e4, t3, i2) {
    const s3 = t3.toArray().map((t4, i3) => n2("ul", { key: `${e4}-action-section-${i3}`, class: E.actionsList }, this.renderActionSection(e4, t4)));
    return n2("div", { role: "group", "aria-expanded": e4.actionsOpen ? "true" : "false", key: "actions-section", id: i2, class: E.actions, hidden: !e4.actionsOpen || null }, s3);
  }
  renderActionSection(e4, t3) {
    return (t3 && t3.toArray()).map((t4) => this.renderAction({ item: e4, action: t4 }));
  }
  renderActionIcon(e4) {
    const { active: t3, className: i2 } = e4, s3 = this._getIconImageStyles(e4), n3 = "button" !== e4.type || e4.image || i2 ? i2 : E.iconDefaultAction, o2 = { [E.actionImage]: !t3 && !!s3["background-image"], [E.iconLoading]: t3, [E.rotating]: t3 };
    return n3 && !t3 && (o2[n3] = true), n2("span", { key: "action-icon", "aria-hidden": "true", class: this.classes(E.actionIcon, o2), styles: s3 });
  }
  renderActionTitle(e4, t3) {
    return t3 ? null : n2("span", { key: "action-title", class: E.actionTitle }, e4);
  }
  renderAction(e4) {
    const { item: t3, action: i2, singleAction: s3 } = e4, { active: n3, disabled: o2, title: l2 } = i2, r2 = { [E.actionsMenuItem]: s3 && "button" === i2.type, [E.action]: n3 || !s3 && "toggle" !== i2.type, [E.actionToggle]: !n3 && "toggle" === i2.type, [E.actionToggleOn]: !n3 && "toggle" === i2.type && i2.value, [E.disabledElement]: o2 }, a2 = [this.renderActionIcon(i2), this.renderActionTitle(l2, s3)];
    return s3 ? n2("div", { bind: this, "data-item": t3, "data-action": i2, role: "button", key: `single-action-${i2.uid}`, onclick: this._triggerAction, onkeydown: this._triggerAction, classes: r2, tabindex: "0", title: l2, "aria-label": l2 }, a2) : n2("li", { bind: this, "data-item": t3, "data-action": i2, key: `action-${i2.uid}`, onclick: this._triggerAction, onkeydown: this._triggerAction, classes: r2, tabindex: "0", role: "button", title: l2, "aria-label": l2 }, a2);
  }
  _setTooltipReference(e4, t3) {
    this._tooltipReferenceMap.set(t3.uid, e4), this.scheduleRender();
  }
  _hasMessage(e4) {
    return !!e4.error || e4.incompatible;
  }
  _hasChildren(e4) {
    return !!e4.children.length && !this._hasMessage(e4);
  }
  _sortNodeRemoved(e4) {
    const { _sortableMap: t3 } = this, i2 = e4.dataset.group, s3 = t3.get(i2);
    s3 && s3.destroy(), t3.delete(i2);
  }
  _destroySortables() {
    const { _sortableMap: e4, _sortableNodes: t3 } = this;
    e4.forEach((e5) => e5 && e5.destroy()), e4.clear(), t3.clear();
  }
  _moveLayerFromChildList({ to: e4, from: t3, item: i2, newIndex: s3 }) {
    const n3 = i2["data-item"], o2 = e4["data-item"], l2 = t3["data-item"];
    this.viewModel.moveListItem(n3, l2, o2, s3);
  }
  _sortLayers(e4) {
    var _a, _b;
    if (!e4)
      return;
    const t3 = e4.el["data-item"], i2 = e4.toArray();
    t3 ? c(t3, i2) : s2((_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.layers, i2);
  }
  _toggleSorting(e4, t3) {
    const { _sortableMap: i2, selectionEnabled: s3 } = this, n3 = i2.get(t3), o2 = e4["data-item"], l2 = (t3 === N || o2.childrenSortable && o(o2)) && s3;
    if (n3)
      n3.option("disabled", !l2);
    else if (l2) {
      const s4 = sortable_esm_default.create(e4, { dataIdAttr: M2, group: { name: t3, pull: this._sortableCanPull, put: this._sortableCanPut }, filter: `[${L2}="true"]`, fallbackTolerance: 4, onSort: this._onSortableSort, onEnd: this._onSortableEnd, disabled: !l2, chosenClass: E.sortableChosen });
      i2.set(t3, s4);
    }
  }
  _toggleAllSorting() {
    this._sortableNodes.forEach((e4, t3) => this._toggleSorting(e4, t3));
  }
  _sortNodeCreated(e4) {
    const t3 = e4.dataset.group;
    t3 && (this._sortableNodes.set(t3, e4), this._toggleSorting(e4, t3));
  }
  _setVisibleItems(e4) {
    this.visibleItems = e4 == null ? void 0 : e4.filter((e5) => !e5.hidden && (this.visibleElements.errors || !e5.error));
  }
  _getSingleActionButton(e4) {
    return e4.reduce((e5) => e5).filter((e5) => e5 && "button" === e5.type).getItemAt(0);
  }
  _focusListItem(e4) {
    var _a;
    const { _focusSortUid: t3 } = this;
    if (!e4 || !t3)
      return;
    ((_a = e4["data-item"].layer) == null ? void 0 : _a.uid) === t3 && (e4.focus(), this._focusSortUid = null);
  }
  _watchActionSectionChanges(e4, t3) {
    const i2 = R.actionSection + t3;
    this._handles.add(e4.on("change", this.scheduleRender.bind(this)), i2), e4.forEach((e5) => this._renderOnActionChanges(e5, t3));
  }
  _renderOnActionChanges(e4, t3) {
    const i2 = R.actions + t3;
    "toggle" !== e4.type ? "slider" !== e4.type ? this._handles.add(l(() => [e4 == null ? void 0 : e4.className, e4 == null ? void 0 : e4.image, e4 == null ? void 0 : e4.id, e4 == null ? void 0 : e4.title, e4 == null ? void 0 : e4.visible], () => this.scheduleRender(), h), i2) : this._handles.add(l(() => [e4 == null ? void 0 : e4.className, e4 == null ? void 0 : e4.id, e4 == null ? void 0 : e4.title, e4 == null ? void 0 : e4.visible, e4 == null ? void 0 : e4.value, e4 == null ? void 0 : e4.displayValueEnabled, e4 == null ? void 0 : e4.max, e4 == null ? void 0 : e4.min, e4 == null ? void 0 : e4.step], () => this.scheduleRender(), h), i2) : this._handles.add(l(() => [e4 == null ? void 0 : e4.className, e4 == null ? void 0 : e4.image, e4 == null ? void 0 : e4.id, e4 == null ? void 0 : e4.title, e4 == null ? void 0 : e4.visible, e4 == null ? void 0 : e4.value], () => this.scheduleRender(), h), i2);
  }
  _renderOnItemChanges(e4) {
    const t3 = e4.uid, i2 = R.items + t3;
    this._handles.add([l(() => {
      var _a, _b, _c;
      return [e4 == null ? void 0 : e4.actionsOpen, e4 == null ? void 0 : e4.visible, e4 == null ? void 0 : e4.open, e4 == null ? void 0 : e4.updating, e4 == null ? void 0 : e4.connectionStatus, e4 == null ? void 0 : e4.publishing, e4 == null ? void 0 : e4.title, e4 == null ? void 0 : e4.visibleAtCurrentScale, e4 == null ? void 0 : e4.error, e4 == null ? void 0 : e4.visibilityMode, e4 == null ? void 0 : e4.panel, (_a = e4 == null ? void 0 : e4.panel) == null ? void 0 : _a.title, (_b = e4 == null ? void 0 : e4.panel) == null ? void 0 : _b.content, (_c = e4 == null ? void 0 : e4.panel) == null ? void 0 : _c.className, e4 == null ? void 0 : e4.sortable, e4 == null ? void 0 : e4.childrenSortable];
    }, () => this.scheduleRender(), w), l(() => [e4 == null ? void 0 : e4.hidden, e4 == null ? void 0 : e4.error], () => this._setVisibleItems(this.operationalItems)), e4.actionsSections.on("change", () => this.scheduleRender()), e4.children.on("change", () => this.scheduleRender())], i2), e4.children.forEach((e5) => this._renderOnItemChanges(e5)), e4.actionsSections.forEach((e5) => this._watchActionSectionChanges(e5, t3));
  }
  _itemsChanged(e4) {
    this._handles.removeAll(), e4.forEach((e5) => this._renderOnItemChanges(e5)), this._tooltipReferenceMap.clear(), this._setVisibleItems(e4), this.scheduleRender();
  }
  _filterActions(e4) {
    return e4.map((e5) => e5.filter((e6) => e6.visible));
  }
  _countActions(e4) {
    return e4.reduce((e5, t3) => e5 + t3.length, 0);
  }
  _getIconImageStyles(e4) {
    const t3 = "esri.widgets.LayerList.ListItemPanel" === e4.declaredClass || "esri.support.Action.ActionButton" === e4.declaredClass || "esri.support.Action.ActionToggle" === e4.declaredClass ? e4.image : null;
    return { "background-image": t3 ? `url("${t3}")` : null };
  }
  _selectionKeydown(e4) {
    var _a, _b, _c, _d;
    const t3 = ["ArrowDown", "ArrowUp"], s3 = i(e4);
    if (!t3.includes(s3))
      return void this._toggleSelection(e4);
    e4.stopPropagation();
    const n3 = e4.currentTarget, o2 = n3["data-item"], { _sortableMap: l2, selectedItems: r2 } = this, a2 = n3.dataset.group, c2 = l2.get(a2);
    if (!c2)
      return;
    const d = f(o2, r2), h2 = c2.toArray(), m = e4.target, g = h2.indexOf(m.dataset[T]);
    if (-1 !== g) {
      if ("ArrowDown" === s3) {
        const e5 = g + 1;
        if (e5 >= h2.length)
          return;
        d ? (A(h2, g, e5), c2.sort(h2), this._sortLayers(c2), this._focusSortUid = (_a = o2.layer) == null ? void 0 : _a.uid) : (this._focusSortUid = (_b = o2.layer) == null ? void 0 : _b.uid, this.scheduleRender());
      }
      if ("ArrowUp" === s3) {
        const e5 = g - 1;
        if (e5 <= -1)
          return;
        d ? (A(h2, g, e5), c2.sort(h2), this._sortLayers(c2), this._focusSortUid = (_c = o2.layer) == null ? void 0 : _c.uid) : (this._focusSortUid = (_d = o2.layer) == null ? void 0 : _d.uid, this.scheduleRender());
      }
    }
  }
  _toggleActionsOpen(e4) {
    const t3 = e4.currentTarget["data-item"], { actionsOpen: i2 } = t3, s3 = !i2;
    s3 && this.operationalItems.forEach((e5) => U(e5)), t3.actionsOpen = s3, e4.stopPropagation();
  }
  _triggerPanel(e4) {
    const t3 = e4.currentTarget["data-panel"];
    e4.stopPropagation(), t3 && !t3.disabled && (t3.open = !t3.open);
  }
  _triggerAction(e4) {
    const t3 = e4.currentTarget, i2 = t3["data-action"], s3 = t3["data-item"];
    "toggle" === i2.type && (i2.value = !i2.value), this.triggerAction(i2, s3), e4.stopPropagation();
  }
  _toggleVisibility(e4) {
    const t3 = e4.currentTarget, i2 = t3.getAttribute("data-parent-visibility"), s3 = t3["data-item"];
    i2 === x.exclusive && s3.visible || (s3.visible = !s3.visible), e4.stopPropagation();
  }
  _toggleChildrenClick(e4) {
    const t3 = e4.currentTarget["data-item"];
    t3.open = !t3.open, e4.stopPropagation();
  }
  _toggleSelection(e4) {
    var _a, _b;
    e4.stopPropagation();
    const { multipleSelectionEnabled: t3, selectedItems: i2 } = this, s3 = e4.currentTarget["data-item"], n3 = f(s3, i2), { length: o2 } = i2;
    if (!t3)
      return o2 && !(n3 && 1 === o2) ? (i2.removeAll(), void i2.add(s3)) : void (n3 ? (_a = i2.remove) == null ? void 0 : _a.call(i2, n3) : i2.add(s3));
    n3 ? (_b = i2.remove) == null ? void 0 : _b.call(i2, n3) : i2.add(s3);
  }
};
e([y()], j2.prototype, "visibleItems", void 0), e([y()], j2.prototype, "iconClass", void 0), e([y()], j2.prototype, "label", null), e([y()], j2.prototype, "listItemCanGiveFunction", void 0), e([y()], j2.prototype, "listItemCanReceiveFunction", void 0), e([y()], j2.prototype, "listItemCreatedFunction", null), e([y(), e2("esri/widgets/LayerList/t9n/LayerList")], j2.prototype, "messages", void 0), e([y(), e2("esri/t9n/common")], j2.prototype, "messagesCommon", void 0), e([y()], j2.prototype, "multipleSelectionEnabled", void 0), e([y()], j2.prototype, "operationalItems", null), e([y()], j2.prototype, "selectionEnabled", void 0), e([y()], j2.prototype, "selectedItems", void 0), e([y()], j2.prototype, "view", null), e([e3("trigger-action"), y({ type: v })], j2.prototype, "viewModel", void 0), e([y()], j2.prototype, "visibleElements", void 0), e([s("visibleElements")], j2.prototype, "castVisibleElements", null), e([t2()], j2.prototype, "_toggleActionsOpen", null), e([t2()], j2.prototype, "_triggerPanel", null), e([t2()], j2.prototype, "_triggerAction", null), e([t2()], j2.prototype, "_toggleVisibility", null), e([t2()], j2.prototype, "_toggleChildrenClick", null), e([t2()], j2.prototype, "_toggleSelection", null), j2 = e([n("esri.widgets.LayerList")], j2);
var V = j2;

// dep:@arcgis_core_widgets_LayerList
var arcgis_core_widgets_LayerList_default = V;
export {
  arcgis_core_widgets_LayerList_default as default
};
//# sourceMappingURL=@arcgis_core_widgets_LayerList.js.map
