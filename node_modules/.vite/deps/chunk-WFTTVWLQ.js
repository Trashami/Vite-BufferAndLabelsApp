import {
  a
} from "./chunk-R6OA44DQ.js";
import {
  p
} from "./chunk-QTYVDCOW.js";
import {
  r
} from "./chunk-NAN5J6QS.js";
import {
  l
} from "./chunk-RAX2HD42.js";
import {
  o,
  s
} from "./chunk-M5VHU5LK.js";
import {
  l as l2
} from "./chunk-7QMMKGW4.js";
import {
  e,
  n2 as n,
  y as y2
} from "./chunk-OOLCFNXJ.js";
import {
  T
} from "./chunk-BTUHYGXO.js";
import {
  y
} from "./chunk-HVKDYDPP.js";

// node_modules/@arcgis/core/renderers/support/pointCloud/ColorModulation.js
var s2;
var i = s2 = class extends l2 {
  constructor() {
    super(...arguments), this.field = null, this.minValue = 0, this.maxValue = 255;
  }
  clone() {
    return new s2({ field: this.field, minValue: this.minValue, maxValue: this.maxValue });
  }
};
e([y2({ type: String, json: { write: true } })], i.prototype, "field", void 0), e([y2({ type: Number, nonNullable: true, json: { write: true } })], i.prototype, "minValue", void 0), e([y2({ type: Number, nonNullable: true, json: { write: true } })], i.prototype, "maxValue", void 0), i = s2 = e([n("esri.renderers.support.pointCloud.ColorModulation")], i);
var p2 = i;

// node_modules/@arcgis/core/renderers/support/pointCloud/PointSizeAlgorithm.js
var p3 = new s({ pointCloudFixedSizeAlgorithm: "fixed-size", pointCloudSplatAlgorithm: "splat" });
var i2 = class extends l2 {
};
e([y2({ type: p3.apiValues, readOnly: true, nonNullable: true, json: { type: p3.jsonValues, read: false, write: p3.write } })], i2.prototype, "type", void 0), i2 = e([n("esri.renderers.support.pointCloud.PointSizeAlgorithm")], i2);
var a2 = i2;

// node_modules/@arcgis/core/renderers/support/pointCloud/PointSizeFixedSizeAlgorithm.js
var i3;
var p4 = i3 = class extends a2 {
  constructor() {
    super(...arguments), this.type = "fixed-size", this.size = 0, this.useRealWorldSymbolSizes = null;
  }
  clone() {
    return new i3({ size: this.size, useRealWorldSymbolSizes: this.useRealWorldSymbolSizes });
  }
};
e([r({ pointCloudFixedSizeAlgorithm: "fixed-size" })], p4.prototype, "type", void 0), e([y2({ type: Number, nonNullable: true, json: { write: true } })], p4.prototype, "size", void 0), e([y2({ type: Boolean, json: { write: true } })], p4.prototype, "useRealWorldSymbolSizes", void 0), p4 = i3 = e([n("esri.renderers.support.pointCloud.PointSizeFixedSizeAlgorithm")], p4);
var l3 = p4;

// node_modules/@arcgis/core/renderers/support/pointCloud/PointSizeSplatAlgorithm.js
var p5;
var c = p5 = class extends a2 {
  constructor() {
    super(...arguments), this.type = "splat", this.scaleFactor = 1;
  }
  clone() {
    return new p5({ scaleFactor: this.scaleFactor });
  }
};
e([r({ pointCloudSplatAlgorithm: "splat" })], c.prototype, "type", void 0), e([y2({ type: Number, value: 1, nonNullable: true, json: { write: true } })], c.prototype, "scaleFactor", void 0), c = p5 = e([n("esri.renderers.support.pointCloud.PointSizeSplatAlgorithm")], c);
var a3 = c;

// node_modules/@arcgis/core/renderers/support/pointCloud/pointSizeAlgorithmTypeUtils.js
var e2 = { key: "type", base: a2, typeMap: { "fixed-size": l3, splat: a3 } };

// node_modules/@arcgis/core/renderers/PointCloudRenderer.js
var u = o()({ pointCloudClassBreaksRenderer: "point-cloud-class-breaks", pointCloudRGBRenderer: "point-cloud-rgb", pointCloudStretchRenderer: "point-cloud-stretch", pointCloudUniqueValueRenderer: "point-cloud-unique-value" });
var c2 = class extends l2 {
  constructor(o2) {
    super(o2), this.type = void 0, this.pointSizeAlgorithm = null, this.colorModulation = null, this.pointsPerInch = 10;
  }
  clone() {
    return console.warn(".clone() is not implemented for " + this.declaredClass), null;
  }
  cloneProperties() {
    return { pointSizeAlgorithm: y(this.pointSizeAlgorithm), colorModulation: y(this.colorModulation), pointsPerInch: y(this.pointsPerInch) };
  }
};
e([y2({ type: u.apiValues, readOnly: true, nonNullable: true, json: { type: u.jsonValues, read: false, write: u.write } })], c2.prototype, "type", void 0), e([y2({ types: e2, json: { write: true } })], c2.prototype, "pointSizeAlgorithm", void 0), e([y2({ type: p2, json: { write: true } })], c2.prototype, "colorModulation", void 0), e([y2({ json: { write: true }, nonNullable: true, type: Number })], c2.prototype, "pointsPerInch", void 0), c2 = e([n("esri.renderers.PointCloudRenderer")], c2), function(o2) {
  o2.fieldTransformTypeKebabDict = new s({ none: "none", lowFourBit: "low-four-bit", highFourBit: "high-four-bit", absoluteValue: "absolute-value", moduloTen: "modulo-ten" });
}(c2 || (c2 = {}));
var a4 = c2;

// node_modules/@arcgis/core/renderers/support/pointCloud/ColorClassBreakInfo.js
var a5;
var p6 = a5 = class extends l2 {
  constructor() {
    super(...arguments), this.description = null, this.label = null, this.minValue = 0, this.maxValue = 0, this.color = null;
  }
  clone() {
    return new a5({ description: this.description, label: this.label, minValue: this.minValue, maxValue: this.maxValue, color: y(this.color) });
  }
};
e([y2({ type: String, json: { write: true } })], p6.prototype, "description", void 0), e([y2({ type: String, json: { write: true } })], p6.prototype, "label", void 0), e([y2({ type: Number, json: { read: { source: "classMinValue" }, write: { target: "classMinValue" } } })], p6.prototype, "minValue", void 0), e([y2({ type: Number, json: { read: { source: "classMaxValue" }, write: { target: "classMaxValue" } } })], p6.prototype, "maxValue", void 0), e([y2({ type: l, json: { type: [T], write: true } })], p6.prototype, "color", void 0), p6 = a5 = e([n("esri.renderers.support.pointCloud.ColorClassBreakInfo")], p6);
var c3 = p6;

// node_modules/@arcgis/core/renderers/PointCloudClassBreaksRenderer.js
var l4;
var a6 = l4 = class extends a4 {
  constructor(e3) {
    super(e3), this.type = "point-cloud-class-breaks", this.field = null, this.legendOptions = null, this.fieldTransformType = null, this.colorClassBreakInfos = null;
  }
  clone() {
    return new l4({ ...this.cloneProperties(), field: this.field, fieldTransformType: this.fieldTransformType, colorClassBreakInfos: y(this.colorClassBreakInfos), legendOptions: y(this.legendOptions) });
  }
};
e([r({ pointCloudClassBreaksRenderer: "point-cloud-class-breaks" })], a6.prototype, "type", void 0), e([y2({ json: { write: true }, type: String })], a6.prototype, "field", void 0), e([y2({ type: p, json: { write: true } })], a6.prototype, "legendOptions", void 0), e([y2({ type: a4.fieldTransformTypeKebabDict.apiValues, json: { type: a4.fieldTransformTypeKebabDict.jsonValues, read: a4.fieldTransformTypeKebabDict.read, write: a4.fieldTransformTypeKebabDict.write } })], a6.prototype, "fieldTransformType", void 0), e([y2({ type: [c3], json: { write: true } })], a6.prototype, "colorClassBreakInfos", void 0), a6 = l4 = e([n("esri.renderers.PointCloudClassBreaksRenderer")], a6);
var d = a6;

// node_modules/@arcgis/core/renderers/PointCloudStretchRenderer.js
var l5;
var d2 = l5 = class extends a4 {
  constructor(e3) {
    super(e3), this.type = "point-cloud-stretch", this.field = null, this.legendOptions = null, this.fieldTransformType = null, this.stops = null;
  }
  clone() {
    return new l5({ ...this.cloneProperties(), field: y(this.field), fieldTransformType: y(this.fieldTransformType), stops: y(this.stops), legendOptions: y(this.legendOptions) });
  }
};
e([r({ pointCloudStretchRenderer: "point-cloud-stretch" })], d2.prototype, "type", void 0), e([y2({ json: { write: true }, type: String })], d2.prototype, "field", void 0), e([y2({ type: p, json: { write: true } })], d2.prototype, "legendOptions", void 0), e([y2({ type: a4.fieldTransformTypeKebabDict.apiValues, json: { type: a4.fieldTransformTypeKebabDict.jsonValues, read: a4.fieldTransformTypeKebabDict.read, write: a4.fieldTransformTypeKebabDict.write } })], d2.prototype, "fieldTransformType", void 0), e([y2({ type: [a], json: { write: true } })], d2.prototype, "stops", void 0), d2 = l5 = e([n("esri.renderers.PointCloudStretchRenderer")], d2);
var a7 = d2;

// node_modules/@arcgis/core/renderers/support/pointCloud/ColorUniqueValueInfo.js
var l6;
var c4 = l6 = class extends l2 {
  constructor() {
    super(...arguments), this.description = null, this.label = null, this.values = null, this.color = null;
  }
  clone() {
    return new l6({ description: this.description, label: this.label, values: y(this.values), color: y(this.color) });
  }
};
e([y2({ type: String, json: { write: true } })], c4.prototype, "description", void 0), e([y2({ type: String, json: { write: true } })], c4.prototype, "label", void 0), e([y2({ type: [String], json: { write: true } })], c4.prototype, "values", void 0), e([y2({ type: l, json: { type: [T], write: true } })], c4.prototype, "color", void 0), c4 = l6 = e([n("esri.renderers.support.pointCloud.ColorUniqueValueInfo")], c4);
var n2 = c4;

// node_modules/@arcgis/core/renderers/PointCloudUniqueValueRenderer.js
var l7;
var u2 = l7 = class extends a4 {
  constructor(e3) {
    super(e3), this.type = "point-cloud-unique-value", this.field = null, this.fieldTransformType = null, this.colorUniqueValueInfos = null, this.legendOptions = null;
  }
  clone() {
    return new l7({ ...this.cloneProperties(), field: y(this.field), fieldTransformType: y(this.fieldTransformType), colorUniqueValueInfos: y(this.colorUniqueValueInfos), legendOptions: y(this.legendOptions) });
  }
};
e([r({ pointCloudUniqueValueRenderer: "point-cloud-unique-value" })], u2.prototype, "type", void 0), e([y2({ json: { write: true }, type: String })], u2.prototype, "field", void 0), e([y2({ type: a4.fieldTransformTypeKebabDict.apiValues, json: { type: a4.fieldTransformTypeKebabDict.jsonValues, read: a4.fieldTransformTypeKebabDict.read, write: a4.fieldTransformTypeKebabDict.write } })], u2.prototype, "fieldTransformType", void 0), e([y2({ type: [n2], json: { write: true } })], u2.prototype, "colorUniqueValueInfos", void 0), e([y2({ type: p, json: { write: true } })], u2.prototype, "legendOptions", void 0), u2 = l7 = e([n("esri.renderers.PointCloudUniqueValueRenderer")], u2);
var a8 = u2;

export {
  a4 as a,
  d,
  a7 as a2,
  a8 as a3
};
//# sourceMappingURL=chunk-WFTTVWLQ.js.map
