import {
  T,
  g
} from "./chunk-US2IWMHE.js";
import {
  r as r2
} from "./chunk-HLM6QCL2.js";
import {
  o
} from "./chunk-RXYULINL.js";
import {
  o as o2
} from "./chunk-M5VHU5LK.js";
import {
  l
} from "./chunk-7QMMKGW4.js";
import {
  e,
  n2 as n,
  y as y2
} from "./chunk-OOLCFNXJ.js";
import {
  y
} from "./chunk-HVKDYDPP.js";
import {
  r
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/portal/timeUnitKebabDictionary.js
var e2 = o2()({ esriTimeUnitsMilliseconds: "milliseconds", esriTimeUnitsSeconds: "seconds", esriTimeUnitsMinutes: "minutes", esriTimeUnitsHours: "hours", esriTimeUnitsDays: "days", esriTimeUnitsWeeks: "weeks", esriTimeUnitsMonths: "months", esriTimeUnitsYears: "years", esriTimeUnitsDecades: "decades", esriTimeUnitsCenturies: "centuries", esriTimeUnitsUnknown: void 0 });

// node_modules/@arcgis/core/TimeInterval.js
var p;
var a = p = class extends l {
  constructor(r3) {
    super(r3), this.value = 0, this.unit = "milliseconds";
  }
  toMilliseconds() {
    return g(this.value, this.unit, "milliseconds");
  }
  clone() {
    return new p({ value: this.value, unit: this.unit });
  }
};
e([y2({ type: Number, json: { write: true }, nonNullable: true })], a.prototype, "value", void 0), e([y2({ type: e2.apiValues, json: { type: e2.jsonValues, read: e2.read, write: e2.write }, nonNullable: true })], a.prototype, "unit", void 0), a = p = e([n("esri.TimeInterval")], a);
var l2 = a;

// node_modules/@arcgis/core/layers/support/TimeReference.js
var i;
var a2 = i = class extends l {
  constructor(e3) {
    super(e3), this.respectsDaylightSaving = false, this.timezone = null;
  }
  readRespectsDaylightSaving(e3, t) {
    return void 0 !== t.respectsDaylightSaving ? t.respectsDaylightSaving : void 0 !== t.respectDaylightSaving && t.respectDaylightSaving;
  }
  clone() {
    const { respectsDaylightSaving: e3, timezone: t } = this;
    return new i({ respectsDaylightSaving: e3, timezone: t });
  }
};
e([y2({ type: Boolean, json: { write: true } })], a2.prototype, "respectsDaylightSaving", void 0), e([o("respectsDaylightSaving", ["respectsDaylightSaving", "respectDaylightSaving"])], a2.prototype, "readRespectsDaylightSaving", null), e([y2({ type: String, json: { read: { source: "timeZone" }, write: { target: "timeZone" } } })], a2.prototype, "timezone", void 0), a2 = i = e([n("esri.layers.support.TimeReference")], a2);
var p2 = a2;

// node_modules/@arcgis/core/layers/support/TimeInfo.js
var d;
var c = d = class extends l {
  constructor(e3) {
    super(e3), this.cumulative = false, this.endField = null, this.fullTimeExtent = null, this.hasLiveData = false, this.interval = null, this.startField = null, this.timeReference = null, this.trackIdField = null, this.useTime = true;
  }
  readFullTimeExtent(e3, r3) {
    if (!r3.timeExtent || !Array.isArray(r3.timeExtent) || 2 !== r3.timeExtent.length)
      return null;
    const i2 = new Date(r3.timeExtent[0]), l3 = new Date(r3.timeExtent[1]);
    return new T({ start: i2, end: l3 });
  }
  writeFullTimeExtent(e3, t) {
    e3 && r(e3.start) && r(e3.end) ? t.timeExtent = [e3.start.getTime(), e3.end.getTime()] : t.timeExtent = null;
  }
  readInterval(e3, t) {
    return t.timeInterval && t.timeIntervalUnits ? new l2({ value: t.timeInterval, unit: e2.fromJSON(t.timeIntervalUnits) }) : t.defaultTimeInterval && t.defaultTimeIntervalUnits ? new l2({ value: t.defaultTimeInterval, unit: e2.fromJSON(t.defaultTimeIntervalUnits) }) : null;
  }
  writeInterval(e3, t) {
    if (e3) {
      const r3 = e3.toJSON();
      t.timeInterval = r3.value, t.timeIntervalUnits = r3.unit;
    } else
      t.timeInterval = null, t.timeIntervalUnits = null;
  }
  clone() {
    const { cumulative: e3, endField: t, hasLiveData: r3, interval: i2, startField: o3, timeReference: n2, fullTimeExtent: a3, trackIdField: s, useTime: m } = this;
    return new d({ cumulative: e3, endField: t, hasLiveData: r3, interval: i2, startField: o3, timeReference: y(n2), fullTimeExtent: y(a3), trackIdField: s, useTime: m });
  }
};
e([y2({ type: Boolean, json: { read: { source: "exportOptions.timeDataCumulative" }, write: { target: "exportOptions.timeDataCumulative" } } })], c.prototype, "cumulative", void 0), e([y2({ type: String, json: { read: { source: "endTimeField" }, write: { target: "endTimeField", allowNull: true } } })], c.prototype, "endField", void 0), e([y2({ type: T, json: { write: { enabled: true, allowNull: true } } })], c.prototype, "fullTimeExtent", void 0), e([o("fullTimeExtent", ["timeExtent"])], c.prototype, "readFullTimeExtent", null), e([r2("fullTimeExtent")], c.prototype, "writeFullTimeExtent", null), e([y2({ type: Boolean, json: { write: true } })], c.prototype, "hasLiveData", void 0), e([y2({ type: l2, json: { write: { enabled: true, allowNull: true } } })], c.prototype, "interval", void 0), e([o("interval", ["timeInterval", "timeIntervalUnits", "defaultTimeInterval", "defaultTimeIntervalUnits"])], c.prototype, "readInterval", null), e([r2("interval")], c.prototype, "writeInterval", null), e([y2({ type: String, json: { read: { source: "startTimeField" }, write: { target: "startTimeField", allowNull: true } } })], c.prototype, "startField", void 0), e([y2({ type: p2, json: { write: { enabled: true, allowNull: true } } })], c.prototype, "timeReference", void 0), e([y2({ type: String, json: { write: { enabled: true, allowNull: true } } })], c.prototype, "trackIdField", void 0), e([y2({ type: Boolean, json: { read: { source: "exportOptions.useTime" }, write: { target: "exportOptions.useTime" } } })], c.prototype, "useTime", void 0), c = d = e([n("esri.layers.support.TimeInfo")], c);
var v = c;

export {
  e2 as e,
  l2 as l,
  v
};
//# sourceMappingURL=chunk-QR4K7IDQ.js.map
