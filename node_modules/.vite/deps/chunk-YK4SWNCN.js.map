{
  "version": 3,
  "sources": ["../../@arcgis/core/chunks/LaserlinePath.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nimport{v as e}from\"./mat4.js\";import{c as i}from\"./mat4f64.js\";import{s as o}from\"./vec2.js\";import{a as r}from\"./vec2f64.js\";import{Laserline as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Laserline.glsl.js\";import{Float2PassUniform as t}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{FloatPassUniform as s}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as n}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{Matrix4PassUniform as l}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform.js\";import{ShaderBuilder as d}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{VertexAttribute as c}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function v(i){const r=new d;r.include(a,i);const{vertex:v,fragment:w}=r;return v.uniforms.add([new l(\"modelView\",((i,o)=>e(m,o.camera.viewMatrix,i.origin))),new l(\"proj\",((e,i)=>i.camera.projectionMatrix)),new s(\"glowWidth\",((e,i)=>e.glowWidth*i.camera.pixelRatio)),new t(\"pixelToNDC\",((e,i)=>o(p,2/i.camera.fullViewport[2],2/i.camera.fullViewport[3])))]),r.attributes.add(c.START,\"vec3\"),r.attributes.add(c.END,\"vec3\"),r.attributes.add(c.UP,\"vec3\"),r.attributes.add(c.EXTRUDE,\"vec2\"),r.varyings.add(\"uv\",\"vec2\"),r.varyings.add(\"vViewStart\",\"vec3\"),r.varyings.add(\"vViewEnd\",\"vec3\"),r.varyings.add(\"vViewPlane\",\"vec4\"),v.code.add(n`void main() {\nvec3 pos = mix(start, end, extrude.x);\nvec4 viewPos = modelView * vec4(pos, 1);\nvec4 projPos = proj * viewPos;\nvec2 ndcPos = projPos.xy / projPos.w;\nvec3 viewUp = (modelView * vec4(extrude.y * up, 0)).xyz;\nvec4 projPosUp = proj * vec4(viewPos.xyz + viewUp, 1);\nvec2 projExtrudeDir = normalize(projPosUp.xy / projPosUp.w - ndcPos);\nvec2 lxy = abs(sign(projExtrudeDir) - ndcPos);\nndcPos += length(lxy) * projExtrudeDir;\nvec3 worldPlaneNormal = normalize(cross(up, normalize(end - start)));\nvec3 viewPlaneNormal = (modelView * vec4(worldPlaneNormal, 0)).xyz;\nvViewStart = (modelView * vec4(start, 1)).xyz;\nvViewEnd = (modelView * vec4(end, 1)).xyz;\nvViewPlane = vec4(viewPlaneNormal, -dot(viewPlaneNormal, vViewStart));\nfloat xPaddingPixels = sign(dot(viewPlaneNormal, viewPos.xyz)) * (extrude.x * 2.0 - 1.0) * glowWidth;\nndcPos.x += xPaddingPixels * pixelToNDC.x;\nuv = ndcPos * 0.5 + 0.5;\ngl_Position = vec4(ndcPos, 0, 1);\n}`),w.uniforms.add(new s(\"perScreenPixelRatio\",((e,i)=>i.camera.perScreenPixelRatio))),w.code.add(n`float planeDistancePixels(vec4 plane, vec3 pos, vec3 start, vec3 end) {\nvec3 origin = mix(start, end, 0.5);\nvec3 basis = end - origin;\nvec3 posAtOrigin = pos - origin;\nfloat x = dot(normalize(basis), posAtOrigin);\nfloat y = dot(plane.xyz, posAtOrigin);\nfloat dx = max(abs(x) - length(basis), 0.0);\nfloat dy = y;\nfloat dist = length(vec2(dx, dy));\nfloat width = fwidth(y);\nfloat maxPixelDistance = length(pos) * perScreenPixelRatio * 2.0;\nfloat pixelDist = dist / min(width, maxPixelDistance);\nreturn abs(pixelDist);\n}\nvoid main() {\nvec3 pos;\nvec3 normal;\nfloat depthDiscontinuityAlpha;\nif (!laserlineReconstructFromDepth(pos, normal, depthDiscontinuityAlpha)) {\ndiscard;\n}\nfloat distance = planeDistancePixels(vViewPlane, pos, vViewStart, vViewEnd);\nvec4 color = laserlineProfile(distance);\nfloat alpha = 1.0 - smoothstep(0.995, 0.999, abs(dot(normal, vViewPlane.xyz)));\ngl_FragColor = laserlineOutput(color * alpha * depthDiscontinuityAlpha);\n}`),r}const p=r(),m=i(),w=Object.freeze(Object.defineProperty({__proto__:null,build:v},Symbol.toStringTag,{value:\"Module\"}));export{w as L,v as b};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIuwB,SAAS,EAAEA,IAAE;AAAC,QAAMC,KAAE,IAAI;AAAE,EAAAA,GAAE,QAAQ,GAAED,EAAC;AAAE,QAAK,EAAC,QAAOE,IAAE,UAASC,GAAC,IAAEF;AAAE,SAAOC,GAAE,SAAS,IAAI,CAAC,IAAIE,GAAE,aAAa,CAACJ,IAAEK,OAAI,EAAE,GAAEA,GAAE,OAAO,YAAWL,GAAE,MAAM,CAAE,GAAE,IAAII,GAAE,QAAQ,CAACA,IAAEJ,OAAIA,GAAE,OAAO,gBAAiB,GAAE,IAAIK,GAAE,aAAa,CAACD,IAAEJ,OAAII,GAAE,YAAUJ,GAAE,OAAO,UAAW,GAAE,IAAII,GAAE,cAAc,CAACA,IAAEJ,OAAI,EAAE,GAAE,IAAEA,GAAE,OAAO,aAAa,IAAG,IAAEA,GAAE,OAAO,aAAa,EAAE,CAAE,CAAC,CAAC,GAAEC,GAAE,WAAW,IAAI,EAAE,OAAM,MAAM,GAAEA,GAAE,WAAW,IAAI,EAAE,KAAI,MAAM,GAAEA,GAAE,WAAW,IAAI,EAAE,IAAG,MAAM,GAAEA,GAAE,WAAW,IAAI,EAAE,SAAQ,MAAM,GAAEA,GAAE,SAAS,IAAI,MAAK,MAAM,GAAEA,GAAE,SAAS,IAAI,cAAa,MAAM,GAAEA,GAAE,SAAS,IAAI,YAAW,MAAM,GAAEA,GAAE,SAAS,IAAI,cAAa,MAAM,GAAEC,GAAE,KAAK,IAAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmB33C,GAAEH,GAAE,SAAS,IAAI,IAAIE,GAAE,uBAAuB,CAACD,IAAEJ,OAAIA,GAAE,OAAO,mBAAoB,CAAC,GAAEG,GAAE,KAAK,IAAIG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBhG,GAAEL;AAAC;AAAC,IAAM,IAAE,EAAE;AAAV,IAAY,IAAE,EAAE;AAAhB,IAAkB,IAAE,OAAO,OAAO,OAAO,eAAe,EAAC,WAAU,MAAK,OAAM,EAAC,GAAE,OAAO,aAAY,EAAC,OAAM,SAAQ,CAAC,CAAC;",
  "names": ["i", "r", "v", "w", "e", "o", "n"]
}
