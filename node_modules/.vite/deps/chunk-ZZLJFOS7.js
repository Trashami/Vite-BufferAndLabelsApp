import {
  e as e4,
  i as i2
} from "./chunk-K3TAVS2D.js";
import {
  b,
  e as e8,
  i as i3,
  i2 as i4,
  p,
  s as s2
} from "./chunk-FUF4C2M3.js";
import {
  i,
  n as n2,
  o as o3
} from "./chunk-KBM2LGNP.js";
import {
  h as h2,
  n as n3,
  p as p2,
  u as u4
} from "./chunk-AGHOAN2O.js";
import {
  s
} from "./chunk-OPS2DUBP.js";
import {
  a as a3
} from "./chunk-PNLWREZJ.js";
import {
  a as a2,
  a2 as a4,
  d,
  d2,
  h2 as h3,
  n as n4,
  o as o4,
  v as v2,
  x
} from "./chunk-WEBU4A2Q.js";
import {
  e as e9
} from "./chunk-QFWDN2OM.js";
import {
  r as r3
} from "./chunk-X7GQR2IY.js";
import {
  n as n5
} from "./chunk-S6WNSMC7.js";
import {
  d as d3,
  o as o6
} from "./chunk-AMNM3DGI.js";
import {
  t
} from "./chunk-RNRS2JL4.js";
import {
  e as e6,
  h
} from "./chunk-SBPLVEUA.js";
import {
  u as u3
} from "./chunk-3IISYLTT.js";
import {
  c,
  v
} from "./chunk-7QNA4ADD.js";
import {
  e as e7
} from "./chunk-FGA4AGTH.js";
import {
  e as e5
} from "./chunk-6ZCPLPAF.js";
import {
  o as o5
} from "./chunk-MYQCUAHK.js";
import {
  u as u2
} from "./chunk-ZSZHMQBF.js";
import {
  e as e2
} from "./chunk-C6PUUIY2.js";
import {
  e2 as e3,
  f,
  r as r2,
  u
} from "./chunk-BQL7VXQR.js";
import {
  o as o7
} from "./chunk-735C75BI.js";
import {
  a,
  n,
  o as o2
} from "./chunk-ZLTZ3KAT.js";
import {
  O
} from "./chunk-RUM3DXFX.js";
import {
  o
} from "./chunk-IVLBGTXL.js";
import {
  e
} from "./chunk-IQBIGNPU.js";
import {
  r
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js
function c2(c3, u5) {
  const l = c3.fragment;
  if (u5.hasVertexTangents ? (c3.attributes.add(O.TANGENT, "vec4"), c3.varyings.add("vTangent", "vec4"), u5.doubleSidedMode === i2.WindingOrder ? l.code.add(n`mat3 computeTangentSpace(vec3 normal) {
float tangentHeadedness = gl_FrontFacing ? vTangent.w : -vTangent.w;
vec3 tangent = normalize(gl_FrontFacing ? vTangent.xyz : -vTangent.xyz);
vec3 bitangent = cross(normal, tangent) * tangentHeadedness;
return mat3(tangent, bitangent, normal);
}`) : l.code.add(n`mat3 computeTangentSpace(vec3 normal) {
float tangentHeadedness = vTangent.w;
vec3 tangent = normalize(vTangent.xyz);
vec3 bitangent = cross(normal, tangent) * tangentHeadedness;
return mat3(tangent, bitangent, normal);
}`)) : (c3.extensions.add("GL_OES_standard_derivatives"), l.code.add(n`mat3 computeTangentSpace(vec3 normal, vec3 pos, vec2 st) {
vec3 Q1 = dFdx(pos);
vec3 Q2 = dFdy(pos);
vec2 stx = dFdx(st);
vec2 sty = dFdy(st);
float det = stx.t * sty.s - sty.t * stx.s;
vec3 T = stx.t * Q2 - sty.t * Q1;
T = T - normal * dot(normal, T);
T *= inversesqrt(max(dot(T,T), 1.e-10));
vec3 B = sign(det) * cross(normal, T);
return mat3(T, B, normal);
}`)), u5.textureCoordinateType !== d.None) {
    c3.include(a2, u5);
    const e10 = u5.supportsTextureAtlas ? u5.hasWebGL2Context ? e3.None : e3.Size : e3.None;
    l.uniforms.add(u5.pbrTextureBindType === a.Pass ? u("normalTexture", (e11) => e11.textureNormal, e10) : u2("normalTexture", (e11) => e11.textureNormal, e10)), l.code.add(n`
    vec3 computeTextureNormal(mat3 tangentSpace, vec2 uv) {
      vtc.uv = uv;
      ${u5.supportsTextureAtlas ? n`vtc.size = ${r2(u5, "normalTexture")};` : ""}
      vec3 rawNormal = textureLookup(normalTexture, vtc).rgb * 2.0 - 1.0;
      return tangentSpace * rawNormal;
    }
  `);
  }
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/TextureTransformUV.glsl.js
function s3(s4) {
  s4.vertex.uniforms.add(new e6("colorTextureTransformMatrix", (o8) => r(o8.colorTextureTransformMatrix) ? o8.colorTextureTransformMatrix : e())), s4.varyings.add("colorUV", "vec2"), s4.vertex.code.add(n`void forwardColorUV(){
colorUV = (colorTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`);
}
function i5(s4) {
  s4.vertex.uniforms.add(new e6("normalTextureTransformMatrix", (o8) => r(o8.normalTextureTransformMatrix) ? o8.normalTextureTransformMatrix : e())), s4.varyings.add("normalUV", "vec2"), s4.vertex.code.add(n`void forwardNormalUV(){
normalUV = (normalTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`);
}
function t2(s4) {
  s4.vertex.uniforms.add(new e6("emissiveTextureTransformMatrix", (o8) => r(o8.emissiveTextureTransformMatrix) ? o8.emissiveTextureTransformMatrix : e())), s4.varyings.add("emissiveUV", "vec2"), s4.vertex.code.add(n`void forwardEmissiveUV(){
emissiveUV = (emissiveTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`);
}
function n6(s4) {
  s4.vertex.uniforms.add(new e6("occlusionTextureTransformMatrix", (o8) => r(o8.occlusionTextureTransformMatrix) ? o8.occlusionTextureTransformMatrix : e())), s4.varyings.add("occlusionUV", "vec2"), s4.vertex.code.add(n`void forwardOcclusionUV(){
occlusionUV = (occlusionTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`);
}
function x2(s4) {
  s4.vertex.uniforms.add(new e6("metallicRoughnessTextureTransformMatrix", (o8) => r(o8.metallicRoughnessTextureTransformMatrix) ? o8.metallicRoughnessTextureTransformMatrix : e())), s4.varyings.add("metallicRoughnessUV", "vec2"), s4.vertex.code.add(n`void forwardMetallicRoughnessUV(){
metallicRoughnessUV = (metallicRoughnessTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`);
}

// node_modules/@arcgis/core/chunks/DefaultMaterial.glsl.js
function Q(Q2) {
  const X2 = new o2(), { vertex: Y, fragment: Z, varyings: ee } = X2;
  return v(Y, Q2), X2.include(o6), ee.add("vpos", "vec3"), X2.include(s, Q2), X2.include(p, Q2), X2.include(a3, Q2), Q2.hasColorTextureTransform && X2.include(s3), Q2.output !== h.Color && Q2.output !== h.Alpha || (Q2.hasNormalTextureTransform && X2.include(i5), Q2.hasEmissionTextureTransform && X2.include(t2), Q2.hasOcclusionTextureTransform && X2.include(n6), Q2.hasMetallicRoughnessTextureTransform && X2.include(x2), c(Y, Q2), X2.include(o3, Q2), X2.include(r3, Q2), Q2.normalType === i.Attribute && Q2.offsetBackfaces && X2.include(e8), X2.include(c2, Q2), X2.include(n2, Q2), Q2.instancedColor && X2.attributes.add(O.INSTANCECOLOR, "vec4"), ee.add("localvpos", "vec3"), X2.include(o4, Q2), X2.include(d3, Q2), X2.include(i3, Q2), X2.include(e9, Q2), Y.uniforms.add(new e2("externalColor", (e10) => e10.externalColor)), ee.add("vcolorExt", "vec4"), Q2.hasMultipassTerrain && ee.add("depth", "float"), Q2.hasModelTransformation && Y.uniforms.add(new e7("model", (o8) => r(o8.modelTransformation) ? o8.modelTransformation : o)), Y.code.add(n`
      void main(void) {
        forwardNormalizedVertexColor();
        vcolorExt = externalColor;
        ${Q2.instancedColor ? "vcolorExt *= instanceColor;" : ""}
        vcolorExt *= vvColor();
        vcolorExt *= getSymbolColor();
        forwardColorMixMode();

        if (vcolorExt.a < ${n.float(t)}) {
          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
        } else {
          vpos = calculateVPos();
          localvpos = vpos - view[3].xyz;
          vpos = subtractOrigin(vpos);
          ${Q2.normalType === i.Attribute ? n`vNormalWorld = dpNormal(vvLocalNormal(normalModel()));` : ""}
          vpos = addVerticalOffset(vpos, localOrigin);
          ${Q2.hasVertexTangents ? "vTangent = dpTransformVertexTangent(tangent);" : ""}
          gl_Position = transformPosition(proj, view, ${Q2.hasModelTransformation ? "model," : ""} vpos);
          ${Q2.normalType === i.Attribute && Q2.offsetBackfaces ? "gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);" : ""}
        }

        ${Q2.hasMultipassTerrain ? "depth = (view * vec4(vpos, 1.0)).z;" : ""}
        forwardLinearDepth();
        forwardTextureCoordinates();
        ${Q2.hasColorTextureTransform ? n`forwardColorUV();` : ""}
        ${Q2.hasNormalTextureTransform ? n`forwardNormalUV();` : ""}
        ${Q2.hasEmissionTextureTransform ? n`forwardEmissiveUV();` : ""}
        ${Q2.hasOcclusionTextureTransform ? n`forwardOcclusionUV();` : ""}
        ${Q2.hasMetallicRoughnessTextureTransform ? n`forwardMetallicRoughnessUV();` : ""}
      }
    `)), Q2.output === h.Alpha && (X2.include(u3, Q2), X2.include(s2, Q2), X2.include(n5, Q2), Z.uniforms.add([new o7("opacity", (e10) => e10.opacity), new o7("layerOpacity", (e10) => e10.layerOpacity)]), Q2.hasColorTexture && Z.uniforms.add(new f("tex", (e10) => e10.texture)), Z.include(i4), Z.code.add(n`
      void main() {
        discardBySlice(vpos);
        ${Q2.hasMultipassTerrain ? "terrainDepthTest(gl_FragCoord, depth);" : ""}
        ${Q2.hasColorTexture ? n`
                vec4 texColor = texture2D(tex, ${Q2.hasColorTextureTransform ? n`colorUV` : n`vuv0`});
                ${Q2.textureAlphaPremultiplied ? "texColor.rgb /= texColor.a;" : ""}
                discardOrAdjustAlpha(texColor);` : n`vec4 texColor = vec4(1.0);`}
        ${Q2.hasVertexColors ? n`float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : n`float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}
        gl_FragColor = vec4(opacity_);
      }
    `)), Q2.output === h.Color && (X2.include(u3, Q2), X2.include(p2, Q2), X2.include(n3, Q2), X2.include(s2, Q2), X2.include(Q2.instancedDoublePrecision ? h3 : v2, Q2), X2.include(n5, Q2), c(Z, Q2), Z.uniforms.add([Y.uniforms.get("localOrigin"), new e5("ambient", (e10) => e10.ambient), new e5("diffuse", (e10) => e10.diffuse), new o7("opacity", (e10) => e10.opacity), new o7("layerOpacity", (e10) => e10.layerOpacity)]), Q2.hasColorTexture && Z.uniforms.add(new f("tex", (e10) => e10.texture)), X2.include(x, Q2), X2.include(n4, Q2), Z.include(i4), X2.include(e4, Q2), h2(Z), u4(Z), a4(Z), Z.code.add(n`
      void main() {
        discardBySlice(vpos);
        ${Q2.hasMultipassTerrain ? "terrainDepthTest(gl_FragCoord, depth);" : ""}
        ${Q2.hasColorTexture ? n`
                vec4 texColor = texture2D(tex, ${Q2.hasColorTextureTransform ? n`colorUV` : n`vuv0`});
                ${Q2.textureAlphaPremultiplied ? "texColor.rgb /= texColor.a;" : ""}
                discardOrAdjustAlpha(texColor);` : n`vec4 texColor = vec4(1.0);`}
        shadingParams.viewDirection = normalize(vpos - cameraPosition);
        ${Q2.normalType === i.ScreenDerivative ? n`
                vec3 normal = screenDerivativeNormal(localvpos);` : n`
                shadingParams.normalView = vNormalWorld;
                vec3 normal = shadingNormal(shadingParams);`}
        ${Q2.pbrMode === d2.Normal ? "applyPBRFactors();" : ""}
        float ssao = evaluateAmbientOcclusionInverse();
        ssao *= getBakedOcclusion();

        vec3 posWorld = vpos + localOrigin;

        float additionalAmbientScale = additionalDirectedAmbientLight(posWorld);
        float shadow = ${Q2.receiveShadows ? "readShadowMap(vpos, linearDepth)" : Q2.spherical ? "lightingGlobalFactor * (1.0 - additionalAmbientScale)" : "0.0"};

        vec3 matColor = max(ambient, diffuse);
        ${Q2.hasVertexColors ? n`
                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : n`
                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}
        ${Q2.hasNormalTexture ? n`
                mat3 tangentSpace = ${Q2.hasVertexTangents ? "computeTangentSpace(normal);" : "computeTangentSpace(normal, vpos, vuv0);"}
                vec3 shadingNormal = computeTextureNormal(tangentSpace, vuv0);` : n`vec3 shadingNormal = normal;`}
        vec3 normalGround = ${Q2.spherical ? n`normalize(posWorld);` : n`vec3(0.0, 0.0, 1.0);`}

        ${Q2.snowCover ? n`
                float snow = smoothstep(0.5, 0.55, dot(normal, normalGround));
                albedo = mix(albedo, vec3(1), snow);
                shadingNormal = mix(shadingNormal, normal, snow);
                ssao = mix(ssao, 1.0, snow);` : ""}

        vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;

        ${Q2.pbrMode === d2.Normal || Q2.pbrMode === d2.Schematic ? n`
                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];
                ${Q2.snowCover ? n`
                        mrr = mix(mrr, vec3(0.0, 1.0, 0.04), snow);
                        emission = mix(emission, vec3(0.0), snow);` : ""}

                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);` : n`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}
        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);
        ${Q2.transparencyPassType === o5.Color ? n`gl_FragColor = premultiplyAlpha(gl_FragColor);` : ""}
      }
    `)), X2.include(b, Q2), X2;
}
var X = Object.freeze(Object.defineProperty({ __proto__: null, build: Q }, Symbol.toStringTag, { value: "Module" }));

export {
  Q,
  X
};
//# sourceMappingURL=chunk-ZZLJFOS7.js.map
