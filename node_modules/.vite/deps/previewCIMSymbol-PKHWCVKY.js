import {
  M,
  z
} from "./chunk-DBTYPVZJ.js";
import "./chunk-GOHXATVD.js";
import "./chunk-YNUWEZ4E.js";
import {
  ie,
  oe
} from "./chunk-57QYUXCA.js";
import "./chunk-J42Y5N2P.js";
import "./chunk-DWAZ7HI7.js";
import "./chunk-POI555WS.js";
import "./chunk-UCPKJYXN.js";
import "./chunk-KFLNKWNF.js";
import "./chunk-27YO3FKC.js";
import "./chunk-UO3LS2M5.js";
import "./chunk-YQBYWPBD.js";
import "./chunk-QISOH77W.js";
import "./chunk-XO5VJRK4.js";
import "./chunk-OS7L4DDX.js";
import "./chunk-I4YZGF7W.js";
import "./chunk-UDYHZLTE.js";
import {
  h
} from "./chunk-NF6EUNPP.js";
import {
  t
} from "./chunk-RQ3CU5II.js";
import "./chunk-JEA4MMTV.js";
import "./chunk-RG3AHHRL.js";
import "./chunk-O7LTV6XN.js";
import "./chunk-4TWWY75O.js";
import {
  G
} from "./chunk-SQSR6K2M.js";
import "./chunk-UAJ2SDPQ.js";
import "./chunk-75RMBUYZ.js";
import "./chunk-TWJNUVV2.js";
import "./chunk-IIUWTGWW.js";
import "./chunk-N43PI2UO.js";
import "./chunk-HUQX7WZO.js";
import "./chunk-ZPYDYUP5.js";
import "./chunk-22F6X66Z.js";
import "./chunk-AIDV7EKX.js";
import "./chunk-FZQZIM7U.js";
import "./chunk-CZBRZ6SU.js";
import "./chunk-RT3T2K4S.js";
import "./chunk-OD3FDQCI.js";
import "./chunk-J2PJNRU7.js";
import "./chunk-56SPM3WK.js";
import "./chunk-XMZAPOBR.js";
import "./chunk-BLJKKR5D.js";
import "./chunk-ZGNCYHMZ.js";
import "./chunk-X2S4RQJ4.js";
import "./chunk-376OPXM4.js";
import "./chunk-DER356EU.js";
import "./chunk-TQEOEDAZ.js";
import "./chunk-SHFHZMHO.js";
import {
  e,
  u
} from "./chunk-NRP45AHD.js";
import "./chunk-IWQ7452U.js";
import "./chunk-NAN5J6QS.js";
import "./chunk-B4DKBAM3.js";
import "./chunk-6M2AHKYV.js";
import "./chunk-SZIJNKCV.js";
import "./chunk-6O43OEU5.js";
import "./chunk-J2K7ZDSV.js";
import "./chunk-2UML3WQZ.js";
import "./chunk-KXVMEIWT.js";
import "./chunk-UDND2Z3V.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-RAX2HD42.js";
import "./chunk-ZYRIJWLX.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import "./chunk-3MNMDUQZ.js";
import "./chunk-UWG37XSU.js";
import "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import "./chunk-RXYULINL.js";
import "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import "./chunk-KAN4HXCG.js";
import "./chunk-4FEGON7M.js";
import "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-7QMMKGW4.js";
import "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import "./chunk-MJXQTGI2.js";
import "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/symbols/support/previewCIMSymbol.js
var h2 = new z(null, true);
var m = e(t.size);
var c = e(t.maxSize);
var u2 = e(t.lineWidth);
var f = 1;
function y(e2) {
  const t2 = e2 == null ? void 0 : e2.size;
  if ("number" == typeof t2)
    return { width: t2, height: t2 };
  return { width: null != t2 && "object" == typeof t2 && "width" in t2 ? t2.width : null, height: null != t2 && "object" == typeof t2 && "height" in t2 ? t2.height : null };
}
async function d(e2, n = {}) {
  var _a;
  const { node: s, opacity: d2, symbolConfig: p } = n, g = "object" == typeof p && "isSquareFill" in p && p.isSquareFill, w = n.cimOptions || n, b = w.geometryType || G((_a = e2 == null ? void 0 : e2.data) == null ? void 0 : _a.symbol), M2 = y(n), { feature: j, fieldMap: v } = w;
  if (null == M2.width || null == M2.height) {
    const t2 = await ie.resolveSymbolOverrides(e2.data, j, null, v, b);
    if (!t2)
      return null;
    (e2 = e2.clone()).data = { type: "CIMSymbolReference", symbol: t2 }, e2.data.primitiveOverrides = null;
    const n2 = [];
    oe.fetchResources(t2, h2.resourceManager, n2), n2.length > 0 && await Promise.all(n2);
    const { width: o, height: r } = oe.getEnvelope(t2, null, h2.resourceManager);
    M2.width = "esriGeometryPolygon" === b ? m : "esriGeometryPolyline" === b ? u2 : null != o && isFinite(o) ? Math.min(o, c) : m, M2.height = "esriGeometryPolygon" === b ? m : null != r && isFinite(r) ? Math.max(Math.min(r, c), f) : m;
  }
  const S = await h2.rasterizeCIMSymbolAsync(e2, j, M2, g || "esriGeometryPolygon" !== b ? M.Preview : M.Legend, v, b);
  if (!S)
    return null;
  const { width: C, height: I } = S, P = document.createElement("canvas");
  P.width = C, P.height = I;
  P.getContext("2d").putImageData(S, 0, 0);
  const x = u(M2.width), z2 = u(M2.height), F = new Image(x, z2);
  F.src = P.toDataURL(), null != d2 && (F.style.opacity = `${d2}`);
  let G2 = F;
  if (null != n.effectView) {
    const e3 = { shape: { type: "image", x: 0, y: 0, width: x, height: z2, src: F.src }, fill: null, stroke: null, offset: [0, 0] };
    G2 = h([[e3]], [x, z2], { effectView: n.effectView });
  }
  return s && G2 && s.appendChild(G2), G2;
}
export {
  d as previewCIMSymbol
};
//# sourceMappingURL=previewCIMSymbol-PKHWCVKY.js.map
