import {
  f as f2,
  o as o3
} from "./chunk-ZSZHMQBF.js";
import {
  o
} from "./chunk-33T2SX6R.js";
import {
  a
} from "./chunk-TGHV3HKU.js";
import {
  e,
  f
} from "./chunk-BQL7VXQR.js";
import {
  o as o4
} from "./chunk-735C75BI.js";
import {
  n,
  o as o2
} from "./chunk-ZLTZ3KAT.js";
import {
  x
} from "./chunk-3LR5O4WA.js";

// node_modules/@arcgis/core/chunks/SSAOBlur.glsl.js
var f3 = 4;
function c() {
  const c2 = new o2(), u2 = c2.fragment;
  c2.include(o);
  const m = (f3 + 1) / 2, p = 1 / (2 * m * m);
  return u2.include(a), u2.uniforms.add([new f("depthMap", (e2) => e2.depthTexture), new f2("tex", (e2) => e2.colorTexture), new o3("blurSize", (e2) => e2.blurSize), new o4("projScale", (r, o5) => {
    const t = x(o5.camera.eye, o5.camera.center);
    return t > 5e4 ? Math.max(0, r.projScale - (t - 5e4)) : r.projScale;
  }), new e("nearFar", (e2, r) => r.camera.nearFar)]), u2.code.add(n`
    void blurFunction(vec2 uv, float r, float center_d, float sharpness, inout float wTotal, inout float bTotal) {
      float c = texture2D(tex, uv).r;
      float d = linearDepthFromTexture(depthMap, uv, nearFar);

      float ddiff = d - center_d;

      float w = exp(-r * r * ${n.float(p)} - ddiff * ddiff * sharpness);
      wTotal += w;
      bTotal += w * c;
    }
  `), u2.code.add(n`
    void main(void) {
      float b = 0.0;
      float w_total = 0.0;

      float center_d = linearDepthFromTexture(depthMap, uv, nearFar);

      float sharpness = -0.05 * projScale / center_d;
      for (int r = -${n.int(f3)}; r <= ${n.int(f3)}; ++r) {
        float rf = float(r);
        vec2 uvOffset = uv + rf * blurSize;
        blurFunction(uvOffset, rf, center_d, sharpness, w_total, b);
      }

      gl_FragColor = vec4(b / w_total);
    }
  `), c2;
}
var u = Object.freeze(Object.defineProperty({ __proto__: null, build: c }, Symbol.toStringTag, { value: "Module" }));

export {
  c,
  u
};
//# sourceMappingURL=chunk-YJIITZRY.js.map
