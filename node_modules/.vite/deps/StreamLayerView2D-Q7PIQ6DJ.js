import {
  B
} from "./chunk-MT5C555T.js";
import "./chunk-LL5ZGGZR.js";
import {
  e as e2
} from "./chunk-Q5IFLFM5.js";
import "./chunk-VPBDKONJ.js";
import "./chunk-L4LV52OG.js";
import "./chunk-PCWW275T.js";
import "./chunk-EWYYYS2T.js";
import "./chunk-7N2Z7KNR.js";
import "./chunk-4Y3VLNR2.js";
import "./chunk-5HIF32ZE.js";
import "./chunk-57QYUXCA.js";
import "./chunk-J42Y5N2P.js";
import "./chunk-DWAZ7HI7.js";
import "./chunk-POI555WS.js";
import "./chunk-UCPKJYXN.js";
import "./chunk-KFLNKWNF.js";
import "./chunk-KG5RWWIW.js";
import "./chunk-27YO3FKC.js";
import "./chunk-SFYX532J.js";
import "./chunk-6TBB7UXB.js";
import "./chunk-UO3LS2M5.js";
import "./chunk-EQNT4A7P.js";
import "./chunk-YQBYWPBD.js";
import "./chunk-QISOH77W.js";
import "./chunk-XO5VJRK4.js";
import "./chunk-MATM5L52.js";
import "./chunk-4OM3EX6P.js";
import "./chunk-E24JZEAW.js";
import "./chunk-3OFVLRSL.js";
import "./chunk-FV3CMB37.js";
import "./chunk-4HL6BBWO.js";
import "./chunk-OFTOCPN5.js";
import "./chunk-I4YZGF7W.js";
import "./chunk-MKNNZ33G.js";
import "./chunk-JQUWFKNU.js";
import "./chunk-GX2FDWTU.js";
import "./chunk-TFHLTN6F.js";
import "./chunk-UDYHZLTE.js";
import "./chunk-IQBIGNPU.js";
import "./chunk-4JNOVZUK.js";
import "./chunk-JEA4MMTV.js";
import "./chunk-RG3AHHRL.js";
import "./chunk-SQSR6K2M.js";
import "./chunk-75RMBUYZ.js";
import "./chunk-MBLYC2KR.js";
import "./chunk-XGEPEYGB.js";
import "./chunk-2T7LFOXQ.js";
import "./chunk-NCONZRBI.js";
import "./chunk-76CXRT5P.js";
import "./chunk-A4HIS5ZJ.js";
import "./chunk-AMLHWG76.js";
import "./chunk-OFQYIOO7.js";
import "./chunk-YF2CRSQX.js";
import "./chunk-INL7BDTP.js";
import "./chunk-7XXQ7762.js";
import "./chunk-DVGM5RQS.js";
import "./chunk-QTYVDCOW.js";
import "./chunk-YGVY4EIZ.js";
import "./chunk-HSDU7DIL.js";
import "./chunk-FWRLW4G5.js";
import {
  x
} from "./chunk-UK3I5WXR.js";
import "./chunk-GLGOVVCK.js";
import "./chunk-BUVDI6S7.js";
import "./chunk-6Z6ZAVRA.js";
import "./chunk-PK4W65H4.js";
import "./chunk-GY2AJLN6.js";
import "./chunk-W62B63EU.js";
import "./chunk-O6VYMEIX.js";
import "./chunk-NDQ5FHGV.js";
import "./chunk-US2IWMHE.js";
import "./chunk-ZL4T4NIV.js";
import "./chunk-NAKEKTIK.js";
import "./chunk-QWNKYSI4.js";
import "./chunk-FMJZBZWF.js";
import "./chunk-GOYVJTGW.js";
import "./chunk-ZPYDYUP5.js";
import "./chunk-22F6X66Z.js";
import "./chunk-AIDV7EKX.js";
import "./chunk-FZQZIM7U.js";
import "./chunk-YM6PUX7G.js";
import "./chunk-QEYOWTXD.js";
import "./chunk-CZBRZ6SU.js";
import "./chunk-KDO6J2FO.js";
import "./chunk-RT3T2K4S.js";
import "./chunk-WJCI2CGX.js";
import "./chunk-REIQNAQW.js";
import "./chunk-J6LQZWZI.js";
import "./chunk-OD3FDQCI.js";
import "./chunk-J2PJNRU7.js";
import "./chunk-56SPM3WK.js";
import "./chunk-XMZAPOBR.js";
import "./chunk-BLJKKR5D.js";
import "./chunk-ZGNCYHMZ.js";
import "./chunk-X2S4RQJ4.js";
import "./chunk-FUPLN7UM.js";
import "./chunk-376OPXM4.js";
import "./chunk-DER356EU.js";
import "./chunk-MZIWIEIR.js";
import "./chunk-TQEOEDAZ.js";
import "./chunk-SHFHZMHO.js";
import "./chunk-NRP45AHD.js";
import "./chunk-IWQ7452U.js";
import "./chunk-NAN5J6QS.js";
import "./chunk-B4DKBAM3.js";
import "./chunk-6M2AHKYV.js";
import "./chunk-SZIJNKCV.js";
import "./chunk-6O43OEU5.js";
import "./chunk-J2K7ZDSV.js";
import "./chunk-2UML3WQZ.js";
import "./chunk-KXVMEIWT.js";
import "./chunk-UDND2Z3V.js";
import "./chunk-23Y3DIC6.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-RAX2HD42.js";
import "./chunk-ZYRIJWLX.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import "./chunk-3MNMDUQZ.js";
import "./chunk-UWG37XSU.js";
import "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import "./chunk-RXYULINL.js";
import {
  l
} from "./chunk-5NXILPDI.js";
import "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-XQN7F674.js";
import "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import "./chunk-KAN4HXCG.js";
import "./chunk-4FEGON7M.js";
import "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-CXFRNDG4.js";
import "./chunk-7QMMKGW4.js";
import {
  e,
  n2 as n,
  y
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import "./chunk-MJXQTGI2.js";
import {
  s
} from "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import {
  r,
  t
} from "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/views/2d/layers/StreamLayerView2D.js
function l2(e3, t2) {
  if (t(e3) && t(t2))
    return null;
  const i = {};
  return r(t2) && (i.geometry = t2.toJSON()), r(e3) && (i.where = e3), i;
}
var d = class extends B {
  constructor() {
    super(...arguments), this._enabledDataReceived = false, this.errorString = null, this.connectionStatus = "disconnected";
  }
  initialize() {
    this.handles.add([l(() => {
      var _a;
      return (_a = this.layer) == null ? void 0 : _a.purgeOptions;
    }, () => this._update()), l(() => this.suspended, (e3) => {
      e3 ? this._proxy.pauseStream() : this._proxy.resumeStream();
    })]);
  }
  get connectionError() {
    if (this.errorString)
      return new s("stream-controller", this.errorString);
  }
  on(e3, t2) {
    "data-received" === e3 && (this._enabledDataReceived = true, this._proxy.enableEvent("data-received", true));
    const r2 = super.on(e3, t2), s2 = this;
    return { remove() {
      r2.remove(), "data-received" === e3 && (s2._proxy.closed || s2.hasEventListener("data-received") || s2._proxy.enableEvent("data-received", false));
    } };
  }
  queryLatestObservations(e3, r2) {
    if (!(this.layer.timeInfo.endField || this.layer.timeInfo.startField))
      throw new s("streamlayer-no-timeField", "queryLatestObservation can only be used with services that define a TrackIdField");
    return this._proxy.queryLatestObservations(this._cleanUpQuery(e3), r2).then((e4) => {
      const t2 = x.fromJSON(e4);
      return t2.features.forEach((e5) => {
        e5.layer = this.layer, e5.sourceLayer = this.layer;
      }), t2;
    });
  }
  detach() {
    super.detach(), this.connectionStatus = "disconnected";
  }
  _createClientOptions() {
    return { ...super._createClientOptions(), setProperty: (e3) => {
      this.set(e3.propertyName, e3.value);
    } };
  }
  _createTileRendererHash(e3) {
    const t2 = `${JSON.stringify(this.layer.purgeOptions)}.${JSON.stringify(l2(this.layer.definitionExpression, this.layer.geometryDefinition))})`;
    return super._createTileRendererHash(e3) + t2;
  }
  async _createServiceOptions() {
    const e3 = this.layer, { objectIdField: t2 } = e3, r2 = e3.fields.map((e4) => e4.toJSON()), s2 = e2(e3.geometryType), i = e3.timeInfo && e3.timeInfo.toJSON() || null, o = e3.spatialReference ? e3.spatialReference.toJSON() : null;
    return { type: "stream", fields: r2, geometryType: s2, objectIdField: t2, timeInfo: i, source: this.layer.parsedUrl, serviceFilter: l2(this.layer.definitionExpression, this.layer.geometryDefinition), purgeOptions: this.layer.purgeOptions.toJSON(), enableDataReceived: this._enabledDataReceived, spatialReference: o, maxReconnectionAttempts: this.layer.maxReconnectionAttempts, maxReconnectionInterval: this.layer.maxReconnectionInterval, updateInterval: this.layer.updateInterval, customParameters: e3.customParameters };
  }
};
e([y()], d.prototype, "errorString", void 0), e([y({ readOnly: true })], d.prototype, "connectionError", null), e([y()], d.prototype, "connectionStatus", void 0), d = e([n("esri.views.2d.layers.StreamLayerView2D")], d);
var u = d;
export {
  u as default
};
//# sourceMappingURL=StreamLayerView2D-Q7PIQ6DJ.js.map
