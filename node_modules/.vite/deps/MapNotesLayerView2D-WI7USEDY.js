import {
  r as r2
} from "./chunk-V6KIDQ3E.js";
import {
  i as i2
} from "./chunk-QTDVBI5T.js";
import {
  oe
} from "./chunk-L26SDFYA.js";
import "./chunk-6TQO4FJO.js";
import "./chunk-DPGI5XTT.js";
import "./chunk-QXJIQKLY.js";
import "./chunk-GRWIJKD6.js";
import "./chunk-WGK2FJEK.js";
import "./chunk-CNTOSDAN.js";
import "./chunk-LL5ZGGZR.js";
import "./chunk-Q5IFLFM5.js";
import {
  y
} from "./chunk-L4LV52OG.js";
import {
  u
} from "./chunk-PCWW275T.js";
import "./chunk-EWYYYS2T.js";
import {
  i
} from "./chunk-7N2Z7KNR.js";
import "./chunk-DBT4KOKX.js";
import "./chunk-4Y3VLNR2.js";
import "./chunk-MU26VSON.js";
import "./chunk-5HIF32ZE.js";
import "./chunk-57QYUXCA.js";
import "./chunk-J42Y5N2P.js";
import "./chunk-DWAZ7HI7.js";
import "./chunk-POI555WS.js";
import "./chunk-JHLU6RPN.js";
import "./chunk-EPMXCACW.js";
import "./chunk-UCPKJYXN.js";
import "./chunk-KFLNKWNF.js";
import "./chunk-KUO7OCMN.js";
import "./chunk-KG5RWWIW.js";
import "./chunk-27YO3FKC.js";
import "./chunk-XNT3PUPA.js";
import "./chunk-JMGHYNUW.js";
import "./chunk-SFYX532J.js";
import "./chunk-XBFCIW4K.js";
import "./chunk-6TBB7UXB.js";
import "./chunk-UO3LS2M5.js";
import "./chunk-EQNT4A7P.js";
import "./chunk-ESF7LLEL.js";
import "./chunk-IOZMLQTF.js";
import "./chunk-2GP5D74I.js";
import "./chunk-R24MO4IV.js";
import "./chunk-YQBYWPBD.js";
import "./chunk-QISOH77W.js";
import "./chunk-XO5VJRK4.js";
import "./chunk-OAXPH6DL.js";
import "./chunk-O4DPVR3F.js";
import "./chunk-MATM5L52.js";
import "./chunk-4OM3EX6P.js";
import "./chunk-A22ACVMF.js";
import "./chunk-3OFVLRSL.js";
import "./chunk-UWKVAZQ6.js";
import "./chunk-FV3CMB37.js";
import "./chunk-4HL6BBWO.js";
import "./chunk-OEFH2SLX.js";
import "./chunk-I4YZGF7W.js";
import "./chunk-FZSI6IGI.js";
import "./chunk-7DLBSBVE.js";
import "./chunk-4XFEPZ26.js";
import "./chunk-FERTI5PU.js";
import "./chunk-VWCRJ6R6.js";
import "./chunk-MKNNZ33G.js";
import "./chunk-JQUWFKNU.js";
import "./chunk-UVQQJ3R6.js";
import "./chunk-QU433TMZ.js";
import "./chunk-IIAN3QNN.js";
import "./chunk-GX2FDWTU.js";
import "./chunk-TFHLTN6F.js";
import "./chunk-UDYHZLTE.js";
import "./chunk-IQBIGNPU.js";
import "./chunk-4JNOVZUK.js";
import "./chunk-ZNRXLY4R.js";
import "./chunk-JEA4MMTV.js";
import "./chunk-RG3AHHRL.js";
import "./chunk-SQSR6K2M.js";
import "./chunk-75RMBUYZ.js";
import "./chunk-TJ2I6XQT.js";
import "./chunk-EDHROVWI.js";
import "./chunk-34YPGGJT.js";
import "./chunk-NCXAKZRR.js";
import "./chunk-DUCSW4OU.js";
import "./chunk-WVDA5Z37.js";
import "./chunk-ZEEU5HOK.js";
import "./chunk-FFVIDMFN.js";
import "./chunk-XGEPEYGB.js";
import "./chunk-2T7LFOXQ.js";
import "./chunk-NCONZRBI.js";
import "./chunk-76CXRT5P.js";
import "./chunk-7Q5M7ANT.js";
import "./chunk-A4HIS5ZJ.js";
import "./chunk-OFQYIOO7.js";
import "./chunk-YF2CRSQX.js";
import "./chunk-INL7BDTP.js";
import "./chunk-7XXQ7762.js";
import "./chunk-DVGM5RQS.js";
import "./chunk-QTYVDCOW.js";
import "./chunk-HSDU7DIL.js";
import "./chunk-FWRLW4G5.js";
import "./chunk-E52E6T7N.js";
import "./chunk-6Z6ZAVRA.js";
import "./chunk-PK4W65H4.js";
import "./chunk-W62B63EU.js";
import "./chunk-N43PI2UO.js";
import "./chunk-O6VYMEIX.js";
import "./chunk-NDQ5FHGV.js";
import "./chunk-ZWUEORSX.js";
import "./chunk-QWNKYSI4.js";
import "./chunk-ZPYDYUP5.js";
import "./chunk-AIDV7EKX.js";
import "./chunk-FZQZIM7U.js";
import "./chunk-CZBRZ6SU.js";
import "./chunk-KDO6J2FO.js";
import "./chunk-RT3T2K4S.js";
import "./chunk-WJCI2CGX.js";
import "./chunk-REIQNAQW.js";
import {
  g
} from "./chunk-J6LQZWZI.js";
import "./chunk-OD3FDQCI.js";
import "./chunk-J2PJNRU7.js";
import "./chunk-56SPM3WK.js";
import "./chunk-XMZAPOBR.js";
import "./chunk-BLJKKR5D.js";
import "./chunk-ZGNCYHMZ.js";
import "./chunk-X2S4RQJ4.js";
import "./chunk-FUPLN7UM.js";
import "./chunk-376OPXM4.js";
import "./chunk-DER356EU.js";
import "./chunk-MZIWIEIR.js";
import "./chunk-TQEOEDAZ.js";
import "./chunk-SHFHZMHO.js";
import "./chunk-NRP45AHD.js";
import "./chunk-IWQ7452U.js";
import "./chunk-NAN5J6QS.js";
import "./chunk-B4DKBAM3.js";
import "./chunk-6M2AHKYV.js";
import "./chunk-SZIJNKCV.js";
import "./chunk-6O43OEU5.js";
import "./chunk-J2K7ZDSV.js";
import "./chunk-2UML3WQZ.js";
import "./chunk-KXVMEIWT.js";
import {
  j
} from "./chunk-UDND2Z3V.js";
import "./chunk-23Y3DIC6.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-RAX2HD42.js";
import "./chunk-ZYRIJWLX.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import "./chunk-3MNMDUQZ.js";
import "./chunk-UWG37XSU.js";
import "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import "./chunk-RXYULINL.js";
import {
  a,
  h,
  l
} from "./chunk-5NXILPDI.js";
import "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-XQN7F674.js";
import "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import "./chunk-KAN4HXCG.js";
import "./chunk-4FEGON7M.js";
import "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-CXFRNDG4.js";
import "./chunk-7QMMKGW4.js";
import {
  e,
  n2 as n
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import "./chunk-MJXQTGI2.js";
import "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import {
  r,
  t
} from "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/views/2d/layers/MapNotesLayerView2D.js
var f = "sublayers";
var m = "layerView";
var w = Object.freeze({ remove() {
}, pause() {
}, resume() {
} });
var y2 = class extends y(u) {
  constructor() {
    super(...arguments), this._highlightIds = /* @__PURE__ */ new Map(), this.container = new r2();
  }
  async fetchPopupFeatures(e2) {
    return Array.from(this.graphicsViews(), (i3) => i3.hitTest(e2).filter((e3) => !!e3.popupTemplate)).flat();
  }
  *graphicsViews() {
    r(this._graphicsViewsFeatureCollectionMap) ? yield* this._graphicsViewsFeatureCollectionMap.keys() : r(this._graphicsViews) ? yield* this._graphicsViews : yield* [];
  }
  async hitTest(e2, i3) {
    return Array.from(this.graphicsViews(), (i4) => {
      const s = i4.hitTest(e2);
      if (r(this._graphicsViewsFeatureCollectionMap)) {
        const e3 = this._graphicsViewsFeatureCollectionMap.get(i4);
        for (const i5 of s)
          !i5.popupTemplate && e3.popupTemplate && (i5.popupTemplate = e3.popupTemplate), i5.sourceLayer = i5.layer = this.layer;
      }
      return s;
    }).flat().map((i4) => ({ type: "graphic", graphic: i4, layer: this.layer, mapPoint: e2 }));
  }
  highlight(e2) {
    let t2;
    return "number" == typeof e2 ? t2 = [e2] : e2 instanceof g ? t2 = [e2.uid] : Array.isArray(e2) && e2.length > 0 ? t2 = "number" == typeof e2[0] ? e2 : e2.map((e3) => e3 && e3.uid) : j.isCollection(e2) && (t2 = e2.map((e3) => e3 && e3.uid).toArray()), t2 = t2.filter((e3) => null != e3), t2.length ? (this._addHighlight(t2), { remove: () => {
      this._removeHighlight(t2);
    } }) : w;
  }
  update(e2) {
    for (const i3 of this.graphicsViews())
      i3.processUpdate(e2);
  }
  attach() {
    const e2 = this.view, i3 = () => this.requestUpdate(), s = this.layer.featureCollections;
    if (r(s) && s.length) {
      this._graphicsViewsFeatureCollectionMap = /* @__PURE__ */ new Map();
      for (const t2 of s) {
        const s2 = new i2(this.view.featuresTilingScheme), r3 = new oe({ view: e2, graphics: t2.source, renderer: t2.renderer, requestUpdateCallback: i3, container: s2 });
        this._graphicsViewsFeatureCollectionMap.set(r3, t2), this.container.addChild(r3.container), this.handles.add([l(() => t2.visible, (e3) => r3.container.visible = e3, h), l(() => r3.updating, () => this.notifyChange("updating"), h)], m);
      }
      this._updateHighlight();
    } else
      r(this.layer.sublayers) && this.handles.add(a(() => this.layer.sublayers, "change", () => this._createGraphicsViews(), { onListenerAdd: () => this._createGraphicsViews(), onListenerRemove: () => this._destroyGraphicsViews() }), f);
  }
  detach() {
    this._destroyGraphicsViews(), this.handles.remove(f);
  }
  moveStart() {
  }
  moveEnd() {
  }
  viewChange() {
    for (const e2 of this.graphicsViews())
      e2.viewChange();
  }
  isUpdating() {
    for (const e2 of this.graphicsViews())
      if (e2.updating)
        return true;
    return false;
  }
  _destroyGraphicsViews() {
    this.container.removeAllChildren(), this.handles.remove(m);
    for (const e2 of this.graphicsViews())
      e2.destroy();
    this._graphicsViews = null, this._graphicsViewsFeatureCollectionMap = null;
  }
  _createGraphicsViews() {
    if (this._destroyGraphicsViews(), t(this.layer.sublayers))
      return;
    const e2 = [], i3 = this.view, s = () => this.requestUpdate();
    for (const t2 of this.layer.sublayers) {
      const r3 = new i(), a2 = new i2(this.view.featuresTilingScheme);
      a2.fadeTransitionEnabled = true;
      const n2 = new oe({ view: i3, graphics: t2.graphics, requestUpdateCallback: s, container: a2 });
      this.handles.add([t2.on("graphic-update", n2.graphicUpdateHandler), l(() => t2.visible, (e3) => n2.container.visible = e3, h), l(() => n2.updating, () => this.notifyChange("updating"), h)], m), r3.addChild(n2.container), this.container.addChild(r3), e2.push(n2);
    }
    this._graphicsViews = e2, this._updateHighlight();
  }
  _addHighlight(e2) {
    for (const i3 of e2)
      if (this._highlightIds.has(i3)) {
        const e3 = this._highlightIds.get(i3);
        this._highlightIds.set(i3, e3 + 1);
      } else
        this._highlightIds.set(i3, 1);
    this._updateHighlight();
  }
  _removeHighlight(e2) {
    for (const i3 of e2)
      if (this._highlightIds.has(i3)) {
        const e3 = this._highlightIds.get(i3) - 1;
        0 === e3 ? this._highlightIds.delete(i3) : this._highlightIds.set(i3, e3);
      }
    this._updateHighlight();
  }
  _updateHighlight() {
    const e2 = Array.from(this._highlightIds.keys());
    for (const i3 of this.graphicsViews())
      i3.setHighlight(e2);
  }
};
y2 = e([n("esri.views.2d.layers.MapNotesLayerView2D")], y2);
var _ = y2;
export {
  _ as default
};
//# sourceMappingURL=MapNotesLayerView2D-WI7USEDY.js.map
