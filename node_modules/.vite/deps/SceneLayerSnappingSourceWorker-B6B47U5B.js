import {
  G
} from "./chunk-FXVIA5BW.js";
import {
  m
} from "./chunk-DJMOV3FK.js";
import "./chunk-WWLBKNPY.js";
import {
  b,
  j,
  v
} from "./chunk-77RDPZ67.js";
import "./chunk-ZNZ4EIIF.js";
import "./chunk-4OM3EX6P.js";
import "./chunk-ZX55SO5Y.js";
import {
  N,
  R,
  k2 as k
} from "./chunk-FCIHN4UG.js";
import "./chunk-RUM3DXFX.js";
import "./chunk-X6GHUY4U.js";
import "./chunk-3OFVLRSL.js";
import "./chunk-XP6I2GEX.js";
import "./chunk-67RD6CZ4.js";
import "./chunk-XFDO4CMR.js";
import "./chunk-IVLBGTXL.js";
import "./chunk-GHN7C53L.js";
import {
  q as q2
} from "./chunk-O5HVKKEP.js";
import "./chunk-IPJF6OUC.js";
import "./chunk-NWERINOI.js";
import "./chunk-OEFH2SLX.js";
import "./chunk-K3WMIXIE.js";
import "./chunk-I4YZGF7W.js";
import "./chunk-65ZBTSJX.js";
import "./chunk-FZSI6IGI.js";
import "./chunk-36RXM3AP.js";
import "./chunk-OJ2HHY2O.js";
import "./chunk-75RMBUYZ.js";
import "./chunk-TJ2I6XQT.js";
import "./chunk-EDHROVWI.js";
import "./chunk-34YPGGJT.js";
import "./chunk-TWJNUVV2.js";
import "./chunk-NCXAKZRR.js";
import "./chunk-DUCSW4OU.js";
import "./chunk-WVDA5Z37.js";
import "./chunk-EGV5SNBD.js";
import "./chunk-ZEEU5HOK.js";
import "./chunk-FFVIDMFN.js";
import "./chunk-W62B63EU.js";
import "./chunk-N43PI2UO.js";
import "./chunk-NDQ5FHGV.js";
import "./chunk-ZWUEORSX.js";
import "./chunk-ZPYDYUP5.js";
import "./chunk-CZBRZ6SU.js";
import "./chunk-RT3T2K4S.js";
import "./chunk-WJCI2CGX.js";
import "./chunk-376OPXM4.js";
import "./chunk-DER356EU.js";
import "./chunk-IWQ7452U.js";
import "./chunk-NAN5J6QS.js";
import "./chunk-6M2AHKYV.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-RAX2HD42.js";
import "./chunk-ZYRIJWLX.js";
import "./chunk-C5H57NTD.js";
import {
  q,
  u,
  x
} from "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import {
  n,
  t as t2
} from "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import "./chunk-3MNMDUQZ.js";
import "./chunk-UWG37XSU.js";
import "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import "./chunk-RXYULINL.js";
import "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import "./chunk-KAN4HXCG.js";
import "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-7QMMKGW4.js";
import {
  e,
  n2
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import {
  f
} from "./chunk-MJXQTGI2.js";
import "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import {
  i,
  t
} from "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/sceneLayerSource/sceneLayerSnappingUtils.js
var t3 = 1e3;
function a(t4, a2, e2) {
  const i2 = R(), m2 = k(i2);
  return q(m2, m2, t4, 0.5), q(m2, m2, a2, 0.5), i2[3] = x(m2, t4), u(m2, m2, e2), i2;
}

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/sceneLayerSource/SceneLayerSnappingSourceWorker.js
var j2 = class {
  constructor() {
    this._idToComponent = /* @__PURE__ */ new Map(), this._components = new G((e2) => e2.bounds), this._edges = new G((e2) => e2.bounds), this._tmpLineSegment = v(), this._tmpP1 = n(), this._tmpP2 = n(), this._tmpP3 = n(), this.remoteClient = null;
  }
  async fetchCandidates(e2, t4) {
    await Promise.resolve(), f(t4), await this._ensureEdgeLocations(e2, t4);
    const s = [];
    return this._edges.forEachNeighbor((t5) => (this._addCandidates(e2, t5, s), s.length < t3), e2.bounds), { result: { candidates: s } };
  }
  async _ensureEdgeLocations(e2, o) {
    const n3 = [];
    if (this._components.forEachNeighbor((e3) => {
      if (t(e3.info)) {
        const { id: t4, uid: s } = e3;
        n3.push({ id: t4, uid: s });
      }
      return true;
    }, e2.bounds), !n3.length)
      return;
    const i2 = { components: n3 }, r = await this.remoteClient.invoke("fetchAllEdgeLocations", i2, i(o, {}));
    for (const t4 of r.components)
      this._setFetchEdgeLocations(t4);
  }
  async add(e2) {
    const t4 = new E(e2.id, e2.bounds);
    return this._idToComponent.set(t4.id, t4), this._components.add([t4]), { result: {} };
  }
  async remove(e2) {
    const t4 = this._idToComponent.get(e2.id);
    if (t4) {
      const e3 = [];
      this._edges.forEachNeighbor((s) => (s.component === t4 && e3.push(s), true), t4.bounds), this._edges.remove(e3), this._components.remove([t4]), this._idToComponent.delete(t4.id);
    }
    return { result: {} };
  }
  _setFetchEdgeLocations(e2) {
    const s = this._idToComponent.get(e2.id);
    if (t(s) || e2.uid !== s.uid)
      return;
    const o = m.createView(e2.locations), n3 = new Array(o.count), i2 = n(), r = n();
    for (let t4 = 0; t4 < o.count; t4++) {
      o.position0.getVec(t4, i2), o.position1.getVec(t4, r);
      const d = a(i2, r, e2.origin), c2 = new C(s, t4, d);
      n3[t4] = c2;
    }
    this._edges.add(n3);
    const { objectIds: c, origin: a2 } = e2;
    s.info = { locations: o, objectIds: c, origin: a2 };
  }
  _addCandidates(e2, t4, s) {
    const { locations: o, origin: n3, objectIds: r } = t4.component.info, d = o.position0.getVec(t4.index, this._tmpP1), c = o.position1.getVec(t4.index, this._tmpP2);
    u(d, d, n3), u(c, c, n3);
    const a2 = r[o.componentIndex.get(t4.index)];
    this._addEdgeCandidate(e2, a2, d, c, s), this._addVertexCandidate(e2, a2, d, s), this._addVertexCandidate(e2, a2, c, s);
  }
  _addEdgeCandidate(e2, t4, s, o, n3) {
    if (!(e2.types & q2.EDGE))
      return;
    const i2 = k(e2.bounds), d = b(s, o, this._tmpLineSegment), a2 = j(d, i2, this._tmpP3);
    if (!N(e2.bounds, a2))
      return null;
    n3.push({ type: "edge", objectId: t4, target: t2(a2), distance: x(i2, a2), start: t2(s), end: t2(o) });
  }
  _addVertexCandidate(e2, t4, s, o) {
    if (!(e2.types & q2.VERTEX))
      return;
    const n3 = k(e2.bounds);
    if (!N(e2.bounds, s))
      return null;
    o.push({ type: "vertex", objectId: t4, target: t2(s), distance: x(n3, s) });
  }
};
j2 = e([n2("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")], j2);
var y = j2;
var E = class {
  constructor(e2, t4) {
    this.id = e2, this.bounds = t4, this.info = null, this.uid = ++E.uid;
  }
};
E.uid = 0;
var C = class {
  constructor(e2, t4, s) {
    this.component = e2, this.index = t4, this.bounds = s;
  }
};
export {
  y as default
};
//# sourceMappingURL=SceneLayerSnappingSourceWorker-B6B47U5B.js.map
