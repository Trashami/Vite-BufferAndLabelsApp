import {
  H as H5,
  V as V2
} from "./chunk-7UVYS6N7.js";
import {
  p as p4,
  s as s14
} from "./chunk-TMILTRNC.js";
import {
  f as f8
} from "./chunk-ZGU5MP3X.js";
import {
  _ as _7,
  c as c8,
  i as i11
} from "./chunk-KPTMJVEB.js";
import {
  v as v5
} from "./chunk-T6LV2MRC.js";
import {
  k as k4,
  l as l17,
  p as p3
} from "./chunk-FS3REKZ4.js";
import {
  A as A5,
  j as j4,
  r as r14,
  s as s13
} from "./chunk-LX3EHQCS.js";
import {
  s as s12
} from "./chunk-ELKWN2M6.js";
import {
  u as u17
} from "./chunk-5OCDKMG5.js";
import {
  t as t11
} from "./chunk-BU5AMSMP.js";
import {
  G as G2,
  H as H3,
  U,
  s2 as s11,
  u as u16
} from "./chunk-FXVIA5BW.js";
import {
  o as o13
} from "./chunk-WWLBKNPY.js";
import {
  v as v4
} from "./chunk-IJUE2JUP.js";
import {
  B,
  E as E8,
  P as P3,
  a as a9,
  b as b6,
  c as c4,
  d as d2,
  e as e12,
  f as f4,
  f2 as f7,
  h as h9,
  i as i8,
  l as l16,
  m as m4,
  m2 as m5,
  o as o11,
  s as s9,
  u as u14,
  u2 as u15,
  y as y3,
  y2 as y4
} from "./chunk-7ZSUZDMT.js";
import {
  s as s10
} from "./chunk-OF6PIPJD.js";
import {
  d as d3,
  i as i6
} from "./chunk-5OCLJKTT.js";
import {
  A as A4,
  E as E7,
  S as S2,
  _ as _6,
  a as a11,
  c as c6,
  l as l15
} from "./chunk-5SEVEYDG.js";
import {
  M as M3,
  b as b5,
  k as k3,
  v as v2
} from "./chunk-77RDPZ67.js";
import {
  T
} from "./chunk-ZNZ4EIIF.js";
import {
  c as c7
} from "./chunk-KBM2LGNP.js";
import {
  L as L3,
  P as P4,
  e as e11,
  i as i9,
  o as o10,
  t as t8
} from "./chunk-HP6QT5KY.js";
import {
  d2 as d4,
  h as h6,
  o2 as o6,
  t as t7
} from "./chunk-WEBU4A2Q.js";
import {
  e as e13,
  t as t9
} from "./chunk-6WTG5RYO.js";
import {
  E as E4,
  E2 as E6,
  L as L2,
  c as c5,
  d as d5,
  d2 as d6,
  e as e10,
  f as f5,
  f2 as f6,
  h as h7,
  l as l13,
  o as o7,
  o2 as o8,
  r as r11,
  r2 as r13,
  s as s7,
  u as u12,
  u2 as u13,
  v2 as v3,
  x as x6
} from "./chunk-HNRPDSCT.js";
import {
  o as o12
} from "./chunk-S6WNSMC7.js";
import {
  i as i7
} from "./chunk-AMNM3DGI.js";
import {
  h as h5
} from "./chunk-SBPLVEUA.js";
import {
  W,
  _ as _5,
  a as a10,
  h as h8,
  l as l14,
  s as s8
} from "./chunk-MOPTUDCV.js";
import {
  O as O3,
  a as a8,
  i as i5,
  l as l11,
  n as n14,
  u as u9
} from "./chunk-D2XA6Z6P.js";
import {
  o as o9
} from "./chunk-MYQCUAHK.js";
import {
  E2 as E5,
  n as n15,
  u as u11,
  x as x5
} from "./chunk-O4DPVR3F.js";
import {
  E as E3
} from "./chunk-MATM5L52.js";
import {
  R as R3,
  Y as Y2,
  _ as _4,
  j as j3,
  l as l10,
  p2,
  q
} from "./chunk-ZX55SO5Y.js";
import {
  C,
  R as R2,
  d,
  f2,
  h as h3,
  k,
  p
} from "./chunk-FCIHN4UG.js";
import {
  n as n11,
  r as r9,
  t as t6
} from "./chunk-A22ACVMF.js";
import {
  O as O2
} from "./chunk-RUM3DXFX.js";
import {
  u as u8
} from "./chunk-5ZAWCTS6.js";
import {
  D as D2,
  E as E2,
  F as F3,
  G,
  I as I2,
  L,
  M,
  P as P2,
  R,
  V,
  Y,
  _ as _3
} from "./chunk-3OFVLRSL.js";
import {
  c as c3,
  l as l8
} from "./chunk-4NNECS4K.js";
import {
  i as i4,
  u as u7,
  x as x4
} from "./chunk-67RD6CZ4.js";
import {
  e as e8,
  o as o4,
  r as r7
} from "./chunk-IVLBGTXL.js";
import {
  e as e7
} from "./chunk-GHN7C53L.js";
import {
  n as n13
} from "./chunk-UDYHZLTE.js";
import {
  r as r12
} from "./chunk-4JNOVZUK.js";
import {
  a as a7
} from "./chunk-ZNRXLY4R.js";
import {
  A as A3,
  E,
  H as H2,
  a as a6,
  b as b4,
  g as g2,
  j as j2,
  l as l7,
  o as o5,
  r as r8,
  s as s5,
  v
} from "./chunk-75RMBUYZ.js";
import {
  t as t10
} from "./chunk-TM6KXMYT.js";
import {
  H as H4,
  T as T2
} from "./chunk-QGJM2PN7.js";
import {
  M as M2,
  e as e9,
  f as f3,
  g as g3,
  h as h4,
  k as k2,
  l as l12,
  m as m3,
  s as s6,
  u as u10
} from "./chunk-EGV5SNBD.js";
import {
  F as F4,
  I as I3
} from "./chunk-LT5KLTS5.js";
import {
  l as l9
} from "./chunk-MFXTPFHI.js";
import {
  n as n12,
  r as r10
} from "./chunk-ZEEU5HOK.js";
import {
  Zn,
  ee,
  pn,
  xn
} from "./chunk-FFVIDMFN.js";
import {
  i as i3,
  s as s4
} from "./chunk-N43PI2UO.js";
import {
  n as n9
} from "./chunk-O6VYMEIX.js";
import {
  _ as _2,
  l as l6,
  n as n10,
  r as r6,
  t as t5
} from "./chunk-NDQ5FHGV.js";
import {
  n as n8,
  r as r5
} from "./chunk-QEYOWTXD.js";
import {
  A as A2,
  F as F2,
  Q,
  b as b3,
  c as c2,
  h as h2,
  l as l5,
  m as m2,
  n as n7,
  o as o3,
  u as u6,
  x as x3
} from "./chunk-RT3T2K4S.js";
import {
  $,
  u as u4
} from "./chunk-WJCI2CGX.js";
import {
  I,
  N,
  y as y2
} from "./chunk-XMZAPOBR.js";
import {
  i as i10
} from "./chunk-DER356EU.js";
import {
  i as i2,
  x as x2
} from "./chunk-NRP45AHD.js";
import {
  a as a5,
  u as u5,
  z as z2
} from "./chunk-6M2AHKYV.js";
import {
  a as a3,
  h,
  l as l2
} from "./chunk-C5H57NTD.js";
import {
  A,
  F,
  H,
  J,
  O,
  P,
  S,
  X,
  Z,
  _,
  e as e3,
  g,
  j,
  o,
  r as r3,
  s as s2,
  u,
  x,
  z
} from "./chunk-3LR5O4WA.js";
import {
  D,
  a as a2,
  b as b2,
  r as r4,
  w as w2
} from "./chunk-GDVNKPJ7.js";
import {
  b,
  e as e2,
  l,
  n,
  r as r2,
  t as t2
} from "./chunk-D4V6J5BT.js";
import {
  c,
  o as o2,
  u2 as u3
} from "./chunk-3MNMDUQZ.js";
import {
  a as a4,
  l as l4,
  w as w3
} from "./chunk-5NXILPDI.js";
import {
  n as n6
} from "./chunk-THVR7IAM.js";
import {
  e as e4,
  e4 as e6,
  l as l3,
  m,
  n2 as n3,
  n5 as n4,
  n6 as n5,
  t5 as t4,
  u2,
  y
} from "./chunk-OOLCFNXJ.js";
import {
  e as e5
} from "./chunk-U2XHEJM7.js";
import {
  f
} from "./chunk-MJXQTGI2.js";
import {
  n as n2
} from "./chunk-BTUHYGXO.js";
import {
  s2 as s3
} from "./chunk-UA3YPL2R.js";
import {
  has
} from "./chunk-HVKDYDPP.js";
import {
  t2 as t3
} from "./chunk-6QC7MLLS.js";
import {
  a,
  e,
  i,
  r,
  s,
  t,
  w
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/views/3d/layers/graphics/graphicUtils.js
function A6(t22, e20) {
  if ("point" === t22.type)
    return F5(t22, e20, false);
  if (l17(t22))
    switch (t22.type) {
      case "extent":
        return F5(t22.center, e20, false);
      case "polygon":
        return F5(t22.centroid, e20, false);
      case "polyline":
        return F5(M4(t22), e20, true);
      case "mesh":
        return F5(t22.origin, e20, false);
    }
  else
    switch (t22.type) {
      case "extent":
        return F5(P5(t22), e20, true);
      case "polygon":
        return F5(k5(t22), e20, true);
      case "polyline":
        return F5(M4(t22), e20, true);
    }
}
function M4(t22) {
  const e20 = t22.paths[0];
  if (!e20 || 0 === e20.length)
    return null;
  const r25 = u3(e20, c(e20) / 2);
  return v4(r25[0], r25[1], r25[2], t22.spatialReference);
}
function P5(t22) {
  const e20 = isFinite(t22.zmin);
  return v4(0.5 * (t22.xmax + t22.xmin), 0.5 * (t22.ymax + t22.ymin), e20 ? 0.5 * (t22.zmax + t22.zmin) : void 0, t22.spatialReference);
}
function k5(t22) {
  const e20 = t22.rings[0];
  if (!e20 || 0 === e20.length)
    return null;
  const r25 = o2(t22.rings, t22.hasZ);
  return v4(r25[0], r25[1], r25[2], t22.spatialReference);
}
function F5(t22, e20, r25) {
  const n23 = r25 ? t22 : k4(t22);
  return e20 && t22 ? pn(t22, n23, e20) ? n23 : null : n23;
}
function z3(t22, e20, r25, n23 = 0) {
  if (t22) {
    e20 || (e20 = u5());
    const o20 = t22;
    let i23 = 0.5 * o20.width * (r25 - 1), s27 = 0.5 * o20.height * (r25 - 1);
    return o20.width < 1e-7 * o20.height ? i23 += s27 / 20 : o20.height < 1e-7 * o20.width && (s27 += i23 / 20), r4(e20, o20.xmin - i23 - n23, o20.ymin - s27 - n23, o20.xmax + i23 + n23, o20.ymax + s27 + n23), e20;
  }
  return null;
}
function U2(t22, e20) {
  for (let r25 = 0; r25 < t22.geometries.length; ++r25) {
    const n23 = t22.geometries[r25].getMutableAttribute(O2.AUXPOS1);
    n23 && n23.data[3] !== e20 && (n23.data[3] = e20, t22.geometryVertexAttrsUpdated(t22.geometryRecords[r25]));
  }
}
function B2(e20, r25) {
  const n23 = t5(_2);
  return r(e20) && (n23[0] = e20[0], n23[1] = e20[1], n23[2] = e20[2]), r(r25) ? n23[3] = r25 : r(e20) && e20.length > 3 && (n23[3] = e20[3]), n23;
}
function I4(t22 = l, r25, n23, o20 = 1) {
  const i23 = new Array(3);
  if (t(r25) || t(n23))
    i23[0] = 1, i23[1] = 1, i23[2] = 1;
  else {
    let e20, o21 = 0;
    for (let s27 = 2; s27 >= 0; s27--) {
      const u20 = t22[s27];
      let a17;
      const m12 = null != u20, l23 = 0 === s27 && !e20 && !m12, c16 = n23[s27];
      "symbol-value" === u20 || l23 ? a17 = 0 !== c16 ? r25[s27] / c16 : 1 : m12 && "proportional" !== u20 && isFinite(u20) && (a17 = 0 !== c16 ? u20 / c16 : 1), null != a17 && (i23[s27] = a17, e20 = a17, o21 = Math.max(o21, Math.abs(a17)));
    }
    for (let t23 = 2; t23 >= 0; t23--)
      null == i23[t23] ? i23[t23] = e20 : 0 === i23[t23] && (i23[t23] = 1e-3 * o21);
  }
  for (let e20 = 2; e20 >= 0; e20--)
    i23[e20] /= o20;
  return e2(i23);
}
function O4(t22) {
  return null != t22.isPrimitive;
}
function S3(t22) {
  return O4(t22) && (t22 = [t22.width, t22.depth, t22.height]), V3(t22) ? null : "Symbol sizes may not be negative values";
}
function V3(t22) {
  if (Array.isArray(t22)) {
    for (const e20 of t22)
      if (!V3(e20))
        return false;
    return true;
  }
  return null == t22 || t22 >= 0;
}
function G3(t22, e20, r25, u20 = e8()) {
  const a17 = t22 || 0, m12 = e20 || 0, l23 = r25 || 0;
  return 0 !== a17 && m2(u20, u20, -a17 / 180 * Math.PI), 0 !== m12 && b3(u20, u20, m12 / 180 * Math.PI), 0 !== l23 && l5(u20, u20, l23 / 180 * Math.PI), u20;
}
function X2(t22, e20, n23) {
  if (null != n23.minDemResolution)
    return n23.minDemResolution;
  const o20 = $(e20), i23 = I(t22) * o20, s27 = y2(t22) * o20, u20 = N(t22) * (e20.isGeographic ? 1 : o20);
  return 0 === i23 && 0 === s27 && 0 === u20 ? n23.minDemResolutionForPoints : 0.01 * Math.max(i23, s27, u20);
}

// node_modules/@arcgis/core/layers/graphics/dehydratedFeatureUtils.js
function t12(t22) {
  return "point" === t22.type;
}

// node_modules/@arcgis/core/views/3d/support/ElevationProvider.js
var t13 = class {
  constructor(e20, r25 = null, t22 = 0) {
    this.array = e20, this.spatialReference = r25, this.offset = t22;
  }
};
function a12(e20) {
  return "array" in e20;
}
function i12(t22, i23, n23 = "ground") {
  if (t12(i23))
    return t22.getElevation(i23.x, i23.y, i23.z || 0, i23.spatialReference, n23);
  if (a12(i23)) {
    let r25 = i23.offset;
    return t22.getElevation(i23.array[r25++], i23.array[r25++], i23.array[r25] || 0, i(i23.spatialReference, t22.spatialReference), n23);
  }
  return t22.getElevation(i23[0], i23[1], i23[2] || 0, t22.spatialReference, n23);
}

// node_modules/@arcgis/core/views/3d/layers/graphics/elevationAlignmentUtils.js
function f9(e20, t22, n23, o20, r25, s27, a17, l23, c16, u20, f17) {
  const d14 = O5[f17.mode];
  let m12, p10, g7 = 0;
  if (xn(e20, t22, n23, o20, c16.spatialReference, r25, l23))
    return d14.requiresAlignment(f17) ? (g7 = d14.applyElevationAlignmentBuffer(o20, r25, s27, a17, l23, c16, u20, f17), m12 = s27, p10 = a17) : (m12 = o20, p10 = r25), xn(m12, c16.spatialReference, p10, s27, u20.spatialReference, a17, l23) ? g7 : void 0;
}
function d7(n23, o20, r25, i23, s27) {
  const l23 = (t12(n23) ? n23.z : a12(n23) ? n23.array[n23.offset + 2] : n23[2]) || 0;
  switch (r25.mode) {
    case "on-the-ground": {
      const e20 = i(i12(o20, n23, "ground"), 0);
      return s27.verticalDistanceToGround = 0, s27.sampledElevation = e20, void (s27.z = e20);
    }
    case "relative-to-ground": {
      const e20 = i(i12(o20, n23, "ground"), 0), a17 = r25.geometryZWithOffset(l23, i23);
      return s27.verticalDistanceToGround = a17, s27.sampledElevation = e20, void (s27.z = a17 + e20);
    }
    case "relative-to-scene": {
      const e20 = i(i12(o20, n23, "scene"), 0), a17 = r25.geometryZWithOffset(l23, i23);
      return s27.verticalDistanceToGround = a17, s27.sampledElevation = e20, void (s27.z = a17 + e20);
    }
    case "absolute-height": {
      const e20 = r25.geometryZWithOffset(l23, i23), a17 = i(i12(o20, n23, "ground"), 0);
      return s27.verticalDistanceToGround = e20 - a17, s27.sampledElevation = a17, void (s27.z = e20);
    }
    default:
      return n9(r25.mode), void (s27.z = 0);
  }
}
function m6(e20, t22, n23, o20) {
  return d7(e20, t22, n23, o20, z4), z4.z;
}
function p5(e20, t22, n23) {
  return null == t22 || null == n23 ? e20.definedChanged : "on-the-ground" === t22 && "on-the-ground" === n23 ? e20.staysOnTheGround : t22 === n23 || "on-the-ground" !== t22 && "on-the-ground" !== n23 ? x7.UPDATE : e20.onTheGroundChanged;
}
function g4(e20) {
  return "relative-to-ground" === e20 || "relative-to-scene" === e20;
}
function v6(e20) {
  return "absolute-height" !== e20;
}
function h10(e20, t22, o20, r25, i23) {
  d7(t22, o20, i23, r25, z4), U2(e20, z4.verticalDistanceToGround);
  const a17 = z4.sampledElevation, c16 = n7(U3, e20.transformation);
  C2[0] = t22.x, C2[1] = t22.y, C2[2] = z4.z;
  return Zn(t22.spatialReference, C2, c16, r25.spatialReference) ? e20.transformation = c16 : console.warn("Could not locate symbol object properly, it might be misplaced"), a17;
}
function E9(e20, n23, o20, r25, i23, s27) {
  let a17 = 0;
  const l23 = s27.spatialReference;
  n23 *= 3, r25 *= 3;
  for (let c16 = 0; c16 < i23; ++c16) {
    const i24 = e20[n23 + 0], c17 = e20[n23 + 1], u20 = e20[n23 + 2], f17 = i(s27.getElevation(i24, c17, u20, l23, "ground"), 0);
    a17 += f17, o20[r25 + 0] = i24, o20[r25 + 1] = c17, o20[r25 + 2] = f17, n23 += 3, r25 += 3;
  }
  return a17 / i23;
}
function y5(e20, n23, o20, r25, i23, s27, a17, l23) {
  let c16 = 0;
  const u20 = l23.calculateOffsetRenderUnits(a17), f17 = l23.featureExpressionInfoContext, d14 = s27.spatialReference;
  n23 *= 3, r25 *= 3;
  for (let m12 = 0; m12 < i23; ++m12) {
    const i24 = e20[n23 + 0], a18 = e20[n23 + 1], l24 = e20[n23 + 2], m13 = i(s27.getElevation(i24, a18, l24, d14, "ground"), 0);
    c16 += m13, o20[r25 + 0] = i24, o20[r25 + 1] = a18, o20[r25 + 2] = null == f17 ? l24 + m13 + u20 : m13 + u20, n23 += 3, r25 += 3;
  }
  return c16 / i23;
}
function A7(e20, n23, o20, r25, i23, s27, a17, l23) {
  let c16 = 0;
  const u20 = l23.calculateOffsetRenderUnits(a17), f17 = l23.featureExpressionInfoContext, d14 = s27.spatialReference;
  n23 *= 3, r25 *= 3;
  for (let m12 = 0; m12 < i23; ++m12) {
    const i24 = e20[n23 + 0], a18 = e20[n23 + 1], l24 = e20[n23 + 2], m13 = i(s27.getElevation(i24, a18, l24, d14, "scene"), 0);
    c16 += m13, o20[r25 + 0] = i24, o20[r25 + 1] = a18, o20[r25 + 2] = null == f17 ? l24 + m13 + u20 : m13 + u20, n23 += 3, r25 += 3;
  }
  return c16 / i23;
}
function R4(e20) {
  const t22 = e20.meterUnitOffset, n23 = e20.featureExpressionInfoContext;
  return 0 !== t22 || null != n23;
}
function T3(e20, t22, n23, o20, r25, i23, s27, a17) {
  const l23 = a17.calculateOffsetRenderUnits(s27), c16 = a17.featureExpressionInfoContext;
  t22 *= 3, o20 *= 3;
  for (let u20 = 0; u20 < r25; ++u20) {
    const r26 = e20[t22 + 0], i24 = e20[t22 + 1], s28 = e20[t22 + 2];
    n23[o20 + 0] = r26, n23[o20 + 1] = i24, n23[o20 + 2] = null == c16 ? s28 + l23 : l23, t22 += 3, o20 += 3;
  }
  return 0;
}
var j5 = class {
  constructor() {
    this.verticalDistanceToGround = 0, this.sampledElevation = 0, this.z = 0;
  }
};
var x7;
!function(e20) {
  e20[e20.NONE = 0] = "NONE", e20[e20.UPDATE = 1] = "UPDATE", e20[e20.RECREATE = 2] = "RECREATE";
}(x7 || (x7 = {}));
var O5 = { "absolute-height": { applyElevationAlignmentBuffer: T3, requiresAlignment: R4 }, "on-the-ground": { applyElevationAlignmentBuffer: E9, requiresAlignment: () => true }, "relative-to-ground": { applyElevationAlignmentBuffer: y5, requiresAlignment: () => true }, "relative-to-scene": { applyElevationAlignmentBuffer: A7, requiresAlignment: () => true } };
var U3 = e8();
var z4 = new j5();
var C2 = n();

// node_modules/@arcgis/core/views/3d/layers/graphics/featureExpressionInfoUtils.js
var c9 = s3.getLogger("esri.views.3d.layers.graphics.featureExpressionInfoUtils");
function o14(e20) {
  return { cachedResult: e20.cachedResult, arcade: e20.arcade ? { func: e20.arcade.func, context: e20.arcade.modules.arcadeUtils.createExecContext(null, { sr: e20.arcade.context.spatialReference }), modules: e20.arcade.modules } : null };
}
async function u18(e20, r25, c16, o20) {
  const a17 = e20 && e20.expression;
  if ("string" != typeof a17)
    return null;
  const u20 = m7(a17);
  if (null != u20)
    return { cachedResult: u20 };
  const s27 = await i10();
  f(c16);
  const i23 = s27.arcadeUtils, l23 = i23.createSyntaxTree(a17);
  return i23.dependsOnView(l23) ? (null != o20 && o20.error("Expressions containing '$view' are not supported on ElevationInfo"), { cachedResult: 0 }) : { arcade: { func: i23.createFunction(l23), context: i23.createExecContext(null, { sr: r25 }), modules: s27 } };
}
function s15(e20, t22, r25) {
  return e20.arcadeUtils.createFeature(t22.attributes, t22.geometry, r25);
}
function i13(e20, t22) {
  if (null != e20 && !p6(e20)) {
    if (!t22 || !e20.arcade)
      return void c9.errorOncePerTick("Arcade support required but not provided");
    const n23 = t22;
    n23._geometry && (n23._geometry = p3(n23._geometry)), e20.arcade.modules.arcadeUtils.updateExecContext(e20.arcade.context, t22);
  }
}
function l18(e20) {
  if (null != e20) {
    if (p6(e20))
      return e20.cachedResult;
    const t22 = e20.arcade;
    let r25 = e20.arcade.modules.arcadeUtils.executeFunction(t22.func, t22.context);
    return "number" != typeof r25 && (e20.cachedResult = 0, r25 = 0), r25;
  }
  return 0;
}
function d8(e20, t22 = false) {
  let r25 = e20 && e20.featureExpressionInfo;
  const n23 = r25 && r25.expression;
  return t22 || "0" === n23 || (r25 = null), r25;
}
var f10 = { cachedResult: 0 };
function p6(e20) {
  return null != e20.cachedResult;
}
function m7(e20) {
  return "0" === e20 ? 0 : null;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/ElevationContext.js
var h11 = class {
  constructor() {
    this._meterUnitOffset = 0, this._renderUnitOffset = 0, this._unit = "meters", this._metersPerElevationInfoUnit = 1, this._featureExpressionInfoContext = null, this.centerPointInElevationSR = null, this.mode = null;
  }
  get featureExpressionInfoContext() {
    return this._featureExpressionInfoContext;
  }
  get meterUnitOffset() {
    return this._meterUnitOffset;
  }
  get unit() {
    return this._unit;
  }
  set unit(t22) {
    this._unit = t22, this._metersPerElevationInfoUnit = r5(t22);
  }
  get requiresSampledElevationInfo() {
    return "absolute-height" !== this.mode;
  }
  reset() {
    this.mode = null, this._meterUnitOffset = 0, this._renderUnitOffset = 0, this._featureExpressionInfoContext = null, this.unit = "meters";
  }
  set offsetMeters(t22) {
    this._meterUnitOffset = t22, this._renderUnitOffset = 0;
  }
  set offsetElevationInfoUnits(t22) {
    this._meterUnitOffset = t22 * this._metersPerElevationInfoUnit, this._renderUnitOffset = 0;
  }
  addOffsetRenderUnits(t22) {
    this._renderUnitOffset += t22;
  }
  geometryZWithOffset(t22, e20) {
    const n23 = this.calculateOffsetRenderUnits(e20);
    return null != this.featureExpressionInfoContext ? n23 : t22 + n23;
  }
  calculateOffsetRenderUnits(t22) {
    let e20 = this._meterUnitOffset;
    const n23 = this.featureExpressionInfoContext;
    return null != n23 && (e20 += l18(n23) * this._metersPerElevationInfoUnit), e20 / t22.unitInMeters + this._renderUnitOffset;
  }
  setFromElevationInfo(e20) {
    this.mode = e20.mode, this.unit = n8(e20.unit) ? e20.unit : "meters", this.offsetElevationInfoUnits = i(e20.offset, 0);
  }
  updateFeatureExpressionInfoContext(t22, s27, i23) {
    if (t(t22))
      return void (this._featureExpressionInfoContext = null);
    const r25 = t22 && t22.arcade;
    r25 && r(s27) && r(i23) ? (this._featureExpressionInfoContext = o14(t22), i13(this._featureExpressionInfoContext, s15(r25.modules, s27, i23))) : this._featureExpressionInfoContext = t22;
  }
  static fromElevationInfo(t22) {
    const e20 = new h11();
    return r(t22) && e20.setFromElevationInfo(t22), e20;
  }
};

// node_modules/@arcgis/core/views/3d/layers/interfaces.js
var e14;
var t14;
!function(e20) {
  e20[e20.RasterImage = 0] = "RasterImage", e20[e20.Features = 1] = "Features";
}(e14 || (e14 = {})), function(e20) {
  e20[e20.WithRasterImage = 0] = "WithRasterImage", e20[e20.WithoutRasterImage = 1] = "WithoutRasterImage";
}(t14 || (t14 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/GeometryRecord.js
var o15 = class {
  constructor() {
    this._disposed = false;
  }
  get disposed() {
    return this._disposed;
  }
  get shaderTransformation() {
    return this._shaderTransformation;
  }
  acquire(t22, r25, i23, o20, e20, a17) {
    this.id = e6(), this.geometry = t22, this.material = r25, this.transformation = i23, this.instanceParameters = o20, this.origin = e20, this._shaderTransformation = a17, this._disposed = false;
  }
  release() {
    this._disposed = false;
  }
  dispose() {
    this._disposed = true;
  }
  getStaticTransformation() {
    return this.transformation;
  }
  getShaderTransformation() {
    return r(this._shaderTransformation) ? this._shaderTransformation(this.transformation) : this.transformation;
  }
  computeAttachmentOrigin(t22) {
    return !!(this.material.computeAttachmentOrigin ? this.material.computeAttachmentOrigin(this.geometry, t22) : this.geometry.computeAttachmentOrigin(t22)) && (O(t22, t22, this.getStaticTransformation()), true);
  }
};
o15.pool = new e5(o15);

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Object3DStateID.js
var r15 = class {
  constructor(r25) {
    this.channel = r25, this.id = e6();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Object3D.js
var x8 = class extends r11 {
  constructor(t22 = {}) {
    super(), this.type = e10.Object, this._geometryRecords = new Array(), this._geometries = new Array(), this._objectTransformation = e8(), this._bvObjectSpace = new L4(), this._bvWorldSpace = new L4(), this._bvDirty = true, this._hasVolatileTransformation = false, this._visible = true, this.castShadow = null == t22.castShadow || t22.castShadow, this.metadata = t22.metadata, this.metadata && this.metadata.isElevationSource && (this.metadata.lastValidElevationBB = new O6());
    const { geometries: e20, materials: s27, transformations: i23, origins: a17 } = t22;
    if (Array.isArray(e20)) {
      e9(s27.length === e20.length, "Object3D: materials don't match geometries"), e9(i23.length === e20.length, "Object3D: transformations don't match geometries"), this._geometryRecords.length = e20.length, this._geometries.length = e20.length;
      for (let t23 = 0; t23 < e20.length; t23++)
        this._geometries[t23] = e20[t23], this._geometryRecords[t23] = o15.pool.acquire(e20[t23], s27[t23], r7(i23[t23]), { highlights: null, occludees: null, visible: this._visible }, a17 && a17[t23]);
    }
  }
  get geometryRecords() {
    return this._geometryRecords;
  }
  get geometries() {
    return this._geometries;
  }
  get transformation() {
    return this._objectTransformation;
  }
  set transformation(t22) {
    n7(this._objectTransformation, t22), this._invalidateBoundingVolume(), this._emit("objectTransformation", this);
  }
  dispose() {
    this._geometryRecords.length = 0, this._geometries.length = 0;
  }
  get parentLayer() {
    return this._parentLayer;
  }
  set parentLayer(t22) {
    e9(null == this._parentLayer || null == t22, "Object3D can only be added to a single Layer"), this._parentLayer = t22;
  }
  addGeometry(e20, s27, i23, r25, o20) {
    i23 = i23 || o4, this._geometries.push(e20);
    const n23 = o15.pool.acquire(e20, s27, i23, { highlights: null, occludees: null, visible: this._visible }, r25, o20);
    return this._geometryRecords.push(n23), this._hasVolatileTransformation = this._hasVolatileTransformation || r(n23.shaderTransformation), this._emit("objectGeometryAdded", { object: this, record: n23 }), this._invalidateBoundingVolume(), n23;
  }
  removeGeometry(e20) {
    const s27 = this._geometryRecords.splice(e20, 1)[0];
    return this._hasVolatileTransformation = r(s27.shaderTransformation) ? this._geometryRecords.some((e21) => r(e21.shaderTransformation)) : this._hasVolatileTransformation, s27.dispose(), this._geometries.splice(e20, 1), this._emit("objectGeometryRemoved", { object: this, record: s27 }), this._invalidateBoundingVolume(), s27;
  }
  removeAllGeometries() {
    for (; this.geometryRecords.length > 0; )
      this.removeGeometry(0);
  }
  geometryVertexAttrsUpdated(t22) {
    this._emit("vertexAttrsUpdated", { object: this, record: t22 }), this._invalidateBoundingVolume();
  }
  get isVisible() {
    return this._visible;
  }
  setVisible(t22) {
    if (this._visible !== t22) {
      this._visible = t22;
      for (const t23 of this._geometryRecords)
        t23.instanceParameters.visible = this._visible;
      this._emit("visibilityChanged", this);
    }
  }
  maskOccludee() {
    const t22 = new r15(u9.MaskOccludee);
    for (const e20 of this._geometryRecords)
      e20.instanceParameters.occludees = c5(e20.instanceParameters.occludees, t22);
    return this._emit("occlusionChanged", this), t22;
  }
  removeOcclude(t22) {
    for (const e20 of this._geometryRecords)
      e20.instanceParameters.occludees = f6(e20.instanceParameters.occludees, t22);
    this._emit("occlusionChanged", this);
  }
  highlight() {
    const t22 = new r15(u9.Highlight);
    for (const e20 of this._geometryRecords)
      e20.instanceParameters.highlights = c5(e20.instanceParameters.highlights, t22);
    return this._emit("highlightChanged", this), t22;
  }
  removeHighlight(t22) {
    for (const e20 of this._geometryRecords)
      e20.instanceParameters.highlights = f6(e20.instanceParameters.highlights, t22);
    this._emit("highlightChanged", this);
  }
  getCombinedStaticTransformation(t22, e20) {
    return u6(e20, this.transformation, t22.getStaticTransformation());
  }
  _getCombinedShaderTransformation(t22) {
    return u6(e8(), this.transformation, t22.getShaderTransformation());
  }
  hasVolativeTransformation() {
    return this._hasVolatileTransformation;
  }
  get boundingVolumeWorldSpace() {
    return this._validateBoundingVolume(), this._bvWorldSpace;
  }
  get boundingVolumeObjectSpace() {
    return this._validateBoundingVolume(), this._bvObjectSpace;
  }
  _validateBoundingVolume() {
    if (!this._bvDirty && !this._hasVolatileTransformation)
      return;
    this._bvObjectSpace.init(), this._bvWorldSpace.init();
    for (let e20 = 0; e20 < this._geometryRecords.length; ++e20) {
      const s28 = this._geometries[e20], i24 = this._geometryRecords[e20], r26 = s28.boundingInfo;
      r(r26) && (this._calculateTransformedBoundingVolume(r26, this._bvObjectSpace, i24.getShaderTransformation()), this._calculateTransformedBoundingVolume(r26, this._bvWorldSpace, this._getCombinedShaderTransformation(i24)));
    }
    A(this._bvObjectSpace.bounds, this._bvObjectSpace.min, this._bvObjectSpace.max, 0.5), A(this._bvWorldSpace.bounds, this._bvWorldSpace.min, this._bvWorldSpace.max, 0.5);
    const s27 = n(), i23 = n(), r25 = l10(this.transformation);
    for (let t22 = 0; t22 < this._geometryRecords.length; ++t22) {
      const o20 = this._geometries[t22].boundingInfo;
      if (t(o20))
        continue;
      const a17 = this._geometryRecords[t22].getShaderTransformation(), n23 = l10(a17);
      O(s27, o20.getCenter(), a17);
      const c16 = x(s27, this._bvObjectSpace.bounds), l23 = o20.getBSRadius() * n23;
      this._bvObjectSpace.bounds[3] = Math.max(this._bvObjectSpace.bounds[3], c16 + l23), O(i23, s27, this.transformation);
      const d14 = x(i23, this._bvWorldSpace.bounds), g7 = l23 * r25;
      this._bvWorldSpace.bounds[3] = Math.max(this._bvWorldSpace.bounds[3], d14 + g7);
    }
    this._bvDirty = false;
  }
  _calculateTransformedBoundingVolume(t22, e20, s27) {
    const i23 = t22.getBBMin(), r25 = t22.getBBMax(), o20 = t2(i23), a17 = t2(r25);
    O(o20, o20, s27), O(a17, a17, s27);
    for (let n23 = 0; n23 < 3; ++n23)
      e20.min[n23] = Math.min(e20.min[n23], o20[n23], a17[n23]), e20.max[n23] = Math.max(e20.max[n23], o20[n23], a17[n23]);
    for (let n23 = 0; n23 < 3; ++n23) {
      r3(o20, i23), r3(a17, r25), o20[n23] = r25[n23], a17[n23] = i23[n23], O(o20, o20, s27), O(a17, a17, s27);
      for (let t23 = 0; t23 < 3; ++t23)
        e20.min[t23] = Math.min(e20.min[t23], o20[t23], a17[t23]), e20.max[t23] = Math.max(e20.max[t23], o20[t23], a17[t23]);
    }
  }
  _invalidateBoundingVolume() {
    this._bvDirty = true, r(this._parentLayer) && this._parentLayer.notifyObjectBBChanged(this, this._bvWorldSpace.bounds);
  }
  _emit(e20, s27) {
    r(this._parentLayer) && this._parentLayer.events.emit(e20, s27);
  }
  get test() {
    const t22 = this;
    return { hasGeometry: (e20) => t22._geometries.includes(e20), getGeometryIndex: (e20) => t22._geometries.indexOf(e20) };
  }
};
var O6 = class {
  constructor() {
    this.min = r2(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE), this.max = r2(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
  }
  isEmpty() {
    return this.max[0] < this.min[0] && this.max[1] < this.min[1] && this.max[2] < this.min[2];
  }
};
var L4 = class extends O6 {
  constructor() {
    super(...arguments), this.bounds = R2();
  }
  init() {
    o(this.min, Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE), o(this.max, -Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), C(this.bounds);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/DirtyEvents.js
var e15 = ["layerObjectAdded", "layerObjectRemoved", "layerObjectsAdded", "layerObjectsRemoved", "shaderTransformationChanged", "objectTransformation", "visibilityChanged", "occlusionChanged", "highlightChanged", "objectGeometryAdded", "objectGeometryRemoved", "vertexAttrsUpdated"];

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/WebGLLayer.js
var l19 = class extends r11 {
  constructor(s27, r25 = "") {
    var _a, _b, _c;
    super(), this.apiLayerUid = r25, this.type = e10.Layer, this.events = new n6(), this.isSliceable = false, this._objects = new l3(), this._stageHandles = new t4(), this.apiLayerUid = r25, this.isVisible = (_a = s27 == null ? void 0 : s27.isVisible) != null ? _a : true, this.isPickable = (_b = s27 == null ? void 0 : s27.isPickable) != null ? _b : true, this.updatePolicy = (_c = s27 == null ? void 0 : s27.updatePolicy) != null ? _c : i5.ASYNC;
  }
  get objects() {
    return this._objects;
  }
  destroy() {
    this.detachStage(), this._stage = null;
  }
  attachStage(e20) {
    this.detachStage(), this._stage = e20;
    for (const t22 of e15)
      this._stageHandles.add(this.events.on(t22, (s27) => e20.handleEvent(t22, s27)));
  }
  detachStage() {
    this._stageHandles.removeAll(), this.invalidateSpatialQueryAccelerator();
  }
  add(e20) {
    this._objects.push(e20), e20.parentLayer = this, this.events.emit("layerObjectAdded", { layer: this, object: e20 }), r(this._octree) && this._octree.add([e20]);
  }
  remove(e20) {
    this._objects.removeUnordered(e20) && (e20.parentLayer = null, this.events.emit("layerObjectRemoved", { layer: this, object: e20 }), r(this._octree) && this._octree.remove([e20]));
  }
  addMany(e20) {
    this._objects.pushArray(e20);
    for (const t22 of e20)
      t22.parentLayer = this;
    this.events.emit("layerObjectsAdded", { layer: this, objects: e20 }), r(this._octree) && this._octree.add(e20);
  }
  removeMany(e20) {
    const t22 = new Array();
    if (this._objects.removeUnorderedMany(e20, e20.length, t22), 0 !== t22.length) {
      for (const e21 of t22)
        e21.parentLayer = null;
      this.events.emit("layerObjectsRemoved", { layer: this, objects: t22 }), r(this._octree) && this._octree.remove(t22);
    }
  }
  sync() {
    r(this._stage) && this.updatePolicy !== i5.SYNC && this._stage.syncLayer(this.id);
  }
  notifyObjectBBChanged(e20, t22) {
    r(this._octree) && this._octree.update(e20, t22);
  }
  getSpatialQueryAccelerator() {
    return t(this._octree) && this._objects.length > 50 && this._createOctree(), this._octree;
  }
  shaderTransformationChanged() {
    this.invalidateSpatialQueryAccelerator(), this.events.emit("shaderTransformationChanged", this);
  }
  invalidateSpatialQueryAccelerator() {
    this._octree = s(this._octree);
  }
  _createOctree() {
    this._octree = new G2((e20) => e20.boundingVolumeWorldSpace.bounds), this._octree.add(this._objects.data, this._objects.length);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/BufferVectorMath.js
var n16;
!function(n23) {
  function t22(n24, t23) {
    const c17 = n24[t23], o21 = n24[t23 + 1], r26 = n24[t23 + 2];
    return Math.sqrt(c17 * c17 + o21 * o21 + r26 * r26);
  }
  function c16(n24, t23) {
    const c17 = n24[t23], o21 = n24[t23 + 1], r26 = n24[t23 + 2], u21 = 1 / Math.sqrt(c17 * c17 + o21 * o21 + r26 * r26);
    n24[t23] *= u21, n24[t23 + 1] *= u21, n24[t23 + 2] *= u21;
  }
  function o20(n24, t23, c17) {
    n24[t23] *= c17, n24[t23 + 1] *= c17, n24[t23 + 2] *= c17;
  }
  function r25(n24, t23, c17, o21, r26, u21 = t23) {
    (r26 = r26 || n24)[u21] = n24[t23] + c17[o21], r26[u21 + 1] = n24[t23 + 1] + c17[o21 + 1], r26[u21 + 2] = n24[t23 + 2] + c17[o21 + 2];
  }
  function u20(n24, t23, c17, o21, r26, u21 = t23) {
    (r26 = r26 || n24)[u21] = n24[t23] - c17[o21], r26[u21 + 1] = n24[t23 + 1] - c17[o21 + 1], r26[u21 + 2] = n24[t23 + 2] - c17[o21 + 2];
  }
  n23.length = t22, n23.normalize = c16, n23.scale = o20, n23.add = r25, n23.subtract = u20;
}(n16 || (n16 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/GeometryUtil.js
var P6 = n16;
var m8;
var S4;
var z5;
!function(t22) {
  const e20 = 0.5, n23 = [[-e20, -e20, e20], [e20, -e20, e20], [e20, e20, e20], [-e20, e20, e20], [-e20, -e20, -e20], [e20, -e20, -e20], [e20, e20, -e20], [-e20, e20, -e20]], s27 = [0, 0, 1, -1, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, -1], a17 = [0, 0, 1, 0, 1, 1, 0, 1], r25 = [0, 1, 2, 2, 3, 0, 4, 0, 3, 3, 7, 4, 1, 5, 6, 6, 2, 1, 1, 0, 4, 4, 5, 1, 3, 2, 6, 6, 7, 3, 5, 4, 7, 7, 6, 5], o20 = new Array(36);
  for (let c16 = 0; c16 < 6; c16++)
    for (let t23 = 0; t23 < 6; t23++)
      o20[6 * c16 + t23] = c16;
  const l23 = new Array(36);
  for (let c16 = 0; c16 < 6; c16++)
    l23[6 * c16 + 0] = 0, l23[6 * c16 + 1] = 1, l23[6 * c16 + 2] = 2, l23[6 * c16 + 3] = 2, l23[6 * c16 + 4] = 3, l23[6 * c16 + 5] = 0;
  function u20(t23) {
    Array.isArray(t23) || (t23 = [t23, t23, t23]);
    const e21 = new Array(24);
    for (let s28 = 0; s28 < 8; s28++)
      e21[3 * s28] = n23[s28][0] * t23[0], e21[3 * s28 + 1] = n23[s28][1] * t23[1], e21[3 * s28 + 2] = n23[s28][2] * t23[2];
    return new d2([[O2.POSITION, { size: 3, data: e21, exclusive: true }], [O2.NORMAL, { size: 3, data: s27 }], [O2.UV0, { size: 2, data: a17 }]], [[O2.POSITION, r25], [O2.NORMAL, o20], [O2.UV0, l23]]);
  }
  t22.createGeometry = u20;
}(m8 || (m8 = {})), function(t22) {
  const e20 = 0.5, n23 = [[-e20, 0, -e20], [e20, 0, -e20], [e20, 0, e20], [-e20, 0, e20], [0, -e20, 0], [0, e20, 0]], s27 = [0, 1, -1, 1, 1, 0, 0, 1, 1, -1, 1, 0, 0, -1, -1, 1, -1, 0, 0, -1, 1, -1, -1, 0], a17 = [5, 1, 0, 5, 2, 1, 5, 3, 2, 5, 0, 3, 4, 0, 1, 4, 1, 2, 4, 2, 3, 4, 3, 0], r25 = [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7];
  function o20(t23) {
    Array.isArray(t23) || (t23 = [t23, t23, t23]);
    const e21 = new Array(18);
    for (let s28 = 0; s28 < 6; s28++)
      e21[3 * s28] = n23[s28][0] * t23[0], e21[3 * s28 + 1] = n23[s28][1] * t23[1], e21[3 * s28 + 2] = n23[s28][2] * t23[2];
    return new d2([[O2.POSITION, { size: 3, data: e21, exclusive: true }], [O2.NORMAL, { size: 3, data: s27 }]], [[O2.POSITION, a17], [O2.NORMAL, r25]]);
  }
  t22.createGeometry = o20;
}(S4 || (S4 = {})), function(s27) {
  const a17 = 0.5, r25 = 0, o20 = r9(-a17, r25, -a17), l23 = r9(a17, r25, -a17), u20 = r9(0, r25, a17), h15 = r9(0, r25 + a17, 0), f17 = n11(), O10 = n11(), p10 = n11(), A12 = n11(), I11 = n11();
  e3(f17, o20, h15), e3(O10, o20, l23), _(p10, f17, O10), z(p10, p10), e3(f17, l23, h15), e3(O10, l23, u20), _(A12, f17, O10), z(A12, A12), e3(f17, u20, h15), e3(O10, u20, o20), _(I11, f17, O10), z(I11, I11);
  const M7 = [o20, l23, u20, h15], g7 = [0, -1, 0, p10[0], p10[1], p10[2], A12[0], A12[1], A12[2], I11[0], I11[1], I11[2]], d14 = [0, 1, 2, 3, 1, 0, 3, 2, 1, 3, 0, 2], N3 = [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3];
  function P9(t22) {
    Array.isArray(t22) || (t22 = [t22, t22, t22]);
    const e20 = new Array(12);
    for (let n23 = 0; n23 < 4; n23++)
      e20[3 * n23] = M7[n23][0] * t22[0], e20[3 * n23 + 1] = M7[n23][1] * t22[1], e20[3 * n23 + 2] = M7[n23][2] * t22[2];
    return new d2([[O2.POSITION, { size: 3, data: e20, exclusive: true }], [O2.NORMAL, { size: 3, data: g7 }]], [[O2.POSITION, d14], [O2.NORMAL, N3]]);
  }
  s27.createGeometry = P9;
}(z5 || (z5 = {}));
var v7 = m8.createGeometry;
var x9 = S4.createGeometry;
var L5 = z5.createGeometry;
function T4(t22, e20, n23, s27 = { uv: true }) {
  const a17 = -Math.PI, r25 = 2 * Math.PI, o20 = -Math.PI / 2, l23 = Math.PI, u20 = Math.max(3, Math.floor(e20)), c16 = Math.max(2, Math.floor(n23)), i23 = (u20 + 1) * (c16 + 1), h15 = new Float32Array(3 * i23), f17 = new Float32Array(3 * i23), O10 = new Float32Array(2 * i23), p10 = [];
  let A12 = 0;
  for (let y9 = 0; y9 <= c16; y9++) {
    const e21 = [], n24 = y9 / c16, s28 = o20 + n24 * l23, i24 = Math.cos(s28);
    for (let o21 = 0; o21 <= u20; o21++) {
      const l24 = o21 / u20, c17 = a17 + l24 * r25, p11 = Math.cos(c17) * i24, I12 = Math.sin(s28), M8 = -Math.sin(c17) * i24;
      h15[3 * A12] = p11 * t22, h15[3 * A12 + 1] = I12 * t22, h15[3 * A12 + 2] = M8 * t22, f17[3 * A12] = p11, f17[3 * A12 + 1] = I12, f17[3 * A12 + 2] = M8, O10[2 * A12] = l24, O10[2 * A12 + 1] = n24, e21.push(A12), ++A12;
    }
    p10.push(e21);
  }
  const I11 = new Array();
  for (let y9 = 0; y9 < c16; y9++)
    for (let t23 = 0; t23 < u20; t23++) {
      const e21 = p10[y9][t23], n24 = p10[y9][t23 + 1], s28 = p10[y9 + 1][t23 + 1], a18 = p10[y9 + 1][t23];
      0 === y9 ? (I11.push(e21), I11.push(s28), I11.push(a18)) : y9 === c16 - 1 ? (I11.push(e21), I11.push(n24), I11.push(s28)) : (I11.push(e21), I11.push(n24), I11.push(s28), I11.push(s28), I11.push(a18), I11.push(e21));
    }
  const M7 = [[O2.POSITION, I11], [O2.NORMAL, I11]], g7 = [[O2.POSITION, { size: 3, data: h15, exclusive: true }], [O2.NORMAL, { size: 3, data: f17, exclusive: true }]];
  return s27.uv && (g7.push([O2.UV0, { size: 2, data: O10, exclusive: true }]), M7.push([O2.UV0, I11])), s27.offset && (M7[0][0] = O2.OFFSET, g7[0][0] = O2.OFFSET, M7.push([O2.POSITION, new Array(I11.length).fill(0)]), g7.push([O2.POSITION, { size: 3, data: Float64Array.from(s27.offset), exclusive: true }])), new d2(g7, M7);
}
function R5(t22, e20, n23) {
  const s27 = t22;
  let a17, r25;
  if (n23)
    a17 = [0, -1, 0, 1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, -1, 0, 1, 0], r25 = [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 1, 1, 5, 2, 2, 5, 3, 3, 5, 4, 4, 5, 1];
  else {
    const t23 = s27 * (1 + Math.sqrt(5)) / 2;
    a17 = [-s27, t23, 0, s27, t23, 0, -s27, -t23, 0, s27, -t23, 0, 0, -s27, t23, 0, s27, t23, 0, -s27, -t23, 0, s27, -t23, t23, 0, -s27, t23, 0, s27, -t23, 0, -s27, -t23, 0, s27], r25 = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];
  }
  for (let h15 = 0; h15 < a17.length; h15 += 3)
    P6.scale(a17, h15, t22 / P6.length(a17, h15));
  let o20 = {};
  function l23(e21, n24) {
    e21 > n24 && ([e21, n24] = [n24, e21]);
    const s28 = e21.toString() + "." + n24.toString();
    if (o20[s28])
      return o20[s28];
    let r26 = a17.length;
    return a17.length += 3, P6.add(a17, 3 * e21, a17, 3 * n24, a17, r26), P6.scale(a17, r26, t22 / P6.length(a17, r26)), r26 /= 3, o20[s28] = r26, r26;
  }
  for (let h15 = 0; h15 < e20; h15++) {
    const t23 = r25.length, e21 = new Array(4 * t23);
    for (let n24 = 0; n24 < t23; n24 += 3) {
      const t24 = r25[n24], s28 = r25[n24 + 1], a18 = r25[n24 + 2], o21 = l23(t24, s28), u21 = l23(s28, a18), c17 = l23(a18, t24), i24 = 4 * n24;
      e21[i24] = t24, e21[i24 + 1] = o21, e21[i24 + 2] = c17, e21[i24 + 3] = s28, e21[i24 + 4] = u21, e21[i24 + 5] = o21, e21[i24 + 6] = a18, e21[i24 + 7] = c17, e21[i24 + 8] = u21, e21[i24 + 9] = o21, e21[i24 + 10] = u21, e21[i24 + 11] = c17;
    }
    r25 = e21, o20 = {};
  }
  const u20 = new Float32Array(a17);
  for (let h15 = 0; h15 < u20.length; h15 += 3)
    P6.normalize(u20, h15);
  const c16 = [[O2.POSITION, r25], [O2.NORMAL, r25]], i23 = [[O2.POSITION, { size: 3, data: new Float32Array(a17), exclusive: true }], [O2.NORMAL, { size: 3, data: u20, exclusive: true }]];
  return new d2(i23, c16);
}
function b7(t22, e20, n23, s27, a17, r25, o20, l23) {
  const u20 = e20 ? [e20[0], e20[1], e20[2]] : [0, 0, 0], c16 = t22 ? [t22[0], t22[1], t22[2]] : [0, 0, 1];
  r25 = r25 || [0, 0];
  const i23 = n23 ? [255 * n23[0], 255 * n23[1], 255 * n23[2], n23.length > 3 ? 255 * n23[3] : 255] : [255, 255, 255, 255], h15 = null != s27 && 2 === s27.length ? s27 : [1, 1], f17 = [[O2.POSITION, { size: 3, data: u20, exclusive: true }], [O2.NORMAL, { size: 3, data: c16, exclusive: true }], [O2.UV0, { size: r25.length, data: r25 }], [O2.COLOR, { size: 4, data: i23, exclusive: true }], [O2.SIZE, { size: 2, data: h15 }]];
  if (null != a17) {
    const t23 = new Float32Array([a17[0], a17[1], a17[2], a17[3]]);
    f17.push([O2.AUXPOS1, { size: 4, data: t23 }]);
  }
  if (null != o20) {
    const t23 = new Float32Array([o20[0], o20[1], o20[2], o20[3]]);
    f17.push([O2.AUXPOS2, { size: 4, data: t23 }]);
  }
  return new d2(f17, null, a8.Point, l23);
}
function C3(t22, e20, n23, s27, a17 = true, r25 = true) {
  let o20 = 0;
  const l23 = e20, u20 = t22;
  let i23 = r9(0, o20, 0), h15 = r9(0, o20 + u20, 0), f17 = r9(0, -1, 0), O10 = r9(0, 1, 0);
  s27 && (o20 = u20, h15 = r9(0, 0, 0), i23 = r9(0, o20, 0), f17 = r9(0, 1, 0), O10 = r9(0, -1, 0));
  const p10 = [h15, i23], A12 = [f17, O10], I11 = n23 + 2, M7 = Math.sqrt(u20 * u20 + l23 * l23);
  if (s27)
    for (let y9 = n23 - 1; y9 >= 0; y9--) {
      const t23 = y9 * (2 * Math.PI / n23), e21 = r9(Math.cos(t23) * l23, o20, Math.sin(t23) * l23);
      p10.push(e21);
      const s28 = r9(u20 * Math.cos(t23) / M7, -l23 / M7, u20 * Math.sin(t23) / M7);
      A12.push(s28);
    }
  else
    for (let y9 = 0; y9 < n23; y9++) {
      const t23 = y9 * (2 * Math.PI / n23), e21 = r9(Math.cos(t23) * l23, o20, Math.sin(t23) * l23);
      p10.push(e21);
      const s28 = r9(u20 * Math.cos(t23) / M7, l23 / M7, u20 * Math.sin(t23) / M7);
      A12.push(s28);
    }
  const g7 = new Array(), d14 = new Array();
  if (a17) {
    for (let t23 = 3; t23 < p10.length; t23++)
      g7.push(1), g7.push(t23 - 1), g7.push(t23), d14.push(0), d14.push(0), d14.push(0);
    g7.push(p10.length - 1), g7.push(2), g7.push(1), d14.push(0), d14.push(0), d14.push(0);
  }
  if (r25) {
    for (let t23 = 3; t23 < p10.length; t23++)
      g7.push(t23), g7.push(t23 - 1), g7.push(0), d14.push(t23), d14.push(t23 - 1), d14.push(1);
    g7.push(0), g7.push(2), g7.push(p10.length - 1), d14.push(1), d14.push(2), d14.push(A12.length - 1);
  }
  const N3 = new Float32Array(3 * I11);
  for (let c16 = 0; c16 < I11; c16++)
    N3[3 * c16] = p10[c16][0], N3[3 * c16 + 1] = p10[c16][1], N3[3 * c16 + 2] = p10[c16][2];
  const P9 = new Float32Array(3 * I11);
  for (let c16 = 0; c16 < I11; c16++)
    P9[3 * c16] = A12[c16][0], P9[3 * c16 + 1] = A12[c16][1], P9[3 * c16 + 2] = A12[c16][2];
  const m12 = [[O2.POSITION, g7], [O2.NORMAL, d14]], S7 = [[O2.POSITION, { size: 3, data: N3, exclusive: true }], [O2.NORMAL, { size: 3, data: P9, exclusive: true }]];
  return new d2(S7, m12);
}
function E10(t22, l23, u20, f17, O10, p10) {
  const A12 = f17 ? t6(f17) : r9(1, 0, 0), I11 = O10 ? t6(O10) : r9(0, 0, 0);
  p10 = p10 != null ? p10 : true;
  const M7 = n11();
  z(M7, A12);
  const g7 = n11();
  g(g7, M7, Math.abs(t22));
  const d14 = n11();
  g(d14, g7, -0.5), u(d14, d14, I11);
  const N3 = r9(0, 1, 0);
  Math.abs(1 - P(M7, N3)) < 0.2 && o(N3, 0, 0, 1);
  const P9 = n11();
  _(P9, M7, N3), z(P9, P9), _(N3, P9, M7);
  const m12 = 2 * u20 + (p10 ? 2 : 0), S7 = u20 + (p10 ? 2 : 0), z8 = new Float32Array(3 * m12), v10 = new Float32Array(3 * S7), x12 = new Float32Array(2 * m12), L7 = new Array(3 * u20 * (p10 ? 4 : 2)), T9 = new Array(3 * u20 * (p10 ? 4 : 2));
  p10 && (z8[3 * (m12 - 2) + 0] = d14[0], z8[3 * (m12 - 2) + 1] = d14[1], z8[3 * (m12 - 2) + 2] = d14[2], x12[2 * (m12 - 2)] = 0, x12[2 * (m12 - 2) + 1] = 0, z8[3 * (m12 - 1) + 0] = z8[3 * (m12 - 2) + 0] + g7[0], z8[3 * (m12 - 1) + 1] = z8[3 * (m12 - 2) + 1] + g7[1], z8[3 * (m12 - 1) + 2] = z8[3 * (m12 - 2) + 2] + g7[2], x12[2 * (m12 - 1)] = 1, x12[2 * (m12 - 1) + 1] = 1, v10[3 * (S7 - 2) + 0] = -M7[0], v10[3 * (S7 - 2) + 1] = -M7[1], v10[3 * (S7 - 2) + 2] = -M7[2], v10[3 * (S7 - 1) + 0] = M7[0], v10[3 * (S7 - 1) + 1] = M7[1], v10[3 * (S7 - 1) + 2] = M7[2]);
  const R10 = (t23, e20, n23) => {
    L7[t23] = e20, T9[t23] = n23;
  };
  let b10 = 0;
  const F8 = n11(), U5 = n11();
  for (let e20 = 0; e20 < u20; e20++) {
    const t23 = e20 * (2 * Math.PI / u20);
    g(F8, N3, Math.sin(t23)), g(U5, P9, Math.cos(t23)), u(F8, F8, U5), v10[3 * e20 + 0] = F8[0], v10[3 * e20 + 1] = F8[1], v10[3 * e20 + 2] = F8[2], g(F8, F8, l23), u(F8, F8, d14), z8[3 * e20 + 0] = F8[0], z8[3 * e20 + 1] = F8[1], z8[3 * e20 + 2] = F8[2], x12[2 * e20 + 0] = e20 / u20, x12[2 * e20 + 1] = 0, z8[3 * (e20 + u20) + 0] = z8[3 * e20 + 0] + g7[0], z8[3 * (e20 + u20) + 1] = z8[3 * e20 + 1] + g7[1], z8[3 * (e20 + u20) + 2] = z8[3 * e20 + 2] + g7[2], x12[2 * (e20 + u20) + 0] = e20 / u20, x12[2 * e20 + 1] = 1;
    const n23 = (e20 + 1) % u20;
    R10(b10++, e20, e20), R10(b10++, e20 + u20, e20), R10(b10++, n23, n23), R10(b10++, n23, n23), R10(b10++, e20 + u20, e20), R10(b10++, n23 + u20, n23);
  }
  if (p10) {
    for (let t23 = 0; t23 < u20; t23++) {
      const e20 = (t23 + 1) % u20;
      R10(b10++, m12 - 2, S7 - 2), R10(b10++, t23, S7 - 2), R10(b10++, e20, S7 - 2);
    }
    for (let t23 = 0; t23 < u20; t23++) {
      const e20 = (t23 + 1) % u20;
      R10(b10++, t23 + u20, S7 - 1), R10(b10++, m12 - 1, S7 - 1), R10(b10++, e20 + u20, S7 - 1);
    }
  }
  const V5 = [[O2.POSITION, L7], [O2.NORMAL, T9], [O2.UV0, L7]], j11 = [[O2.POSITION, { size: 3, data: z8, exclusive: true }], [O2.NORMAL, { size: 3, data: v10, exclusive: true }], [O2.UV0, { size: 2, data: x12, exclusive: true }]];
  return new d2(j11, V5);
}
function X3(t22, e20, n23, s27, a17) {
  n23 = n23 || 10, s27 = null == s27 || s27, e9(t22.length > 1);
  const r25 = [[0, 0, 0]], o20 = [], l23 = [];
  for (let u20 = 0; u20 < n23; u20++) {
    o20.push([0, -u20 - 1, -(u20 + 1) % n23 - 1]);
    const t23 = u20 / n23 * 2 * Math.PI;
    l23.push([Math.cos(t23) * e20, Math.sin(t23) * e20]);
  }
  return k6(l23, t22, r25, o20, s27, a17);
}
function k6(r25, u20, h15, M7, g7, d14 = r9(0, 0, 0)) {
  const N3 = r25.length, P9 = new Float32Array(u20.length * N3 * 3 + (6 * h15.length || 0)), m12 = new Float32Array(u20.length * N3 * 3 + (h15 ? 6 : 0)), S7 = new Array(), z8 = new Array();
  let v10 = 0, x12 = 0;
  const L7 = n11(), T9 = n11(), R10 = n11(), b10 = n11(), F8 = n11(), U5 = n11(), V5 = n11(), j11 = n(), G6 = n11(), C4 = n11(), E14 = n11(), X6 = n11(), k8 = n11(), q4 = p2();
  o(G6, 0, 1, 0), e3(T9, u20[1], u20[0]), z(T9, T9), g7 ? (u(j11, u20[0], d14), z(R10, j11)) : o(R10, 0, 0, 1), J2(T9, R10, G6, G6, F8, R10, K), r3(b10, R10), r3(X6, F8);
  for (let t22 = 0; t22 < h15.length; t22++)
    g(U5, F8, h15[t22][0]), g(j11, R10, h15[t22][2]), u(U5, U5, j11), u(U5, U5, u20[0]), P9[v10++] = U5[0], P9[v10++] = U5[1], P9[v10++] = U5[2];
  m12[x12++] = -T9[0], m12[x12++] = -T9[1], m12[x12++] = -T9[2];
  for (let t22 = 0; t22 < M7.length; t22++)
    S7.push(M7[t22][0] > 0 ? M7[t22][0] : -M7[t22][0] - 1 + h15.length), S7.push(M7[t22][1] > 0 ? M7[t22][1] : -M7[t22][1] - 1 + h15.length), S7.push(M7[t22][2] > 0 ? M7[t22][2] : -M7[t22][2] - 1 + h15.length), z8.push(0), z8.push(0), z8.push(0);
  let Z7 = h15.length;
  const B5 = h15.length - 1;
  for (let o20 = 0; o20 < u20.length; o20++) {
    let c16 = false;
    if (o20 > 0) {
      r3(L7, T9), o20 < u20.length - 1 ? (e3(T9, u20[o20 + 1], u20[o20]), z(T9, T9)) : c16 = true, u(C4, L7, T9), z(C4, C4), u(E14, u20[o20 - 1], b10), _4(u20[o20], C4, q4);
      q(q4, p(E14, L7), j11) ? (e3(j11, j11, u20[o20]), z(R10, j11), _(F8, C4, R10), z(F8, F8)) : J2(C4, b10, X6, G6, F8, R10, K), r3(b10, R10), r3(X6, F8);
    }
    g7 && (u(j11, u20[o20], d14), z(k8, j11));
    for (let t22 = 0; t22 < N3; t22++)
      if (g(U5, F8, r25[t22][0]), g(j11, R10, r25[t22][1]), u(U5, U5, j11), z(V5, U5), m12[x12++] = V5[0], m12[x12++] = V5[1], m12[x12++] = V5[2], u(U5, U5, u20[o20]), P9[v10++] = U5[0], P9[v10++] = U5[1], P9[v10++] = U5[2], !c16) {
        const e20 = (t22 + 1) % N3;
        S7.push(Z7 + t22), S7.push(Z7 + N3 + t22), S7.push(Z7 + e20), S7.push(Z7 + e20), S7.push(Z7 + N3 + t22), S7.push(Z7 + N3 + e20);
        for (let t23 = 0; t23 < 6; t23++) {
          const e21 = S7.length - 6;
          z8.push(S7[e21 + t23] - B5);
        }
      }
    Z7 += N3;
  }
  const D6 = u20[u20.length - 1];
  for (let t22 = 0; t22 < h15.length; t22++)
    g(U5, F8, h15[t22][0]), g(j11, R10, h15[t22][1]), u(U5, U5, j11), u(U5, U5, D6), P9[v10++] = U5[0], P9[v10++] = U5[1], P9[v10++] = U5[2];
  const H9 = x12 / 3;
  m12[x12++] = T9[0], m12[x12++] = T9[1], m12[x12++] = T9[2];
  const Q8 = Z7 - N3;
  for (let t22 = 0; t22 < M7.length; t22++)
    S7.push(M7[t22][0] >= 0 ? Z7 + M7[t22][0] : -M7[t22][0] - 1 + Q8), S7.push(M7[t22][2] >= 0 ? Z7 + M7[t22][2] : -M7[t22][2] - 1 + Q8), S7.push(M7[t22][1] >= 0 ? Z7 + M7[t22][1] : -M7[t22][1] - 1 + Q8), z8.push(H9), z8.push(H9), z8.push(H9);
  const W4 = [[O2.POSITION, S7], [O2.NORMAL, z8]], Y5 = [[O2.POSITION, { size: 3, data: P9, exclusive: true }], [O2.NORMAL, { size: 3, data: m12, exclusive: true }]];
  return new d2(Y5, W4);
}
function q2(t22, e20, n23) {
  e9(t22.length > 1, "createPolylineGeometry(): polyline needs at least 2 points"), e9(3 === t22[0].length, "createPolylineGeometry(): malformed vertex"), e9(null == e20 || e20.length === t22.length, "createPolylineGeometry: need same number of points and normals"), e9(null == e20 || 3 === e20[0].length, "createPolylineGeometry(): malformed normal");
  const s27 = new Float64Array(3 * t22.length), a17 = new Array(2 * (t22.length - 1));
  let r25 = 0, o20 = 0;
  for (let c16 = 0; c16 < t22.length; c16++) {
    for (let e21 = 0; e21 < 3; e21++)
      s27[r25++] = t22[c16][e21];
    c16 > 0 && (a17[o20++] = c16 - 1, a17[o20++] = c16);
  }
  const l23 = [], u20 = [];
  if (l23.push([O2.POSITION, a17]), u20.push([O2.POSITION, { size: 3, data: s27, exclusive: true }]), e20) {
    const n24 = new Float32Array(3 * e20.length);
    let s28 = 0;
    for (let a18 = 0; a18 < t22.length; a18++)
      for (let t23 = 0; t23 < 3; t23++)
        n24[s28++] = e20[a18][t23];
    l23.push([O2.NORMAL, a17]), u20.push([O2.NORMAL, { size: 3, data: n24, exclusive: true }]);
  }
  return n23 && (u20.push([O2.COLOR, { size: 4, data: n23 }]), l23.push([O2.COLOR, u8(n23.length / 4)])), new d2(u20, l23, a8.Line);
}
function Z2(t22, e20, n23, s27, a17 = 0) {
  const r25 = new Array(18), o20 = [[-e20, a17, s27 / 2], [n23, a17, s27 / 2], [0, t22 + a17, s27 / 2], [-e20, a17, -s27 / 2], [n23, a17, -s27 / 2], [0, t22 + a17, -s27 / 2]], l23 = [0, 1, 2, 3, 0, 2, 2, 5, 3, 1, 4, 5, 5, 2, 1, 1, 0, 3, 3, 4, 1, 4, 3, 5];
  for (let u20 = 0; u20 < 6; u20++)
    r25[3 * u20] = o20[u20][0], r25[3 * u20 + 1] = o20[u20][1], r25[3 * u20 + 2] = o20[u20][2];
  return new d2([[O2.POSITION, { size: 3, data: r25, exclusive: true }]], [[O2.POSITION, l23]]);
}
function B3(t22, e20) {
  const n23 = t22.getMutableAttribute(O2.POSITION).data;
  for (let s27 = 0; s27 < n23.length; s27 += 3) {
    const t23 = n23[s27], a17 = n23[s27 + 1], r25 = n23[s27 + 2];
    o(Q2, t23, a17, r25), O(Q2, Q2, e20), n23[s27] = Q2[0], n23[s27 + 1] = Q2[1], n23[s27 + 2] = Q2[2];
  }
}
function D3(t22, e20 = t22) {
  const n23 = t22.vertexAttributes, s27 = n23.get(O2.POSITION).data, a17 = n23.get(O2.NORMAL).data;
  if (a17) {
    const t23 = e20.getMutableAttribute(O2.NORMAL).data;
    for (let e21 = 0; e21 < a17.length; e21 += 3) {
      const n24 = a17[e21 + 1];
      t23[e21 + 1] = -a17[e21 + 2], t23[e21 + 2] = n24;
    }
  }
  if (s27) {
    const t23 = e20.getMutableAttribute(O2.POSITION).data;
    for (let e21 = 0; e21 < s27.length; e21 += 3) {
      const n24 = s27[e21 + 1];
      t23[e21 + 1] = -s27[e21 + 2], t23[e21 + 2] = n24;
    }
  }
  return e20;
}
function H6(t22, s27, a17, o20, l23) {
  return !(Math.abs(P(s27, t22)) > l23) && (_(a17, t22, s27), z(a17, a17), _(o20, a17, t22), z(o20, o20), true);
}
function J2(t22, e20, n23, s27, a17, r25, o20) {
  return H6(t22, e20, a17, r25, o20) || H6(t22, n23, a17, r25, o20) || H6(t22, s27, a17, r25, o20);
}
var K = 0.99619469809;
var Q2 = n11();

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/RibbonLineTechnique.js
var I5 = /* @__PURE__ */ new Map([[O2.POSITION, 0], [O2.SUBDIVISIONFACTOR, 1], [O2.UV0, 2], [O2.AUXPOS1, 3], [O2.AUXPOS2, 4], [O2.COLOR, 5], [O2.COLORFEATUREATTRIBUTE, 5], [O2.SIZE, 6], [O2.SIZEFEATUREATTRIBUTE, 6], [O2.OPACITYFEATUREATTRIBUTE, 7], [O2.OBJECTANDLAYERIDCOLOR, 8]]);
var y6 = class extends e11 {
  initializeProgram(e20) {
    return new o10(e20.rctx, y6.shader.get().build(this.configuration), I5);
  }
  _makePipelineState(t22, i23) {
    const c16 = this.configuration, a17 = t22 === o9.NONE, d14 = t22 === o9.FrontFace;
    return W({ blending: c16.output === h5.Color || c16.output === h5.Alpha ? a17 ? c6 : A4(t22) : null, depthTest: { func: l15(t22) }, depthWrite: a17 ? c16.writeDepth && a10 : E7(t22), colorWrite: _5, stencilWrite: c16.hasOccludees ? e12 : null, stencilTest: c16.hasOccludees ? i23 ? o11 : f7 : null, polygonOffset: a17 || d14 ? c16.hasPolygonOffset && _8 : _6 });
  }
  initializePipeline() {
    const e20 = this.configuration;
    if (e20.occluder) {
      const t22 = e20.hasPolygonOffset && _8;
      this._occluderPipelineTransparent = W({ blending: c6, polygonOffset: t22, depthTest: s9, depthWrite: null, colorWrite: _5, stencilWrite: null, stencilTest: m5 }), this._occluderPipelineOpaque = W({ blending: c6, polygonOffset: t22, depthTest: s9, depthWrite: null, colorWrite: _5, stencilWrite: l16, stencilTest: P3 }), this._occluderPipelineMaskWrite = W({ blending: null, polygonOffset: t22, depthTest: i8, depthWrite: null, colorWrite: null, stencilWrite: e12, stencilTest: o11 });
    }
    return this._occludeePipelineState = this._makePipelineState(this.configuration.transparencyPassType, true), this._makePipelineState(this.configuration.transparencyPassType, false);
  }
  get primitiveType() {
    return this.configuration.wireframe ? E2.LINES : E2.TRIANGLE_STRIP;
  }
  getPipelineState(e20, t22) {
    return t22 ? this._occludeePipelineState : this.configuration.occluder ? e20 === E8.TRANSPARENT_OCCLUDER_MATERIAL ? this._occluderPipelineTransparent : e20 === E8.OCCLUDER_MATERIAL ? this._occluderPipelineOpaque : this._occluderPipelineMaskWrite : super.getPipelineState(e20, t22);
  }
};
y6.shader = new t8(A5, () => import("./RibbonLine.glsl-F4HCMSVL.js"));
var _8 = { factor: 0, units: -4 };

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/RibbonLineMaterial.js
var z6;
!function(e20) {
  e20[e20.LEFT_JOIN_START = -2] = "LEFT_JOIN_START", e20[e20.LEFT_JOIN_END = -1] = "LEFT_JOIN_END", e20[e20.LEFT_CAP_START = -4] = "LEFT_CAP_START", e20[e20.LEFT_CAP_END = -5] = "LEFT_CAP_END", e20[e20.RIGHT_JOIN_START = 2] = "RIGHT_JOIN_START", e20[e20.RIGHT_JOIN_END = 1] = "RIGHT_JOIN_END", e20[e20.RIGHT_CAP_START = 4] = "RIGHT_CAP_START", e20[e20.RIGHT_CAP_END = 5] = "RIGHT_CAP_END";
}(z6 || (z6 = {}));
var H7 = class extends d6 {
  constructor(e20) {
    super(e20, new W2()), this._configuration = new s13(), this._vertexAttributeLocations = I5, this._layout = this.createLayout();
  }
  isClosed(e20, t22) {
    return X4(this.parameters, e20, t22);
  }
  getConfiguration(e20, t22) {
    this._configuration.output = e20, this._configuration.draped = t22.slot === E8.DRAPED_MATERIAL;
    const i23 = r(this.parameters.stipplePattern) && e20 !== h5.Highlight;
    return this._configuration.stippleEnabled = i23, this._configuration.stippleOffColorEnabled = i23 && r(this.parameters.stippleOffColor), this._configuration.stippleScaleWithLineWidth = i23 && this.parameters.stippleScaleWithLineWidth, this._configuration.stipplePreferContinuous = i23 && this.parameters.stipplePreferContinuous, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.hasOccludees = this.parameters.hasOccludees, this._configuration.roundJoins = "round" === this.parameters.join, this._configuration.capType = this.parameters.cap, this._configuration.applyMarkerOffset = !!r(this.parameters.markerParameters) && Y3(this.parameters.markerParameters), this._configuration.hasPolygonOffset = this.parameters.hasPolygonOffset, this._configuration.writeDepth = this.parameters.writeDepth, this._configuration.vvColor = this.parameters.vvColorEnabled, this._configuration.vvOpacity = this.parameters.vvOpacityEnabled, this._configuration.vvSize = this.parameters.vvSizeEnabled, this._configuration.innerColorEnabled = this.parameters.innerWidth > 0 && r(this.parameters.innerColor), this._configuration.falloffEnabled = this.parameters.falloff > 0, this._configuration.occluder = this.parameters.renderOccluded === o8.OccludeAndTransparentStencil, this._configuration.transparencyPassType = t22.transparencyPassType, this._configuration.hasMultipassTerrain = t22.multipassTerrain.enabled, this._configuration.cullAboveGround = t22.multipassTerrain.cullAboveGround, this._configuration.wireframe = this.parameters.wireframe, this._configuration;
  }
  intersect(e20, t22, i23, s27, a17, n23, o20, l23, c16) {
    r(c16) ? this._intersectDrapedLineGeometry(e20, s27, c16, n23, o20) : this._intersectLineGeometry(e20, t22, i23, s27, o20);
  }
  _intersectDrapedLineGeometry(e20, r25, i23, s27, a17) {
    if (!r25.options.selectionMode)
      return;
    const n23 = e20.vertexAttributes.get(O2.POSITION).data, o20 = e20.vertexAttributes.get(O2.SIZE);
    let l23 = this.parameters.width;
    if (this.parameters.vvSizeEnabled) {
      const r26 = e20.vertexAttributes.get(O2.SIZEFEATUREATTRIBUTE).data[0];
      l23 *= a3(this.parameters.vvSizeOffset[0] + r26 * this.parameters.vvSizeFactor[0], this.parameters.vvSizeMinSize[0], this.parameters.vvSizeMaxSize[0]);
    } else
      o20 && (l23 *= o20.data[0]);
    const c16 = s27[0], h15 = s27[1], u20 = (l23 / 2 + 4) * e20.screenToWorldRatio;
    let p10 = Number.MAX_VALUE, m12 = 0;
    for (let f17 = 0; f17 < n23.length - 5; f17 += 3) {
      const e21 = n23[f17], r26 = n23[f17 + 1], i24 = c16 - e21, s28 = h15 - r26, a18 = n23[f17 + 3] - e21, o21 = n23[f17 + 4] - r26, l24 = a3((a18 * i24 + o21 * s28) / (a18 * a18 + o21 * o21), 0, 1), u21 = a18 * l24 - i24, T9 = o21 * l24 - s28, d14 = u21 * u21 + T9 * T9;
      d14 < p10 && (p10 = d14, m12 = f17 / 3);
    }
    p10 < u20 * u20 && a17(i23.dist, i23.normal, m12, false);
  }
  _intersectLineGeometry(r25, i23, m12, f17, T9) {
    if (!f17.options.selectionMode || u13(i23))
      return;
    if (!M2(m12))
      return void s3.getLogger("esri.views.3d.webgl-engine.materials.RibbonLineMaterial").error("intersection assumes a translation-only matrix");
    const _10 = r25.vertexAttributes, S7 = _10.get(O2.POSITION).data;
    let O10 = this.parameters.width;
    if (this.parameters.vvSizeEnabled) {
      const e20 = _10.get(O2.SIZEFEATUREATTRIBUTE).data[0];
      O10 *= a3(this.parameters.vvSizeOffset[0] + e20 * this.parameters.vvSizeFactor[0], this.parameters.vvSizeMinSize[0], this.parameters.vvSizeMaxSize[0]);
    } else
      _10.has(O2.SIZE) && (O10 *= _10.get(O2.SIZE).data[0]);
    const b10 = f17.camera, L7 = te;
    a6(L7, f17.point);
    const P9 = O10 * b10.pixelRatio / 2 + 4 * b10.pixelRatio;
    o(ue[0], L7[0] - P9, L7[1] + P9, 0), o(ue[1], L7[0] + P9, L7[1] + P9, 0), o(ue[2], L7[0] + P9, L7[1] - P9, 0), o(ue[3], L7[0] - P9, L7[1] - P9, 0);
    for (let e20 = 0; e20 < 4; e20++)
      if (!b10.unprojectFromRenderScreen(ue[e20], pe[e20]))
        return;
    j3(b10.eye, pe[0], pe[1], me), j3(b10.eye, pe[1], pe[2], fe), j3(b10.eye, pe[2], pe[3], Te), j3(b10.eye, pe[3], pe[0], de);
    let N3 = Number.MAX_VALUE, C4 = 0;
    const y9 = q3(this.parameters, _10, r25.indices) ? S7.length - 2 : S7.length - 5;
    for (let e20 = 0; e20 < y9; e20 += 3) {
      Q3[0] = S7[e20] + m12[12], Q3[1] = S7[e20 + 1] + m12[13], Q3[2] = S7[e20 + 2] + m12[14];
      const t22 = (e20 + 3) % S7.length;
      if (K2[0] = S7[t22] + m12[12], K2[1] = S7[t22 + 1] + m12[13], K2[2] = S7[t22 + 2] + m12[14], R3(me, Q3) < 0 && R3(me, K2) < 0 || R3(fe, Q3) < 0 && R3(fe, K2) < 0 || R3(Te, Q3) < 0 && R3(Te, K2) < 0 || R3(de, Q3) < 0 && R3(de, K2) < 0)
        continue;
      if (b10.projectToRenderScreen(Q3, re), b10.projectToRenderScreen(K2, ie), re[2] < 0 && ie[2] > 0) {
        e3($2, Q3, K2);
        const e21 = b10.frustum, t23 = -R3(e21[U.NEAR], Q3) / P($2, Y2(e21[U.NEAR]));
        g($2, $2, t23), u(Q3, Q3, $2), b10.projectToRenderScreen(Q3, re);
      } else if (re[2] > 0 && ie[2] < 0) {
        e3($2, K2, Q3);
        const e21 = b10.frustum, t23 = -R3(e21[U.NEAR], K2) / P($2, Y2(e21[U.NEAR]));
        g($2, $2, t23), u(K2, K2, $2), b10.projectToRenderScreen(K2, ie);
      } else if (re[2] < 0 && ie[2] < 0)
        continue;
      re[2] = 0, ie[2] = 0;
      const r26 = M3(b5(re, ie, ne), L7);
      r26 < N3 && (N3 = r26, r3(se, Q3), r3(ae, K2), C4 = e20 / 3);
    }
    const U5 = f17.rayBegin, F8 = f17.rayEnd;
    if (N3 < P9 * P9) {
      let e20 = Number.MAX_VALUE;
      if (k3(b5(se, ae, ne), b5(U5, F8, oe), ee2)) {
        e3(ee2, ee2, U5);
        const t22 = s2(ee2);
        g(ee2, ee2, 1 / t22), e20 = t22 / x(U5, F8);
      }
      T9(e20, ee2, C4, false);
    }
  }
  computeAttachmentOrigin(e20, t22) {
    const r25 = e20.vertexAttributes;
    if (!r25)
      return false;
    const i23 = e20.indices, s27 = r25.get(O2.POSITION);
    return f4(s27, i23 ? i23.get(O2.POSITION) : null, i23 && q3(this.parameters, r25, i23), t22);
  }
  createLayout() {
    const e20 = T().vec3f(O2.POSITION).f32(O2.SUBDIVISIONFACTOR).vec2f(O2.UV0).vec3f(O2.AUXPOS1).vec3f(O2.AUXPOS2);
    return this.parameters.vvSizeEnabled ? e20.f32(O2.SIZEFEATUREATTRIBUTE) : e20.f32(O2.SIZE), this.parameters.vvColorEnabled ? e20.f32(O2.COLORFEATUREATTRIBUTE) : e20.vec4f(O2.COLOR), this.parameters.vvOpacityEnabled && e20.f32(O2.OPACITYFEATUREATTRIBUTE), has("enable-feature:objectAndLayerId-rendering") && e20.vec4u8(O2.OBJECTANDLAYERIDCOLOR), e20;
  }
  createBufferWriter() {
    return new V4(this._layout, this.parameters);
  }
  requiresSlot(e20, t22) {
    if (t22 === h5.Color || t22 === h5.Alpha || t22 === h5.Highlight || t22 === h5.Depth || t22 === h5.ObjectAndLayerIdColor) {
      if (e20 === E8.DRAPED_MATERIAL)
        return true;
      if (this.parameters.renderOccluded === o8.OccludeAndTransparentStencil)
        return e20 === E8.OPAQUE_MATERIAL || e20 === E8.OCCLUDER_MATERIAL || e20 === E8.TRANSPARENT_OCCLUDER_MATERIAL;
      if (t22 === h5.Color || t22 === h5.Alpha) {
        return e20 === (this.parameters.writeDepth ? E8.TRANSPARENT_MATERIAL : E8.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL);
      }
      return e20 === E8.OPAQUE_MATERIAL;
    }
    return false;
  }
  createGLMaterial(e20) {
    return new k7(e20);
  }
  validateParameters(e20) {
    "miter" !== e20.join && (e20.miterLimit = 0), r(e20.markerParameters) && (e20.markerScale = e20.markerParameters.width / e20.width);
  }
};
var k7 = class extends t7 {
  constructor() {
    super(...arguments), this._stipplePattern = null;
  }
  dispose() {
    super.dispose(), this._stippleTextureRepository.release(this._stipplePattern), this._stipplePattern = null;
  }
  _updateOccludeeState(e20) {
    e20.hasOccludees !== this._material.parameters.hasOccludees && this._material.setParameters({ hasOccludees: e20.hasOccludees });
  }
  beginSlot(e20) {
    this._output !== h5.Color && this._output !== h5.Alpha || this._updateOccludeeState(e20);
    const t22 = this._material.parameters.stipplePattern;
    return this._stipplePattern !== t22 && (this._material.setParameters(this._stippleTextureRepository.swap(this._stipplePattern, t22)), this._stipplePattern = t22), this.ensureTechnique(y6, e20);
  }
};
var W2 = class extends v3 {
  constructor() {
    super(...arguments), this.width = 0, this.color = _2, this.join = "miter", this.cap = r14.BUTT, this.miterLimit = 5, this.writeDepth = true, this.hasPolygonOffset = false, this.stippleTexture = null, this.stippleScaleWithLineWidth = false, this.stipplePreferContinuous = true, this.markerParameters = null, this.markerScale = 1, this.hasSlicePlane = false, this.vvFastUpdate = false, this.isClosed = false, this.falloff = 0, this.innerWidth = 0, this.hasOccludees = false, this.wireframe = false;
  }
};
var V4 = class {
  constructor(e20, t22) {
    this._parameters = t22, this.numJoinSubdivisions = 0, this.vertexBufferLayout = e20;
    const r25 = t22.stipplePattern ? 1 : 0;
    switch (this._parameters.join) {
      case "miter":
      case "bevel":
        this.numJoinSubdivisions = r25;
        break;
      case "round":
        this.numJoinSubdivisions = j4 + r25;
    }
  }
  _isClosed(e20) {
    return q3(this._parameters, e20.vertexAttributes, e20.indices);
  }
  allocate(e20) {
    return this.vertexBufferLayout.createBuffer(e20);
  }
  elementCount(e20) {
    const t22 = 2, r25 = e20.indices.get(O2.POSITION).length / 2 + 1, i23 = this._isClosed(e20);
    let s27 = i23 ? 2 : 2 * t22;
    return s27 += ((i23 ? r25 : r25 - 1) - (i23 ? 0 : 1)) * (2 * this.numJoinSubdivisions + 4), s27 += 2, this._parameters.wireframe && (s27 = 2 + 4 * (s27 - 2)), s27;
  }
  write(e20, t22, i23, s27, n23) {
    var _a;
    const o20 = le, l23 = ce, c16 = he, u20 = i23.vertexAttributes.get(O2.POSITION).data, f17 = i23.indices && i23.indices.get(O2.POSITION), T9 = (_a = i23.vertexAttributes.get(O2.DISTANCETOSTART)) == null ? void 0 : _a.data;
    f17 && f17.length !== 2 * (u20.length / 3 - 1) && console.warn("RibbonLineMaterial does not support indices");
    let d14 = 1, _10 = 0;
    this._parameters.vvSizeEnabled ? _10 = i23.vertexAttributes.get(O2.SIZEFEATUREATTRIBUTE).data[0] : i23.vertexAttributes.has(O2.SIZE) && (d14 = i23.vertexAttributes.get(O2.SIZE).data[0]);
    let A12 = [1, 1, 1, 1], E14 = 0;
    this._parameters.vvColorEnabled ? E14 = i23.vertexAttributes.get(O2.COLORFEATUREATTRIBUTE).data[0] : i23.vertexAttributes.has(O2.COLOR) && (A12 = i23.vertexAttributes.get(O2.COLOR).data);
    let v10 = null;
    has("enable-feature:objectAndLayerId-rendering") && (v10 = i23.objectAndLayerIdColor);
    let S7 = 0;
    this._parameters.vvOpacityEnabled && (S7 = i23.vertexAttributes.get(O2.OPACITYFEATUREATTRIBUTE).data[0]);
    const I11 = u20.length / 3, R10 = new Float32Array(s27.buffer), g7 = has("enable-feature:objectAndLayerId-rendering") ? new Uint8Array(s27.buffer) : null, O10 = this.vertexBufferLayout.stride / 4;
    let b10 = n23 * O10;
    const L7 = b10;
    let P9 = 0;
    const N3 = T9 ? (e21, t23, r25) => P9 = T9[r25] : (e21, t23, r25) => P9 += x(e21, t23), C4 = (e21, t23, i24, s28, a17, n24, o21) => {
      if (R10[b10++] = t23[0], R10[b10++] = t23[1], R10[b10++] = t23[2], R10[b10++] = s28, R10[b10++] = o21, R10[b10++] = a17, R10[b10++] = e21[0], R10[b10++] = e21[1], R10[b10++] = e21[2], R10[b10++] = i24[0], R10[b10++] = i24[1], R10[b10++] = i24[2], this._parameters.vvSizeEnabled ? R10[b10++] = _10 : R10[b10++] = d14, this._parameters.vvColorEnabled)
        R10[b10++] = E14;
      else {
        const e22 = Math.min(4 * n24, A12.length - 4);
        R10[b10++] = A12[e22 + 0], R10[b10++] = A12[e22 + 1], R10[b10++] = A12[e22 + 2], R10[b10++] = A12[e22 + 3];
      }
      this._parameters.vvOpacityEnabled && (R10[b10++] = S7), has("enable-feature:objectAndLayerId-rendering") && (r(v10) && (g7[4 * b10 + 0] = v10[0], g7[4 * b10 + 1] = v10[1], g7[4 * b10 + 2] = v10[2], g7[4 * b10 + 3] = v10[3]), b10++);
    };
    b10 += O10, o(l23, u20[0], u20[1], u20[2]), e20 && O(l23, l23, e20);
    const y9 = this._isClosed(i23);
    if (y9) {
      const t23 = u20.length - 3;
      o(o20, u20[t23], u20[t23 + 1], u20[t23 + 2]), e20 && O(o20, o20, e20);
    } else
      o(c16, u20[3], u20[4], u20[5]), e20 && O(c16, c16, e20), C4(l23, l23, c16, 1, z6.LEFT_CAP_START, 0, 0), C4(l23, l23, c16, 1, z6.RIGHT_CAP_START, 0, 0), r3(o20, l23), r3(l23, c16);
    const j11 = y9 ? 0 : 1, U5 = y9 ? I11 : I11 - 1;
    for (let r25 = j11; r25 < U5; r25++) {
      const t23 = (r25 + 1) % I11 * 3;
      o(c16, u20[t23 + 0], u20[t23 + 1], u20[t23 + 2]), e20 && O(c16, c16, e20), N3(o20, l23, r25), C4(o20, l23, c16, 0, z6.LEFT_JOIN_END, r25, P9), C4(o20, l23, c16, 0, z6.RIGHT_JOIN_END, r25, P9);
      const i24 = this.numJoinSubdivisions;
      for (let e21 = 0; e21 < i24; ++e21) {
        const t24 = (e21 + 1) / (i24 + 1);
        C4(o20, l23, c16, t24, z6.LEFT_JOIN_END, r25, P9), C4(o20, l23, c16, t24, z6.RIGHT_JOIN_END, r25, P9);
      }
      C4(o20, l23, c16, 1, z6.LEFT_JOIN_START, r25, P9), C4(o20, l23, c16, 1, z6.RIGHT_JOIN_START, r25, P9), r3(o20, l23), r3(l23, c16);
    }
    y9 ? (o(c16, u20[3], u20[4], u20[5]), e20 && O(c16, c16, e20), P9 = N3(o20, l23, U5), C4(o20, l23, c16, 0, z6.LEFT_JOIN_END, j11, P9), C4(o20, l23, c16, 0, z6.RIGHT_JOIN_END, j11, P9)) : (P9 = N3(o20, l23, U5), C4(o20, l23, l23, 0, z6.LEFT_CAP_END, U5, P9), C4(o20, l23, l23, 0, z6.RIGHT_CAP_END, U5, P9)), Z3(R10, L7 + O10, R10, L7, O10);
    b10 = Z3(R10, b10 - O10, R10, b10, O10), this._parameters.wireframe && this._addWireframeVertices(s27, L7, b10, O10);
  }
  _addWireframeVertices(e20, t22, r25, i23) {
    const s27 = new Float32Array(e20.buffer, r25 * Float32Array.BYTES_PER_ELEMENT), a17 = new Float32Array(e20.buffer, t22 * Float32Array.BYTES_PER_ELEMENT, r25 - t22);
    let n23 = 0;
    const o20 = (e21) => n23 = Z3(a17, e21, s27, n23, i23);
    for (let l23 = 0; l23 < a17.length - 1; l23 += 2 * i23)
      o20(l23), o20(l23 + 2 * i23), o20(l23 + 1 * i23), o20(l23 + 2 * i23), o20(l23 + 1 * i23), o20(l23 + 3 * i23);
  }
};
function Z3(e20, t22, r25, i23, s27) {
  for (let a17 = 0; a17 < s27; a17++)
    r25[i23++] = e20[t22++];
  return i23;
}
function q3(e20, t22, r25) {
  return X4(e20, t22.get(O2.POSITION).data, r25 ? r25.get(O2.POSITION) : null);
}
function X4(e20, t22, r25) {
  return !!e20.isClosed && (r25 ? r25.length > 2 : t22.length > 6);
}
function Y3(e20) {
  return e20.anchor === s12.Tip && e20.hideOnShortSegments && "begin-end" === e20.placement && e20.worldSpace;
}
var Q3 = n();
var K2 = n();
var $2 = n();
var ee2 = n();
var te = n();
var re = x2();
var ie = x2();
var se = n();
var ae = n();
var ne = v2();
var oe = v2();
var le = n();
var ce = n();
var he = n();
var ue = [x2(), x2(), x2(), x2()];
var pe = [n(), n(), n(), n()];
var me = p2();
var fe = p2();
var Te = p2();
var de = p2();

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/internal/DefaultBufferWriter.js
var O7 = T().vec3f(O2.POSITION);
var f11 = T().vec3f(O2.POSITION).vec2f(O2.UV0);
var u19 = T().vec3f(O2.POSITION).vec4u8(O2.COLOR);
var c10 = T().vec3f(O2.POSITION).vec4u8(O2.OBJECTANDLAYERIDCOLOR);
var I6 = T().vec3f(O2.POSITION).vec2f(O2.UV0).vec4u8(O2.OBJECTANDLAYERIDCOLOR);
var o16 = T().vec3f(O2.POSITION).vec4u8(O2.COLOR).vec4u8(O2.OBJECTANDLAYERIDCOLOR);
var v8 = class {
  constructor(e20) {
    this.vertexBufferLayout = e20;
  }
  allocate(e20) {
    return this.vertexBufferLayout.createBuffer(e20);
  }
  elementCount(e20) {
    return e20.indices.get(O2.POSITION).length;
  }
  write(e20, t22, O10, f17, u20) {
    m4(O10, this.vertexBufferLayout, e20, t22, f17, u20);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/ColorMaterialTechnique.js
var j6 = class extends e11 {
  initializeConfiguration(e20, t22) {
    t22.hasWebGL2Context = e20.rctx.type === r12.WEBGL2;
  }
  initializeProgram(e20) {
    return new o10(e20.rctx, j6.shader.get().build(this.configuration), E4);
  }
  _createPipeline(t22, r25) {
    const i23 = this.configuration, a17 = t22 === o9.NONE, f17 = t22 === o9.FrontFace;
    return W({ blending: i23.output !== h5.Color && i23.output !== h5.Alpha || !i23.transparent ? null : a17 ? c6 : A4(t22), culling: h8(i23.cullFace), depthTest: { func: l15(t22) }, depthWrite: a17 || f17 ? i23.writeDepth && a10 : null, colorWrite: _5, stencilWrite: i23.hasOccludees ? e12 : null, stencilTest: i23.hasOccludees ? r25 ? o11 : f7 : null, polygonOffset: a17 || f17 ? i23.polygonOffset && y7 : a11(i23.enableOffset) });
  }
  initializePipeline() {
    return this._occludeePipelineState = this._createPipeline(this.configuration.transparencyPassType, true), this._createPipeline(this.configuration.transparencyPassType, false);
  }
  getPipelineState(e20, t22) {
    return t22 ? this._occludeePipelineState : super.getPipelineState(e20, t22);
  }
};
j6.shader = new t8(f8, () => import("./ColorMaterial.glsl-YARAMXRP.js"));
var y7 = { factor: 1, units: 1 };

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/ColorMaterialTechniqueConfiguration.js
var p7 = class extends s10 {
  constructor() {
    super(...arguments), this.output = h5.Color, this.cullFace = n14.None, this.hasSlicePlane = false, this.hasVertexColors = false, this.transparent = false, this.polygonOffset = false, this.enableOffset = true, this.writeDepth = true, this.hasOccludees = false, this.transparencyPassType = o9.NONE, this.hasMultipassTerrain = false, this.cullAboveGround = false, this.objectAndLayerIdColorInstanced = false;
  }
};
e4([e13({ count: h5.COUNT })], p7.prototype, "output", void 0), e4([e13({ count: n14.COUNT })], p7.prototype, "cullFace", void 0), e4([e13()], p7.prototype, "hasSlicePlane", void 0), e4([e13()], p7.prototype, "hasVertexColors", void 0), e4([e13()], p7.prototype, "transparent", void 0), e4([e13()], p7.prototype, "polygonOffset", void 0), e4([e13()], p7.prototype, "enableOffset", void 0), e4([e13()], p7.prototype, "writeDepth", void 0), e4([e13()], p7.prototype, "hasOccludees", void 0), e4([e13({ count: o9.COUNT })], p7.prototype, "transparencyPassType", void 0), e4([e13()], p7.prototype, "hasMultipassTerrain", void 0), e4([e13()], p7.prototype, "cullAboveGround", void 0), e4([e13()], p7.prototype, "objectAndLayerIdColorInstanced", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/ColorMaterial.js
var m9 = class extends d6 {
  constructor(e20) {
    super(e20, new _9()), this.supportsEdges = true, this._configuration = new p7();
  }
  getConfiguration(e20, t22) {
    return this._configuration.output = e20, this._configuration.cullFace = this.parameters.cullFace, this._configuration.hasVertexColors = this.parameters.hasVertexColors, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.transparent = this.parameters.transparent, this._configuration.polygonOffset = this.parameters.polygonOffset, this._configuration.writeDepth = this.parameters.writeDepth, this._configuration.hasOccludees = this.parameters.hasOccludees, this._configuration.transparencyPassType = t22.transparencyPassType, this._configuration.enableOffset = t22.camera.relativeElevation < S2, this._configuration.hasMultipassTerrain = t22.multipassTerrain.enabled, this._configuration.cullAboveGround = t22.multipassTerrain.cullAboveGround, this._configuration;
  }
  intersect(e20, t22, r25, s27, i23, a17, o20) {
    x6(e20, t22, s27, i23, a17, void 0, o20);
  }
  requiresSlot(e20, r25) {
    if (r25 === h5.Color || r25 === h5.Alpha || r25 === h5.Highlight || r25 === h5.Depth && this.parameters.writeLinearDepth || r25 === h5.ObjectAndLayerIdColor) {
      if (e20 === E8.DRAPED_MATERIAL)
        return true;
      if (r25 === h5.Highlight)
        return e20 === E8.OPAQUE_MATERIAL;
      return e20 === (this.parameters.transparent ? this.parameters.writeDepth ? E8.TRANSPARENT_MATERIAL : E8.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL : E8.OPAQUE_MATERIAL);
    }
    return false;
  }
  createGLMaterial(e20) {
    return new d9(e20);
  }
  createBufferWriter() {
    return new v8(has("enable-feature:objectAndLayerId-rendering") ? o16 : u19);
  }
};
var d9 = class extends t7 {
  _updateOccludeeState(e20) {
    e20.hasOccludees !== this._material.parameters.hasOccludees && this._material.setParameters({ hasOccludees: e20.hasOccludees });
  }
  beginSlot(e20) {
    return this._output !== h5.Color && this._output !== h5.Alpha || this._updateOccludeeState(e20), this.ensureTechnique(j6, e20);
  }
};
var _9 = class extends h7 {
  constructor() {
    super(...arguments), this.color = l6, this.transparent = false, this.writeDepth = true, this.writeLinearDepth = false, this.hasVertexColors = false, this.polygonOffset = false, this.hasSlicePlane = false, this.cullFace = n14.None, this.hasOccludees = false;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/lineStippleUtils.js
var d10 = { dash: [4, 3], dot: [1, 3], "long-dash": [8, 3], "short-dash": [4, 1], "short-dot": [1, 1] };
var s16 = { dash: d10.dash, "dash-dot": [...d10.dash, ...d10.dot], dot: d10.dot, "long-dash": d10["long-dash"], "long-dash-dot": [...d10["long-dash"], ...d10.dot], "long-dash-dot-dot": [...d10["long-dash"], ...d10.dot, ...d10.dot], none: null, "short-dash": d10["short-dash"], "short-dash-dot": [...d10["short-dash"], ...d10["short-dot"]], "short-dash-dot-dot": [...d10["short-dash"], ...d10["short-dot"], ...d10["short-dot"]], "short-dot": d10["short-dot"], solid: null };
var h12 = 8;
function n17(t22, d14 = 2) {
  return t(t22) ? t22 : { pattern: t22.slice(), pixelRatio: d14 };
}
function r16(o20, t22 = 2) {
  return { pattern: [o20, o20], pixelRatio: t22 };
}
function a13(o20) {
  return r(o20) && "style" === o20.type ? l20(o20.style) : null;
}
function l20(o20) {
  return r(o20) ? n17(s16[o20], h12) : null;
}

// node_modules/@arcgis/core/views/3d/support/engineContent/line.js
function m10(t22, e20 = null) {
  const r25 = [], o20 = [];
  E11(t22, o20, r25);
  const a17 = o20[0][1].data, n23 = r25[0][1].length, i23 = new Array(n23).fill(0);
  return T5(t22, o20, r25), A8(t22, o20, r25, i23), I7(t22, o20, r25, i23), O8(t22, o20, r25, i23), b8(t22, o20, r25, i23), R6(t22, o20, r25, i23), g5(t22, o20, r25, i23), y8(t22, o20, r25, a17), new d2(o20, r25, a8.Line, e20);
}
function E11(t22, e20, r25) {
  const { attributeData: { position: a17 }, removeDuplicateStartEnd: n23 } = t22, i23 = d11(a17) && n23, s27 = a17.length / 3 - (i23 ? 1 : 0), u20 = new Array(2 * (s27 - 1)), c16 = i23 ? t3(a17, 0, a17.length - 3) : a17;
  let l23 = 0;
  for (let o20 = 0; o20 < s27 - 1; o20++)
    u20[l23++] = o20, u20[l23++] = o20 + 1;
  e20.push([O2.POSITION, { size: 3, data: c16, exclusive: i23 }]), r25.push([O2.POSITION, u20]);
}
function T5(e20, r25, o20) {
  const a17 = e20.attributeData.mapPosition;
  t(a17) || (o20.push([O2.MAPPOS, o20[0][1]]), r25.push([O2.MAPPOS, { size: 3, data: a17 }]));
}
function A8(t22, o20, a17, n23) {
  if (r(t22.attributeData.colorFeature))
    return;
  const i23 = t22.attributeData.color;
  o20.push([O2.COLOR, { size: 4, data: i(i23, _2) }]), a17.push([O2.COLOR, n23]);
}
function O8(t22, r25, o20, a17) {
  if (!r(t22.attributeData.normal))
    return;
  const n23 = t22.attributeData.normal;
  r25.push([O2.NORMAL, { size: 3, data: n23 }]), o20.push([O2.NORMAL, a17]);
}
function b8(e20, r25, o20, a17) {
  const n23 = e20.attributeData.colorFeature;
  t(n23) || (r25.push([O2.COLORFEATUREATTRIBUTE, { size: 1, data: new Float32Array([n23]) }]), o20.push([O2.COLOR, a17]));
}
function I7(t22, o20, a17, n23) {
  if (r(t22.attributeData.sizeFeature))
    return;
  const i23 = t22.attributeData.size;
  o20.push([O2.SIZE, { size: 1, data: [i(i23, 1)] }]), a17.push([O2.SIZE, n23]);
}
function R6(e20, r25, o20, a17) {
  const n23 = e20.attributeData.sizeFeature;
  t(n23) || (r25.push([O2.SIZEFEATUREATTRIBUTE, { size: 1, data: new Float32Array([n23]) }]), o20.push([O2.SIZEFEATUREATTRIBUTE, a17]));
}
function g5(e20, r25, o20, a17) {
  const n23 = e20.attributeData.opacityFeature;
  t(n23) || (r25.push([O2.OPACITYFEATUREATTRIBUTE, { size: 1, data: new Float32Array([n23]) }]), o20.push([O2.OPACITYFEATUREATTRIBUTE, a17]));
}
function y8(e20, r25, o20, i23) {
  if (t(e20.overlayInfo) || e20.overlayInfo.renderCoordsHelper.viewingMode !== l9.Global || !e20.overlayInfo.spatialReference.isGeographic)
    return;
  const s27 = new Float64Array(i23.length), p10 = u4(e20.overlayInfo.spatialReference);
  for (let t22 = 0; t22 < s27.length; t22 += 3)
    ee(i23, t22, s27, t22, p10);
  const f17 = i23.length / 3, m12 = new Float32Array(f17 + 1);
  let E14 = F6, T9 = j7, A12 = 0, O10 = 0;
  o(E14, s27[O10++], s27[O10++], s27[O10++]), m12[0] = 0;
  for (let t22 = 1; t22 < f17 + 1; ++t22)
    t22 === f17 && (O10 = 0), o(T9, s27[O10++], s27[O10++], s27[O10++]), A12 += H2(E14, T9), m12[t22] = A12, [E14, T9] = [T9, E14];
  r25.push([O2.DISTANCETOSTART, { size: 1, data: m12 }]), o20.push([O2.DISTANCETOSTART, o20[0][1]]);
}
function d11(t22) {
  const e20 = t22.length;
  return t22[0] === t22[e20 - 3] && t22[1] === t22[e20 - 2] && t22[2] === t22[e20 - 1];
}
var D4;
!function(t22) {
  t22[t22.KEEP = 0] = "KEEP", t22[t22.REMOVE = 1] = "REMOVE";
}(D4 || (D4 = {}));
var F6 = n();
var j7 = n();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Camera.js
var J3 = class {
  constructor(t22 = null, i23 = null, r25 = null) {
    this._viewUp = n(), this._viewForward = n(), this._viewRight = n(), this._ray = d(), this._viewport = r6(0, 0, 1, 1), this._padding = r6(0, 0, 0, 0), this._fov = 55 / 180 * Math.PI, this._nearFar = r10(1, 1e3), this._viewDirty = true, this._viewMatrix = e8(), this._projectionDirty = true, this._projectionMatrix = e8(), this._viewProjectionDirty = true, this._viewProjectionMatrix = e8(), this._viewInverseTransposeMatrixDirty = true, this._viewInverseTransposeMatrix = e8(), this._inverseProjectionDirty = true, this._inverseProjectionMatrix = null, this._frustumDirty = true, this._frustum = H3(), this._fullViewport = n10(), this._pixelRatio = 1, this.relativeElevation = 0, r(t22) && r3(this._ray.origin, t22), this._center = r(i23) ? t2(i23) : n(), this._up = r(r25) ? t2(r25) : r2(0, 0, 1);
  }
  get pixelRatio() {
    return this._pixelRatio;
  }
  set pixelRatio(t22) {
    this._pixelRatio = t22 > 0 ? t22 : 1;
  }
  get eye() {
    return this._ray.origin;
  }
  set eye(t22) {
    this._compareAndSetView(t22, this._ray.origin);
  }
  get center() {
    return this._center;
  }
  set center(t22) {
    this._compareAndSetView(t22, this._center);
  }
  get ray() {
    return e3(this._ray.direction, this.center, this.eye), this._ray;
  }
  get up() {
    return this._up;
  }
  set up(t22) {
    this._compareAndSetView(t22, this._up);
  }
  get viewMatrix() {
    return this._ensureViewClean(), this._viewMatrix;
  }
  set viewMatrix(t22) {
    n7(this._viewMatrix, t22), this._viewDirty = false, this._viewInverseTransposeMatrixDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true;
  }
  get viewForward() {
    return this._ensureViewClean(), this._viewForward;
  }
  get viewUp() {
    return this._ensureViewClean(), this._viewUp;
  }
  get viewRight() {
    return this._ensureViewClean(), this._viewRight;
  }
  get nearFar() {
    return this._nearFar;
  }
  get near() {
    return this._nearFar[0];
  }
  set near(t22) {
    this._nearFar[0] !== t22 && (this._nearFar[0] = t22, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get far() {
    return this._nearFar[1];
  }
  set far(t22) {
    this._nearFar[1] !== t22 && (this._nearFar[1] = t22, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get viewport() {
    return this._viewport;
  }
  set viewport(t22) {
    this.x = t22[0], this.y = t22[1], this.width = t22[2], this.height = t22[3];
  }
  get x() {
    return this._viewport[0];
  }
  set x(t22) {
    t22 += this._padding[it.LEFT], this._viewport[0] !== t22 && (this._viewport[0] = t22, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get y() {
    return this._viewport[1];
  }
  set y(t22) {
    t22 += this._padding[it.BOTTOM], this._viewport[1] !== t22 && (this._viewport[1] = t22, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get width() {
    return this._viewport[2];
  }
  set width(t22) {
    this._viewport[2] !== t22 && (this._viewport[2] = t22, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get height() {
    return this._viewport[3];
  }
  set height(t22) {
    this._viewport[3] !== t22 && (this._viewport[3] = t22, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get fullWidth() {
    return this._viewport[2] + this._padding[it.RIGHT] + this._padding[it.LEFT];
  }
  set fullWidth(t22) {
    this.width = t22 - (this._padding[it.RIGHT] + this._padding[it.LEFT]);
  }
  get fullHeight() {
    return this._viewport[3] + this._padding[it.TOP] + this._padding[it.BOTTOM];
  }
  set fullHeight(t22) {
    this.height = t22 - (this._padding[it.TOP] + this._padding[it.BOTTOM]);
  }
  get fullViewport() {
    return this._fullViewport[0] = this._viewport[0] - this._padding[it.LEFT], this._fullViewport[1] = this._viewport[1] - this._padding[it.BOTTOM], this._fullViewport[2] = this.fullWidth, this._fullViewport[3] = this.fullHeight, this._fullViewport;
  }
  get aspect() {
    return this.width / this.height;
  }
  get padding() {
    return this._padding;
  }
  set padding(t22) {
    this._padding[it.TOP] === t22[it.TOP] && this._padding[it.RIGHT] === t22[it.RIGHT] && this._padding[it.BOTTOM] === t22[it.BOTTOM] && this._padding[it.LEFT] === t22[it.LEFT] || (this._viewport[0] += t22[it.LEFT] - this._padding[it.LEFT], this._viewport[1] += t22[it.BOTTOM] - this._padding[it.BOTTOM], this._viewport[2] -= t22[it.RIGHT] + t22[it.LEFT] - (this._padding[it.RIGHT] + this._padding[it.LEFT]), this._viewport[3] -= t22[it.TOP] + t22[it.BOTTOM] - (this._padding[it.TOP] + this._padding[it.BOTTOM]), a2(this._padding, t22), this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get viewProjectionMatrix() {
    return this._viewProjectionDirty && (u6(this._viewProjectionMatrix, this.projectionMatrix, this.viewMatrix), this._viewProjectionDirty = false), this._viewProjectionMatrix;
  }
  get projectionMatrix() {
    if (this._projectionDirty) {
      const t22 = this.width, i23 = this.height, e20 = this.near * Math.tan(this.fovY / 2), r25 = e20 * this.aspect;
      A2(this._projectionMatrix, -r25 * (1 + 2 * this._padding[it.LEFT] / t22), r25 * (1 + 2 * this._padding[it.RIGHT] / t22), -e20 * (1 + 2 * this._padding[it.BOTTOM] / i23), e20 * (1 + 2 * this._padding[it.TOP] / i23), this.near, this.far), this._projectionDirty = false;
    }
    return this._projectionMatrix;
  }
  get inverseProjectionMatrix() {
    return t(this._inverseProjectionMatrix) && (this._inverseProjectionMatrix = e8()), this._inverseProjectionDirty && h2(this._inverseProjectionMatrix, this.projectionMatrix), this._inverseProjectionMatrix;
  }
  set projectionMatrix(t22) {
    n7(this._projectionMatrix, t22), this._projectionDirty = false, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true;
  }
  get fov() {
    return this._fov;
  }
  set fov(t22) {
    this._fov = t22, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true;
  }
  get fovX() {
    return g3(this._fov, this.width, this.height);
  }
  set fovX(t22) {
    this._fov = l12(t22, this.width, this.height), this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true;
  }
  get fovY() {
    return k2(this._fov, this.width, this.height);
  }
  set fovY(t22) {
    this._fov = m3(t22, this.width, this.height), this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true;
  }
  get distance() {
    return x(this._center, this.eye);
  }
  get frustum() {
    return this._recomputeFrustum(), this._frustum;
  }
  get viewInverseTransposeMatrix() {
    return (this._viewInverseTransposeMatrixDirty || this._viewDirty) && (h2(this._viewInverseTransposeMatrix, this.viewMatrix), o3(this._viewInverseTransposeMatrix, this._viewInverseTransposeMatrix), this._viewInverseTransposeMatrixDirty = false), this._viewInverseTransposeMatrix;
  }
  depthNDCToWorld(t22) {
    const i23 = 2 * t22 - 1;
    return 2 * this.near * this.far / (this.far + this.near - i23 * (this.far - this.near));
  }
  get perRenderPixelRatio() {
    return Math.tan(this.fovX / 2) / (this.width / 2);
  }
  get perScreenPixelRatio() {
    return this.perRenderPixelRatio * this._pixelRatio;
  }
  get aboveGround() {
    return null != this.relativeElevation && this.relativeElevation >= 0;
  }
  copyFrom(t22) {
    r3(this._ray.origin, t22.eye), r3(this._center, t22.center), r3(this._up, t22.up), a2(this._viewport, t22.viewport), a2(this._padding, t22.padding), a6(this._nearFar, t22.nearFar), this._fov = t22.fov, this.relativeElevation = t22.relativeElevation;
    const i23 = t22;
    return this._viewDirty = i23._viewDirty, this._viewDirty || (n7(this._viewMatrix, t22.viewMatrix), r3(this._viewRight, t22.viewRight), r3(this._viewUp, t22.viewUp), r3(this._viewForward, t22.viewForward)), i23._projectionDirty ? this._projectionDirty = true : (n7(this._projectionMatrix, t22.projectionMatrix), this._projectionDirty = false), this._viewProjectionDirty = true, this._inverseProjectionDirty = true, this._frustumDirty = i23._frustumDirty, this._frustumDirty || (u16(this._frustum, t22.frustum), this._frustumDirty = false), i23._viewInverseTransposeMatrixDirty ? this._viewInverseTransposeMatrixDirty = true : (n7(this._viewInverseTransposeMatrix, t22.viewInverseTransposeMatrix), this._viewInverseTransposeMatrixDirty = false), a2(this._fullViewport, t22.fullViewport), this._pixelRatio = t22.pixelRatio, this;
  }
  copyViewFrom(t22) {
    this.eye = t22.eye, this.center = t22.center, this.up = t22.up;
  }
  clone() {
    return new J3().copyFrom(this);
  }
  equals(t22) {
    return F(this.eye, t22.eye) && F(this._center, t22.center) && F(this._up, t22.up) && D(this._viewport, t22.viewport) && D(this._padding, t22.padding) && E(this._nearFar, t22.nearFar) && this._fov === t22.fov && this._pixelRatio === t22.pixelRatio && this.relativeElevation === t22.relativeElevation;
  }
  almostEquals(t22) {
    if (this._pixelRatio !== t22.pixelRatio || Math.abs(t22.fov - this._fov) >= 1e-3)
      return false;
    const i23 = 5e-4, e20 = 1 - 1e-10;
    J(Z4, t22.eye, t22.center), J($3, this.eye, this._center);
    const r25 = P(Z4, $3), s27 = Z(Z4), h15 = Z($3);
    return r25 * r25 >= e20 * s27 * h15 && X(t22.eye, this.eye) < Math.max(s27, h15) * i23 * i23 && b2(t22.padding, this._padding) < 0.5 && b2(t22.viewport, this._viewport) < 0.5;
  }
  computeRenderPixelSizeAt(t22) {
    return this.computeRenderPixelSizeAtDist(this._viewDirectionDistance(t22));
  }
  computeRenderPixelSizeAtDist(t22) {
    return t22 * this.perRenderPixelRatio;
  }
  computeScreenPixelSizeAt(t22) {
    return this.computeScreenPixelSizeAtDist(this._viewDirectionDistance(t22));
  }
  _viewDirectionDistance(t22) {
    return Math.abs(f2(this.viewForward, e3(Z4, t22, this.eye)));
  }
  computeScreenPixelSizeAtDist(t22) {
    return t22 * this.perScreenPixelRatio;
  }
  computeDistanceFromRadius(t22, i23) {
    return t22 / Math.tan(Math.min(this.fovX, this.fovY) / (2 * (i23 || 1)));
  }
  getScreenCenter(t22 = i2()) {
    return t22[0] = (this.padding[it.LEFT] + this.width / 2) / this._pixelRatio, t22[1] = (this.padding[it.TOP] + this.height / 2) / this._pixelRatio, t22;
  }
  getRenderCenter(t22, i23 = 0.5, e20 = 0.5) {
    return t22[0] = this.padding[it.LEFT] + this.width * i23, t22[1] = this.padding[it.BOTTOM] + this.height * e20, t22[2] = 0.5, t22;
  }
  setGLViewport(t22) {
    const i23 = this.viewport, e20 = this.padding;
    t22.setViewport(i23[0] - e20[3], i23[1] - e20[2], i23[2] + e20[1] + e20[3], i23[3] + e20[0] + e20[2]);
  }
  applyProjection(t22, e20) {
    t22 !== K3 && r3(K3, t22), K3[3] = 1, w2(K3, K3, this.projectionMatrix);
    const r25 = Math.abs(K3[3]);
    g(K3, K3, 1 / r25);
    const s27 = this.fullViewport;
    e20[0] = h(0, s27[0] + s27[2], 0.5 + 0.5 * K3[0]), e20[1] = h(0, s27[1] + s27[3], 0.5 + 0.5 * K3[1]), e20[2] = 0.5 * (K3[2] + 1), e20[3] = r25;
  }
  unapplyProjection(t22, i23) {
    const e20 = this.fullViewport;
    K3[0] = (t22[0] / (e20[0] + e20[2]) * 2 - 1) * t22[3], K3[1] = (t22[1] / (e20[1] + e20[3]) * 2 - 1) * t22[3], K3[2] = (2 * t22[2] - 1) * t22[3], K3[3] = t22[3], w2(K3, K3, this.inverseProjectionMatrix), i23[0] = K3[0], i23[1] = K3[1], i23[2] = K3[2];
  }
  projectToScreen(t22, i23) {
    return this.projectToRenderScreen(t22, tt), this.renderToScreen(tt, i23), i23;
  }
  projectToRenderScreen(t22, e20) {
    if (K3[0] = t22[0], K3[1] = t22[1], K3[2] = t22[2], K3[3] = 1, w2(K3, K3, this.viewProjectionMatrix), 0 === K3[3])
      return null;
    g(K3, K3, 1 / Math.abs(K3[3]));
    const r25 = this.fullViewport;
    return "x" in e20 ? (e20.x = h(0, r25[0] + r25[2], 0.5 + 0.5 * K3[0]), e20.y = h(0, r25[1] + r25[3], 0.5 + 0.5 * K3[1])) : (e20[0] = h(0, r25[0] + r25[2], 0.5 + 0.5 * K3[0]), e20[1] = h(0, r25[1] + r25[3], 0.5 + 0.5 * K3[1]), e20.length > 2 && (e20[2] = 0.5 * (K3[2] + 1))), e20;
  }
  unprojectFromScreen(t22, i23) {
    return this.unprojectFromRenderScreen(this.screenToRender(t22, tt), i23);
  }
  unprojectFromRenderScreen(t22, i23) {
    if (u6(Q4, this.projectionMatrix, this.viewMatrix), !h2(Q4, Q4))
      return null;
    const e20 = this.fullViewport;
    return K3[0] = 2 * (t22[0] - e20[0]) / e20[2] - 1, K3[1] = 2 * (t22[1] - e20[1]) / e20[3] - 1, K3[2] = 2 * t22[2] - 1, K3[3] = 1, w2(K3, K3, Q4), 0 === K3[3] ? null : (i23[0] = K3[0] / K3[3], i23[1] = K3[1] / K3[3], i23[2] = K3[2] / K3[3], i23);
  }
  constrainWindowSize(t22, i23, e20, r25 = e20) {
    const s27 = t22 * this._pixelRatio, h15 = i23 * this._pixelRatio, o20 = Math.max(s27 - e20 / 2, 0), n23 = Math.max(this.fullHeight - h15 - r25 / 2, 0), a17 = -Math.min(s27 - e20 / 2, 0), _10 = -Math.min(this.fullHeight - h15 - r25 / 2, 0);
    return [o20, n23, e20 - a17 - -Math.min(this.fullWidth - s27 - e20 / 2, 0), r25 - _10 - -Math.min(h15 - r25 / 2, 0)];
  }
  computeUp(t22) {
    t22 === l9.Global ? this._computeUpGlobal() : this._computeUpLocal();
  }
  screenToRender(t22, i23) {
    const e20 = t22[0] * this._pixelRatio, r25 = this.fullHeight - t22[1] * this._pixelRatio;
    return i23[0] = e20, i23[1] = r25, i23;
  }
  renderToScreen(t22, i23) {
    const e20 = t22[0] / this._pixelRatio, r25 = (this.fullHeight - t22[1]) / this._pixelRatio;
    i23[0] = e20, i23[1] = r25;
  }
  _computeUpGlobal() {
    e3(Z4, this.center, this.eye);
    const t22 = s2(this.center);
    t22 < 1 ? (o(this._up, 0, 0, 1), this._markViewDirty()) : Math.abs(P(Z4, this.center)) > 0.9999 * s2(Z4) * t22 || (_(this._up, Z4, this.center), _(this._up, this._up, Z4), z(this._up, this._up), this._markViewDirty());
  }
  _computeUpLocal() {
    H(Z4, this.eye, this.center), Math.abs(Z4[2]) <= 0.9999 && (g(Z4, Z4, Z4[2]), o(this._up, -Z4[0], -Z4[1], 1 - Z4[2]), z(this._up, this._up), this._markViewDirty());
  }
  _compareAndSetView(i23, e20) {
    "number" == typeof i23[0] && isFinite(i23[0]) && "number" == typeof i23[1] && isFinite(i23[1]) && "number" == typeof i23[2] && isFinite(i23[2]) ? F(i23, e20) || (r3(e20, i23), this._markViewDirty()) : s3.getLogger("esri.views.3d.webgl-engine.lib.Camera").warn("Camera vector contains invalid number, ignoring value");
  }
  _markViewDirty() {
    this._viewDirty = true, this._frustumDirty = true, this._viewProjectionDirty = true;
  }
  _recomputeFrustum() {
    this._frustumDirty && (s11(this.viewMatrix, this.projectionMatrix, this._frustum), this._frustumDirty = false);
  }
  _ensureViewClean() {
    this._viewDirty && (Q(this._viewMatrix, this.eye, this._center, this._up), o(this._viewForward, -this._viewMatrix[2], -this._viewMatrix[6], -this._viewMatrix[10]), o(this._viewUp, this._viewMatrix[1], this._viewMatrix[5], this._viewMatrix[9]), o(this._viewRight, this._viewMatrix[0], this._viewMatrix[4], this._viewMatrix[8]), this._viewDirty = false, this._viewInverseTransposeMatrixDirty = true);
  }
};
var K3 = n10();
var Q4 = e8();
var Z4 = n();
var $3 = n();
var tt = x2();
var it;
!function(t22) {
  t22[t22.TOP = 0] = "TOP", t22[t22.RIGHT = 1] = "RIGHT", t22[t22.BOTTOM = 2] = "BOTTOM", t22[t22.LEFT = 3] = "LEFT";
}(it || (it = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/LocalOriginFactory.js
var t15 = class {
  constructor(s27, t22) {
    this.vec3 = s27, this.id = t22;
  }
};
function c11(c16, r25, n23, o20) {
  return new t15(r2(c16, r25, n23), o20);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/testUtils.js
var n18 = { rootOrigin: null };

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/GridLocalOriginFactory.js
var j8 = class {
  constructor(t22) {
    this._originSR = t22, this._origins = /* @__PURE__ */ new Map(), this._objects = /* @__PURE__ */ new Map(), this._gridSize = 5e5, this._rootOriginId = "root/" + e6();
  }
  getOrigin(i23) {
    const r25 = this._origins.get(this._rootOriginId);
    if (null == r25) {
      const r26 = n18.rootOrigin;
      if (r(r26))
        return this._origins.set(this._rootOriginId, c11(r26[0], r26[1], r26[2], this._rootOriginId)), this.getOrigin(i23);
      const s27 = c11(i23[0] + Math.random() - 0.5, i23[1] + Math.random() - 0.5, i23[2] + Math.random() - 0.5, this._rootOriginId);
      return this._origins.set(this._rootOriginId, s27), s27;
    }
    const o20 = this._gridSize, e20 = Math.round(i23[0] / o20), a17 = Math.round(i23[1] / o20), n23 = Math.round(i23[2] / o20), h15 = `${e20}/${a17}/${n23}`;
    let c16 = this._origins.get(h15);
    const g7 = 0.5 * o20;
    if (e3(p8, i23, r25.vec3), p8[0] = Math.abs(p8[0]), p8[1] = Math.abs(p8[1]), p8[2] = Math.abs(p8[2]), p8[0] < g7 && p8[1] < g7 && p8[2] < g7) {
      if (c16) {
        const t22 = Math.max(...p8);
        e3(p8, i23, c16.vec3), p8[0] = Math.abs(p8[0]), p8[1] = Math.abs(p8[1]), p8[2] = Math.abs(p8[2]);
        if (Math.max(...p8) < t22)
          return c16;
      }
      return r25;
    }
    return c16 || (c16 = c11(e20 * o20, a17 * o20, n23 * o20, h15), this._origins.set(h15, c16)), c16;
  }
  _drawOriginBox(t22, i23 = r6(1, 1, 0, 1)) {
    const s27 = window.view, o20 = s27._stage, m12 = i23.toString();
    if (!this._objects.has(m12)) {
      this._material = new H7({ width: 2, color: i23 }), o20.add(this._material);
      const t23 = new l19({ isPickable: false }), r25 = new x8({ castShadow: false });
      o20.add(r25), t23.add(r25), o20.add(t23), this._objects.set(m12, r25);
    }
    const d14 = this._objects.get(m12), j11 = [0, 1, 5, 4, 0, 2, 1, 7, 6, 2, 0, 1, 3, 7, 5, 4, 6, 2, 0], p10 = j11.length, b10 = new Array(3 * p10), u20 = new Array(), l23 = 0.5 * this._gridSize;
    for (let r25 = 0; r25 < p10; r25++)
      b10[3 * r25 + 0] = t22[0] + (1 & j11[r25] ? l23 : -l23), b10[3 * r25 + 1] = t22[1] + (2 & j11[r25] ? l23 : -l23), b10[3 * r25 + 2] = t22[2] + (4 & j11[r25] ? l23 : -l23), r25 > 0 && u20.push(r25 - 1, r25);
    xn(b10, this._originSR, 0, b10, s27.renderSpatialReference, 0, p10);
    const M7 = new d2([[O2.POSITION, { size: 3, data: b10, exclusive: true }]], [[O2.POSITION, u20]], a8.Line);
    o20.add(M7), d14.addGeometry(M7, this._material, o4);
  }
  get test() {
    const t22 = this;
    return { set gridSize(i23) {
      t22._gridSize = i23;
    } };
  }
};
var p8 = n();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/IntersectorInterfaces.js
var i14;
var t16;
!function(i23) {
  i23[i23.OBJECT = 0] = "OBJECT", i23[i23.HUD = 1] = "HUD", i23[i23.TERRAIN = 2] = "TERRAIN", i23[i23.OVERLAY = 3] = "OVERLAY", i23[i23.I3S = 4] = "I3S", i23[i23.PCL = 5] = "PCL", i23[i23.LOD = 6] = "LOD", i23[i23.VOXEL = 7] = "VOXEL";
}(i14 || (i14 = {}));
var s17 = class {
  constructor() {
    this.verticalOffset = 0, this.selectionMode = false, this.hud = true, this.selectOpaqueTerrainOnly = true, this.invisibleTerrain = false, this.backfacesTerrain = true, this.isFiltered = false, this.store = t16.ALL;
  }
};
!function(i23) {
  i23[i23.MIN = 0] = "MIN", i23[i23.MINMAX = 1] = "MINMAX", i23[i23.ALL = 2] = "ALL";
}(t16 || (t16 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/intersectorUtils.js
function c12(t22) {
  return r(t22) && r(t22.dist);
}
var f12 = n();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Intersector.js
var A9 = 1e-5;
var T6 = class {
  constructor(t22) {
    this.options = new s17(), this._results = new I8(), this.transform = new u14(), this.tolerance = A9, this.verticalOffset = null, this._ray = d(), this._rayEnd = n(), this._rayBeginTransformed = n(), this._rayEndTransformed = n(), this.viewingMode = t22 != null ? t22 : l9.Global;
  }
  get results() {
    return this._results;
  }
  get ray() {
    return this._ray;
  }
  get rayBegin() {
    return this._ray.origin;
  }
  get rayEnd() {
    return this._rayEnd;
  }
  reset(t22, r25, s27) {
    this.resetWithRay(h3(t22, r25, this._ray), s27);
  }
  resetWithRay(t22, r25) {
    this.camera = r25, t22 !== this._ray && k(t22, this._ray), 0 !== this.options.verticalOffset ? this.viewingMode === l9.Local ? this._ray.origin[2] -= this.options.verticalOffset : this.verticalOffset = this.options.verticalOffset : this.verticalOffset = null, u(this._rayEnd, this._ray.origin, this._ray.direction), this._results.init(this._ray);
  }
  intersect(r25 = null, s27, i23, e20, a17) {
    this.point = s27, this.filterPredicate = e20, this.tolerance = i23 != null ? i23 : A9;
    const n23 = y3(this.verticalOffset);
    if (r(r25) && r25.length > 0) {
      const s28 = a17 ? (t22) => {
        a17(t22) && this.intersectObject(t22);
      } : (t22) => {
        this.intersectObject(t22);
      };
      for (const i24 of r25) {
        const r26 = i24.getSpatialQueryAccelerator && i24.getSpatialQueryAccelerator();
        r(r26) ? (r(n23) ? r26.forEachAlongRayWithVerticalOffset(this._ray.origin, this._ray.direction, s28, n23) : r26.forEachAlongRay(this._ray.origin, this._ray.direction, s28), this.options.selectionMode && this.options.hud && r26.forEachDegenerateObject(s28)) : i24.objects.forAll((t22) => s28(t22));
      }
    }
    this.sortResults();
  }
  intersectObject(r25) {
    const s27 = r25.geometryRecords;
    if (!s27)
      return;
    const i23 = r25.transformation, a17 = y3(this.verticalOffset);
    for (const o20 of s27) {
      const { geometry: s28, material: h15, instanceParameters: d14 } = o20;
      if (u13(d14))
        continue;
      const c16 = s28.id;
      this.transform.setAndInvalidateLazyTransforms(i23, o20.getShaderTransformation()), O(this._rayBeginTransformed, this.rayBegin, this.transform.inverse), O(this._rayEndTransformed, this.rayEnd, this.transform.inverse);
      const l23 = this.transform.transform;
      r(a17) && (a17.objectTransform = this.transform), h15.intersect(s28, d14, this.transform.transform, this, this._rayBeginTransformed, this._rayEndTransformed, (s29, i24, a18, n23, o21, h16) => {
        if (s29 >= 0) {
          if (r(this.filterPredicate) && !this.filterPredicate(this._ray.origin, this._rayEnd, s29))
            return;
          const d15 = n23 ? this._results.hud : this._results, m12 = n23 ? (n24) => {
            const d16 = { object: r25, geometryId: c16, triangleNr: a18, center: r(h16) ? [h16[0], h16[1], h16[2]] : null };
            n24.set(i14.HUD, d16, s29, i24, o4, o21);
          } : (t22) => t22.set(i14.OBJECT, { object: r25, geometryId: c16, triangleNr: a18 }, s29, i24, l23, o21);
          if ((null == d15.min.drapedLayerOrder || o21 >= d15.min.drapedLayerOrder) && (null == d15.min.dist || s29 < d15.min.dist) && m12(d15.min), this.options.store !== t16.MIN && (null == d15.max.drapedLayerOrder || o21 < d15.max.drapedLayerOrder) && (null == d15.max.dist || s29 > d15.max.dist) && m12(d15.max), this.options.store === t16.ALL)
            if (n23) {
              const t22 = new M5(this._ray);
              m12(t22), this._results.hud.all.push(t22);
            } else {
              const t22 = new N2(this._ray);
              m12(t22), this._results.all.push(t22);
            }
        }
      }, o20.shaderTransformation);
    }
  }
  sortResults(t22 = this._results.all) {
    t22.sort((t23, s27) => t23.dist !== s27.dist ? i(t23.dist, 0) - i(s27.dist, 0) : t23.drapedLayerOrder !== s27.drapedLayerOrder ? i(t23.drapedLayerOrder, Number.MAX_VALUE) - i(s27.drapedLayerOrder, Number.MAX_VALUE) : i(s27.drapedLayerGraphicOrder, Number.MIN_VALUE) - i(t23.drapedLayerGraphicOrder, Number.MIN_VALUE));
  }
};
function x10(t22) {
  return new T6(t22);
}
var I8 = class {
  constructor() {
    this.min = new N2(d()), this.max = new N2(d()), this.hud = { min: new M5(d()), max: new M5(d()), all: new Array() }, this.ground = new N2(d()), this.all = [];
  }
  init(t22) {
    this.min.init(t22), this.max.init(t22), this.ground.init(t22), this.all.length = 0, this.hud.min.init(t22), this.hud.max.init(t22), this.hud.all.length = 0;
  }
};
var N2 = class {
  constructor(t22) {
    this.intersector = i14.OBJECT, this.normal = n(), this.transformation = e8(), this._ray = d(), this.init(t22);
  }
  get ray() {
    return this._ray;
  }
  get distanceInRenderSpace() {
    return r(this.dist) ? (g(B4, this.ray.direction, this.dist), s2(B4)) : null;
  }
  getIntersectionPoint(t22) {
    return !!c12(this) && (g(B4, this.ray.direction, this.dist), u(t22, this.ray.origin, B4), true);
  }
  getTransformedNormal(t22) {
    return r3(R7, this.normal), R7[3] = 0, w2(R7, R7, this.transformation), r3(t22, R7), z(t22, t22);
  }
  init(t22) {
    this.dist = null, this.target = null, this.drapedLayerOrder = null, this.drapedLayerGraphicOrder = null, this.intersector = i14.OBJECT, k(t22, this._ray);
  }
  set(t22, i23, a17, n23, o20, h15, c16) {
    this.intersector = t22, this.dist = a17, r3(this.normal, i(n23, b)), n7(this.transformation, i(o20, o4)), this.target = i23, this.drapedLayerOrder = h15, this.drapedLayerGraphicOrder = c16;
  }
  copy(t22) {
    k(t22.ray, this._ray), this.intersector = t22.intersector, this.dist = t22.dist, this.target = t22.target, this.drapedLayerOrder = t22.drapedLayerOrder, this.drapedLayerGraphicOrder = t22.drapedLayerGraphicOrder, r3(this.normal, t22.normal), n7(this.transformation, t22.transformation);
  }
};
var M5 = class extends N2 {
  constructor() {
    super(...arguments), this.intersector = i14.HUD;
  }
};
function U4(t22) {
  return new N2(t22);
}
var B4 = n();
var R7 = n10();

// node_modules/@arcgis/core/views/3d/terrain/Overlay.js
var h13;
!function(e20) {
  e20[e20.None = 0] = "None", e20[e20.ColorAndWater = 1] = "ColorAndWater", e20[e20.Highlight = 2] = "Highlight", e20[e20.Occluded = 3] = "Occluded", e20[e20.ObjectAndLayerIdColor = 4] = "ObjectAndLayerIdColor";
}(h13 || (h13 = {}));
var l21 = class {
  constructor(e20, r25) {
    this.index = e20, this.renderTargets = r25, this._extent = u5(), this.resolution = 0, this.renderLocalOrigin = c11(0, 0, 0, "O"), this.pixelRatio = 1, this.mapUnitsPerPixel = 1, this.canvasGeometries = new d12(), this.validTargets = null, this.hasDrapedFeatureSource = false, this.hasDrapedRasterSource = false, this.hasTargetWithoutRasterImage = false, this.index = e20, this.validTargets = new Array(r25.renderTargets.length).fill(false);
  }
  get extent() {
    return this._extent;
  }
  getValidTexture(e20) {
    return this.validTargets[e20] ? this.renderTargets.getTarget(e20).getTexture() : null;
  }
  get _needsColorWithoutRasterImage() {
    return this.hasDrapedRasterSource && this.hasDrapedFeatureSource && this.hasTargetWithoutRasterImage;
  }
  getColorTexture(e20) {
    const t22 = e20 === h13.ColorAndWater ? this.renderTargets.getTarget(H4.Color) : e20 === h13.Highlight ? this.renderTargets.getTarget(H4.Highlight) : e20 === h13.ObjectAndLayerIdColor ? this.renderTargets.getTarget(H4.ObjectAndLayerIdColor) : this.renderTargets.getTarget(H4.Occluded);
    return t22 ? t22.getTexture() : null;
  }
  getColorTextureNoRasterImage() {
    return this._needsColorWithoutRasterImage ? this.getValidTexture(H4.ColorNoRasterImage) : this.hasDrapedFeatureSource ? this.getValidTexture(H4.Color) : null;
  }
  getNormalTexture(e20) {
    const t22 = e20 === h13.ColorAndWater ? this.renderTargets.getTarget(H4.Water) : null;
    return t22 ? t22.getTexture() : null;
  }
  draw(e20, t22) {
    const r25 = this.computeRenderTargetValidityBitfield();
    for (const s27 of this.renderTargets.renderTargets)
      s27.type !== H4.ColorNoRasterImage || this._needsColorWithoutRasterImage ? this.validTargets[s27.type] = e20.drawTarget(this, s27, t22) : this.validTargets[s27.type] = false;
    return r25 ^ this.computeRenderTargetValidityBitfield() ? l11.CHANGED : l11.UNCHANGED;
  }
  computeRenderTargetValidityBitfield() {
    const e20 = this.validTargets;
    return +e20[H4.Color] | +e20[H4.ColorNoRasterImage] << 1 | +e20[H4.Highlight] << 2 | +e20[H4.Water] << 3 | +e20[H4.Occluded] << 4;
  }
  setupGeometryViewsCyclical(e20) {
    this.setupGeometryViewsDirect();
    const t22 = 1e-3 * e20.range;
    if (this._extent[0] - t22 <= e20.min) {
      const t23 = this.canvasGeometries.extents[this.canvasGeometries.numViews++];
      z2(this._extent, e20.range, 0, t23);
    }
    if (this._extent[2] + t22 >= e20.max) {
      const t23 = this.canvasGeometries.extents[this.canvasGeometries.numViews++];
      z2(this._extent, -e20.range, 0, t23);
    }
  }
  setupGeometryViewsDirect() {
    this.canvasGeometries.numViews = 1, a5(this.canvasGeometries.extents[0], this._extent);
  }
  hasSomeSizedView() {
    for (let e20 = 0; e20 < this.canvasGeometries.numViews; e20++) {
      const t22 = this.canvasGeometries.extents[e20];
      if (t22[0] !== t22[2] && t22[1] !== t22[3])
        return true;
    }
    return false;
  }
  applyViewport(e20) {
    e20.setViewport(this.index === T2.INNER ? 0 : this.resolution, 0, this.resolution, this.resolution);
  }
};
var d12 = class {
  constructor() {
    this.extents = [u5(), u5(), u5()], this.numViews = 0;
  }
};

// node_modules/@arcgis/core/views/3d/terrain/OverlayFramebufferObject.js
var f13 = class {
  constructor(e20, f17) {
    this._size = n13(), this._fbo = null, this._fbo = new x5(e20, { colorTarget: Y.TEXTURE, depthStencilTarget: V.NONE }, { target: M.TEXTURE_2D, pixelFormat: P2.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D2.CLAMP_TO_EDGE, samplingMode: L.LINEAR_MIPMAP_LINEAR, hasMipmap: f17, maxAnisotropy: 8, width: 0, height: 0 });
  }
  dispose() {
    this._fbo = a(this._fbo);
  }
  getTexture() {
    return this._fbo ? this._fbo.colorTexture : null;
  }
  isValid() {
    return null !== this._fbo;
  }
  resize(e20, t22) {
    this._size[0] = e20, this._size[1] = t22, this._fbo.resize(this._size[0], this._size[1]);
  }
  bind(e20) {
    e20.bindFramebuffer(this._fbo);
  }
  generateMipMap() {
    const e20 = this._fbo.colorTexture;
    e20.descriptor.hasMipmap && e20.generateMipmap();
  }
  disposeRenderTargetMemory() {
    var _a;
    (_a = this._fbo) == null ? void 0 : _a.resize(0, 0);
  }
  get gpuMemoryUsage() {
    var _a, _b;
    return (_b = (_a = this._fbo) == null ? void 0 : _a.gpuMemoryUsage) != null ? _b : 0;
  }
};

// node_modules/@arcgis/core/views/3d/terrain/OverlayRenderTarget.js
var s18 = class {
  constructor(e20, t22, s27, o20 = true) {
    this.output = t22, this.type = s27, this.valid = false, this.lastUsed = 1 / 0, this.fbo = new f13(e20, o20);
  }
};
var o17 = class {
  constructor(r25) {
    this.renderTargets = [new s18(r25, h5.Color, H4.Color), new s18(r25, h5.Color, H4.ColorNoRasterImage), new s18(r25, h5.Highlight, H4.Highlight, false), new s18(r25, h5.Normal, H4.Water), new s18(r25, h5.Color, H4.Occluded)], has("enable-feature:objectAndLayerId-rendering") && this.renderTargets.push(new s18(r25, h5.ObjectAndLayerIdColor, H4.ObjectAndLayerIdColor));
  }
  getTarget(e20) {
    return this.renderTargets[e20].fbo;
  }
  dispose() {
    for (const e20 of this.renderTargets)
      e20.fbo.dispose();
  }
  disposeRenderTargetMemory() {
    for (const e20 of this.renderTargets)
      e20.fbo.disposeRenderTargetMemory();
  }
  validateUsageForTarget(e20, r25, t22) {
    if (e20)
      r25.lastUsed = t22;
    else if (t22 - r25.lastUsed > a14)
      r25.fbo.disposeRenderTargetMemory(), r25.lastUsed = 1 / 0;
    else if (r25.lastUsed < 1 / 0)
      return true;
    return false;
  }
  get gpuMemoryUsage() {
    return this.renderTargets.reduce((e20, r25) => e20 + r25.fbo.gpuMemoryUsage, 0);
  }
};
var a14 = 1e3;

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderTechnique/ShaderTechniqueRepository.js
var n19 = class {
  constructor(e20) {
    this._context = e20, this._perConstructorInstances = new t11(), this._frameCounter = 0, this._keepAliveFrameCount = c13;
  }
  get viewingMode() {
    return this._context.viewingMode;
  }
  get constructionContext() {
    return this._context;
  }
  dispose() {
    this._perConstructorInstances.forEach((e20) => e20.forEach((e21) => e21.technique.destroy())), this._perConstructorInstances.clear();
  }
  acquire(t22, r25 = i16) {
    const s27 = r25.key;
    let n23 = this._perConstructorInstances.get(t22, s27);
    if (t(n23)) {
      const e20 = new t22(this._context, r25, () => this.release(e20));
      n23 = new o18(e20), this._perConstructorInstances.set(t22, s27, n23);
    }
    return ++n23.refCount, n23.technique;
  }
  releaseAndAcquire(e20, r25, s27) {
    if (r(s27)) {
      if (r25.key === s27.key)
        return s27;
      this.release(s27);
    }
    return this.acquire(e20, r25);
  }
  release(t22) {
    if (t(t22) || this._perConstructorInstances.empty)
      return;
    const r25 = this._perConstructorInstances.get(t22.constructor, t22.key);
    t(r25) || (--r25.refCount, 0 === r25.refCount && (r25.refZeroFrame = this._frameCounter));
  }
  frameUpdate() {
    this._frameCounter++, this._keepAliveFrameCount !== c13 && this._perConstructorInstances.forEach((e20, t22) => {
      e20.forEach((e21, r25) => {
        0 === e21.refCount && e21.refZeroFrame + this._keepAliveFrameCount < this._frameCounter && (e21.technique.destroy(), this._perConstructorInstances.delete(t22, r25));
      });
    });
  }
  async reloadAll() {
    const e20 = new Array();
    this._perConstructorInstances.forEach((t22, r25) => {
      const s27 = async (e21, t23) => {
        const r26 = t23.shader;
        r26 && (await r26.reload(), e21.forEach((e22) => e22.technique.reload(this._context)));
      };
      e20.push(s27(t22, r25));
    }), await Promise.all(e20);
  }
};
var o18 = class {
  constructor(e20) {
    this.technique = e20, this.refCount = 0, this.refZeroFrame = 0;
  }
};
var c13 = -1;
var i16 = new t9();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/AutoDisposable.js
var s19 = (s27) => {
  class e20 extends s27 {
    constructor() {
      super(...arguments), this._isDisposed = false;
    }
    dispose() {
      var _a;
      for (const s28 of (_a = this._managedDisposables) != null ? _a : []) {
        const e21 = this[s28];
        this[s28] = null, e21 && "function" == typeof e21.dispose && e21.dispose();
      }
      this._isDisposed = true;
    }
    get isDisposed() {
      return this._isDisposed;
    }
  }
  return e20;
};
var e16 = class extends s19(class {
}) {
};
function i17() {
  return (s27, e20) => {
    var _a, _b, _c;
    s27.hasOwnProperty("_managedDisposables") || (s27._managedDisposables = (_b = (_a = s27._managedDisposables) == null ? void 0 : _a.slice()) != null ? _b : []), (_c = s27._managedDisposables) == null ? void 0 : _c.unshift(e20);
  };
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/GLMaterialRepository.js
var a15 = class {
  constructor(e20, t22, r25, i23) {
    this._textureRepository = e20, this._techniqueRepository = t22, this.materialChanged = r25, this.requestRender = i23, this._id2glMaterialRef = new t11();
  }
  dispose() {
    this._textureRepository.dispose();
  }
  acquire(e20, r25, i23) {
    if (this._ownMaterial(e20), !e20.requiresSlot(r25, i23))
      return null;
    let s27 = this._id2glMaterialRef.get(i23, e20.id);
    if (t(s27)) {
      const t22 = e20.createGLMaterial({ material: e20, techniqueRep: this._techniqueRepository, textureRep: this._textureRepository, output: i23 });
      s27 = new l22(t22), this._id2glMaterialRef.set(i23, e20.id, s27);
    }
    return s27.ref(), s27.glMaterial;
  }
  release(e20, t22) {
    const s27 = this._id2glMaterialRef.get(t22, e20.id);
    r(s27) && (s27.unref(), s27.referenced || (a(s27.glMaterial), this._id2glMaterialRef.delete(t22, e20.id)));
  }
  _ownMaterial(t22) {
    r(t22.repository) && t22.repository !== this && s3.getLogger("esri.views.3d.webgl-engine.lib.GLMaterialRepository").error("Material is already owned by a different material repository"), t22.repository = this;
  }
};
var l22 = class {
  constructor(e20) {
    this.glMaterial = e20, this._refCnt = 0;
  }
  ref() {
    ++this._refCnt;
  }
  unref() {
    --this._refCnt, e9(this._refCnt >= 0);
  }
  get referenced() {
    return this._refCnt > 0;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/BindParameters.js
var g6 = class {
  constructor(g7, a17, o20) {
    this.shadowMap = g7, this.ssaoHelper = a17, this.slicePlane = o20, this.slot = E8.OPAQUE_MATERIAL, this.hasOccludees = false, this.enableFillLights = true, this._inverseViewport = n12(), this.oldLighting = new L3(), this.newLighting = new L3(), this._fadedLighting = new L3(), this._lighting = this.newLighting, this.ssr = new c8(), this.multipassTerrain = new o12(), this.multipassGeometry = new s14(), this.overlays = [], this.cloudsFade = new i11();
  }
  get camera() {
    return this._camera;
  }
  set camera(i23) {
    this._camera = this.ssr.camera = i23, this._inverseViewport[0] = 1 / i23.fullViewport[2], this._inverseViewport[1] = 1 / i23.fullViewport[3];
  }
  get inverseViewport() {
    return this._inverseViewport;
  }
  get lighting() {
    return this._lighting;
  }
  get weatherFading() {
    return this._lighting === this._fadedLighting;
  }
  fadeLighting(i23) {
    const { oldLighting: t22, newLighting: e20 } = this;
    i23 >= 1 ? this._lighting = e20 : (this._fadedLighting.lerpLighting(t22, e20, i23), this._lighting = this._fadedLighting);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/RenderContext.js
var c14 = class {
  constructor(a17, c16, n23, l23 = null) {
    this.rctx = a17, this.sliceHelper = l23, this.lastFrameCamera = new J3(), this.output = h5.Color, this.renderOccludedMask = i18, this.bindParameters = new g6(c16, n23, r(l23) ? l23.plane : null);
  }
  resetRenderOccludedMask() {
    this.renderOccludedMask = i18;
  }
};
var i18 = o8.Occlude | o8.OccludeAndTransparent | o8.OccludeAndTransparentStencil;

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/ShadowMap.js
var J4;
!function(t22) {
  t22[t22.Highlight = 0] = "Highlight", t22[t22.Default = 1] = "Default";
}(J4 || (J4 = {}));
var K4 = class {
  constructor() {
    this.camera = new J3(), this.lightMat = e8();
  }
};
var Q5 = class {
  constructor(t22, e20) {
    this._rctx = t22, this._viewingMode = e20, this._enabled = false, this._snapshots = new Array(), this._textureSize = 0, this._numCascades = 1, this._maxNumCascades = 4, this._splitSchemeLambda = 0, this._warp = true, this._cascadeDistances = [0, 0, 0, 0, 0], this._usedCascadeDistances = n10(), this._cascades = [new K4(), new K4(), new K4(), new K4()], this._maxTextureSize = Math.min(has("esri-mobile") ? 2048 : 8192, this._rctx.parameters.maxTextureSize);
  }
  get depthTexture() {
    return this._depthTexture;
  }
  get textureSize() {
    return this._textureSize;
  }
  get numCascades() {
    return this._numCascades;
  }
  get cascadeDistances() {
    return r4(this._usedCascadeDistances, this._cascadeDistances[0], this._numCascades > 1 ? this._cascadeDistances[1] : 1 / 0, this._numCascades > 2 ? this._cascadeDistances[2] : 1 / 0, this._numCascades > 3 ? this._cascadeDistances[3] : 1 / 0);
  }
  dispose() {
    this._discardDepthTexture(), this._discardAllSnapshots();
  }
  set maxCascades(e20) {
    this._maxNumCascades = a3(Math.floor(e20), 1, 4);
  }
  get maxCascades() {
    return this._maxNumCascades;
  }
  set enabled(t22) {
    this._enabled = t22, t22 || (this._discardDepthTexture(), this._discardAllSnapshots());
  }
  get enabled() {
    return this._enabled;
  }
  get ready() {
    return this._enabled && r(this._depthTexture);
  }
  getSnapshot(t22) {
    return this.enabled ? this._snapshots[t22] : null;
  }
  getCascades() {
    for (let t22 = 0; t22 < this._numCascades; ++t22)
      ut[t22] = this._cascades[t22];
    return ut.length = this._numCascades, ut;
  }
  start(t22, e20, s27) {
    e9(this.enabled), this._textureSize = this._computeTextureSize(t22.fullWidth, t22.fullHeight), this._ensureDepthTexture();
    const { near: a17, far: r25 } = this._clampNearFar(s27);
    this._computeCascadeDistances(r25, a17), this._setupMatrices(t22, e20);
    const i23 = t22.viewMatrix, c16 = t22.projectionMatrix;
    for (let h15 = 0; h15 < this._numCascades; ++h15)
      this._constructCascade(h15, c16, i23, e20);
    this._lastOrigin = null, this.clear();
  }
  finish(t22) {
    e9(this.enabled), this._rctx.bindFramebuffer(t22);
  }
  getShadowMapMatrices(t22) {
    if (!this._lastOrigin || !F(t22, this._lastOrigin)) {
      this._lastOrigin = this._lastOrigin || n(), r3(this._lastOrigin, t22);
      for (let e20 = 0; e20 < this._numCascades; ++e20) {
        c2(dt, this._cascades[e20].lightMat, t22);
        for (let t23 = 0; t23 < 16; ++t23)
          pt[16 * e20 + t23] = dt[t23];
      }
    }
    return pt;
  }
  takeCascadeSnapshotTo(t22, e20) {
    e9(this.enabled);
    const s27 = this._ensureSnapshot(e20);
    this._bindFbo();
    const a17 = this._rctx, r25 = a17.bindTexture(s27, E3.TEXTURE_UNIT_FOR_UPDATES);
    a17.gl.copyTexSubImage2D(M.TEXTURE_2D, 0, t22.camera.viewport[0], t22.camera.viewport[1], t22.camera.viewport[0], t22.camera.viewport[1], t22.camera.viewport[2], t22.camera.viewport[3]), a17.bindTexture(r25, E3.TEXTURE_UNIT_FOR_UPDATES);
  }
  clear() {
    const t22 = this._rctx;
    this._bindFbo(), t22.setClearColor(1, 1, 1, 1), t22.clearSafe(_3.COLOR_BUFFER_BIT | _3.DEPTH_BUFFER_BIT);
  }
  _computeTextureSize(t22, e20) {
    const s27 = 0.5 * Math.log(t22 * t22 + e20 * e20) * Math.LOG2E, a17 = 0.35, r25 = 2 ** Math.round(s27 + a17);
    return Math.min(this._maxTextureSize, 2 * r25);
  }
  _ensureDepthTexture() {
    if (r(this._depthTexture) && this._depthTexture.descriptor.width === this._textureSize)
      return;
    this._discardDepthTexture();
    const t22 = { target: M.TEXTURE_2D, pixelFormat: P2.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D2.CLAMP_TO_EDGE, samplingMode: L.NEAREST, flipped: true, width: this._textureSize, height: this._textureSize };
    this._depthTexture = new E3(this._rctx, t22), this._fbo = new x5(this._rctx, { colorTarget: Y.TEXTURE, depthStencilTarget: V.DEPTH_RENDER_BUFFER, width: this._textureSize, height: this._textureSize }, this._depthTexture);
  }
  _ensureSnapshot(t22) {
    let e20 = this._snapshots[t22];
    if (r(e20) && e20.descriptor.width === this._textureSize)
      return e20;
    this._discardSnapshot(t22);
    const s27 = { target: M.TEXTURE_2D, pixelFormat: P2.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D2.CLAMP_TO_EDGE, samplingMode: L.NEAREST, flipped: true, width: this._textureSize, height: this._textureSize };
    return e20 = new E3(this._rctx, s27), this._snapshots[t22] = e20, e20;
  }
  _discardDepthTexture() {
    this._fbo = a(this._fbo), this._depthTexture = a(this._depthTexture);
  }
  _discardSnapshot(t22) {
    this._snapshots[t22] = a(this._snapshots[t22]);
  }
  _discardAllSnapshots() {
    for (let t22 = 0; t22 < this._snapshots.length; ++t22)
      this._discardSnapshot(t22);
    this._snapshots.length = 0;
  }
  _bindFbo() {
    const t22 = this._rctx;
    t22.unbindTexture(this._depthTexture), t22.bindFramebuffer(this._fbo);
  }
  _constructCascade(t22, e20, s27, a17) {
    const r25 = this._cascades[t22], i23 = -this._cascadeDistances[t22], o20 = -this._cascadeDistances[t22 + 1], n23 = (e20[10] * i23 + e20[14]) / Math.abs(e20[11] * i23 + e20[15]), _10 = (e20[10] * o20 + e20[14]) / Math.abs(e20[11] * o20 + e20[15]);
    e9(n23 < _10);
    for (let c16 = 0; c16 < 8; ++c16) {
      r4(et, c16 % 4 == 0 || c16 % 4 == 3 ? -1 : 1, c16 % 4 == 0 || c16 % 4 == 1 ? -1 : 1, c16 < 4 ? n23 : _10, 1), w2(st[c16], et, tt2);
      for (let t23 = 0; t23 < 3; ++t23)
        st[c16][t23] /= st[c16][3];
    }
    j(mt, st[0]), c2(Z5, _t, mt), r25.camera.viewMatrix = Z5;
    for (let c16 = 0; c16 < 8; ++c16)
      O(st[c16], st[c16], r25.camera.viewMatrix);
    r3(at, st[0]), r3(rt, st[0]);
    for (let c16 = 1; c16 < 8; ++c16)
      for (let t23 = 0; t23 < 3; ++t23)
        at[t23] = Math.min(at[t23], st[c16][t23]), rt[t23] = Math.max(rt[t23], st[c16][t23]);
    at[2] -= 200, rt[2] += 200, r25.camera.near = -rt[2], r25.camera.far = -at[2], this._warp ? this._constructTrapezoidalProjection(s27, a17, r25) : this._constructOrthogonalProjection(r25), u6(r25.lightMat, r25.camera.projectionMatrix, r25.camera.viewMatrix);
    const m12 = this._textureSize / 2;
    r25.camera.viewport[0] = t22 % 2 == 0 ? 0 : m12, r25.camera.viewport[1] = 0 === Math.floor(t22 / 2) ? 0 : m12, r25.camera.viewport[2] = m12, r25.camera.viewport[3] = m12;
  }
  _constructOrthogonalProjection(t22) {
    F2(t22.camera.projectionMatrix, at[0], rt[0], at[1], rt[1], t22.camera.near, t22.camera.far);
  }
  _constructTrapezoidalProjection(t22, s27, a17) {
    const r25 = 1 / st[0][3], i23 = 1 / st[4][3];
    e9(r25 < i23);
    let c16 = r25 + Math.sqrt(r25 * i23);
    const h15 = Math.sin(l2(t22[2] * s27[0] + t22[6] * s27[1] + t22[10] * s27[2]));
    c16 /= h15, Dt(st, c16, h15, it2, ct, ht, ot, nt), Ut(it2, ct, ot, nt, a17.camera.projectionMatrix), a17.camera.projectionMatrix[10] = 2 / (at[2] - rt[2]), a17.camera.projectionMatrix[14] = -(at[2] + rt[2]) / (at[2] - rt[2]);
  }
  _setupMatrices(t22, e20) {
    u6($4, t22.projectionMatrix, t22.viewMatrix), h2(tt2, $4);
    const s27 = this._viewingMode === l9.Global ? t22.eye : o(mt, 0, 0, 1);
    Q(_t, [0, 0, 0], [-e20[0], -e20[1], -e20[2]], s27);
  }
  _clampNearFar(t22) {
    let { near: e20, far: s27 } = t22;
    return e20 < 2 && (e20 = 2), s27 < 2 && (s27 = 2), e20 >= s27 && (e20 = 2, s27 = 4), { near: e20, far: s27 };
  }
  _computeCascadeDistances(t22, e20) {
    this._numCascades = Math.min(1 + Math.floor(f3(t22 / e20, 4)), this._maxNumCascades);
    const a17 = (t22 - e20) / this._numCascades, r25 = (t22 / e20) ** (1 / this._numCascades);
    let i23 = e20, c16 = e20;
    for (let h15 = 0; h15 < this._numCascades + 1; ++h15)
      this._cascadeDistances[h15] = h(i23, c16, this._splitSchemeLambda), i23 *= r25, c16 += a17;
  }
  get gpuMemoryUsage() {
    var _a, _b;
    return this._snapshots.reduce((t22, e20) => t22 + u11(e20), (_b = (_a = this._fbo) == null ? void 0 : _a.gpuMemoryUsage) != null ? _b : 0);
  }
  get test() {
    const t22 = this;
    return { maxNumCascades: this._maxNumCascades, cascades: this._cascades, textureSize: this._textureSize, set splitSchemeLambda(e20) {
      t22._splitSchemeLambda = e20;
    }, get splitSchemeLambda() {
      return t22._splitSchemeLambda;
    }, set warp(e20) {
      t22._warp = e20;
    }, get warp() {
      return t22._warp;
    } };
  }
};
var Z5 = e8();
var $4 = e8();
var tt2 = e8();
var et = n10();
var st = [];
for (let Ft = 0; Ft < 8; ++Ft)
  st.push(n10());
var at = n();
var rt = n();
var it2 = n12();
var ct = n12();
var ht = n12();
var ot = n12();
var nt = n12();
var _t = e8();
var mt = n();
var ut = [];
var dt = e8();
var pt = new Float32Array(64);
var lt = n12();
var ft = n12();
var xt = [n12(), n12(), n12(), n12()];
var Tt = n12();
var gt = n12();
var bt = n12();
var wt = n12();
var St = n12();
var Mt = n12();
var Ct = n12();
function Dt(t22, e20, s27, a17, r25, i23, c16, h15) {
  r8(lt, 0, 0);
  for (let u20 = 0; u20 < 4; ++u20)
    s5(lt, lt, t22[u20]);
  l7(lt, lt, 0.25), r8(ft, 0, 0);
  for (let u20 = 4; u20 < 8; ++u20)
    s5(ft, ft, t22[u20]);
  l7(ft, ft, 0.25), A3(xt[0], t22[4], t22[5], 0.5), A3(xt[1], t22[5], t22[6], 0.5), A3(xt[2], t22[6], t22[7], 0.5), A3(xt[3], t22[7], t22[4], 0.5);
  let o20 = 0, n23 = b4(xt[0], lt);
  for (let u20 = 1; u20 < 4; ++u20) {
    const t23 = b4(xt[u20], lt);
    t23 < n23 && (n23 = t23, o20 = u20);
  }
  o5(Tt, xt[o20], t22[o20 + 4]);
  const _10 = Tt[0];
  let m12, S7;
  Tt[0] = -Tt[1], Tt[1] = _10, o5(gt, ft, lt), j2(gt, Tt) < 0 && g2(Tt, Tt), A3(Tt, Tt, gt, s27), v(Tt, Tt), m12 = S7 = j2(o5(bt, t22[0], lt), Tt);
  for (let u20 = 1; u20 < 8; ++u20) {
    const e21 = j2(o5(bt, t22[u20], lt), Tt);
    e21 < m12 ? m12 = e21 : e21 > S7 && (S7 = e21);
  }
  a6(a17, lt), l7(bt, Tt, m12 - e20), s5(a17, a17, bt);
  let M7 = -1, C4 = 1, D6 = 0, E14 = 0;
  for (let u20 = 0; u20 < 8; ++u20) {
    o5(wt, t22[u20], a17), v(wt, wt);
    const e21 = Tt[0] * wt[1] - Tt[1] * wt[0];
    e21 > 0 ? e21 > M7 && (M7 = e21, D6 = u20) : e21 < C4 && (C4 = e21, E14 = u20);
  }
  s6(M7 > 0, "leftArea"), s6(C4 < 0, "rightArea"), l7(St, Tt, m12), s5(St, St, lt), l7(Mt, Tt, S7), s5(Mt, Mt, lt), Ct[0] = -Tt[1], Ct[1] = Tt[0];
  const j11 = u10(a17, t22[E14], Mt, s5(bt, Mt, Ct), 1, r25), v10 = u10(a17, t22[D6], Mt, bt, 1, i23), z8 = u10(a17, t22[D6], St, s5(bt, St, Ct), 1, c16), R10 = u10(a17, t22[E14], St, bt, 1, h15);
  s6(j11, "rayRay"), s6(v10, "rayRay"), s6(z8, "rayRay"), s6(R10, "rayRay");
}
function Et(t22, e20) {
  return 3 * e20 + t22;
}
var jt = n12();
function vt(t22, e20) {
  return r8(jt, t22[e20], t22[e20 + 3]), jt;
}
var zt = n12();
var Rt = e7();
function Ut(t22, e20, s27, a17, r25) {
  o5(zt, s27, a17), l7(zt, zt, 0.5), Rt[0] = zt[0], Rt[1] = zt[1], Rt[2] = 0, Rt[3] = zt[1], Rt[4] = -zt[0], Rt[5] = 0, Rt[6] = zt[0] * zt[0] + zt[1] * zt[1], Rt[7] = zt[0] * zt[1] - zt[1] * zt[0], Rt[8] = 1, Rt[Et(0, 2)] = -j2(vt(Rt, 0), t22), Rt[Et(1, 2)] = -j2(vt(Rt, 1), t22);
  let i23 = j2(vt(Rt, 0), s27) + Rt[Et(0, 2)], c16 = j2(vt(Rt, 1), s27) + Rt[Et(1, 2)], h15 = j2(vt(Rt, 0), a17) + Rt[Et(0, 2)], o20 = j2(vt(Rt, 1), a17) + Rt[Et(1, 2)];
  i23 = -(i23 + h15) / (c16 + o20), Rt[Et(0, 0)] += Rt[Et(1, 0)] * i23, Rt[Et(0, 1)] += Rt[Et(1, 1)] * i23, Rt[Et(0, 2)] += Rt[Et(1, 2)] * i23, i23 = 1 / (j2(vt(Rt, 0), s27) + Rt[Et(0, 2)]), c16 = 1 / (j2(vt(Rt, 1), s27) + Rt[Et(1, 2)]), Rt[Et(0, 0)] *= i23, Rt[Et(0, 1)] *= i23, Rt[Et(0, 2)] *= i23, Rt[Et(1, 0)] *= c16, Rt[Et(1, 1)] *= c16, Rt[Et(1, 2)] *= c16, Rt[Et(2, 0)] = Rt[Et(1, 0)], Rt[Et(2, 1)] = Rt[Et(1, 1)], Rt[Et(2, 2)] = Rt[Et(1, 2)], Rt[Et(1, 2)] += 1, i23 = j2(vt(Rt, 1), e20) + Rt[Et(1, 2)], c16 = j2(vt(Rt, 2), e20) + Rt[Et(2, 2)], h15 = j2(vt(Rt, 1), s27) + Rt[Et(1, 2)], o20 = j2(vt(Rt, 2), s27) + Rt[Et(2, 2)], i23 = -0.5 * (i23 / c16 + h15 / o20), Rt[Et(1, 0)] += Rt[Et(2, 0)] * i23, Rt[Et(1, 1)] += Rt[Et(2, 1)] * i23, Rt[Et(1, 2)] += Rt[Et(2, 2)] * i23, i23 = j2(vt(Rt, 1), e20) + Rt[Et(1, 2)], c16 = j2(vt(Rt, 2), e20) + Rt[Et(2, 2)], h15 = -c16 / i23, Rt[Et(1, 0)] *= h15, Rt[Et(1, 1)] *= h15, Rt[Et(1, 2)] *= h15, r25[0] = Rt[0], r25[1] = Rt[1], r25[2] = 0, r25[3] = Rt[2], r25[4] = Rt[3], r25[5] = Rt[4], r25[6] = 0, r25[7] = Rt[5], r25[8] = 0, r25[9] = 0, r25[10] = 1, r25[11] = 0, r25[12] = Rt[6], r25[13] = Rt[7], r25[14] = 0, r25[15] = Rt[8];
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/ChangeSet.js
var r17 = class {
  constructor() {
    this.adds = new l3(), this.removes = new l3(), this.updates = new l3({ allocator: (e20) => e20 || new s20(), deallocator: (e20) => (e20.renderGeometry = null, e20) });
  }
  clear() {
    this.adds.clear(), this.removes.clear(), this.updates.clear();
  }
  prune() {
    this.adds.prune(), this.removes.prune(), this.updates.prune();
  }
};
var s20 = class {
};
var t17 = class {
  constructor() {
    this.adds = new Array(), this.removes = new Array(), this.updates = new Array();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/ModelDirtyTypes.js
var E12;
var I9;
!function(E14) {
  E14[E14.ADD = 0] = "ADD", E14[E14.UPDATE = 1] = "UPDATE", E14[E14.REMOVE = 2] = "REMOVE";
}(E12 || (E12 = {})), function(E14) {
  E14[E14.NONE = 0] = "NONE", E14[E14.VISIBILITIES = 1] = "VISIBILITIES", E14[E14.VERTEXATTRS = 2] = "VERTEXATTRS", E14[E14.TRANSFORMATION = 4] = "TRANSFORMATION", E14[E14.HIGHLIGHTS = 8] = "HIGHLIGHTS", E14[E14.OCCLUDEES = 16] = "OCCLUDEES";
}(I9 || (I9 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/rendererUtils.js
function r18(r25) {
  const n23 = /* @__PURE__ */ new Map(), a17 = (r26) => {
    let t22 = n23.get(r26);
    return t22 || (t22 = new t17(), n23.set(r26, t22)), t22;
  };
  return r25.removes.forAll((e20) => {
    t18(e20) && a17(e20.material).removes.push(e20);
  }), r25.adds.forAll((e20) => {
    t18(e20) && a17(e20.material).adds.push(e20);
  }), r25.updates.forAll((e20) => {
    t18(e20.renderGeometry) && a17(e20.renderGeometry.material).updates.push(e20);
  }), n23;
}
function t18(e20) {
  return e20.data.indexCount >= 1;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/GLMaterials.js
var e17 = class {
  constructor(r25, t22) {
    this._material = r25, this._repository = t22, this._map = /* @__PURE__ */ new Map();
  }
  destroy() {
    this._map.forEach((t22, e20) => {
      r(t22) && this._repository.release(this._material, e20);
    });
  }
  load(e20, s27, i23) {
    if (!this._material.requiresSlot(s27, i23))
      return null;
    this._map.has(i23) || this._map.set(i23, this._repository.acquire(this._material, s27, i23));
    const a17 = this._map.get(i23);
    if (r(a17)) {
      if (a17.ensureResources(e20) === O3.LOADED)
        return a17;
      this._repository.requestRender();
    }
    return null;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/DrawParameters.js
var i19 = class extends c7 {
  constructor(s27 = n()) {
    super(), this.origin = s27, this.slicePlaneLocalOrigin = this.origin;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/AnimationTimer.js
var e18 = class {
  constructor() {
    this.enabled = true, this._time = n4(0);
  }
  get time() {
    return this._time;
  }
  advance(t22) {
    return this._time !== t22.time && (this._time = t22.time, true);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/WaterTechnique.js
var O9 = class extends e11 {
  initializeConfiguration(e20, o20) {
    o20.hasWebGL2Context = e20.rctx.type === r12.WEBGL2, o20.spherical = e20.viewingMode === l9.Global, o20.doublePrecisionRequiresObfuscation = i7(e20.rctx);
  }
  initializeProgram(e20) {
    return new o10(e20.rctx, O9.shader.get().build(this.configuration), E4);
  }
  _setPipelineState(e20) {
    const t22 = this.configuration, r25 = e20 === o9.NONE, i23 = e20 === o9.FrontFace;
    return W({ blending: t22.output !== h5.Normal && t22.output !== h5.Highlight && t22.transparent ? r25 ? c6 : A4(e20) : null, depthTest: { func: l15(e20) }, depthWrite: r25 ? t22.writeDepth && a10 : E7(e20), colorWrite: _5, polygonOffset: r25 || i23 ? null : a11(t22.enableOffset) });
  }
  initializePipeline() {
    return this._setPipelineState(this.configuration.transparencyPassType);
  }
};
O9.shader = new t8(_7, () => import("./WaterSurface.glsl-LG4DVC3V.js"));
var w4 = class extends s10 {
  constructor() {
    super(...arguments), this.output = h5.Color, this.transparencyPassType = o9.NONE, this.spherical = false, this.receiveShadows = false, this.hasSlicePlane = false, this.transparent = false, this.enableOffset = true, this.writeDepth = false, this.hasScreenSpaceReflections = false, this.doublePrecisionRequiresObfuscation = false, this.hasCloudsReflections = false, this.isDraped = false, this.hasMultipassTerrain = false, this.cullAboveGround = false;
  }
};
e4([e13({ count: h5.COUNT })], w4.prototype, "output", void 0), e4([e13({ count: o9.COUNT })], w4.prototype, "transparencyPassType", void 0), e4([e13()], w4.prototype, "spherical", void 0), e4([e13()], w4.prototype, "receiveShadows", void 0), e4([e13()], w4.prototype, "hasSlicePlane", void 0), e4([e13()], w4.prototype, "transparent", void 0), e4([e13()], w4.prototype, "enableOffset", void 0), e4([e13()], w4.prototype, "writeDepth", void 0), e4([e13()], w4.prototype, "hasScreenSpaceReflections", void 0), e4([e13()], w4.prototype, "doublePrecisionRequiresObfuscation", void 0), e4([e13()], w4.prototype, "hasCloudsReflections", void 0), e4([e13()], w4.prototype, "isDraped", void 0), e4([e13()], w4.prototype, "hasMultipassTerrain", void 0), e4([e13()], w4.prototype, "cullAboveGround", void 0), e4([e13({ constValue: d4.Water })], w4.prototype, "pbrMode", void 0), e4([e13({ constValue: true })], w4.prototype, "useCustomDTRExponentForWater", void 0), e4([e13({ constValue: true })], w4.prototype, "highStepCount", void 0), e4([e13({ constValue: false })], w4.prototype, "useFillLights", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/WaterGLMaterial.js
var r19 = class extends t7 {
  _updateShadowState(e20) {
    e20.shadowMap.enabled !== this._material.parameters.receiveShadows && this._material.setParameters({ receiveShadows: e20.shadowMap.enabled });
  }
  _updateSSRState(e20) {
    e20.ssr.enabled !== this._material.parameters.hasScreenSpaceReflections && this._material.setParameters({ hasScreenSpaceReflections: e20.ssr.enabled });
  }
  _updateCloudsReflectionState(t22) {
    const a17 = r(t22.cloudsFade.data);
    a17 !== this._material.parameters.hasCloudsReflections && this._material.setParameters({ hasCloudsReflections: a17 });
  }
  ensureResources(e20) {
    return this._techniqueRepository.constructionContext.waterTextureRepository.ensureResources(e20);
  }
  beginSlot(e20) {
    return this._output === h5.Color && (this._updateShadowState(e20), this._updateSSRState(e20), this._updateCloudsReflectionState(e20)), this._material.setParameters(this._techniqueRepository.constructionContext.waterTextureRepository.passParameters), this.ensureTechnique(O9, e20);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/WaterMaterial.js
var f14 = class extends d6 {
  constructor(e20) {
    super(e20, new d13()), this._configuration = new w4(), this.animation = new e18();
  }
  getConfiguration(e20, t22) {
    return this._configuration.output = e20, this._configuration.writeDepth = this.parameters.writeDepth, this._configuration.receiveShadows = this.parameters.receiveShadows, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.transparent = this.parameters.transparent, this._configuration.hasScreenSpaceReflections = this.parameters.hasScreenSpaceReflections, this._configuration.hasCloudsReflections = this.parameters.hasCloudsReflections, this._configuration.isDraped = this.parameters.isDraped, this._configuration.transparencyPassType = t22.transparencyPassType, this._configuration.enableOffset = t22.camera.relativeElevation < S2, this._configuration.hasMultipassTerrain = t22.multipassTerrain.enabled, this._configuration.cullAboveGround = t22.multipassTerrain.cullAboveGround, this._configuration;
  }
  update(t22) {
    const r25 = Math.min(t22.camera.relativeElevation, t22.camera.distance);
    this.animation.enabled = Math.sqrt(this.parameters.waveTextureRepeat / this.parameters.waveStrength) * r25 < A10;
    const i23 = this.animation.advance(t22);
    return this.setParameters({ timeElapsed: u2(this.animation.time) * this.parameters.animationSpeed }, false), this.animation.enabled && i23;
  }
  intersect(e20, t22, r25, i23, a17, s27, n23) {
    x6(e20, t22, i23, a17, s27, void 0, n23);
  }
  requiresSlot(e20, t22) {
    switch (t22) {
      case h5.Normal:
        return e20 === E8.DRAPED_WATER;
      case h5.Color:
        if (this.parameters.isDraped)
          return e20 === E8.DRAPED_MATERIAL;
        break;
      case h5.Alpha:
        break;
      case h5.Highlight:
        return e20 === E8.OPAQUE_MATERIAL || e20 === E8.DRAPED_MATERIAL;
      default:
        return false;
    }
    let r25 = E8.OPAQUE_MATERIAL;
    return this.parameters.transparent && (r25 = this.parameters.writeDepth ? E8.TRANSPARENT_MATERIAL : E8.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL), e20 === r25;
  }
  createGLMaterial(e20) {
    return new r19(e20);
  }
  createBufferWriter() {
    return new v8(f11);
  }
};
var d13 = class extends h7 {
  constructor() {
    super(...arguments), this.waveStrength = 0.06, this.waveTextureRepeat = 32, this.waveDirection = r10(1, 0), this.waveVelocity = 0.05, this.flowStrength = 0.015, this.flowOffset = -0.5, this.animationSpeed = 0.35, this.timeElapsed = 0, this.color = r6(0, 0, 0, 0), this.transparent = true, this.writeDepth = true, this.hasSlicePlane = false, this.isDraped = false, this.receiveShadows = true, this.hasScreenSpaceReflections = false, this.hasCloudsReflections = false;
  }
};
var A10 = 35e3;

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/renderers/Instance.js
var t19 = class {
  constructor() {
    this.first = 0, this.count = 0;
  }
};
var o19 = class {
  constructor(t22 = 0, o20 = 0) {
    this.from = t22, this.to = o20;
  }
};
var s21 = class extends o19 {
  constructor(t22, o20, s27, r25, i23, n23) {
    super(o20, s27), this.id = t22, this.isVisible = r25, this.hasHighlights = i23, this.hasOccludees = n23;
  }
};
function r20(t22) {
  return Array.from(t22.values()).sort(i20);
}
function i20(t22, o20) {
  return t22.from === o20.from ? t22.to - o20.to : t22.from - o20.from;
}
function n21(t22, o20) {
  const s27 = t22.back();
  if (null == s27) {
    const s28 = t22.pushNew();
    return s28.first = o20.from, void (s28.count = o20.to - o20.from);
  }
  if (c15(s27, o20)) {
    const t23 = o20.from - s27.first + o20.to - o20.from;
    s27.count = t23;
  } else {
    const s28 = t22.pushNew();
    s28.first = o20.from, s28.count = o20.to - o20.from;
  }
}
function c15(t22, o20) {
  return t22.first + t22.count >= o20.from;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/renderers/MergedGeometryBuffer.js
var e19 = class {
  constructor(e20, s27) {
    this._pool = e20, this._size = 0, this._buffer = e20.newBuffer(r21(s27));
  }
  dispose() {
    this._buffer = this._pool.deleteBuffer(this._buffer), this._size = 0;
  }
  release() {
    this.erase(0, this._size), this.dispose();
  }
  get buffer() {
    return this._buffer;
  }
  get size() {
    return this._size;
  }
  grow(e20) {
    this._resize(this._size + e20, true).dispose();
  }
  allocate(e20) {
    return this._resize(e20, false);
  }
  _resize(e20, s27) {
    let r25;
    const i23 = t20(this._buffer.length, this._size, e20);
    if (this._buffer.length !== i23) {
      const e21 = this._pool.newBuffer(i23);
      s27 && (e21.array.set(this._buffer.array.subarray(0, Math.min(this._size, i23))), e21.vao.vertexBuffers.geometry.setSubData(e21.array, 0, 0, e21.array.length)), r25 = this._buffer, this._buffer = e21;
    }
    const f17 = this._size;
    return this._size = e20, r25 ? { dispose: () => {
      r25.array.fill(0, 0, f17), this._pool.deleteBuffer(r25);
    }, copy: (e21, s28, t22) => this._buffer.array.set(r25.array.subarray(s28, t22), e21), hasNewBuffer: true } : { dispose: () => {
    }, copy: (e21, s28, r26) => {
      e21 !== s28 && this._buffer.array.copyWithin(e21, s28, r26);
    }, hasNewBuffer: false };
  }
  erase(e20, s27) {
    this._buffer.array.fill(0, e20, s27);
  }
};
var s22 = 65536;
function r21(e20) {
  return Math.ceil(e20 / s22) * s22;
}
function t20(e20, s27, t22) {
  return s27 <= t22 ? e20 >= t22 ? e20 : r21(Math.max(2 * e20, t22)) : e20 <= 2 * t22 ? e20 : r21(t22);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/StaticFloat32ArrayObject.js
var s23 = class {
  constructor(s27, o20, a17, i23) {
    this.vao = new r13(s27, o20, { geometry: a17 }, { geometry: E5.createVertex(s27, F3.STATIC_DRAW) }), this.array = new Float32Array(i23), this.vao.vertexBuffers.geometry.setSize(this.array.byteLength);
  }
  dispose() {
    this.vao.dispose(true);
  }
  get length() {
    return this.array.length;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/renderers/MergedGeometryBufferPool.js
var s24 = s4 + 1;
var h14 = class {
  constructor(t22, e20, r25) {
    this._rctx = t22, this._locations = e20, this._layout = r25, this._cache = t22.newCache(`MergedRenderer pool ${e6()}`, i21);
  }
  dispose() {
    this._cache.destroy();
  }
  newBuffer(e20) {
    const r25 = e20.toString(), o20 = this._cache.pop(r25);
    if (r(o20)) {
      const t22 = o20.pop();
      return o20.length > 0 && this._cache.put(r25, o20, t22.array.byteLength * o20.length, s24), t22;
    }
    return new s23(this._rctx, this._locations, this._layout, e20);
  }
  deleteBuffer(e20) {
    const r25 = e20.array.byteLength, o20 = e20.array.length.toString(), c16 = this._cache.pop(o20);
    return r(c16) ? (c16.push(e20), this._cache.put(o20, c16, r25 * c16.length, -1)) : this._cache.put(o20, [e20], r25, -1), null;
  }
};
function i21(t22, r25) {
  if (r25 === i3.ALL)
    return void t22.forEach((t23) => t23.dispose());
  const o20 = t22.pop(), c16 = t22.length * o20.array.byteLength;
  return o20.dispose(), c16;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/renderers/MergedRenderer.js
var S5 = class {
  constructor(e20, t22, r25) {
    this._rctx = e20, this._materialRepository = t22, this._material = r25, this.type = "MergedRenderer", this._dataByOrigin = /* @__PURE__ */ new Map(), this._renderCommandData = new l3(), this._hasHighlights = false, this._hasOccludees = false, this._glMaterials = new e17(this._material, this._materialRepository), this._bufferWriter = r25.createBufferWriter(), this._bufferPool = new h14(e20, r25.vertexAttributeLocations, o13(this._bufferWriter.vertexBufferLayout));
  }
  dispose() {
    this._glMaterials.destroy(), this._dataByOrigin.forEach((e20) => e20.geometry.dispose()), this._dataByOrigin.clear(), this._bufferPool.dispose();
  }
  get isEmpty() {
    return 0 === this._dataByOrigin.size;
  }
  get hasHighlights() {
    return this._hasHighlights;
  }
  get hasOccludees() {
    return this._hasOccludees;
  }
  get hasWater() {
    return !this.isEmpty && this._material instanceof f14;
  }
  get rendersOccluded() {
    return !this.isEmpty && this._material.renderOccluded !== o8.Occlude;
  }
  modify(e20) {
    this._updateGeometries(e20.updates), this._addAndRemoveGeometries(e20.adds, e20.removes), this._updateDrawCommands();
  }
  _addAndRemoveGeometries(e20, t22) {
    const r25 = this._bufferWriter, s27 = r25.vertexBufferLayout.stride / 4, a17 = this._dataByOrigin, i23 = D5(e20, t22);
    i23.forEach((e21, t23) => {
      i23.delete(t23);
      const o20 = e21.add.reduce((e22, t24) => e22 + r25.elementCount(t24.data), 0);
      let n23 = a17.get(t23);
      if (null == n23)
        e9(0 === e21.remove.length), n23 = new R8(e21.origin, new e19(this._bufferPool, o20 * s27)), a17.set(t23, n23);
      else if (0 === e21.add.length && n23.instances.size === e21.remove.length)
        return n23.geometry.dispose(), void a17.delete(t23);
      let h15 = 0;
      n23.instances.forEach((e22) => h15 += e22.to - e22.from);
      const d14 = e21.remove.reduce((e22, t24) => e22 + r25.elementCount(t24.data), 0), l23 = n23.geometry.size, m12 = (h15 + o20 - d14) * s27, c16 = P7;
      if (m12 > s22 && (m12 < l23 / 2 || l23 - m12 > 1048576) ? this._removeAndRebuild(n23, e21.remove, s27, m12, c16) : e21.remove.length > 0 && this._remove(n23, e21.remove, s27, c16), e21.add.length > 0) {
        const t24 = L6;
        h4(t24, -e21.origin[0], -e21.origin[1], -e21.origin[2]), this._add(n23, e21.add, s27, t24, c16);
      }
      const g7 = n23.geometry.buffer.vao.vertexBuffers.geometry;
      j9(c16), c16.forAll(({ from: e22, to: t24 }) => {
        if (e22 < t24) {
          const r26 = n23.geometry.buffer.array;
          g7.setSubData(r26, e22, e22, t24);
        }
      }), c16.clear(), n23.drawCommandsDirty = true;
    });
  }
  _updateGeometries(e20) {
    const t22 = this._bufferWriter, r25 = t22.vertexBufferLayout.stride / 4;
    for (const s27 of e20) {
      const e21 = s27.renderGeometry, a17 = this._dataByOrigin.get(e21.origin.id), i23 = a17 && a17.instances.get(e21.id);
      if (!i23)
        return;
      const o20 = s27.updateType;
      if (o20 & I9.VISIBILITIES && (i23.isVisible = e21.instanceParameters.visible), o20 & (I9.HIGHLIGHTS | I9.VISIBILITIES)) {
        const t23 = e21.instanceParameters.visible;
        i23.hasHighlights = !!e21.instanceParameters.highlights && t23;
      }
      if (o20 & I9.OCCLUDEES && (i23.hasOccludees = !!e21.instanceParameters.occludees), o20 & (I9.VERTEXATTRS | I9.TRANSFORMATION)) {
        const { array: s28, vao: o21 } = a17.geometry.buffer;
        l13(e21, T7, G4), t22.write(T7, G4, e21.data, t22.vertexBufferLayout.createView(s28.buffer), i23.from), e9(i23.from + t22.elementCount(e21.data) === i23.to, "material VBO layout has changed"), o21.vertexBuffers.geometry.setSubData(s28, i23.from * r25, i23.from * r25, i23.to * r25);
      }
      a17.drawCommandsDirty = true;
    }
  }
  _updateDrawCommands() {
    this._hasHighlights = false, this._hasOccludees = false, this._dataByOrigin.forEach((t23) => {
      t23.hasHiddenInstances = false, t23.hasHighlights = false, t23.hasOccludees = false, n2(t23.instances, (e20) => (e20.isVisible ? (e20.hasHighlights && (this._hasHighlights = true, t23.hasHighlights = true), e20.hasOccludees && (this._hasOccludees = true, t23.hasOccludees = true)) : t23.hasHiddenInstances = true, t23.hasHiddenInstances && t23.hasHighlights && t23.hasOccludees));
    });
    const t22 = (e20) => {
      if (e20.drawCommandsDefault.clear(), e20.drawCommandsHighlight.clear(), e20.drawCommandsOccludees.clear(), e20.drawCommandsShadowHighlightRest.clear(), 0 === e20.instances.size)
        return;
      if (!M6(e20)) {
        const t24 = e20.drawCommandsDefault.pushNew();
        return t24.first = 1 / 0, t24.count = 0, e20.instances.forEach((e21) => {
          t24.first = Math.min(t24.first, e21.from), t24.count = Math.max(t24.count, e21.to);
        }), void (t24.count -= t24.first);
      }
      const t23 = r20(e20.instances);
      for (const r25 of t23)
        r25.isVisible && (r25.hasOccludees ? n21(e20.drawCommandsOccludees, r25) : n21(e20.drawCommandsDefault, r25), r25.hasHighlights ? n21(e20.drawCommandsHighlight, r25) : n21(e20.drawCommandsShadowHighlightRest, r25));
    };
    this._dataByOrigin.forEach((e20) => {
      e20.drawCommandsDirty && (t22(e20), e20.drawCommandsDirty = false);
    });
  }
  updateAnimation(e20) {
    return this._material.update(e20);
  }
  requiresSlot(e20, t22) {
    return this._material.requiresSlot(e20, t22);
  }
  render(e20, s27) {
    if (!this.requiresSlot(s27.slot, e20))
      return false;
    const a17 = e20 === h5.Highlight || e20 === h5.ShadowHighlight;
    if (a17 && !this._hasHighlights)
      return false;
    const i23 = e20 === h5.ShadowExludeHighlight, o20 = !(a17 || i23);
    if (this._dataByOrigin.forEach((e21) => {
      if (a17 && !e21.hasHighlights)
        return;
      const t22 = (a17 ? e21.drawCommandsHighlight : i23 && M6(e21) ? e21.drawCommandsShadowHighlightRest : e21.drawCommandsDefault) || null, r25 = o20 && e21.drawCommandsOccludees || null;
      ((t22 == null ? void 0 : t22.length) || (r25 == null ? void 0 : r25.length)) && this._renderCommandData.push(new x11(e21.origin, e21.geometry, t22, r25));
    }), 0 === this._renderCommandData.length)
      return false;
    const n23 = this._rctx, h15 = this._glMaterials.load(n23, s27.slot, e20);
    if (t(h15))
      return this._renderCommandData.clear(), false;
    const l23 = h15.beginSlot(s27), m12 = n23.bindTechnique(l23, this._material.parameters, s27);
    return this._renderCommandData.forAll((e21) => {
      m12.bindDraw(e21, s27, this._material.parameters);
      const { geometry: t22, renderCommands: a18, occludeeCommands: i24 } = e21;
      l23.ensureAttributeLocations(t22.buffer.vao), n23.bindVAO(t22.buffer.vao);
      const o21 = l23.primitiveType;
      r(a18) && a18.length > 0 && (l23.bindPipelineState(n23, s27.slot, false), a18.forAll((e22) => n23.drawArrays(o21, e22.first, e22.count))), r(i24) && i24.length > 0 && (l23.bindPipelineState(n23, s27.slot, true), i24.forAll((e22) => n23.drawArrays(o21, e22.first, e22.count)));
    }), this._renderCommandData.clear(), true;
  }
  _removeAndRebuild(e20, t22, r25, s27, a17) {
    for (const d14 of t22)
      e20.instances.delete(d14.id);
    const i23 = r20(e20.instances);
    e20.instances.clear();
    const o20 = e20.geometry.size, n23 = e20.geometry.allocate(s27);
    let h15 = 0;
    for (const d14 of i23) {
      const t23 = d14.from * r25, s28 = d14.to * r25;
      n23.copy(h15, t23, s28), d14.from = h15 / r25, h15 += s28 - t23, d14.to = h15 / r25, e20.instances.set(d14.id, d14);
    }
    a17.push(new o19(0, n23.hasNewBuffer ? e20.geometry.buffer.array.length : o20)), n23.dispose(), e20.geometry.erase(h15, a17.back().to), e20.holes.clear();
  }
  _remove(e20, t22, r25, s27) {
    for (const a17 of t22) {
      const t23 = a17.id, i23 = e20.instances.get(t23), o20 = i23.from * r25, n23 = i23.to * r25;
      e20.geometry.erase(o20, n23), e20.holes.push(new o19(i23.from, i23.to)), e20.instances.delete(t23), s27.push(new o19(o20, n23));
    }
    j9(e20.holes);
  }
  _add(e20, s27, n23, h15, d14) {
    if (0 === s27.length)
      return;
    const l23 = this._bufferWriter;
    let m12 = l23.vertexBufferLayout.createView(e20.geometry.buffer.array.buffer);
    const c16 = e20.holes.length > 0;
    let u20 = Number.MAX_SAFE_INTEGER, g7 = Number.MIN_SAFE_INTEGER;
    for (const y9 of s27) {
      const s28 = r(y9.transformation) ? u6(T7, h15, y9.transformation) : h15;
      h2(G4, s28);
      const w5 = o3(G4, G4), b10 = l23.elementCount(y9.data), C4 = b10 * n23;
      let v10 = I10(e20.holes, b10);
      t(v10) && (v10 = e20.geometry.size / n23, e20.geometry.grow(C4), m12 = l23.vertexBufferLayout.createView(e20.geometry.buffer.array.buffer)), l23.write(s28, w5, y9.data, m12, v10);
      const O10 = y9.instanceParameters.visible, H9 = !!y9.instanceParameters.highlights && O10, B5 = !!y9.instanceParameters.occludees, S7 = new s21(y9.id, v10, v10 + b10, O10, H9, B5);
      e9(null == e20.instances.get(y9.id)), e20.instances.set(y9.id, S7), c16 ? d14.push(new o19(S7.from * n23, S7.to * n23)) : (u20 = Math.min(S7.from, u20), g7 = Math.max(S7.to, g7));
    }
    c16 || d14.push(new o19(u20 * n23, g7 * n23));
  }
  get test() {
    return { material: this._material, glMaterials: this._glMaterials, dataByOrigin: this._dataByOrigin };
  }
};
var A11 = class {
  constructor(e20) {
    this.origin = e20, this.add = new Array(), this.remove = new Array();
  }
};
function D5(e20, t22) {
  const r25 = /* @__PURE__ */ new Map();
  for (const s27 of e20)
    E13(r25, s27, true);
  for (const s27 of t22)
    E13(r25, s27, false);
  return r25;
}
function E13(e20, r25, s27) {
  const a17 = r25.origin;
  if (t(a17))
    return;
  let i23 = e20.get(a17.id);
  null == i23 && (i23 = new A11(a17.vec3), e20.set(a17.id, i23)), s27 ? i23.add.push(r25) : i23.remove.push(r25);
}
function M6(e20) {
  return e20.hasOccludees || e20.hasHighlights || e20.hasHiddenInstances;
}
function I10(e20, t22) {
  let r25;
  if (!e20.some((e21) => !(e21.to - e21.from < t22) && (r25 = e21, true)))
    return null;
  const s27 = r25.from;
  return r25.from += t22, r25.from >= r25.to && e20.removeUnordered(r25), s27;
}
function j9(e20) {
  const t22 = /* @__PURE__ */ new Map();
  e20.forAll((e21) => t22.set(e21.from, e21));
  let r25 = true;
  for (; r25; )
    r25 = false, e20.forEach((s27) => {
      const a17 = t22.get(s27.to);
      a17 && (s27.to = a17.to, t22.delete(a17.from), e20.removeUnordered(a17), r25 = true);
    });
}
var R8 = class {
  constructor(e20, t22) {
    this.origin = e20, this.geometry = t22, this.instances = /* @__PURE__ */ new Map(), this.holes = new l3({ deallocator: null }), this.hasHiddenInstances = false, this.hasHighlights = false, this.hasOccludees = false, this.drawCommandsDirty = false, this.drawCommandsDefault = new l3({ allocator: (e21) => e21 || new t19(), deallocator: (e21) => e21 }), this.drawCommandsHighlight = new l3({ allocator: (e21) => e21 || new t19(), deallocator: (e21) => e21 }), this.drawCommandsOccludees = new l3({ allocator: (e21) => e21 || new t19(), deallocator: (e21) => e21 }), this.drawCommandsShadowHighlightRest = new l3({ allocator: (e21) => e21 || new t19(), deallocator: (e21) => e21 });
  }
};
var x11 = class extends i19 {
  constructor(e20, t22, r25, s27) {
    super(e20), this.geometry = t22, this.renderCommands = r25, this.occludeeCommands = s27;
  }
};
var P7 = new l3({ deallocator: null });
var L6 = e8();
var T7 = e8();
var G4 = e8();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/SortedRenderGeometryRenderer.js
var f15 = class extends m {
  constructor(e20) {
    super(e20), this._pending = new R9(), this._changes = new r17(), this._materialRenderers = /* @__PURE__ */ new Map(), this._sortedMaterialRenderers = new l3(), this._geometries = /* @__PURE__ */ new Map(), this._hasHighlights = false, this._hasWater = false;
  }
  destroy() {
    this._changes.prune(), this._materialRenderers.forEach((e20) => e20.dispose()), this._materialRenderers.clear(), this._sortedMaterialRenderers.clear(), this._geometries.clear();
  }
  get updating() {
    return !this._pending.empty || this._changes.updates.length > 0;
  }
  get rctx() {
    return this.rendererContext.rctx;
  }
  get _materialRepository() {
    return this.rendererContext.materialRepository;
  }
  get _localOriginFactory() {
    return this.rendererContext.localOriginFactory;
  }
  get hasHighlights() {
    return this._hasHighlights;
  }
  get hasWater() {
    return this._hasWater;
  }
  get rendersOccluded() {
    return n2(this._materialRenderers, (e20) => e20.rendersOccluded);
  }
  get isEmpty() {
    return !this.updating && 0 === this._materialRenderers.size && 0 === this._geometries.size;
  }
  commitChanges() {
    if (!this.updating)
      return false;
    this._processAddsRemoves();
    const e20 = r18(this._changes);
    let r25 = false, s27 = false, i23 = false;
    return e20.forEach((e21, t22) => {
      let a17 = this._materialRenderers.get(t22);
      if (!a17 && e21.adds.length > 0 && (a17 = new S5(this.rctx, this._materialRepository, t22), this._materialRenderers.set(t22, a17), r25 = true, s27 = true, i23 = true), !a17)
        return;
      const n23 = s27 || a17.hasHighlights, o20 = i23 || a17.hasWater;
      a17.modify(e21), s27 = s27 || n23 !== a17.hasHighlights, i23 = i23 || o20 !== a17.hasWater, a17.isEmpty && (this._materialRenderers.delete(t22), a17.dispose(), r25 = true);
    }), this._changes.clear(), r25 && this._updateSortedMaterialRenderers(), s27 && (this._hasHighlights = n2(this._materialRenderers, (e21) => e21.hasHighlights)), i23 && (this._hasWater = n2(this._materialRenderers, (e21) => e21.hasWater)), this.notifyChange("updating"), true;
  }
  addGeometries(e20, r25) {
    if (0 === e20.length)
      return;
    const t22 = this._validateRenderGeometries(e20);
    for (const i23 of t22)
      this._geometries.set(i23.id, i23);
    const s27 = this._pending.empty;
    for (const i23 of t22)
      this._pending.adds.add(i23);
    s27 && this.notifyChange("updating"), r25 === E12.UPDATE && this._notifyGraphicGeometryChanged(e20);
  }
  removeGeometries(e20, r25) {
    const t22 = this._pending.empty, i23 = this._pending.adds;
    for (const a17 of e20)
      i23.has(a17) ? (this._pending.removed.add(a17), i23.delete(a17)) : this._pending.removed.has(a17) || this._pending.removes.add(a17), this._geometries.delete(e(a17.id));
    t22 && !this._pending.empty && this.notifyChange("updating"), r25 === E12.UPDATE && this._notifyGraphicGeometryChanged(e20);
  }
  modifyGeometries(e20, r25) {
    const t22 = 0 === this._changes.updates.length;
    for (const s27 of e20) {
      const e21 = this._changes.updates.pushNew();
      e21.renderGeometry = this._validateRenderGeometry(s27), e21.updateType = r25;
    }
    switch (t22 && this._changes.updates.length > 0 && this.notifyChange("updating"), r25) {
      case I9.TRANSFORMATION:
      case I9.VERTEXATTRS:
        return this._notifyGraphicGeometryChanged(e20);
      case I9.VISIBILITIES:
        return this._notifyGraphicVisibilityChanged(e20);
    }
  }
  updateAnimation(e20) {
    let r25 = false;
    return this._sortedMaterialRenderers.forAll(({ materialRenderer: t22 }) => r25 = t22.updateAnimation(e20) || r25), r25;
  }
  render(e20, r25) {
    for (let t22 = 0; t22 < this._sortedMaterialRenderers.length; t22++) {
      const s27 = this._sortedMaterialRenderers.data[t22];
      s27.material.shouldRender(e20) && s27.materialRenderer.render(e20.output, r25);
    }
  }
  intersect(e20, r25, t22, s27, i23) {
    return this._geometries.forEach((a17) => {
      if (s27 && !s27(a17))
        return;
      this._intersectRenderGeometry(a17, t22, r25, 0, e20, i23);
      const n23 = this.rendererContext.longitudeCyclical;
      n23 && (a17.boundingSphere[0] - a17.boundingSphere[3] < n23.min && this._intersectRenderGeometry(a17, t22, r25, n23.range, e20, i23), a17.boundingSphere[0] + a17.boundingSphere[3] > n23.max && this._intersectRenderGeometry(a17, t22, r25, -n23.range, e20, i23)), i23++;
    }), i23;
  }
  _updateSortedMaterialRenderers() {
    this._sortedMaterialRenderers.clear();
    let e20 = 0;
    this._materialRenderers.forEach((r25, t22) => {
      t22.insertOrder = e20++, this._sortedMaterialRenderers.push({ material: t22, materialRenderer: r25 });
    }), this._sortedMaterialRenderers.sort((e21, r25) => {
      const t22 = r25.material.renderPriority - e21.material.renderPriority;
      return 0 !== t22 ? t22 : e21.material.insertOrder - r25.material.insertOrder;
    });
  }
  _processAddsRemoves() {
    this._changes.adds.clear(), this._changes.removes.clear(), this._changes.adds.pushArray(Array.from(this._pending.adds)), this._changes.removes.pushArray(Array.from(this._pending.removes));
    for (let e20 = 0; e20 < this._changes.updates.length; ) {
      const r25 = this._changes.updates.data[e20];
      this._pending.has(r25.renderGeometry) ? this._changes.updates.removeUnorderedIndex(e20) : e20++;
    }
    this._pending.clear();
  }
  _intersectRenderGeometry(e20, r25, t22, s27, a17, n23) {
    if (!e20.instanceParameters.visible)
      return;
    let o20 = 0;
    r(e20.transformation) && (s27 += e20.transformation[12], o20 = e20.transformation[13]), v9[0] = t22[0] - s27, v9[1] = t22[1] - o20, v9[2] = 1, S6[0] = t22[0] - s27, S6[1] = t22[1] - o20, S6[2] = 0, e20.screenToWorldRatio = this.rendererContext.screenToWorldRatio, e20.material.intersect(e20, null, e20.getShaderTransformation(), a17, v9, S6, (t23, s28, i23) => {
      G5(r25, i23, e20.material.renderPriority, n23, a17, e20.layerUid, e20.graphicUid);
    }, e20.calculateShaderTransformation, r25);
  }
  _notifyGraphicGeometryChanged(e20) {
    if (t(this.drapeSource.notifyGraphicGeometryChanged))
      return;
    let r25;
    for (const t22 of e20) {
      const e21 = t22.graphicUid;
      r(e21) && e21 !== r25 && (this.drapeSource.notifyGraphicGeometryChanged(e21), r25 = e21);
    }
  }
  _notifyGraphicVisibilityChanged(e20) {
    if (t(this.drapeSource.notifyGraphicVisibilityChanged))
      return;
    let r25;
    for (const t22 of e20) {
      const e21 = t22.graphicUid;
      r(e21) && e21 !== r25 && (this.drapeSource.notifyGraphicVisibilityChanged(e21), r25 = e21);
    }
  }
  _validateRenderGeometries(e20) {
    for (const r25 of e20)
      this._validateRenderGeometry(r25);
    return e20;
  }
  _validateRenderGeometry(e20) {
    return t(e20.origin) && (e20.origin = this._localOriginFactory.getOrigin(e20.boundingSphere)), e20;
  }
  get test() {
    return { sortedMaterialRenderers: this._sortedMaterialRenderers };
  }
};
e4([y()], f15.prototype, "drapeSource", void 0), e4([y()], f15.prototype, "updating", null), e4([y()], f15.prototype, "rctx", null), e4([y()], f15.prototype, "rendererContext", void 0), e4([y()], f15.prototype, "_materialRepository", null), e4([y()], f15.prototype, "_localOriginFactory", null), f15 = e4([n3("esri.views.3d.webgl-engine.lib.SortedRenderGeometryRenderer")], f15);
var R9 = class {
  constructor() {
    this.adds = /* @__PURE__ */ new Set(), this.removes = /* @__PURE__ */ new Set(), this.removed = /* @__PURE__ */ new Set();
  }
  get empty() {
    return 0 === this.adds.size && 0 === this.removes.size && 0 === this.removed.size;
  }
  has(e20) {
    return this.adds.has(e20) || this.removes.has(e20) || this.removed.has(e20);
  }
  clear() {
    this.adds.clear(), this.removes.clear(), this.removed.clear();
  }
};
function G5(e20, r25, t22, s27, i23, a17, n23) {
  const o20 = { layerUid: a17, graphicUid: n23, triangleNr: r25 }, d14 = (r26) => {
    r26.set(i14.OVERLAY, o20, e20.dist, e20.normal, e20.transformation, t22, s27);
  };
  if ((null == i23.results.min.drapedLayerOrder || t22 >= i23.results.min.drapedLayerOrder) && (null == i23.results.min.dist || i23.results.ground.dist <= i23.results.min.dist) && d14(i23.results.min), i23.options.store !== t16.MIN && (null == i23.results.max.drapedLayerOrder || t22 < i23.results.max.drapedLayerOrder) && (null == i23.results.max.dist || i23.results.ground.dist > i23.results.max.dist) && d14(i23.results.max), i23.options.store === t16.ALL) {
    const e21 = U4(i23.ray);
    d14(e21), i23.results.all.push(e21);
  }
}
var v9 = n();
var S6 = n();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextureTechnique.js
var m11 = class extends e11 {
  initializeProgram(e20) {
    return new o10(e20.rctx, m11.shader.get().build(), E4);
  }
  initializePipeline() {
    return this.configuration.hasAlpha ? W({ blending: l14(R.SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE_MINUS_SRC_ALPHA), colorWrite: _5 }) : W({ colorWrite: _5 });
  }
};
m11.shader = new t8(d3, () => import("./TextureOnly.glsl-2WVTWKY3.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextureTechniqueConfiguration.js
var r22 = class extends t9 {
  constructor() {
    super(...arguments), this.hasAlpha = false;
  }
};
e4([e13()], r22.prototype, "hasAlpha", void 0);

// node_modules/@arcgis/core/views/3d/terrain/OverlayRenderer.js
var he2 = class extends s19(m) {
  constructor(e20) {
    super(e20), this._overlays = null, this._overlayRenderTarget = null, this._hasHighlights = false, this._rendersOccluded = false, this._hasWater = false, this._handles = new t4(), this._renderers = /* @__PURE__ */ new Map(), this._sortedDrapeSourceRenderersDirty = false, this._sortedRenderers = new l3(), this._passParameters = new i6(), this._rctx = null, this._materialRepository = null, this._screenToWorldRatio = 1, this._localOriginFactory = null, this.worldToPCSRatio = 1, this.events = new n6(), this.longitudeCyclical = null;
  }
  get _bindParameters() {
    return this._renderContext.bindParameters;
  }
  get rctx() {
    return this._rctx;
  }
  get materialRepository() {
    return this._materialRepository;
  }
  get screenToWorldRatio() {
    return this._screenToWorldRatio;
  }
  get localOriginFactory() {
    return this._localOriginFactory;
  }
  initialize() {
    const e20 = this.view._stage.renderView;
    this._rctx = e20.renderingContext;
    const r25 = e20.waterTextureRepository;
    this._stippleTextureRepository = new u17(e20.renderingContext), this._shaderTechniqueRepository = new n19({ rctx: this._rctx, viewingMode: l9.Local, stippleTextureRepository: this._stippleTextureRepository, waterTextureRepository: r25 }), this._renderContext = new c14(this._rctx, new Q5(this._rctx, this.view.state.viewingMode), new P4(this._shaderTechniqueRepository, this._rctx, () => {
    })), this._handles.add([l4(() => r25.updating, () => this.events.emit("content-changed"), w3), l4(() => this.spatialReference, (e21) => this._localOriginFactory = new j8(e21), w3), a4(() => this.view.allLayerViews, "after-changes", () => this._sortedDrapeSourceRenderersDirty = true)]), this._materialRepository = new a15(e20.textureRepository, this._shaderTechniqueRepository, (e21) => {
      (e21.renderOccluded & _e) > 0 !== this._rendersOccluded && this._updateRendersOccluded(), this.events.emit("content-changed"), this.notifyChange("updating");
    }, () => this.events.emit("content-changed")), this._bindParameters.slot = E8.DRAPED_MATERIAL, this._bindParameters.highlightDepthTexture = s7(this._rctx), this._bindParameters.camera = pe2, this._bindParameters.transparencyPassType = o9.NONE, this._bindParameters.newLighting.noonFactor = 0, this._bindParameters.newLighting.globalFactor = 0, this._bindParameters.newLighting.set([new i9(r2(1, 1, 1))]), this._handles.add(this.view.resourceController.scheduler.registerTask(I3.STAGE, this));
  }
  dispose() {
    this._handles.destroy(), this._renderers.forEach((e20) => e20.destroy()), this._renderers.clear(), this._debugTextureTechnique = w(this._debugTextureTechnique), this._passParameters.texture = a(this._passParameters.texture), this._bindParameters.highlightDepthTexture = a(this._bindParameters.highlightDepthTexture), this._shaderTechniqueRepository = a(this._shaderTechniqueRepository), this._temporaryFBO = a(this._temporaryFBO), this._quadVAO = a(this._quadVAO), this.disposeOverlays();
  }
  get updating() {
    return this._sortedDrapeSourceRenderersDirty || n2(this._renderers, (e20) => e20.updating);
  }
  get hasOverlays() {
    return r(this._overlays) && r(this._overlayRenderTarget);
  }
  get gpuMemoryUsage() {
    return r(this._overlayRenderTarget) ? this._overlayRenderTarget.gpuMemoryUsage : 0;
  }
  createGeometryDrapeSourceRenderer(e20) {
    return this.createDrapeSourceRenderer(e20, f15);
  }
  createDrapeSourceRenderer(e20, r25, t22) {
    const s27 = this._renderers.get(e20);
    r(s27) && s27.destroy();
    const i23 = new r25({ ...t22, rendererContext: this, drapeSource: e20 });
    return this._renderers.set(e20, i23), this._sortedDrapeSourceRenderersDirty = true, "fullOpacity" in e20 && this._handles.add(l4(() => e20.fullOpacity, () => this.events.emit("content-changed")), e20), i23;
  }
  removeDrapeSourceRenderer(e20) {
    if (t(e20))
      return;
    const r25 = this._renderers.get(e20);
    t(r25) || (this._sortedDrapeSourceRenderersDirty = true, this._renderers.delete(e20), this._handles.remove(e20), r25.destroy());
  }
  collectUnusedRenderTargetMemory(e20) {
    let r25 = false;
    if (r(this._overlayRenderTarget))
      for (const t22 of this._overlayRenderTarget.renderTargets) {
        const s27 = this.overlays[0].validTargets[t22.type] || !this.overlays[1].validTargets[t22.type];
        r25 = this._overlayRenderTarget.validateUsageForTarget(s27, t22, e20) || r25;
      }
    return r25;
  }
  get overlays() {
    return i(this._overlays, []);
  }
  ensureDrapeTargets(e20) {
    r(this._overlays) && this._overlays.forEach((r25) => r25.hasTargetWithoutRasterImage = n5(e20, (e21) => e21.drapeTargetType === t14.WithoutRasterImage));
  }
  ensureDrapeSources(e20) {
    r(this._overlays) && this._overlays.forEach((r25) => {
      r25.hasDrapedFeatureSource = n5(e20, (e21) => e21.drapeSourceType === e14.Features), r25.hasDrapedRasterSource = n5(e20, (e21) => e21.drapeSourceType === e14.RasterImage);
    });
  }
  ensureOverlays(e20, r25) {
    t(this._overlays) && (this._overlayRenderTarget = new o17(this._rctx), this._overlays = [new l21(T2.INNER, this._overlayRenderTarget), new l21(T2.OUTER, this._overlayRenderTarget)]), this.ensureDrapeTargets(e20), this.ensureDrapeSources(r25);
  }
  disposeOverlays() {
    this._overlays = null, this._overlayRenderTarget = a(this._overlayRenderTarget), this.events.emit("textures-disposed");
  }
  get running() {
    return this.updating;
  }
  runTask(e20) {
    this._processDrapeSources(e20, () => true);
  }
  _processDrapeSources(e20, r25) {
    let t22 = false;
    for (const [s27, i23] of this._renderers) {
      if (e20.done)
        break;
      (s27.destroyed || r25(s27)) && (i23.commitChanges() && (t22 = true, e20.madeProgress()));
    }
    this._sortedDrapeSourceRenderersDirty && (this._sortedDrapeSourceRenderersDirty = false, t22 = true, this._updateSortedDrapeSourceRenderers()), t22 && (r(this._overlays) && 0 === this._renderers.size && this.disposeOverlays(), this.notifyChange("updating"), this.events.emit("content-changed"), this._updateHasHighlights(), this._updateRendersOccluded(), this._updateHasWater());
  }
  processSyncDrapeSources() {
    this._processDrapeSources(F4, (e20) => e20.updatePolicy === i5.SYNC);
  }
  isEmpty() {
    if (t10.OVERLAY_DRAW_DEBUG_TEXTURE)
      return false;
    for (const e20 of this._renderers.values())
      if (!e20.isEmpty)
        return false;
    return true;
  }
  get hasHighlights() {
    return this._hasHighlights;
  }
  get hasWater() {
    return this._hasWater;
  }
  get rendersOccluded() {
    return this._rendersOccluded;
  }
  updateAnimation(e20) {
    let r25 = false;
    return this._renderers.forEach((t22) => r25 = t22.updateAnimation(e20) || r25), r25;
  }
  updateDrapeSourceOrder() {
    this._sortedDrapeSourceRenderersDirty = true;
  }
  drawTarget(e20, r25, t22) {
    const s27 = e20.canvasGeometries;
    if (0 === s27.numViews)
      return false;
    this._screenToWorldRatio = t22 * e20.mapUnitsPerPixel;
    const i23 = r25.output;
    if (this.isEmpty() || i23 === h5.Highlight && !this.hasHighlights || i23 === h5.Normal && !this.hasWater || !e20.hasSomeSizedView())
      return false;
    const o20 = r25.fbo;
    if (!o20.isValid())
      return false;
    const a17 = 2 * e20.resolution, h15 = e20.resolution;
    o20.resize(a17, h15);
    const d14 = this._rctx;
    pe2.pixelRatio = e20.pixelRatio * t22, this._renderContext.output = i23, this._bindParameters.screenToWorldRatio = this._screenToWorldRatio, this._bindParameters.screenToPCSRatio = this._screenToWorldRatio * this.worldToPCSRatio, this._bindParameters.slot = i23 === h5.Normal ? E8.DRAPED_WATER : E8.DRAPED_MATERIAL, e20.applyViewport(this._rctx), o20.bind(d14), e20.index === T2.INNER && (d14.setClearColor(0, 0, 0, 0), d14.clearSafe(_3.COLOR_BUFFER_BIT));
    const l23 = r25.type === H4.ColorNoRasterImage ? de2.ExcludeRasterImage : r25.type === H4.Occluded ? de2.OccludedOnly : de2.Normal;
    if (l23 === de2.OccludedOnly && (this._renderContext.renderOccludedMask = _e), t10.OVERLAY_DRAW_DEBUG_TEXTURE && l23 !== de2.OccludedOnly)
      for (let n23 = 0; n23 < s27.numViews; n23++)
        this._setViewParameters(s27.extents[n23], e20, pe2), this._drawDebugTexture(e20.resolution, ce2[e20.index]);
    return this._renderers.size > 0 && this._sortedRenderers.forAll(({ drapeSource: r26, renderer: t23 }) => {
      if (l23 === de2.ExcludeRasterImage && r26.drapeSourceType === e14.RasterImage)
        return;
      const { fullOpacity: c16 } = r26, p10 = r(c16) && c16 < 1 && i23 === h5.Color;
      p10 && (this.bindTemporaryFramebuffer(this._rctx, a17, h15), d14.clearSafe(_3.COLOR_BUFFER_BIT));
      for (let i24 = 0; i24 < s27.numViews; i24++)
        this._setViewParameters(s27.extents[i24], e20, pe2), t23.render(this._renderContext, this._bindParameters);
      p10 && r(this._temporaryFBO) && (o20.bind(d14), this.view._stage.renderView.compositingHelper.compositeOverlay(this._renderContext.bindParameters, this._temporaryFBO.getTexture(), c16, e20.index));
    }), d14.bindFramebuffer(null), o20.generateMipMap(), this._renderContext.resetRenderOccludedMask(), true;
  }
  bindTemporaryFramebuffer(e20, r25, t22) {
    t(this._temporaryFBO) && (this._temporaryFBO = new f13(e20, false)), this._temporaryFBO.resize(r25, t22), this._temporaryFBO.bind(e20);
  }
  async reloadShaders() {
    await this._shaderTechniqueRepository.reloadAll();
  }
  notifyContentChanged() {
    this.events.emit("content-changed");
  }
  intersect(e20, r25, t22, s27) {
    var _a, _b;
    let i23 = 0;
    for (const o20 of this._renderers.values())
      i23 = (_b = (_a = o20.intersect) == null ? void 0 : _a.call(o20, e20, r25, t22, s27, i23)) != null ? _b : i23;
  }
  _updateSortedDrapeSourceRenderers() {
    if (this._sortedRenderers.clear(), 0 === this._renderers.size)
      return;
    const e20 = this.view.map.allLayers;
    this._renderers.forEach((r25, t22) => {
      const s27 = e20.indexOf(t22.layer);
      this._sortedRenderers.push(new le2(t22, r25, s27 < 0 ? 1 / 0 : s27));
    }), this._sortedRenderers.sort((e21, r25) => e21.index - r25.index);
  }
  _setViewParameters(e20, r25, t22) {
    t22.viewport[0] = t22.viewport[1] = 0, t22.viewport[2] = t22.viewport[3] = r25.resolution, F2(t22.projectionMatrix, 0, e20[2] - e20[0], 0, e20[3] - e20[1], t22.near, t22.far), x3(t22.viewMatrix, [-e20[0], -e20[1], 0]), this._bindParameters.camera = t22;
  }
  _updateHasWater() {
    const e20 = n2(this._renderers, (e21) => e21.hasWater);
    e20 !== this._hasWater && (this._hasWater = e20, this.events.emit("has-water", e20));
  }
  _updateHasHighlights() {
    const e20 = n2(this._renderers, (e21) => e21.hasHighlights);
    e20 !== this._hasHighlights && (this._hasHighlights = e20, this.events.emit("has-highlights", e20));
  }
  _updateRendersOccluded() {
    const e20 = n2(this._renderers, (e21) => e21.rendersOccluded);
    e20 !== this._rendersOccluded && (this._rendersOccluded = e20, this.events.emit("renders-occluded", e20));
  }
  _drawDebugTexture(e20, r25) {
    this._ensureDebugPatternResources(e20, e20, r25);
    const t22 = this._rctx;
    t22.bindTechnique(this._debugTextureTechnique, this._passParameters, null), t22.bindVAO(this._quadVAO), t22.drawArrays(E2.TRIANGLE_STRIP, 0, n15(this._quadVAO, "geometry"));
  }
  _ensureDebugPatternResources(e20, r25, t22) {
    if (o(this._passParameters.color, t22[0], t22[1], t22[2]), this._passParameters.texture)
      return;
    const s27 = new Uint8Array(e20 * r25 * 4);
    let i23 = 0;
    for (let a17 = 0; a17 < r25; a17++)
      for (let t23 = 0; t23 < e20; t23++) {
        const o21 = Math.floor(t23 / 10), n23 = Math.floor(a17 / 10);
        o21 < 2 || n23 < 2 || 10 * o21 > e20 - 20 || 10 * n23 > r25 - 20 ? (s27[i23++] = 255, s27[i23++] = 255, s27[i23++] = 255, s27[i23++] = 255) : (s27[i23++] = 255, s27[i23++] = 255, s27[i23++] = 255, s27[i23++] = 1 & o21 && 1 & n23 ? 1 & t23 ^ 1 & a17 ? 0 : 255 : 1 & o21 ^ 1 & n23 ? 0 : 128);
      }
    this._passParameters.texture = new E3(this._rctx, { target: M.TEXTURE_2D, pixelFormat: P2.RGBA, dataType: G.UNSIGNED_BYTE, samplingMode: L.NEAREST, width: e20, height: r25 }, s27);
    const o20 = new r22();
    o20.hasAlpha = true, this._debugTextureTechnique = this._shaderTechniqueRepository.acquire(m11, o20), this._quadVAO = u12(this._rctx);
  }
  get test() {
    return { drapeSourceRenderers: this._renderers, getDrapeSourceRenderer: (e20) => this._renderers.get(e20) };
  }
};
var de2;
e4([y()], he2.prototype, "_sortedDrapeSourceRenderersDirty", void 0), e4([i17()], he2.prototype, "_shaderTechniqueRepository", void 0), e4([i17()], he2.prototype, "_stippleTextureRepository", void 0), e4([y({ constructOnly: true })], he2.prototype, "view", void 0), e4([y()], he2.prototype, "worldToPCSRatio", void 0), e4([y()], he2.prototype, "spatialReference", void 0), e4([y({ type: Boolean, readOnly: true })], he2.prototype, "updating", null), he2 = e4([n3("esri.views.3d.terrain.OverlayRenderer")], he2), function(e20) {
  e20[e20.Normal = 0] = "Normal", e20[e20.OccludedOnly = 1] = "OccludedOnly", e20[e20.ExcludeRasterImage = 2] = "ExcludeRasterImage";
}(de2 || (de2 = {}));
var le2 = class {
  constructor(e20, r25, t22) {
    this.drapeSource = e20, this.renderer = r25, this.index = t22;
  }
};
var ce2 = [[1, 0.5, 0.5], [0.5, 0.5, 1]];
var pe2 = new J3();
pe2.near = 1, pe2.far = 1e4, pe2.relativeElevation = null;
var ue2 = -2;
var _e = o8.OccludeAndTransparent;

// node_modules/@arcgis/core/views/3d/support/renderInfoUtils/line.js
function i22(o20, r25, i23, s27) {
  const l23 = "polygon" === o20.type ? c3.CCW_IS_HOLE : c3.NONE, a17 = "polygon" === o20.type ? o20.rings : o20.paths, { position: c16, outlines: u20 } = l8(a17, o20.hasZ, l23), y9 = new Float64Array(c16.length), g7 = f9(c16, o20.spatialReference, 0, y9, 0, c16, 0, c16.length / 3, r25, i23, s27), f17 = null != g7;
  return { lines: f17 ? p9(u20, c16, y9) : [], projectionSuccess: f17, sampledElevation: g7 };
}
function s25(e20, i23) {
  const s27 = "polygon" === e20.type ? c3.CCW_IS_HOLE : c3.NONE, l23 = "polygon" === e20.type ? e20.rings : e20.paths, { position: a17, outlines: c16 } = l8(l23, false, s27), u20 = xn(a17, e20.spatialReference, 0, a17, i23, 0, a17.length / 3);
  for (let o20 = 2; o20 < a17.length; o20 += 3)
    a17[o20] = ue2;
  return { lines: u20 ? p9(c16, a17) : [], projectionSuccess: u20 };
}
function p9(o20, n23, t22) {
  const e20 = new Array();
  for (const { index: r25, count: i23 } of o20) {
    if (i23 <= 1)
      continue;
    const o21 = 3 * r25, s27 = o21 + 3 * i23;
    e20.push({ position: n23.subarray(o21, s27), mapPosition: t22 ? t22.subarray(o21, s27) : void 0 });
  }
  return e20;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/InstanceParameters.js
var s26 = class {
  constructor() {
    this.visible = true;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/RenderGeometry.js
var T8 = class {
  constructor(r25, i23, a17 = {}) {
    this.data = r25, this.material = i23, this.boundingSphere = n10(), this.instanceParameters = new s26(), this._transformation = e8(), this._shaderTransformationDirty = true, this.layerUid = i(a17.layerUid, null), this.graphicUid = i(a17.graphicUid, null), this.id = a17.id ? a17.id : e6(), this.boundingInfo = i(a17.boundingInfo, null), this.calculateShaderTransformation = i(a17.calculateShaderTransformation, null), this.castShadow = !!a17.castShadow && a17.castShadow;
  }
  get transformation() {
    return this._transformation;
  }
  updateTransformation(t22) {
    t22(this._transformation), this._shaderTransformationDirty = true, this.computeBoundingSphere(this._transformation, this.boundingSphere);
  }
  shaderTransformationChanged() {
    this._shaderTransformationDirty = true;
  }
  computeBoundingSphere(t22, i23, s27 = l10(t22)) {
    t(this.boundingInfo) || (O(i23, this.boundingInfo.getCenter(), t22), i23[3] = this.boundingInfo.getBSRadius() * s27);
  }
  get hasShaderTransformation() {
    return r(this.calculateShaderTransformation);
  }
  get primitiveType() {
    return this.data.primitiveType;
  }
  getShaderTransformation() {
    return t(this.calculateShaderTransformation) ? i(this.transformation, o4) : (this._shaderTransformationDirty && (this._shaderTransformation || (this._shaderTransformation = e8()), n7(this._shaderTransformation, this.calculateShaderTransformation(i(this.transformation, o4))), this._shaderTransformationDirty = false), this._shaderTransformation);
  }
  computeAttachmentOrigin(t22) {
    if (this.material.computeAttachmentOrigin)
      return !!this.material.computeAttachmentOrigin(this, t22) && (r(this._transformation) && O(t22, t22, this._transformation), true);
    const r25 = this.indices.get(O2.POSITION), s27 = this.vertexAttributes.get(O2.POSITION);
    return !!c4(s27, r25, t22) && (r(this._transformation) && O(t22, t22, this._transformation), true);
  }
  get indices() {
    return this.data.indices;
  }
  get vertexAttributes() {
    return this.data.vertexAttributes;
  }
  addHighlight() {
    const t22 = new r15(u9.Highlight), r25 = this.instanceParameters;
    return r25.highlights = c5(r25.highlights, t22), t22;
  }
  removeHighlight(t22) {
    const r25 = this.instanceParameters;
    r25.highlights = f6(r25.highlights, t22);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/NativeLineTechnique.js
var f16 = class extends e11 {
  get _stippleEnabled() {
    return this.configuration.stippleEnabled && this.configuration.output !== h5.Highlight;
  }
  initializeConfiguration(e20, t22) {
    t22.hasWebGL2Context = e20.rctx.type === r12.WEBGL2;
  }
  initializeProgram(e20) {
    return new o10(e20.rctx, f16.shader.get().build(this.configuration), E4);
  }
  initializePipeline() {
    const t22 = this.configuration, i23 = l14(R.SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE_MINUS_SRC_ALPHA), r25 = (e20, i24 = null, r26 = null) => W({ blending: i24, depthTest: i8, depthWrite: r26, colorWrite: _5, stencilWrite: t22.hasOccludees ? e12 : null, stencilTest: t22.hasOccludees ? e20 ? o11 : f7 : null });
    return t22.output === h5.Color ? (this._occludeePipelineState = r25(true, t22.transparent || this._stippleEnabled ? i23 : null, a10), r25(false, t22.transparent || this._stippleEnabled ? i23 : null, a10)) : r25(false);
  }
  get primitiveType() {
    return E2.LINES;
  }
  getPipelineState(e20, t22) {
    return t22 ? this._occludeePipelineState : super.getPipelineState(e20, t22);
  }
};
f16.shader = new t8(v5, () => import("./NativeLine.glsl-FVPG4LBI.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/NativeLineTechniqueConfiguration.js
var r23 = class extends s10 {
  constructor() {
    super(...arguments), this.output = h5.Color, this.hasSlicePlane = false, this.hasVertexColors = false, this.transparent = false, this.draped = false, this.stippleEnabled = false, this.stippleOffColorEnabled = false, this.stipplePreferContinuous = true, this.hasOccludees = false;
  }
};
e4([e13({ count: h5.COUNT })], r23.prototype, "output", void 0), e4([e13()], r23.prototype, "hasSlicePlane", void 0), e4([e13()], r23.prototype, "hasVertexColors", void 0), e4([e13()], r23.prototype, "transparent", void 0), e4([e13()], r23.prototype, "draped", void 0), e4([e13()], r23.prototype, "stippleEnabled", void 0), e4([e13()], r23.prototype, "stippleOffColorEnabled", void 0), e4([e13()], r23.prototype, "stipplePreferContinuous", void 0), e4([e13()], r23.prototype, "hasOccludees", void 0), e4([e13({ constValue: false })], r23.prototype, "stippleRequiresClamp", void 0), e4([e13({ constValue: false })], r23.prototype, "stippleScaleWithLineWidth", void 0), e4([e13({ constValue: false })], r23.prototype, "stippleRequiresStretchMeasure", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/NativeLineMaterial.js
var X5;
!function(e20) {
  e20[e20.START = 0] = "START", e20[e20.END = 1] = "END";
}(X5 || (X5 = {}));
var F7 = class extends d6 {
  constructor(e20) {
    super(e20, new Q6()), this._configuration = new r23();
  }
  getConfiguration(e20, r25) {
    this._configuration.output = e20, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.hasVertexColors = this.parameters.hasVertexColors, this._configuration.transparent = this.parameters.color[3] < 1 || this.parameters.width < 1, this._configuration.draped = r25.slot === E8.DRAPED_MATERIAL;
    const s27 = r(this.parameters.stipplePattern);
    return this._configuration.stippleEnabled = s27, this._configuration.stippleOffColorEnabled = s27 && r(this.parameters.stippleOffColor), this._configuration.hasOccludees = this.parameters.hasOccludees, this._configuration.stipplePreferContinuous = this.parameters.stipplePreferContinuous, this._configuration;
  }
  intersect(e20, r25, s27, i23, o20, n23, a17, c16, l23) {
    r(l23) ? E6(e20, i23, l23, n23, 1, a17) : this._intersectLineGeometry(e20, r25, s27, i23, a17);
  }
  _intersectLineGeometry(t22, r25, s27, m12, h15) {
    if (!m12.options.selectionMode || u13(r25))
      return;
    if (!M2(s27))
      return void s3.getLogger("esri.views.3d.webgl-engine.materials.NativeLineMaterial").error("intersection assumes a translation-only matrix");
    const d14 = t22.vertexAttributes.get(O2.POSITION).data, _10 = m12.camera, j11 = ie2;
    a6(j11, m12.point);
    const b10 = 2;
    o(oe2[0], j11[0] - b10, j11[1] + b10, 0), o(oe2[1], j11[0] + b10, j11[1] + b10, 0), o(oe2[2], j11[0] + b10, j11[1] - b10, 0), o(oe2[3], j11[0] - b10, j11[1] - b10, 0);
    for (let e20 = 0; e20 < 4; e20++)
      if (!_10.unprojectFromRenderScreen(oe2[e20], ne2[e20]))
        return;
    j3(_10.eye, ne2[0], ne2[1], ae2), j3(_10.eye, ne2[1], ne2[2], ce3), j3(_10.eye, ne2[2], ne2[3], le3), j3(_10.eye, ne2[3], ne2[0], ue3);
    let x12 = Number.MAX_VALUE, R10 = 0;
    for (let e20 = 0; e20 < d14.length - 5; e20 += 3) {
      if (z7[0] = d14[e20] + s27[12], z7[1] = d14[e20 + 1] + s27[13], z7[2] = d14[e20 + 2] + s27[14], J5[0] = d14[e20 + 3] + s27[12], J5[1] = d14[e20 + 4] + s27[13], J5[2] = d14[e20 + 5] + s27[14], R3(ae2, z7) < 0 && R3(ae2, J5) < 0 || R3(ce3, z7) < 0 && R3(ce3, J5) < 0 || R3(le3, z7) < 0 && R3(le3, J5) < 0 || R3(ue3, z7) < 0 && R3(ue3, J5) < 0)
        continue;
      if (_10.projectToRenderScreen(z7, Z6), _10.projectToRenderScreen(J5, $5), Z6[2] < 0 && $5[2] > 0) {
        e3(K5, z7, J5);
        const e21 = _10.frustum, t24 = -R3(e21[U.NEAR], z7) / P(K5, Y2(e21[U.NEAR]));
        g(K5, K5, t24), u(z7, z7, K5), _10.projectToRenderScreen(z7, Z6);
      } else if (Z6[2] > 0 && $5[2] < 0) {
        e3(K5, J5, z7);
        const e21 = _10.frustum, t24 = -R3(e21[U.NEAR], J5) / P(K5, Y2(e21[U.NEAR]));
        g(K5, K5, t24), u(J5, J5, K5), _10.projectToRenderScreen(J5, $5);
      } else if (Z6[2] < 0 && $5[2] < 0)
        continue;
      Z6[2] = 0, $5[2] = 0;
      const t23 = M3(b5(Z6, $5, re2), j11);
      t23 < x12 && (x12 = t23, r3(ee3, z7), r3(te2, J5), R10 = e20 / 3);
    }
    const v10 = m12.rayBegin, N3 = m12.rayEnd;
    if (x12 < b10 * b10) {
      let e20 = Number.MAX_VALUE;
      if (k3(b5(ee3, te2, re2), b5(v10, N3, se2), Y4)) {
        e3(Y4, Y4, v10);
        const t23 = s2(Y4);
        g(Y4, Y4, 1 / t23), e20 = t23 / x(v10, N3);
      }
      h15(e20, Y4, R10, false);
    }
  }
  computeAttachmentOrigin(e20, t22) {
    const r25 = e20.vertexAttributes;
    if (!r25)
      return false;
    const s27 = r25.get(O2.POSITION);
    return f4(s27, null, false, t22);
  }
  requiresSlot(e20, t22) {
    return !(t22 !== h5.Color && t22 !== h5.Highlight && t22 !== h5.ObjectAndLayerIdColor || e20 !== E8.OPAQUE_MATERIAL && e20 !== E8.DRAPED_MATERIAL);
  }
  createGLMaterial(e20) {
    return new W3(e20);
  }
  createBufferWriter() {
    const e20 = this.parameters.hasVertexColors ? u19 : O7;
    return t(this.parameters.stipplePattern) ? new v8(e20) : new H8(e20.clone().vec3f(O2.AUXPOS1).vec2f(O2.UV0));
  }
};
var W3 = class extends t7 {
  constructor() {
    super(...arguments), this._stipplePattern = null;
  }
  dispose() {
    super.dispose(), this._stippleTextureRepository.release(this._stipplePattern), this._stipplePattern = null;
  }
  _updateOccludeeState(e20) {
    e20.hasOccludees !== this._material.parameters.hasOccludees && this._material.setParameters({ hasOccludees: e20.hasOccludees });
  }
  beginSlot(e20) {
    this._output === h5.Color && this._updateOccludeeState(e20);
    const t22 = this._material.parameters.stipplePattern;
    return this._stipplePattern !== t22 && (this._material.setParameters(this._stippleTextureRepository.swap(this._stipplePattern, t22)), this._stipplePattern = t22), this.ensureTechnique(f16, e20);
  }
};
var H8 = class {
  constructor(e20) {
    this.vertexBufferLayout = e20;
  }
  allocate(e20) {
    return this.vertexBufferLayout.createBuffer(e20);
  }
  elementCount(e20) {
    return e20.indices.get(O2.POSITION).length;
  }
  write(e20, t22, r25, s27, i23) {
    m4(r25, this.vertexBufferLayout, e20, t22, s27, i23), this._writeAuxpos1(e20, r25, s27, i23), this._writeUV0(e20, r25, s27, i23);
  }
  _writeAuxpos1(e20, t22, r25, s27) {
    const i23 = r25.getField(O2.AUXPOS1, i4), o20 = t22.indices.get(O2.POSITION), n23 = t22.vertexAttributes.get(O2.POSITION).data, a17 = e20, c16 = i23.typedBufferStride, l23 = i23.typedBuffer;
    s27 *= c16;
    for (let u20 = 0; u20 < o20.length - 1; u20 += 2)
      for (const e21 of [1, 0]) {
        const t23 = 3 * o20[u20 + e21], r26 = n23[t23], i24 = n23[t23 + 1], p10 = n23[t23 + 2], f17 = a17[0] * r26 + a17[4] * i24 + a17[8] * p10 + a17[12], m12 = a17[1] * r26 + a17[5] * i24 + a17[9] * p10 + a17[13], h15 = a17[2] * r26 + a17[6] * i24 + a17[10] * p10 + a17[14];
        l23[s27] = f17, l23[s27 + 1] = m12, l23[s27 + 2] = h15, s27 += c16;
      }
  }
  _writeUV0(e20, t22, r25, s27) {
    var _a;
    const i23 = r25.getField(O2.UV0, u7), n23 = t22.indices.get(O2.POSITION), a17 = t22.vertexAttributes.get(O2.POSITION).data, c16 = (_a = t22.vertexAttributes.get(O2.DISTANCETOSTART)) == null ? void 0 : _a.data, l23 = i23.typedBufferStride, p10 = i23.typedBuffer;
    let h15 = 0;
    p10[s27 *= l23] = X5.START, p10[s27 + 1] = h15, s27 += l23;
    const d14 = 3 * n23[0], g7 = o(z7, a17[d14], a17[d14 + 1], a17[d14 + 2]);
    e20 && O(g7, g7, e20);
    const _10 = J5, A12 = n23.length - 1;
    let O10 = 1;
    const S7 = c16 ? (e21, t23, r26) => h15 = c16[r26] : (e21, t23, r26) => h15 += x(e21, t23);
    for (let f17 = 1; f17 < A12; f17 += 2) {
      const t23 = 3 * n23[f17];
      o(_10, a17[t23], a17[t23 + 1], a17[t23 + 2]), e20 && O(_10, _10, e20), S7(g7, _10, O10++);
      for (let e21 = 0; e21 < 2; ++e21)
        p10[s27] = 1 - e21, p10[s27 + 1] = h15, s27 += l23;
      r3(g7, _10);
    }
    const j11 = 3 * n23[A12];
    o(_10, a17[j11], a17[j11 + 1], a17[j11 + 2]), e20 && O(_10, _10, e20), S7(g7, _10, O10), p10[s27] = X5.END, p10[s27 + 1] = h15;
  }
};
var Q6 = class extends h7 {
  constructor() {
    super(...arguments), this.color = _2, this.hasVertexColors = false, this.hasSlicePlane = false, this.width = 1, this.stipplePreferContinuous = true, this.hasOccludees = false, this.stippleTexture = null;
  }
};
var z7 = n();
var J5 = n();
var K5 = n();
var Y4 = n();
var Z6 = x2();
var $5 = x2();
var ee3 = n();
var te2 = n();
var re2 = v2();
var se2 = v2();
var ie2 = n();
var oe2 = [x2(), x2(), x2(), x2()];
var ne2 = [n(), n(), n(), n()];
var ae2 = p2();
var ce3 = p2();
var le3 = p2();
var ue3 = p2();

// node_modules/@arcgis/core/core/libs/gl-matrix-2/types/mat4.js
function n22(n23) {
  return n23 instanceof Float32Array && n23.length >= 16;
}
function r24(n23) {
  return Array.isArray(n23) && n23.length >= 16;
}
function t21(t22) {
  return n22(t22) || r24(t22);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/HUDMaterialTechnique.js
var b9 = class extends e11 {
  initializeConfiguration(t22, i23) {
    i23.hasWebGL2Context = t22.rctx.type === r12.WEBGL2, i23.spherical = t22.viewingMode === l9.Global;
  }
  initializeProgram(e20) {
    return new o10(e20.rctx, b9.shader.get().build(this.configuration), E4);
  }
  _setPipelineState(e20) {
    const i23 = this.configuration, r25 = e20 === o9.NONE, o20 = e20 === o9.FrontFace, s27 = this.configuration.hasPolygonOffset && j10, l23 = (r25 || o20) && i23.output !== h5.Highlight ? (i23.depthEnabled || i23.occlusionPass) && a10 : null;
    return W({ blending: i23.output === h5.Color || i23.output === h5.Alpha || i23.output === h5.Highlight ? r25 ? P8 : A4(e20) : null, depthTest: { func: I2.LEQUAL }, depthWrite: l23, colorWrite: _5, polygonOffset: s27 });
  }
  initializePipeline() {
    return this._setPipelineState(this.configuration.transparencyPassType);
  }
  get primitiveType() {
    return this.configuration.occlusionPass ? E2.POINTS : E2.TRIANGLES;
  }
};
b9.shader = new t8(V2, () => import("./HUDMaterial.glsl-KDTKSGRZ.js"));
var j10 = { factor: 0, units: -4 };
var P8 = s8(R.ONE, R.ONE_MINUS_SRC_ALPHA);

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/HUDMaterialTechniqueConfiguration.js
var a16 = class extends s10 {
  constructor() {
    super(...arguments), this.output = h5.Color, this.screenCenterOffsetUnitsEnabled = p4.World, this.transparencyPassType = o9.NONE, this.spherical = false, this.occlusionTestEnabled = true, this.signedDistanceFieldEnabled = false, this.vvSize = false, this.vvColor = false, this.hasVerticalOffset = false, this.hasScreenSizePerspective = false, this.debugDrawLabelBorder = false, this.binaryHighlightOcclusionEnabled = true, this.hasSlicePlane = false, this.hasPolygonOffset = false, this.depthEnabled = true, this.pixelSnappingEnabled = true, this.isDraped = false, this.hasMultipassGeometry = false, this.hasMultipassTerrain = false, this.cullAboveGround = false, this.occlusionPass = false, this.objectAndLayerIdColorInstanced = false;
  }
};
e4([e13({ count: h5.COUNT })], a16.prototype, "output", void 0), e4([e13({ count: p4.COUNT })], a16.prototype, "screenCenterOffsetUnitsEnabled", void 0), e4([e13({ count: o9.COUNT })], a16.prototype, "transparencyPassType", void 0), e4([e13()], a16.prototype, "spherical", void 0), e4([e13()], a16.prototype, "occlusionTestEnabled", void 0), e4([e13()], a16.prototype, "signedDistanceFieldEnabled", void 0), e4([e13()], a16.prototype, "vvSize", void 0), e4([e13()], a16.prototype, "vvColor", void 0), e4([e13()], a16.prototype, "hasVerticalOffset", void 0), e4([e13()], a16.prototype, "hasScreenSizePerspective", void 0), e4([e13()], a16.prototype, "debugDrawLabelBorder", void 0), e4([e13()], a16.prototype, "binaryHighlightOcclusionEnabled", void 0), e4([e13()], a16.prototype, "hasSlicePlane", void 0), e4([e13()], a16.prototype, "hasPolygonOffset", void 0), e4([e13()], a16.prototype, "depthEnabled", void 0), e4([e13()], a16.prototype, "pixelSnappingEnabled", void 0), e4([e13()], a16.prototype, "isDraped", void 0), e4([e13()], a16.prototype, "hasMultipassGeometry", void 0), e4([e13()], a16.prototype, "hasMultipassTerrain", void 0), e4([e13()], a16.prototype, "cullAboveGround", void 0), e4([e13()], a16.prototype, "occlusionPass", void 0), e4([e13()], a16.prototype, "objectAndLayerIdColorInstanced", void 0), e4([e13({ constValue: true })], a16.prototype, "hasSliceInVertexProgram", void 0), e4([e13({ constValue: false })], a16.prototype, "hasVvInstancing", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/HUDMaterial.js
var Q7 = class extends d6 {
  constructor(e20) {
    super(e20, new Ae()), this._configuration = new a16();
  }
  getConfiguration(e20, t22) {
    return this._configuration.output = e20, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.hasVerticalOffset = !!this.parameters.verticalOffset, this._configuration.hasScreenSizePerspective = !!this.parameters.screenSizePerspective, this._configuration.screenCenterOffsetUnitsEnabled = "screen" === this.parameters.centerOffsetUnits ? p4.Screen : p4.World, this._configuration.hasPolygonOffset = this.parameters.polygonOffset, this._configuration.isDraped = this.parameters.isDraped, this._configuration.occlusionTestEnabled = this.parameters.occlusionTest, this._configuration.pixelSnappingEnabled = this.parameters.pixelSnappingEnabled, this._configuration.signedDistanceFieldEnabled = this.parameters.textureIsSignedDistanceField, this._configuration.vvSize = !!this.parameters.vvSizeEnabled, this._configuration.vvColor = !!this.parameters.vvColorEnabled, this._configuration.occlusionPass = t22.slot === E8.OCCLUSION_PIXELS && this.parameters.occlusionTest && (e20 === h5.Color || e20 === h5.Alpha), e20 === h5.Color && (this._configuration.debugDrawLabelBorder = !!this.parameters.debugDrawLabelBorder), e20 === h5.Highlight && (this._configuration.binaryHighlightOcclusionEnabled = this.parameters.binaryHighlightOcclusion), this._configuration.depthEnabled = this.parameters.depthEnabled, this._configuration.transparencyPassType = t22.transparencyPassType, this._configuration.hasMultipassGeometry = t22.multipassGeometry.enabled, this._configuration.hasMultipassTerrain = t22.multipassTerrain.enabled, this._configuration.cullAboveGround = t22.multipassTerrain.cullAboveGround, this._configuration;
  }
  intersect(e20, r25, s27, i23, a17, n23, o20, c16, l23) {
    r(l23) ? this._intersectDrapedHudGeometry(e20, n23, o20, c16, l23) : this._intersectHudGeometry(e20, r25, s27, i23, o20, c16);
  }
  _intersectDrapedHudGeometry(e20, r25, s27, i23, a17) {
    const n23 = e20.vertexAttributes.get(O2.POSITION), o20 = e20.vertexAttributes.get(O2.SIZE), c16 = this.parameters, l23 = H5(c16);
    let f17 = 1, u20 = 1;
    if (r(i23)) {
      const e21 = i23(me2);
      f17 = e21[0], u20 = e21[5];
    }
    f17 *= e20.screenToWorldRatio, u20 *= e20.screenToWorldRatio;
    const h15 = Oe * e20.screenToWorldRatio;
    for (let t22 = 0; t22 < n23.data.length / n23.size; t22++) {
      const i24 = t22 * n23.size, p10 = n23.data[i24], d14 = n23.data[i24 + 1], m12 = t22 * o20.size;
      let g7;
      Se[0] = o20.data[m12] * f17, Se[1] = o20.data[m12 + 1] * u20, c16.textureIsSignedDistanceField && (g7 = c16.outlineSize * e20.screenToWorldRatio / 2), re3(r25, p10, d14, Se, h15, g7, c16, l23) && s27(a17.dist, a17.normal, -1, false);
    }
  }
  _intersectHudGeometry(e20, r25, i23, n23, o20, c16) {
    if (!n23.options.selectionMode || !n23.options.hud || u13(r25))
      return;
    const l23 = this.parameters;
    let S7 = 1, v10 = 1;
    if (a7(fe2, i23), r(c16)) {
      const e21 = c16(me2);
      S7 = e21[0], v10 = e21[5], te3(fe2);
    }
    const A12 = e20.vertexAttributes.get(O2.POSITION), P9 = e20.vertexAttributes.get(O2.SIZE), x12 = e20.vertexAttributes.get(O2.NORMAL), y9 = e20.vertexAttributes.get(O2.AUXPOS1);
    e9(A12.size >= 3);
    const I11 = n23.point, _10 = n23.camera, C4 = H5(l23);
    S7 *= _10.pixelRatio, v10 *= _10.pixelRatio;
    const j11 = "screen" === this.parameters.centerOffsetUnits;
    for (let t22 = 0; t22 < A12.data.length / A12.size; t22++) {
      const e21 = t22 * A12.size;
      o(ae3, A12.data[e21], A12.data[e21 + 1], A12.data[e21 + 2]), O(ae3, ae3, i23);
      const r26 = t22 * P9.size;
      Se[0] = P9.data[r26] * S7, Se[1] = P9.data[r26 + 1] * v10, O(ae3, ae3, _10.viewMatrix);
      const s27 = t22 * y9.size;
      if (o(pe3, y9.data[s27 + 0], y9.data[s27 + 1], y9.data[s27 + 2]), !j11 && (ae3[0] += pe3[0], ae3[1] += pe3[1], 0 !== pe3[2])) {
        const e22 = pe3[2];
        z(pe3, ae3), e3(ae3, ae3, g(pe3, pe3, e22));
      }
      const c17 = t22 * x12.size;
      if (o(ne3, x12.data[c17], x12.data[c17 + 1], x12.data[c17 + 2]), this._normalAndViewAngle(ne3, fe2, _10, de3), this._applyVerticalOffsetTransformationView(ae3, de3, _10, se3), _10.applyProjection(ae3, oe3), oe3[0] > -1) {
        oe3[0] = Math.floor(oe3[0]), oe3[1] = Math.floor(oe3[1]), j11 && (pe3[0] || pe3[1]) && (oe3[0] += pe3[0], 0 !== pe3[1] && (oe3[1] += o7(pe3[1], se3.factorAlignment)), _10.unapplyProjection(oe3, ae3)), oe3[0] += this.parameters.screenOffset[0], oe3[1] += this.parameters.screenOffset[1], f5(Se, se3.factor, Se);
        const e22 = ge * _10.pixelRatio;
        let t23;
        if (l23.textureIsSignedDistanceField && (t23 = l23.outlineSize * _10.pixelRatio / 2), re3(I11, oe3[0], oe3[1], Se, e22, t23, l23, C4)) {
          const e23 = n23.ray;
          if (O(le4, ae3, h2(he3, _10.viewMatrix)), oe3[0] = I11[0], oe3[1] = I11[1], _10.unprojectFromRenderScreen(oe3, ae3)) {
            const t24 = n();
            r3(t24, e23.direction);
            const r27 = 1 / s2(t24);
            g(t24, t24, r27);
            o20(x(e23.origin, ae3) * r27, t24, -1, true, 1, le4);
          }
        }
      }
    }
  }
  computeAttachmentOrigin(e20, t22) {
    const r25 = e20.vertexAttributes;
    if (!r25)
      return false;
    const s27 = r25.get(O2.POSITION), i23 = e20.indices.get(O2.POSITION);
    return a9(s27, i23, t22);
  }
  createBufferWriter() {
    return new xe(this);
  }
  _normalAndViewAngle(e20, t22, r25, i23) {
    return t21(t22) && (t22 = a7(ue4, t22)), S(i23.normal, e20, t22), O(i23.normal, i23.normal, r25.viewInverseTransposeMatrix), i23.cosAngle = P(ce4, ve), i23;
  }
  _updateScaleInfo(e20, r25, s27) {
    const i23 = this.parameters;
    r(i23.screenSizePerspective) ? d5(s27, r25, i23.screenSizePerspective, e20.factor) : (e20.factor.scale = 1, e20.factor.factor = 0, e20.factor.minPixelSize = 0, e20.factor.paddingPixels = 0), r(i23.screenSizePerspectiveAlignment) ? d5(s27, r25, i23.screenSizePerspectiveAlignment, e20.factorAlignment) : (e20.factorAlignment.factor = e20.factor.factor, e20.factorAlignment.scale = e20.factor.scale, e20.factorAlignment.minPixelSize = e20.factor.minPixelSize, e20.factorAlignment.paddingPixels = e20.factor.paddingPixels);
  }
  applyShaderOffsetsView(e20, t22, r25, s27, i23, a17, n23) {
    const o20 = this._normalAndViewAngle(t22, r25, i23, de3);
    return this._applyVerticalGroundOffsetView(e20, o20, i23, n23), this._applyVerticalOffsetTransformationView(n23, o20, i23, a17), this._applyPolygonOffsetView(n23, o20, s27[3], i23, n23), this._applyCenterOffsetView(n23, s27, n23), n23;
  }
  applyShaderOffsetsNDC(e20, r25, s27, i23, a17) {
    return this._applyCenterOffsetNDC(e20, r25, s27, i23), r(a17) && r3(a17, i23), this._applyPolygonOffsetNDC(i23, r25, s27, i23), i23;
  }
  _applyPolygonOffsetView(t22, r25, s27, i23, a17) {
    const n23 = i23.aboveGround ? 1 : -1;
    let o20 = Math.sign(s27);
    0 === o20 && (o20 = n23);
    const c16 = n23 * o20;
    if (this.parameters.shaderPolygonOffset <= 0)
      return r3(a17, t22);
    const l23 = a3(Math.abs(r25.cosAngle), 0.01, 1), f17 = 1 - Math.sqrt(1 - l23 * l23) / l23 / i23.viewport[2];
    return g(a17, t22, c16 > 0 ? f17 : 1 / f17), a17;
  }
  _applyVerticalGroundOffsetView(e20, t22, r25, s27) {
    const i23 = s2(e20), a17 = r25.aboveGround ? 1 : -1, n23 = 0.5 * r25.computeRenderPixelSizeAtDist(i23), o20 = g(ae3, t22.normal, a17 * n23);
    return u(s27, e20, o20), s27;
  }
  _applyVerticalOffsetTransformationView(e20, t22, s27, i23) {
    const a17 = this.parameters;
    if (!a17.verticalOffset || !a17.verticalOffset.screenLength) {
      if (a17.screenSizePerspective || a17.screenSizePerspectiveAlignment) {
        const r25 = s2(e20);
        this._updateScaleInfo(i23, r25, t22.cosAngle);
      } else
        i23.factor.scale = 1, i23.factorAlignment.scale = 1;
      return e20;
    }
    const n23 = s2(e20), o20 = i(a17.screenSizePerspectiveAlignment, a17.screenSizePerspective), c16 = L2(s27, n23, a17.verticalOffset, t22.cosAngle, o20);
    return this._updateScaleInfo(i23, n23, t22.cosAngle), g(t22.normal, t22.normal, c16), u(e20, e20, t22.normal);
  }
  _applyCenterOffsetView(e20, t22, r25) {
    const s27 = "screen" !== this.parameters.centerOffsetUnits;
    return r25 !== e20 && r3(r25, e20), s27 && (r25[0] += t22[0], r25[1] += t22[1], t22[2] && (z(ne3, r25), u(r25, r25, g(ne3, ne3, t22[2])))), r25;
  }
  _applyCenterOffsetNDC(e20, t22, r25, s27) {
    const i23 = "screen" !== this.parameters.centerOffsetUnits;
    return s27 !== e20 && r3(s27, e20), i23 || (s27[0] += t22[0] / r25.fullWidth * 2, s27[1] += t22[1] / r25.fullHeight * 2), s27;
  }
  _applyPolygonOffsetNDC(e20, t22, r25, s27) {
    const i23 = this.parameters.shaderPolygonOffset;
    if (e20 !== s27 && r3(s27, e20), i23) {
      const e21 = r25.aboveGround ? 1 : -1, a17 = e21 * Math.sign(t22[3]);
      s27[2] -= (a17 || e21) * i23;
    }
    return s27;
  }
  requiresSlot(e20, t22) {
    if (t22 === h5.Color || t22 === h5.Alpha || t22 === h5.Highlight || t22 === h5.ObjectAndLayerIdColor) {
      if (e20 === E8.DRAPED_MATERIAL)
        return true;
      const { drawInSecondSlot: t23, occlusionTest: r25 } = this.parameters;
      return e20 === (t23 ? E8.LABEL_MATERIAL : E8.HUD_MATERIAL) || r25 && e20 === E8.OCCLUSION_PIXELS;
    }
    return false;
  }
  createGLMaterial(e20) {
    return new $6(e20);
  }
  calculateRelativeScreenBounds(e20, t22, r25 = u5()) {
    return ee4(this.parameters, e20, t22, r25), r25[2] = r25[0] + e20[0], r25[3] = r25[1] + e20[1], r25;
  }
};
var $6 = class extends h6 {
  constructor(e20) {
    super({ ...e20, ...e20.material.parameters });
  }
  selectProgram(e20) {
    return this.ensureTechnique(b9, e20);
  }
  beginSlot(e20) {
    return this.updateTexture(this._material.parameters.textureId), this._material.setParameters(this.textureBindParameters), this.selectProgram(e20);
  }
};
function ee4(e20, t22, r25, s27 = ie3) {
  return a6(s27, e20.anchorPosition), s27[0] *= -t22[0], s27[1] *= -t22[1], s27[0] += e20.screenOffset[0] * r25, s27[1] += e20.screenOffset[1] * r25, s27;
}
function te3(e20) {
  const t22 = e20[0], r25 = e20[1], s27 = e20[2], i23 = e20[3], a17 = e20[4], n23 = e20[5], o20 = e20[6], c16 = e20[7], l23 = e20[8], f17 = 1 / Math.sqrt(t22 * t22 + r25 * r25 + s27 * s27), u20 = 1 / Math.sqrt(i23 * i23 + a17 * a17 + n23 * n23), h15 = 1 / Math.sqrt(o20 * o20 + c16 * c16 + l23 * l23);
  return e20[0] = t22 * f17, e20[1] = r25 * f17, e20[2] = s27 * f17, e20[3] = i23 * u20, e20[4] = a17 * u20, e20[5] = n23 * u20, e20[6] = o20 * h15, e20[7] = c16 * h15, e20[8] = l23 * h15, e20;
}
function re3(e20, r25, s27, i23, a17, n23, o20, c16) {
  let l23 = r25 - a17 - (c16[0] > 0 ? i23[0] * c16[0] : 0), f17 = l23 + i23[0] + 2 * a17, u20 = s27 - a17 - (c16[1] > 0 ? i23[1] * c16[1] : 0), h15 = u20 + i23[1] + 2 * a17;
  const p10 = o20.distanceFieldBoundingBox;
  return o20.textureIsSignedDistanceField && r(p10) && (l23 += i23[0] * p10[0], u20 += i23[1] * p10[1], f17 -= i23[0] * (1 - p10[2]), h15 -= i23[1] * (1 - p10[3]), l23 -= n23, f17 += n23, u20 -= n23, h15 += n23), e20[0] > l23 && e20[0] < f17 && e20[1] > u20 && e20[1] < h15;
}
var se3 = { factor: { scale: 0, factor: 0, minPixelSize: 0, paddingPixels: 0 }, factorAlignment: { scale: 0, factor: 0, minPixelSize: 0, paddingPixels: 0 } };
var ie3 = n12();
var ae3 = n();
var ne3 = n();
var oe3 = n10();
var ce4 = n();
var le4 = n();
var fe2 = e7();
var ue4 = e7();
var he3 = e8();
var pe3 = n();
var de3 = { normal: ce4, cosAngle: 0 };
var me2 = e8();
var ge = 1;
var Oe = 2;
var Se = [0, 0];
var ve = r2(0, 0, 1);
var Ae = class extends o6 {
  constructor() {
    super(...arguments), this.renderOccluded = o8.Occlude, this.color = r6(1, 1, 1, 1), this.texCoordScale = [1, 1], this.polygonOffset = false, this.anchorPosition = r10(0.5, 0.5), this.screenOffset = [0, 0], this.shaderPolygonOffset = 1e-5, this.textureIsSignedDistanceField = false, this.outlineColor = r6(1, 1, 1, 1), this.outlineSize = 0, this.vvSizeEnabled = false, this.vvSizeMinSize = [1, 1, 1], this.vvSizeMaxSize = [100, 100, 100], this.vvSizeOffset = [0, 0, 0], this.vvSizeFactor = [1, 1, 1], this.vvColorEnabled = false, this.vvColorValues = [0, 0, 0, 0, 0, 0, 0, 0], this.vvColorColors = [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], this.hasSlicePlane = false, this.pixelSnappingEnabled = true, this.occlusionTest = true, this.binaryHighlightOcclusion = true, this.debugDrawLabelBorder = false, this.centerOffsetUnits = "world", this.drawInSecondSlot = false, this.depthEnabled = true, this.isDraped = false;
  }
};
var be = T().vec3f(O2.POSITION).vec3f(O2.NORMAL).vec2f(O2.UV0).vec4u8(O2.COLOR).vec2f(O2.SIZE).vec4f(O2.AUXPOS1).vec4f(O2.AUXPOS2);
var Pe = be.clone().vec4u8(O2.OBJECTANDLAYERIDCOLOR);
var xe = class {
  constructor(e20) {
    this._material = e20, this.vertexBufferLayout = has("enable-feature:objectAndLayerId-rendering") ? Pe : be;
  }
  allocate(e20) {
    return this.vertexBufferLayout.createBuffer(e20);
  }
  elementCount(e20) {
    return 6 * e20.indices.get(O2.POSITION).length;
  }
  write(e20, r25, s27, i23, a17) {
    y4(s27.indices.get(O2.POSITION), s27.vertexAttributes.get(O2.POSITION).data, e20, i23.position, a17, 6), B(s27.indices.get(O2.NORMAL), s27.vertexAttributes.get(O2.NORMAL).data, r25, i23.normal, a17, 6);
    {
      const e21 = s27.vertexAttributes.get(O2.UV0).data;
      let t22, r26, n23, o20;
      if (null == e21 || e21.length < 4) {
        const e22 = this._material.parameters;
        t22 = 0, r26 = 0, n23 = e22.texCoordScale[0], o20 = e22.texCoordScale[1];
      } else
        t22 = e21[0], r26 = e21[1], n23 = e21[2], o20 = e21[3];
      n23 = Math.min(1.99999, n23 + 1), o20 = Math.min(1.99999, o20 + 1);
      const c16 = s27.indices.get(O2.POSITION).length, l23 = i23.uv0;
      let f17 = a17;
      for (let s28 = 0; s28 < c16; ++s28)
        l23.set(f17, 0, t22), l23.set(f17, 1, r26), f17 += 1, l23.set(f17, 0, n23), l23.set(f17, 1, r26), f17 += 1, l23.set(f17, 0, n23), l23.set(f17, 1, o20), f17 += 1, l23.set(f17, 0, n23), l23.set(f17, 1, o20), f17 += 1, l23.set(f17, 0, t22), l23.set(f17, 1, o20), f17 += 1, l23.set(f17, 0, t22), l23.set(f17, 1, r26), f17 += 1;
    }
    h9(s27.indices.get(O2.COLOR), s27.vertexAttributes.get(O2.COLOR).data, 4, i23.color, a17, 6);
    {
      const e21 = s27.indices.get(O2.SIZE), t22 = s27.vertexAttributes.get(O2.SIZE).data, r26 = e21.length, n23 = i23.size;
      let o20 = a17;
      for (let s28 = 0; s28 < r26; ++s28) {
        const r27 = t22[2 * e21[s28]], i24 = t22[2 * e21[s28] + 1];
        for (let e22 = 0; e22 < 6; ++e22)
          n23.set(o20, 0, r27), n23.set(o20, 1, i24), o20 += 1;
      }
    }
    if (s27.indices.get(O2.AUXPOS1) && s27.vertexAttributes.get(O2.AUXPOS1) && u15(s27.indices.get(O2.AUXPOS1), s27.vertexAttributes.get(O2.AUXPOS1).data, i23.auxpos1, a17, 6), s27.indices.get(O2.AUXPOS2) && s27.vertexAttributes.get(O2.AUXPOS2) && u15(s27.indices.get(O2.AUXPOS2), s27.vertexAttributes.get(O2.AUXPOS2).data, i23.auxpos2, a17, 6), r(s27.objectAndLayerIdColor) && 4 === s27.objectAndLayerIdColor.length) {
      if (s27.indices.get(O2.POSITION)) {
        const e21 = s27.indices.get(O2.POSITION).length, t22 = i23.getField(O2.OBJECTANDLAYERIDCOLOR, x4);
        b6(s27.objectAndLayerIdColor, t22, e21, a17, 6);
      }
    }
  }
};

export {
  r15 as r,
  x8 as x,
  l19 as l,
  v7 as v,
  x9 as x2,
  L5 as L,
  T4 as T,
  R5 as R,
  b7 as b,
  C3 as C,
  E10 as E,
  X3 as X,
  k6 as k,
  q2 as q,
  Z2 as Z,
  B3 as B,
  D3 as D,
  J2 as J,
  H7 as H,
  A6 as A,
  z3 as z,
  U2 as U,
  B2,
  I4 as I,
  S3 as S,
  V3 as V,
  G3 as G,
  X2,
  t13 as t,
  i12 as i,
  f9 as f,
  d7 as d,
  m6 as m,
  p5 as p,
  g4 as g,
  v6 as v2,
  h10 as h,
  j5 as j,
  x7 as x3,
  u18 as u,
  s15 as s,
  i13 as i2,
  d8 as d2,
  f10 as f2,
  h11 as h2,
  Q7 as Q,
  f11 as f3,
  v8 as v3,
  m9 as m2,
  r16 as r2,
  a13 as a,
  e14 as e,
  E12 as E2,
  I9 as I2,
  m10 as m3,
  J3 as J2,
  j8 as j2,
  i14 as i3,
  t16 as t2,
  x10 as x4,
  U4 as U2,
  e17 as e2,
  f14 as f4,
  d13 as d3,
  ue2 as ue,
  i22 as i4,
  s25 as s2,
  T8 as T2,
  F7 as F
};
//# sourceMappingURL=chunk-LOQE65I2.js.map
