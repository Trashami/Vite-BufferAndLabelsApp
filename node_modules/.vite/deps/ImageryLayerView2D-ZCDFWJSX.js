import {
  d as d4,
  y as y3
} from "./chunk-A2S4JS7P.js";
import {
  n as n2
} from "./chunk-CRF4L7JY.js";
import {
  v
} from "./chunk-IZ7L4GV6.js";
import {
  a
} from "./chunk-CWBK2DDW.js";
import {
  oe
} from "./chunk-L26SDFYA.js";
import "./chunk-6TQO4FJO.js";
import "./chunk-DPGI5XTT.js";
import {
  i as i3
} from "./chunk-QPAL3PC4.js";
import "./chunk-QXJIQKLY.js";
import {
  d as d3,
  o
} from "./chunk-GRWIJKD6.js";
import "./chunk-WGK2FJEK.js";
import "./chunk-CNTOSDAN.js";
import "./chunk-LL5ZGGZR.js";
import "./chunk-Q5IFLFM5.js";
import {
  i as i4
} from "./chunk-VPBDKONJ.js";
import {
  y as y2
} from "./chunk-L4LV52OG.js";
import {
  u
} from "./chunk-PCWW275T.js";
import "./chunk-EWYYYS2T.js";
import {
  i as i2
} from "./chunk-7N2Z7KNR.js";
import "./chunk-DBT4KOKX.js";
import "./chunk-4Y3VLNR2.js";
import "./chunk-MU26VSON.js";
import "./chunk-5HIF32ZE.js";
import "./chunk-57QYUXCA.js";
import "./chunk-J42Y5N2P.js";
import "./chunk-DWAZ7HI7.js";
import "./chunk-POI555WS.js";
import "./chunk-JHLU6RPN.js";
import "./chunk-EPMXCACW.js";
import "./chunk-UCPKJYXN.js";
import "./chunk-KFLNKWNF.js";
import "./chunk-KUO7OCMN.js";
import "./chunk-KG5RWWIW.js";
import "./chunk-27YO3FKC.js";
import "./chunk-XNT3PUPA.js";
import "./chunk-JMGHYNUW.js";
import "./chunk-SFYX532J.js";
import "./chunk-XBFCIW4K.js";
import "./chunk-6TBB7UXB.js";
import "./chunk-UO3LS2M5.js";
import {
  I
} from "./chunk-EQNT4A7P.js";
import "./chunk-ESF7LLEL.js";
import "./chunk-IOZMLQTF.js";
import "./chunk-2GP5D74I.js";
import "./chunk-R24MO4IV.js";
import "./chunk-YQBYWPBD.js";
import "./chunk-QISOH77W.js";
import "./chunk-XO5VJRK4.js";
import {
  J
} from "./chunk-DQCR5QA4.js";
import {
  d as d2,
  x as x3
} from "./chunk-OYDVEVDU.js";
import {
  A
} from "./chunk-OAXPH6DL.js";
import "./chunk-O4DPVR3F.js";
import "./chunk-MATM5L52.js";
import "./chunk-4OM3EX6P.js";
import {
  s as s3
} from "./chunk-E24JZEAW.js";
import "./chunk-A22ACVMF.js";
import "./chunk-3OFVLRSL.js";
import "./chunk-UWKVAZQ6.js";
import "./chunk-FV3CMB37.js";
import "./chunk-4HL6BBWO.js";
import "./chunk-OEFH2SLX.js";
import "./chunk-I4YZGF7W.js";
import "./chunk-FZSI6IGI.js";
import "./chunk-7DLBSBVE.js";
import "./chunk-4XFEPZ26.js";
import "./chunk-FERTI5PU.js";
import "./chunk-VWCRJ6R6.js";
import "./chunk-MKNNZ33G.js";
import "./chunk-JQUWFKNU.js";
import "./chunk-UVQQJ3R6.js";
import "./chunk-QU433TMZ.js";
import "./chunk-IIAN3QNN.js";
import "./chunk-GX2FDWTU.js";
import "./chunk-TFHLTN6F.js";
import "./chunk-UDYHZLTE.js";
import "./chunk-IQBIGNPU.js";
import "./chunk-4JNOVZUK.js";
import "./chunk-ZNRXLY4R.js";
import "./chunk-JEA4MMTV.js";
import "./chunk-RG3AHHRL.js";
import "./chunk-SQSR6K2M.js";
import "./chunk-75RMBUYZ.js";
import "./chunk-TJ2I6XQT.js";
import "./chunk-EDHROVWI.js";
import "./chunk-34YPGGJT.js";
import "./chunk-NCXAKZRR.js";
import "./chunk-DUCSW4OU.js";
import "./chunk-WVDA5Z37.js";
import "./chunk-OOOPZLJE.js";
import "./chunk-U2WD23Z5.js";
import "./chunk-ZEEU5HOK.js";
import "./chunk-FFVIDMFN.js";
import "./chunk-XGEPEYGB.js";
import "./chunk-2T7LFOXQ.js";
import "./chunk-NCONZRBI.js";
import "./chunk-76CXRT5P.js";
import "./chunk-7Q5M7ANT.js";
import "./chunk-A4HIS5ZJ.js";
import {
  x as x2
} from "./chunk-AMLHWG76.js";
import "./chunk-OFQYIOO7.js";
import "./chunk-YF2CRSQX.js";
import "./chunk-INL7BDTP.js";
import "./chunk-7XXQ7762.js";
import "./chunk-DVGM5RQS.js";
import "./chunk-QTYVDCOW.js";
import {
  g
} from "./chunk-YGVY4EIZ.js";
import "./chunk-HSDU7DIL.js";
import "./chunk-FWRLW4G5.js";
import "./chunk-E52E6T7N.js";
import "./chunk-GLGOVVCK.js";
import "./chunk-BUVDI6S7.js";
import "./chunk-6Z6ZAVRA.js";
import "./chunk-PK4W65H4.js";
import "./chunk-GY2AJLN6.js";
import "./chunk-W62B63EU.js";
import "./chunk-N43PI2UO.js";
import "./chunk-O6VYMEIX.js";
import "./chunk-NDQ5FHGV.js";
import "./chunk-ZWUEORSX.js";
import "./chunk-US2IWMHE.js";
import "./chunk-QWNKYSI4.js";
import "./chunk-ZPYDYUP5.js";
import {
  i
} from "./chunk-CYI2FLSH.js";
import "./chunk-AIDV7EKX.js";
import "./chunk-FZQZIM7U.js";
import "./chunk-YM6PUX7G.js";
import "./chunk-QEYOWTXD.js";
import "./chunk-CZBRZ6SU.js";
import "./chunk-KDO6J2FO.js";
import "./chunk-RT3T2K4S.js";
import "./chunk-WJCI2CGX.js";
import {
  d
} from "./chunk-REIQNAQW.js";
import {
  g as g2
} from "./chunk-J6LQZWZI.js";
import "./chunk-OD3FDQCI.js";
import "./chunk-J2PJNRU7.js";
import "./chunk-56SPM3WK.js";
import "./chunk-XMZAPOBR.js";
import "./chunk-BLJKKR5D.js";
import "./chunk-ZGNCYHMZ.js";
import "./chunk-X2S4RQJ4.js";
import "./chunk-FUPLN7UM.js";
import "./chunk-376OPXM4.js";
import "./chunk-DER356EU.js";
import "./chunk-MZIWIEIR.js";
import "./chunk-TQEOEDAZ.js";
import "./chunk-SHFHZMHO.js";
import "./chunk-NRP45AHD.js";
import "./chunk-IWQ7452U.js";
import "./chunk-NAN5J6QS.js";
import "./chunk-B4DKBAM3.js";
import "./chunk-6M2AHKYV.js";
import "./chunk-SZIJNKCV.js";
import "./chunk-6O43OEU5.js";
import "./chunk-J2K7ZDSV.js";
import "./chunk-2UML3WQZ.js";
import "./chunk-KXVMEIWT.js";
import {
  j as j2
} from "./chunk-UDND2Z3V.js";
import "./chunk-23Y3DIC6.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-RAX2HD42.js";
import "./chunk-ZYRIJWLX.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import "./chunk-3MNMDUQZ.js";
import {
  w,
  w2
} from "./chunk-UWG37XSU.js";
import "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import "./chunk-RXYULINL.js";
import {
  U,
  l,
  w as w3
} from "./chunk-5NXILPDI.js";
import "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-XQN7F674.js";
import {
  U as U2
} from "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import "./chunk-KAN4HXCG.js";
import "./chunk-4FEGON7M.js";
import "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-CXFRNDG4.js";
import "./chunk-7QMMKGW4.js";
import {
  e as e2,
  m,
  n2 as n,
  y
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import {
  j,
  x
} from "./chunk-MJXQTGI2.js";
import {
  s as s2
} from "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import {
  s2 as s
} from "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import {
  e,
  r,
  t
} from "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryView2D.js
var d5 = class extends m {
  constructor() {
    super(...arguments), this.attached = false, this.container = new i2(), this.updateRequested = false, this.type = "imagery", this._bitmapView = new a();
  }
  destroy() {
    this.attached && (this.detach(), this.attached = false), this.updateRequested = false;
  }
  get updating() {
    return !this.attached || this.isUpdating();
  }
  update(e3) {
    this.strategy.update(e3).catch((e4) => {
      j(e4) || s.getLogger(this.declaredClass).error(e4);
    });
  }
  hitTest(e3) {
    return new g2({ attributes: {}, geometry: e3.clone(), layer: this.layer });
  }
  attach() {
    this.container.addChild(this._bitmapView);
    const e3 = this.layer.version >= 10, t3 = this.layer.version >= 10.1 ? this.layer.imageMaxHeight : 2048, r2 = this.layer.version >= 10.1 ? this.layer.imageMaxWidth : 2048;
    this.strategy = new v({ container: this._bitmapView, imageNormalizationSupported: e3, imageMaxHeight: t3, imageMaxWidth: r2, fetchSource: this._fetchImage.bind(this), requestUpdate: () => this.requestUpdate() });
  }
  detach() {
    this.strategy.destroy(), this._bitmapView.removeAllChildren(), this.container.removeAllChildren(), this.updateRequested = false;
  }
  redraw() {
    this.strategy.updateExports(async (e3) => {
      var _a;
      if (e3.source instanceof HTMLImageElement)
        return;
      const t3 = await this.layer.applyRenderer({ extent: e3.source.extent, pixelBlock: (_a = e3.source.originalPixelBlock) != null ? _a : e3.source.pixelBlock }), r2 = e3.source;
      r2.filter = (e4) => this.layer.pixelFilter ? this.layer.applyFilter(e4) : { ...t3, extent: r2.extent };
    }).catch((e3) => {
      j(e3) || s.getLogger(this.declaredClass).error(e3);
    });
  }
  requestUpdate() {
    this.updateRequested || (this.updateRequested = true, this.view.requestUpdate());
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  getPixelData() {
    if (this.updating)
      return null;
    const e3 = this.strategy.bitmaps;
    if (1 === e3.length && e3[0].source)
      return { extent: e3[0].source.extent, pixelBlock: e3[0].source.originalPixelBlock };
    if (e3.length > 1) {
      const t3 = this.view.extent, r2 = e3.map((e4) => e4.source).filter((e4) => e4.extent && e4.extent.intersects(t3)).map((e4) => ({ extent: e4.extent, pixelBlock: e4.originalPixelBlock })), i5 = A(r2, t3);
      return r(i5) ? { extent: i5.extent, pixelBlock: i5.pixelBlock } : null;
    }
    return null;
  }
  _fetchImage(e3, t3, r2, i5) {
    return (i5 = i5 || {}).timeExtent = this.timeExtent, i5.requestAsImageElement = true, this.layer.fetchImage(e3, t3, r2, i5).then((e4) => e4.imageOrCanvasElement ? e4.imageOrCanvasElement : this.layer.applyRenderer(e4.pixelData, { signal: i5.signal }).then((t4) => {
      const r3 = new i3(t4.pixelBlock, t4.extent.clone(), e4.pixelData.pixelBlock);
      return r3.filter = (e5) => this.layer.applyFilter(e5), r3;
    }));
  }
};
e2([y()], d5.prototype, "attached", void 0), e2([y()], d5.prototype, "container", void 0), e2([y()], d5.prototype, "layer", void 0), e2([y()], d5.prototype, "strategy", void 0), e2([y()], d5.prototype, "timeExtent", void 0), e2([y()], d5.prototype, "view", void 0), e2([y()], d5.prototype, "updateRequested", void 0), e2([y()], d5.prototype, "updating", null), e2([y()], d5.prototype, "type", void 0), d5 = e2([n("esri.views.2d.layers.imagery.ImageryView2D")], d5);
var u2 = d5;

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFContainer.js
var t2 = class extends o {
  constructor() {
    super(...arguments), this.symbolTypes = ["triangle"];
  }
  get requiresDedicatedFBO() {
    return false;
  }
  prepareRenderPasses(s4) {
    const t3 = s4.registerRenderPass({ name: "imagery (vf)", brushes: [d3], target: () => this.children, drawPhase: I.MAP });
    return [...super.prepareRenderPasses(s4), t3];
  }
  doRender(e3) {
    this.visible && e3.drawPhase === I.MAP && this.symbolTypes.forEach((r2) => {
      e3.renderPass = r2, super.doRender(e3);
    });
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryVFStrategy.js
var p = class extends m {
  constructor(e3) {
    super(e3), this.update = x((e4, t3) => this._update(e4, t3).catch((e5) => {
      j(e5) || s.getLogger(this.declaredClass).error(e5);
    }));
  }
  get updating() {
    return !!this._loading;
  }
  redraw(e3) {
    if (!this.container.children.length)
      return;
    const t3 = this.container.children[0];
    t3.symbolizerParameters = e3, t3.invalidateVAO(), this.container.symbolTypes = "wind_speed" === e3.style ? ["scalar", "triangle"] : "simple_scalar" === e3.style ? ["scalar"] : ["triangle"], this.container.requestRender();
  }
  async _update(e3, t3, r2) {
    if (!e3.stationary)
      return;
    const { extent: i5, spatialReference: s4 } = e3.state, o2 = new w2({ xmin: i5.xmin, ymin: i5.ymin, xmax: i5.xmax, ymax: i5.ymax, spatialReference: s4 }), [a2, n3] = e3.state.size;
    this._loading = this.fetchPixels(o2, a2, n3, r2);
    const c = await this._loading;
    this._addToDisplay(c, t3, e3.state), this._loading = null;
  }
  _addToDisplay(e3, t3, r2) {
    if (t(e3.pixelBlock))
      return this.container.children.forEach((e4) => e4.destroy()), void this.container.removeAllChildren();
    const { extent: s4, pixelBlock: o2 } = e3, a2 = new y3(o2);
    a2.offset = [0, 0], a2.symbolizerParameters = t3, a2.rawPixelData = e3, a2.invalidateVAO(), a2.x = s4.xmin, a2.y = s4.ymax, a2.pixelRatio = r2.pixelRatio, a2.rotation = r2.rotation, a2.resolution = r2.resolution, a2.width = o2.width * t3.symbolTileSize, a2.height = o2.height * t3.symbolTileSize, this.container.children.forEach((e4) => e4.destroy()), this.container.removeAllChildren(), this.container.symbolTypes = "wind_speed" === t3.style ? ["scalar", "triangle"] : "simple_scalar" === t3.style ? ["scalar"] : ["triangle"], this.container.addChild(a2);
  }
};
e2([y()], p.prototype, "fetchPixels", void 0), e2([y()], p.prototype, "container", void 0), e2([y()], p.prototype, "_loading", void 0), e2([y()], p.prototype, "updating", null), p = e2([n("esri.views.2d.layers.imagery.ImageryVFStrategy")], p);
var m2 = p;

// node_modules/@arcgis/core/views/2d/layers/imagery/VectorFieldView2D.js
var f = class extends d {
  constructor() {
    super(...arguments), this.attached = false, this.container = new t2(), this.type = "imageryVF", this._dataParameters = { exportParametersVersion: 0, bbox: "", symbolTileSize: 0, time: "" }, this._fetchpixels = async (e3, t3, r2, i5) => {
      const n3 = await this._projectFullExtentPromise, { symbolTileSize: l2 } = this.layer.renderer, { extent: c, width: m4, height: p2 } = x3(e3, t3, r2, l2, n3);
      if (r(n3) && !n3.intersects(e3))
        return { extent: c, pixelBlock: null };
      const h = { bbox: `${c.xmin}, ${c.ymin}, ${c.xmax}, ${c.ymax}`, exportParametersVersion: this.layer.exportImageServiceParameters.version, symbolTileSize: l2, time: JSON.stringify(this.timeExtent || "") };
      if (this._canReuseVectorFieldData(h)) {
        const e4 = this.getPixelData();
        if (r(e4)) {
          if (`${e4.extent.xmin}, ${e4.extent.ymin}, ${e4.extent.xmax}, ${e4.extent.ymax}` === h.bbox)
            return e4;
        }
      }
      const { pixelData: u3 } = await this.layer.fetchImage(c, m4, p2, { timeExtent: this.timeExtent, requestAsImageElement: false, signal: i5 });
      if (this._dataParameters = h, t(u3.pixelBlock))
        return { extent: c, pixelBlock: null };
      return { extent: c, pixelBlock: "vector-uv" === this.layer.rasterInfo.dataType ? e(d2(u3.pixelBlock, "vector-uv")) : u3.pixelBlock };
    };
  }
  get updating() {
    return !this.attached || this._strategy.updating;
  }
  attach() {
    this._projectFullExtentPromise = this._getProjectedFullExtent(this.view.spatialReference), this._strategy = new m2({ container: this.container, fetchPixels: this._fetchpixels }), this.handles.add(l(() => this.layer.renderer, (e3) => this._updateSymbolizerParams(e3), w3), "vector-field-view-update");
  }
  detach() {
    this._strategy.destroy(), this.container.children.forEach((e3) => e3.destroy()), this.container.removeAllChildren(), this.handles.remove("vector-field-view-update"), this._strategy = this.container = this._projectFullExtentPromise = null;
  }
  getPixelData() {
    if (this.updating || !this.container.children.length)
      return null;
    const { extent: e3, pixelBlock: t3 } = this.container.children[0].rawPixelData;
    return { extent: e3, pixelBlock: t3 };
  }
  hitTest(e3) {
    return new g2({ attributes: {}, geometry: e3.clone(), layer: this.layer });
  }
  update(e3) {
    this._strategy.update(e3, this._symbolizerParams);
  }
  redraw() {
    this._updateSymbolizerParams(this.layer.renderer), this._strategy.redraw(this._symbolizerParams);
  }
  _canReuseVectorFieldData(e3) {
    const t3 = this._dataParameters.exportParametersVersion === e3.exportParametersVersion, r2 = this._dataParameters.time === e3.time, i5 = this._dataParameters.symbolTileSize === e3.symbolTileSize, s4 = this._dataParameters.bbox === e3.bbox;
    return t3 && r2 && i5 && s4;
  }
  async _getProjectedFullExtent(e3) {
    try {
      return await J(this.layer.fullExtent, e3);
    } catch (t3) {
      try {
        const t4 = (await U2(this.layer.url, { query: { option: "footprints", outSR: e3.wkid || JSON.stringify(e3.toJSON()), f: "json" } })).data.featureCollection.layers[0].layerDefinition.extent;
        return t4 ? w2.fromJSON(t4) : null;
      } catch {
        return null;
      }
    }
  }
  _updateSymbolizerParams(e3) {
    "vector-field" === e3.type && (this._symbolizerParams = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: null }));
  }
};
e2([y()], f.prototype, "attached", void 0), e2([y()], f.prototype, "container", void 0), e2([y()], f.prototype, "layer", void 0), e2([y()], f.prototype, "timeExtent", void 0), e2([y()], f.prototype, "type", void 0), e2([y()], f.prototype, "view", void 0), e2([y()], f.prototype, "updating", null), f = e2([n("esri.views.2d.layers.imagery.VectorFieldView2D")], f);
var g3 = f;

// node_modules/@arcgis/core/views/layers/ImageryLayerView.js
var m3 = (m4) => {
  let c = class extends m4 {
    constructor() {
      super(...arguments), this.view = null;
    }
    async fetchPopupFeatures(e3, s4) {
      const { layer: p2 } = this;
      if (!e3)
        throw new s2("imagerylayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: p2 });
      const { popupEnabled: a2 } = p2, m5 = s3(p2, s4);
      if (!a2 || t(m5))
        throw new s2("imagerylayerview:fetchPopupFeatures", "Missing required popupTemplate or popupEnabled", { popupEnabled: a2, popupTemplate: m5 });
      const c2 = await m5.getRequiredFields(), l2 = new x2();
      l2.timeExtent = this.timeExtent, l2.geometry = e3, l2.outFields = c2, l2.outSpatialReference = e3.spatialReference;
      const y4 = this.view.resolution, w4 = "2d" === this.view.type ? new w(y4, y4, this.view.spatialReference) : new w(0.5 * y4, 0.5 * y4, this.view.spatialReference), { returnTopmostRaster: d6, showNoDataRecords: h } = m5.layerOptions || { returnTopmostRaster: true, showNoDataRecords: false }, f2 = { returnDomainValues: true, returnTopmostRaster: d6, pixelSize: w4, showNoDataRecords: h, signal: r(s4) ? s4.signal : null };
      return p2.queryVisibleRasters(l2, f2).then((e4) => e4);
    }
    canResume() {
      var _a;
      return !!super.canResume() && !((_a = this.timeExtent) == null ? void 0 : _a.isEmpty);
    }
  };
  return e2([y()], c.prototype, "layer", void 0), e2([y()], c.prototype, "suspended", void 0), e2([y(g)], c.prototype, "timeExtent", void 0), e2([y()], c.prototype, "view", void 0), c = e2([n("esri.views.layers.ImageryLayerView")], c), c;
};

// node_modules/@arcgis/core/views/2d/layers/ImageryLayerView2D.js
var g4 = class extends m3(i4(y2(u))) {
  constructor() {
    super(...arguments), this._exportImageVersion = -1, this._highlightGraphics = new i(), this.subview = null;
  }
  get pixelData() {
    return this.updating ? null : "getPixelData" in this.subview ? this.subview.getPixelData() : null;
  }
  async hitTest(e3, i5) {
    return this.subview ? [{ type: "graphic", graphic: this.subview.hitTest(e3), layer: this.layer, mapPoint: e3 }] : null;
  }
  update(e3) {
    var _a;
    (_a = this.subview) == null ? void 0 : _a.update(e3);
  }
  attach() {
    this.layer.increaseRasterJobHandlerUsage(), this._setSubView(), this.view && (this._highlightView = new oe({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new n2(this.view.featuresTilingScheme) }), this.container.addChild(this._highlightView.container)), this.handles.add([l(() => {
      var _a;
      return (_a = this.layer.blendMode) != null ? _a : "normal";
    }, (e3) => this.subview.container.blendMode = e3, w3), l(() => {
      var _a;
      return (_a = this.layer.effect) != null ? _a : null;
    }, (e3) => this.subview.container.effect = e3, w3), l(() => this.layer.exportImageServiceParameters.version, (e3) => {
      e3 && this._exportImageVersion !== e3 && (this._exportImageVersion = e3, this.requestUpdate());
    }, U), l(() => this.timeExtent, (e3) => {
      this.subview.timeExtent = e3, "redraw" in this.subview ? this.requestUpdate() : this.subview.redrawOrRefetch();
    }, U), this.layer.on("redraw", () => {
      "redraw" in this.subview ? this.subview.redraw() : this.subview.redrawOrRefetch();
    }), l(() => this.layer.renderer, () => this._setSubView())], "imagerylayerview-update");
  }
  detach() {
    var _a, _b;
    this.layer.decreaseRasterJobHandlerUsage(), this.container.removeAllChildren(), this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.handles.remove("imagerylayerview-update"), this.subview = null, (_b = this._highlightView) == null ? void 0 : _b.destroy(), this._exportImageVersion = -1;
  }
  moveStart() {
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  highlight(e3, r2) {
    if (!((Array.isArray(e3) ? e3[0] : j2.isCollection(e3) ? e3.getItemAt(0) : e3) instanceof g2))
      return { remove: () => {
      } };
    let s4 = [];
    return Array.isArray(e3) || j2.isCollection(e3) ? s4 = e3.map((e4) => e4.clone()) : e3 instanceof g2 && (s4 = [e3.clone()]), this._highlightGraphics.addMany(s4), { remove: () => {
      this._highlightGraphics.removeMany(s4);
    } };
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return !this.subview || this.subview.updating;
  }
  _setSubView() {
    var _a, _b;
    if (!this.view)
      return;
    const e3 = (_a = this.layer.renderer) == null ? void 0 : _a.type;
    let i5 = "imagery";
    if ("vector-field" === e3 ? i5 = "imageryVF" : "flow" === e3 && (i5 = "flow"), this.subview) {
      const { type: e4 } = this.subview;
      if (e4 === i5)
        return this._attachSubview(this.subview), void ("flow" === e4 ? this.subview.redrawOrRefetch() : "imagery" === e4 && "lerc" === this.layer.format ? this.subview.redraw() : this.requestUpdate());
      this._detachSubview(this.subview), (_b = this.subview) == null ? void 0 : _b.destroy();
    }
    this.subview = "imagery" === i5 ? new u2({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : "imageryVF" === i5 ? new g3({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : new d4({ layer: this.layer, layerView: this }), this._attachSubview(this.subview), this.requestUpdate();
  }
  _attachSubview(e3) {
    e3 && !e3.attached && (e3.attach(), e3.attached = true, this.container.addChildAt(e3.container, 0), e3.container.blendMode = this.layer.blendMode, e3.container.effect = this.layer.effect);
  }
  _detachSubview(e3) {
    (e3 == null ? void 0 : e3.attached) && (this.container.removeChild(e3.container), e3.detach(), e3.attached = false);
  }
};
e2([y()], g4.prototype, "pixelData", null), e2([y()], g4.prototype, "subview", void 0), g4 = e2([n("esri.views.2d.layers.ImageryLayerView2D")], g4);
var b = g4;
export {
  b as default
};
//# sourceMappingURL=ImageryLayerView2D-ZCDFWJSX.js.map
