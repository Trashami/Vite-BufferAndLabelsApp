import {
  f,
  i,
  s
} from "./chunk-WVDA5Z37.js";
import {
  U
} from "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import "./chunk-KAN4HXCG.js";
import {
  l
} from "./chunk-7QMMKGW4.js";
import {
  e,
  n2 as n,
  y
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import "./chunk-MJXQTGI2.js";
import "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/rest/networks/support/ValidateNetworkTopologyResult.js
var s2 = class extends l {
  constructor(e2) {
    super(e2), this.moment = null, this.fullUpdate = false, this.validateErrorsCreated = false, this.dirtyAreaCount = null, this.exceededTransferLimit = null, this.serviceEdits = null;
  }
};
e([y({ type: Date, json: { type: Number, write: { writer: (e2, t) => {
  t.moment = e2 ? e2.getTime() : null;
} } } })], s2.prototype, "moment", void 0), e([y({ type: Boolean, json: { write: true } })], s2.prototype, "fullUpdate", void 0), e([y({ type: Boolean, json: { write: true } })], s2.prototype, "validateErrorsCreated", void 0), e([y({ type: Number, json: { write: true } })], s2.prototype, "dirtyAreaCount", void 0), e([y({ type: Boolean, json: { write: true } })], s2.prototype, "exceededTransferLimit", void 0), e([y({ type: [Object], json: { write: true } })], s2.prototype, "serviceEdits", void 0), s2 = e([n("esri.rest.networks.support.ValidateNetworkTopologyResult")], s2);
var p = s2;

// node_modules/@arcgis/core/rest/networks/validateNetworkTopology.js
async function a(a2, s3, d) {
  const n2 = f(a2), l2 = s3.toJSON();
  s3.validationSet && (l2.validationSet = JSON.stringify(s3.validationSet));
  const p2 = { ...l2, f: "json" }, u = s({ ...n2.query, ...p2 }), m = i(u, { ...d, method: "post" }), f2 = `${n2.path}/validateNetworkTopology`, { data: c } = await U(f2, m);
  if (!c)
    return null;
  const v = p.fromJSON(c);
  return v.serviceEdits = v.serviceEdits.map((t) => ({ layerId: t.id, editedFeatures: t.editedFeatures })), v;
}
export {
  a as validateNetworkTopology
};
//# sourceMappingURL=validateNetworkTopology-7LTKERUU.js.map
