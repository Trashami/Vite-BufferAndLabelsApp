import {
  a,
  r as r4
} from "./chunk-RU3WEQBN.js";
import "./chunk-GQHKPMYA.js";
import "./chunk-YBAOLQVA.js";
import {
  n as n2,
  r as r2,
  r2 as r3
} from "./chunk-77Z3U5HZ.js";
import "./chunk-VRX4W75V.js";
import {
  h as h2,
  m as m2
} from "./chunk-2J2YGTXG.js";
import {
  E,
  y as y3
} from "./chunk-C6BDJNUQ.js";
import "./chunk-75RMBUYZ.js";
import "./chunk-ZEEU5HOK.js";
import "./chunk-E52E6T7N.js";
import "./chunk-N43PI2UO.js";
import "./chunk-QEYOWTXD.js";
import "./chunk-KDO6J2FO.js";
import "./chunk-WJCI2CGX.js";
import "./chunk-RAX2HD42.js";
import "./chunk-ZYRIJWLX.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import {
  h,
  l
} from "./chunk-5NXILPDI.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-7QMMKGW4.js";
import {
  e,
  m,
  n2 as n,
  y
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import {
  f,
  y as y2
} from "./chunk-MJXQTGI2.js";
import "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import {
  r
} from "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/FeatureCollectionSnappingSource.js
var f2 = class extends m {
  constructor(e2) {
    super(e2), this.view = null, this._layerView3D = null;
  }
  get availability() {
    return 1;
  }
  get updating() {
    return this.layerSource.updating;
  }
  get _snappingElevationAligner() {
    const { view: e2 } = this, { layer: t } = this.layerSource, r5 = r(e2) && "3d" === e2.type;
    if (!r5 || "subtype-group" === t.type)
      return r2();
    const n3 = async (o, r6) => (await y2(e2.whenLayerView(t), r6)).elevationAlignPointsInFeatures(o, r6);
    return r2(r5, { elevationInfo: t.elevationInfo, alignPointsInFeatures: n3, spatialReference: e2.spatialReference });
  }
  get _snappingElevationFilter() {
    const { view: e2 } = this, t = r(e2) && "3d" === e2.type && "subtype-group" !== this.layerSource.layer.type;
    return r3(t);
  }
  get _symbologySnappingFetcher() {
    const { view: e2 } = this, { layer: t } = this.layerSource;
    return r(e2) && "3d" === e2.type && "subtype-group" !== t.type ? n2(this._symbologySnappingSupported, async (o, i) => {
      const n3 = await e2.whenLayerView(t);
      return f(i), n3.queryForSymbologySnapping({ candidates: o, spatialReference: e2.spatialReference }, i);
    }) : n2();
  }
  get _symbologySnappingSupported() {
    return r(this._layerView3D) && this._layerView3D.symbologySnappingSupported;
  }
  initialize() {
    const { view: e2 } = this, { layer: t } = this.layerSource;
    r(e2) && "3d" === e2.type && "subtype-group" !== t.type && (e2.whenLayerView(t).then((e3) => this._layerView3D = e3), this.addHandles([e2.elevationProvider.on("elevation-change", ({ context: e3 }) => {
      const { elevationInfo: o } = t;
      y3(e3, o) && this._snappingElevationAligner.notifyElevationSourceChange();
    }), l(() => t.elevationInfo, () => this._snappingElevationAligner.notifyElevationSourceChange(), h), l(() => {
      var _a;
      return r(this._layerView3D) ? (_a = this._layerView3D.processor) == null ? void 0 : _a.renderer : null;
    }, () => this._symbologySnappingFetcher.notifySymbologyChange(), h)]));
  }
  refresh() {
  }
  async fetchCandidates(e2, t) {
    const { layer: o } = this.layerSource, { coordinateHelper: i, elevationInfo: n3 } = e2, a2 = o.source;
    if (!a2.querySnapping)
      return [];
    const s = m2(o), p = h2(e2, s), l2 = await a2.querySnapping(p, { signal: t });
    f(t);
    const h3 = await this._snappingElevationAligner.alignCandidates(l2.candidates, t);
    f(t);
    const m3 = await this._symbologySnappingFetcher.fetch(h3, t);
    f(t);
    const d = 0 === m3.length ? h3 : [...h3, ...m3], v = this._snappingElevationFilter.filter(p, d), f3 = i.hasZ() ? E : n3, S = this._getGroundElevation;
    return v.map((e3) => r4(e3, i, f3, S));
  }
  get _getGroundElevation() {
    return a(this.view);
  }
};
e([y({ constructOnly: true })], f2.prototype, "layerSource", void 0), e([y({ constructOnly: true })], f2.prototype, "view", void 0), e([y()], f2.prototype, "_snappingElevationAligner", null), e([y()], f2.prototype, "_snappingElevationFilter", null), e([y()], f2.prototype, "_symbologySnappingFetcher", null), e([y()], f2.prototype, "_layerView3D", void 0), e([y()], f2.prototype, "_symbologySnappingSupported", null), e([y()], f2.prototype, "_getGroundElevation", null), f2 = e([n("esri.views.interactive.snapping.featureSources.FeatureCollectionSnappingSource")], f2);
export {
  f2 as FeatureCollectionSnappingSource
};
//# sourceMappingURL=FeatureCollectionSnappingSource-YEZFOP3R.js.map
