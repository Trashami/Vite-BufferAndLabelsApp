import {
  t as t3
} from "./chunk-TM6KXMYT.js";
import {
  d,
  l as l4,
  t as t2
} from "./chunk-APU7GFNJ.js";
import {
  l as l3
} from "./chunk-E4KPV765.js";
import {
  m as m3,
  p,
  y as y3
} from "./chunk-K3N3RUKL.js";
import {
  x
} from "./chunk-3KEVP6XQ.js";
import {
  n as n4
} from "./chunk-CN5IW2C7.js";
import {
  o
} from "./chunk-O6VYMEIX.js";
import {
  n as n5,
  r as r3
} from "./chunk-BLJKKR5D.js";
import {
  r as r2
} from "./chunk-NAN5J6QS.js";
import {
  n as n3
} from "./chunk-B4DKBAM3.js";
import {
  m as m2
} from "./chunk-6O43OEU5.js";
import {
  j
} from "./chunk-UDND2Z3V.js";
import {
  l
} from "./chunk-RAX2HD42.js";
import {
  r
} from "./chunk-HLM6QCL2.js";
import {
  n as n2
} from "./chunk-THVR7IAM.js";
import {
  s as s3
} from "./chunk-VWYWOOPX.js";
import {
  l as l2,
  u2 as u
} from "./chunk-7QMMKGW4.js";
import {
  e,
  m,
  n2 as n,
  y as y2
} from "./chunk-OOLCFNXJ.js";
import {
  E,
  f
} from "./chunk-MJXQTGI2.js";
import {
  s as s2
} from "./chunk-LIZHLHNA.js";
import {
  T,
  b
} from "./chunk-BTUHYGXO.js";
import {
  s2 as s
} from "./chunk-UA3YPL2R.js";
import {
  y
} from "./chunk-HVKDYDPP.js";
import {
  t
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/ground/NavigationConstraint.js
var t4;
var p2 = t4 = class extends l2 {
  constructor(r4) {
    super(r4), this.type = "none";
  }
  clone() {
    return new t4({ type: this.type });
  }
};
e([r2({ none: "none", stayAbove: "stay-above" })], p2.prototype, "type", void 0), p2 = t4 = e([n("esri.ground.NavigationConstraint")], p2);

// node_modules/@arcgis/core/Ground.js
var C;
var S = C = class extends u(m2) {
  constructor(r4) {
    super(r4), this.opacity = 1, this.shading = !t3.TERRAIN_USE_LEGACY_SHADING, this.surfaceColor = null, this.navigationConstraint = null, this.layers = new j();
    const e2 = (r5) => {
      r5.parent && r5.parent !== this && "remove" in r5.parent && r5.parent.remove(r5), r5.parent = this, "elevation" !== r5.type && "base-elevation" !== r5.type && s.getLogger(this.declaredClass).error(`Layer '${r5.title}, id:${r5.id}' of type '${r5.type}' is not supported as a ground layer and will therefore be ignored. Only layers of type 'elevation' are supported.`);
    }, t6 = (r5) => {
      r5.parent = null;
    };
    this.layers.on("after-add", (r5) => e2(r5.item)), this.layers.on("after-remove", (r5) => t6(r5.item));
  }
  initialize() {
    this.when().catch((r4) => {
      s.getLogger(this.declaredClass).error("#load()", "Failed to load ground", r4);
    }), this.resourceInfo && this.read(this.resourceInfo.data, this.resourceInfo.context);
  }
  destroy() {
    const r4 = this.layers.removeAll();
    for (const e2 of r4)
      e2.destroy();
    this.layers.destroy();
  }
  normalizeCtorArgs(r4) {
    return r4 && "resourceInfo" in r4 && (this._set("resourceInfo", r4.resourceInfo), delete (r4 = { ...r4 }).resourceInfo), r4;
  }
  set layers(r4) {
    this._set("layers", n3(r4, this._get("layers")));
  }
  writeLayers(r4, e2, o2, t6) {
    const i3 = [];
    r4 ? (t6 = { ...t6, layerContainerType: "ground" }, r4.forEach((r5) => {
      if ("write" in r5) {
        const e3 = {};
        o(r5)().write(e3, t6) && i3.push(e3);
      } else
        t6 && t6.messages && t6.messages.push(new s2("layer:unsupported", `Layers (${r5.title}, ${r5.id}) of type '${r5.declaredClass}' cannot be persisted in the ground`, { layer: r5 }));
    }), e2.layers = i3) : e2.layers = i3;
  }
  load(r4) {
    return this.addResolvingPromise(this._loadFromSource(r4)), Promise.resolve(this);
  }
  loadAll() {
    return n4(this, (r4) => {
      r4(this.layers);
    });
  }
  async queryElevation(r4, e2) {
    await this.load({ signal: e2 == null ? void 0 : e2.signal });
    const { ElevationQuery: o2 } = await import("./ElevationQuery-47X73CC6.js");
    f(e2);
    const t6 = new o2(), s4 = this.layers.filter(A).toArray();
    return t6.queryAll(s4, r4, e2);
  }
  async createElevationSampler(r4, e2) {
    await this.load({ signal: e2 == null ? void 0 : e2.signal });
    const { ElevationQuery: o2 } = await import("./ElevationQuery-47X73CC6.js");
    f(e2);
    const t6 = new o2(), s4 = this.layers.filter(A).toArray();
    return t6.createSamplerAll(s4, r4, e2);
  }
  clone() {
    const r4 = { opacity: this.opacity, surfaceColor: y(this.surfaceColor), navigationConstraint: y(this.navigationConstraint), layers: this.layers.slice() };
    return this.loaded && (r4.loadStatus = "loaded"), new C({ resourceInfo: this.resourceInfo }).set(r4);
  }
  read(r4, e2) {
    this.resourceInfo || this._set("resourceInfo", { data: r4, context: e2 }), super.read(r4, e2);
  }
  _loadFromSource(r4) {
    const e2 = this.resourceInfo;
    return e2 ? this._loadLayersFromJSON(e2.data, e2.context, r4) : Promise.resolve();
  }
  _loadLayersFromJSON(r4, e2, o2) {
    const t6 = e2 && e2.origin || "web-scene", s4 = e2 && e2.portal || null, a2 = e2 && e2.url || null;
    return import("./layersCreator-LWHV5JQX.js").then(({ populateOperationalLayers: e3 }) => {
      f(o2);
      const i3 = [];
      if (r4.layers && Array.isArray(r4.layers)) {
        const o3 = { context: { origin: t6, url: a2, portal: s4, layerContainerType: "ground" }, defaultLayerType: "ArcGISTiledElevationServiceLayer" };
        i3.push(e3(this.layers, r4.layers, o3));
      }
      return E(i3);
    }).then(() => {
    });
  }
};
function I(r4) {
  return r4 && "createElevationSampler" in r4;
}
function A(r4) {
  return "elevation" === r4.type || I(r4);
}
e([y2({ json: { read: false } })], S.prototype, "layers", null), e([r("layers")], S.prototype, "writeLayers", null), e([y2({ readOnly: true })], S.prototype, "resourceInfo", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 1 }, json: { type: T, read: { reader: r3, source: "transparency" }, write: { writer: (r4, e2) => {
  e2.transparency = n5(r4);
}, target: "transparency" } } })], S.prototype, "opacity", void 0), e([y2({ type: Boolean, nonNullable: true, json: { read: false } })], S.prototype, "shading", void 0), e([y2({ type: l, json: { type: [T], write: (r4, e2) => {
  e2.surfaceColor = r4.toJSON().slice(0, 3);
} } })], S.prototype, "surfaceColor", void 0), e([y2({ type: p2, json: { write: true } })], S.prototype, "navigationConstraint", void 0), S = C = e([n("esri.Ground")], S);
var L = S;

// node_modules/@arcgis/core/layers/support/editableLayers.js
function i(i3) {
  var _a;
  return !!(i3 && i3.loaded && "capabilities" in i3 && ((_a = i3 == null ? void 0 : i3.capabilities) == null ? void 0 : _a.operations) && "supportsEditing" in i3.capabilities.operations && true === i3.capabilities.operations.supportsEditing) && !("editingEnabled" in i3 && !i3.editingEnabled);
}

// node_modules/@arcgis/core/support/groundUtils.js
var i2 = { "world-elevation": { id: "worldElevation", url: "//elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer", layerType: "ArcGISTiledElevationServiceLayer" }, "world-topobathymetry": { id: "worldTopoBathymetry", url: "//elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/TopoBathy3D/ImageServer", layerType: "ArcGISTiledElevationServiceLayer" } };
function t5(t6) {
  let a2 = null;
  if ("string" == typeof t6)
    if (t6 in i2) {
      const r4 = i2[t6];
      a2 = new L({ resourceInfo: { data: { layers: [r4] } } });
    } else
      s.getLogger("esri.support.groundUtils").warn(`Unable to find ground definition for: ${t6}. Try "world-elevation"`);
  else
    a2 = b(L, t6);
  return a2;
}

// node_modules/@arcgis/core/Map.js
var j2 = class extends l4(d(n2.EventedMixin(m))) {
  constructor(s4) {
    super(s4), this.allLayers = new l3({ getCollections: () => {
      var _a, _b, _c;
      return [(_a = this.basemap) == null ? void 0 : _a.baseLayers, (_b = this.ground) == null ? void 0 : _b.layers, this.layers, (_c = this.basemap) == null ? void 0 : _c.referenceLayers];
    }, getChildrenFunction: (s5) => "layers" in s5 ? s5.layers : null }), this.allTables = t2(this), this.basemap = null, this.editableLayers = new l3({ getCollections: () => [this.allLayers], itemFilterFunction: i }), this.ground = new L(), this._basemapCache = p();
  }
  destroy() {
    var _a, _b;
    this.allLayers.destroy(), this.allTables.destroy(), this.editableLayers.destroy(), (_a = this.ground) == null ? void 0 : _a.destroy(), (_b = this.basemap) == null ? void 0 : _b.destroy(), y3(this._basemapCache), this._basemapCache = null;
  }
  castBasemap(s4) {
    return m3(s4, this._basemapCache);
  }
  castGround(s4) {
    const e2 = t5(s4);
    return t(e2) ? this._get("ground") : e2;
  }
  findLayerById(s4) {
    return this.allLayers.find((e2) => e2.id === s4);
  }
  findTableById(s4) {
    return this.allTables.find((e2) => e2.id === s4);
  }
};
e([y2({ readOnly: true, dependsOn: [] })], j2.prototype, "allLayers", void 0), e([y2({ readOnly: true })], j2.prototype, "allTables", void 0), e([y2({ type: x })], j2.prototype, "basemap", void 0), e([s3("basemap")], j2.prototype, "castBasemap", null), e([y2({ readOnly: true })], j2.prototype, "editableLayers", void 0), e([y2({ type: L, nonNullable: true })], j2.prototype, "ground", void 0), e([s3("ground")], j2.prototype, "castGround", null), j2 = e([n("esri.Map")], j2);
var L2 = j2;

// node_modules/@arcgis/core/webmap/background/ColorBackground.js
var p3;
var a = p3 = class extends l2 {
  constructor(o2) {
    super(o2), this.color = new l([0, 0, 0, 1]);
  }
  clone() {
    return new p3(y({ color: this.color }));
  }
};
e([y2({ type: l, json: { write: true } })], a.prototype, "color", void 0), a = p3 = e([n("esri.webmap.background.ColorBackground")], a);
var m4 = a;

export {
  L2 as L,
  m4 as m
};
//# sourceMappingURL=chunk-XWL2KVTH.js.map
