import {
  a
} from "./chunk-C5H57NTD.js";
import {
  t
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/core/throttle.js
function e(e4, t2, l2, n) {
  let o = null, p = 1e3;
  "number" == typeof t2 ? (p = t2, n = l2) : (o = t2 != null ? t2 : null, p = l2);
  let r2, u2 = 0;
  const a2 = () => {
    u2 = 0, e4.apply(n, r2);
  }, c2 = (...e5) => {
    o && o.apply(n, e5), r2 = e5, p ? u2 || (u2 = setTimeout(a2, p)) : a2();
  };
  return c2.remove = () => {
    u2 && (clearTimeout(u2), u2 = 0);
  }, c2.forceUpdate = () => {
    u2 && (clearTimeout(u2), a2());
  }, c2.hasPendingUpdates = () => !!u2, c2;
}

// node_modules/@arcgis/core/views/2d/support/Timeline.js
var s = (s3) => s3.includes("Brush");
var e2 = class {
  constructor() {
    this._names = /* @__PURE__ */ new Map();
  }
  begin(e4) {
    this._names.has(e4) || (this._names.set(e4, false), s(e4) && this.record("Esri.FirstDraw"), performance.mark(`Esri.${e4}.Start`));
  }
  end(s3) {
    this._names.has(s3) && !this._names.get(s3) && (this._names.set(s3, true), performance.mark(`Esri.${s3}.End`));
  }
  record(s3) {
    this._names.has(s3) || (this._names.set(s3, true), performance.mark(`Esri.${s3}`));
  }
};

// node_modules/@arcgis/core/views/support/screenshotUtils.js
function r(t2, h, i) {
  const { ctx: e4, canvas: o } = g(t2, i), n = e4.getImageData(0, 0, t2.width, t2.height), a2 = c(o, h);
  return f(o), { dataUrl: a2, data: n };
}
function l(t2, h) {
  const { ctx: i, canvas: e4 } = g(t2, h), o = i.getImageData(0, 0, t2.width, t2.height);
  return f(e4), o;
}
function g(t2, h) {
  const i = d();
  h.premultipliedAlpha && v(t2), i.width = t2.width, i.height = t2.height;
  const e4 = i.getContext("2d");
  return e4.putImageData(t2, 0, 0), h.flipY && q(e4), { ctx: e4, canvas: i };
}
function f(t2) {
  t2.width = 0, t2.height = 0;
}
function d() {
  return t(u) && (u = document.createElement("canvas")), u;
}
var u = null;
function c(t2, h) {
  const i = I[h.format], e4 = h.quality / 100;
  return t2.toDataURL(i, e4);
}
function s2(h, i) {
  const e4 = D(h), o = B[e4];
  return { format: e4, quality: a(null != i ? i : o, 0, 100) };
}
function w(t2, h) {
  return h / Math.max(t2[0], t2[1]);
}
function m(t2, h, i, e4 = 0, o = 0, n = t2.width - e4, a2 = t2.height - o, r2 = false) {
  const { data: l2 } = t2, { width: g2, height: f2, data: d2 } = h, u2 = n / g2, c2 = a2 / f2, s3 = Math.ceil(u2 / 2), w2 = Math.ceil(c2 / 2), m2 = t2.width;
  for (let M = 0; M < f2; M++)
    for (let t3 = 0; t3 < g2; t3++) {
      const h2 = 4 * (t3 + (r2 ? f2 - M - 1 : M) * g2);
      let n2 = 0, a3 = 0, p = 0, y = 0, x = 0, b = 0;
      const j = (M + 0.5) * c2;
      for (let r3 = Math.floor(M * c2); r3 < (M + 1) * c2; r3++) {
        const h3 = Math.abs(j - (r3 + 0.5)) / w2, g3 = (t3 + 0.5) * u2, f3 = h3 * h3;
        for (let d3 = Math.floor(t3 * u2); d3 < (t3 + 1) * u2; d3++) {
          const t4 = Math.abs(g3 - (d3 + 0.5)) / s3, h4 = Math.sqrt(f3 + t4 * t4);
          if (h4 >= 1)
            continue;
          let u3 = 2 * h4 * h4 * h4 - 3 * h4 * h4 + 1;
          const c3 = 4 * (e4 + d3 + (o + r3) * m2);
          b += u3 * l2[c3 + 3], a3 += u3, !i && l2[c3 + 3] < 255 && (u3 = u3 * l2[c3 + 3] / 255), p += u3 * l2[c3], y += u3 * l2[c3 + 1], x += u3 * l2[c3 + 2], n2 += u3;
        }
      }
      d2[h2] = p / n2, d2[h2 + 1] = y / n2, d2[h2 + 2] = x / n2, d2[h2 + 3] = b / a3;
    }
  return h;
}
function D(t2) {
  switch (t2) {
    case "png":
    case "jpg":
    case "jpeg":
      return t2;
    default:
      return k;
  }
}
function q(t2) {
  t2.save(), t2.globalCompositeOperation = "copy", t2.scale(1, -1), t2.translate(0, -t2.canvas.height), t2.drawImage(t2.canvas, 0, 0), t2.restore();
}
function v(t2) {
  const h = t2.data, i = h.length;
  for (let e4 = 0; e4 < i; e4 += 4) {
    const t3 = h[e4 + 3];
    if (255 !== t3 && t3 > 0) {
      const i2 = 255 / t3;
      h[e4 + 0] = h[e4 + 0] * i2, h[e4 + 1] = h[e4 + 1] * i2, h[e4 + 2] = h[e4 + 2] * i2;
    }
  }
}
var I = { png: "image/png", jpg: "image/jpeg", jpeg: "image/jpeg" };
var P = 98;
var k = "png";
var B = { png: 100, jpg: P, jpeg: P };

export {
  e,
  e2,
  r,
  l,
  s2 as s,
  w,
  m
};
//# sourceMappingURL=chunk-AE5K4SOQ.js.map
