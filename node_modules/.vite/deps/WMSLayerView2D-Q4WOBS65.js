import {
  v
} from "./chunk-IZ7L4GV6.js";
import {
  a
} from "./chunk-CWBK2DDW.js";
import "./chunk-QPAL3PC4.js";
import "./chunk-GRWIJKD6.js";
import "./chunk-WGK2FJEK.js";
import "./chunk-CNTOSDAN.js";
import {
  i
} from "./chunk-VPBDKONJ.js";
import {
  y as y2
} from "./chunk-L4LV52OG.js";
import {
  u
} from "./chunk-PCWW275T.js";
import "./chunk-7N2Z7KNR.js";
import "./chunk-DBT4KOKX.js";
import "./chunk-EPMXCACW.js";
import "./chunk-KG5RWWIW.js";
import "./chunk-27YO3FKC.js";
import "./chunk-6TBB7UXB.js";
import "./chunk-UO3LS2M5.js";
import "./chunk-EQNT4A7P.js";
import {
  l as l2
} from "./chunk-U2IGS7DY.js";
import "./chunk-2GP5D74I.js";
import "./chunk-QISOH77W.js";
import "./chunk-XO5VJRK4.js";
import "./chunk-OAXPH6DL.js";
import "./chunk-O4DPVR3F.js";
import "./chunk-MATM5L52.js";
import "./chunk-4OM3EX6P.js";
import "./chunk-3OFVLRSL.js";
import "./chunk-UWKVAZQ6.js";
import "./chunk-FV3CMB37.js";
import "./chunk-VWCRJ6R6.js";
import "./chunk-JQUWFKNU.js";
import "./chunk-TFHLTN6F.js";
import "./chunk-UDYHZLTE.js";
import "./chunk-IQBIGNPU.js";
import "./chunk-4JNOVZUK.js";
import "./chunk-ZNRXLY4R.js";
import "./chunk-75RMBUYZ.js";
import "./chunk-TJ2I6XQT.js";
import "./chunk-EDHROVWI.js";
import "./chunk-34YPGGJT.js";
import "./chunk-OOOPZLJE.js";
import "./chunk-U2WD23Z5.js";
import "./chunk-ZEEU5HOK.js";
import "./chunk-INL7BDTP.js";
import {
  g
} from "./chunk-YGVY4EIZ.js";
import "./chunk-NDQ5FHGV.js";
import "./chunk-US2IWMHE.js";
import "./chunk-AIDV7EKX.js";
import "./chunk-FZQZIM7U.js";
import "./chunk-YM6PUX7G.js";
import "./chunk-QEYOWTXD.js";
import "./chunk-CZBRZ6SU.js";
import "./chunk-KDO6J2FO.js";
import "./chunk-RT3T2K4S.js";
import "./chunk-WJCI2CGX.js";
import "./chunk-REIQNAQW.js";
import "./chunk-BLJKKR5D.js";
import "./chunk-X2S4RQJ4.js";
import "./chunk-376OPXM4.js";
import "./chunk-DER356EU.js";
import "./chunk-NRP45AHD.js";
import "./chunk-B4DKBAM3.js";
import "./chunk-6M2AHKYV.js";
import "./chunk-UDND2Z3V.js";
import "./chunk-23Y3DIC6.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-RAX2HD42.js";
import "./chunk-ZYRIJWLX.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import "./chunk-3MNMDUQZ.js";
import {
  w2 as w
} from "./chunk-UWG37XSU.js";
import "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import "./chunk-RXYULINL.js";
import {
  l
} from "./chunk-5NXILPDI.js";
import "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-KAN4HXCG.js";
import "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-7QMMKGW4.js";
import {
  e,
  n2 as n,
  y
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import {
  j
} from "./chunk-MJXQTGI2.js";
import {
  s as s2
} from "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import {
  s2 as s
} from "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/views/layers/WMSLayerView.js
var a2 = (a3) => {
  let i2 = class extends a3 {
    initialize() {
      this.exportImageParameters = new l2({ layer: this.layer });
    }
    destroy() {
      this.exportImageParameters.destroy(), this.exportImageParameters = null;
    }
    get exportImageVersion() {
      var _a;
      return (_a = this.exportImageParameters) == null ? void 0 : _a.commitProperty("version"), this.commitProperty("timeExtent"), (this._get("exportImageVersion") || 0) + 1;
    }
    fetchPopupFeatures(e2) {
      const { layer: t } = this;
      if (!e2)
        return Promise.reject(new s2("wmslayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: t }));
      const { popupEnabled: o } = t;
      if (!o)
        return Promise.reject(new s2("wmslayerview:fetchPopupFeatures", "popupEnabled should be true", { popupEnabled: o }));
      const s3 = this.createFetchPopupFeaturesQuery(e2);
      if (!s3)
        return Promise.resolve([]);
      const { extent: p, width: a4, height: i3, x: m, y: n2 } = s3;
      if (!(p && a4 && i3))
        throw new s2("wmslayerview:fetchPopupFeatures", "WMSLayer does not support fetching features.", { extent: p, width: a4, height: i3 });
      return t.fetchFeatureInfo(p, a4, i3, m, n2);
    }
  };
  return e([y()], i2.prototype, "exportImageParameters", void 0), e([y({ readOnly: true })], i2.prototype, "exportImageVersion", null), e([y()], i2.prototype, "layer", void 0), e([y(g)], i2.prototype, "timeExtent", void 0), i2 = e([n("esri.layers.mixins.WMSLayerView")], i2), i2;
};

// node_modules/@arcgis/core/views/2d/layers/WMSLayerView2D.js
var u2 = class extends a2(i(y2(u))) {
  constructor() {
    super(...arguments), this.bitmapContainer = new a();
  }
  supportsSpatialReference(e2) {
    return this.layer.serviceSupportsSpatialReference(e2);
  }
  update(e2) {
    this.strategy.update(e2).catch((e3) => {
      j(e3) || s.getLogger(this.declaredClass).error(e3);
    });
  }
  attach() {
    const { layer: e2 } = this, { imageMaxHeight: t, imageMaxWidth: r } = e2;
    this.bitmapContainer = new a(), this.container.addChild(this.bitmapContainer), this.strategy = new v({ container: this.bitmapContainer, fetchSource: this.fetchImage.bind(this), requestUpdate: this.requestUpdate.bind(this), imageMaxHeight: t, imageMaxWidth: r, imageRotationSupported: false, imageNormalizationSupported: false, hidpi: false }), this.handles.add(l(() => this.exportImageVersion, () => this.requestUpdate()), "exportImageVersion");
  }
  detach() {
    this.handles.remove("exportImageVersion"), this.strategy.destroy(), this.strategy = null, this.container.removeAllChildren();
  }
  moveStart() {
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  createFetchPopupFeaturesQuery(e2) {
    const { view: t, bitmapContainer: r } = this, { x: i2, y: s3 } = e2, { spatialReference: a3 } = t;
    let n2 = null, p = 0, m = 0;
    if (r.children.some((e3) => {
      const { width: t2, height: r2, resolution: h2, x: c2, y: d2 } = e3, u3 = c2 + h2 * t2, l4 = d2 - h2 * r2;
      return i2 >= c2 && i2 <= u3 && s3 <= d2 && s3 >= l4 && (n2 = new w({ xmin: c2, ymin: l4, xmax: u3, ymax: d2, spatialReference: a3 }), p = t2, m = r2, true);
    }), !n2)
      return null;
    const h = n2.width / p, c = Math.round((i2 - n2.xmin) / h), d = Math.round((n2.ymax - s3) / h);
    return { extent: n2, width: p, height: m, x: c, y: d };
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  fetchImage(e2, t, r, i2) {
    return this.layer.fetchImageBitmap(e2, t, r, { timeExtent: this.timeExtent, ...i2 });
  }
};
e([y()], u2.prototype, "strategy", void 0), e([y()], u2.prototype, "updating", void 0), u2 = e([n("esri.views.2d.layers.WMSLayerView2D")], u2);
var l3 = u2;
export {
  l3 as default
};
//# sourceMappingURL=WMSLayerView2D-Q4WOBS65.js.map
