import {
  o as o2
} from "./chunk-NRP45AHD.js";
import {
  a
} from "./chunk-IWQ7452U.js";
import {
  r as r2
} from "./chunk-NAN5J6QS.js";
import {
  l
} from "./chunk-RAX2HD42.js";
import {
  r
} from "./chunk-HLM6QCL2.js";
import {
  o
} from "./chunk-RXYULINL.js";
import {
  s
} from "./chunk-M5VHU5LK.js";
import {
  l as l2
} from "./chunk-7QMMKGW4.js";
import {
  e,
  n2 as n,
  y as y2
} from "./chunk-OOLCFNXJ.js";
import {
  y
} from "./chunk-HVKDYDPP.js";

// node_modules/@arcgis/core/symbols/LineSymbol.js
var i = class extends a {
  constructor(r3) {
    super(r3), this.type = "simple-line", this.width = 0.75;
  }
  hash() {
    return `${this.type}.${this.width}`;
  }
};
e([r2({ esriSLS: "simple-line" }, { readOnly: true })], i.prototype, "type", void 0), e([y2({ type: Number, cast: o2, json: { write: true } })], i.prototype, "width", void 0), i = e([n("esri.symbols.LineSymbol")], i);
var c = i;

// node_modules/@arcgis/core/symbols/support/lineMarkers.js
var e2 = ["begin", "end", "begin-end"];
var n2 = ["arrow", "circle", "square", "diamond", "cross", "x"];

// node_modules/@arcgis/core/symbols/LineSymbolMarker.js
var n3;
var m = n3 = class extends l2 {
  constructor(r3) {
    super(r3), this.placement = "begin-end", this.type = "line-marker", this.style = "arrow";
  }
  writeStyle(r3, o3, e3, t) {
    o3[e3] = "web-map" === (t == null ? void 0 : t.origin) ? "arrow" : r3;
  }
  set color(r3) {
    this._set("color", r3);
  }
  readColor(r3) {
    return r3 && null != r3[0] ? [r3[0], r3[1], r3[2], r3[3] / 255] : r3;
  }
  writeColor(r3, o3, e3, t) {
    "web-map" === (t == null ? void 0 : t.origin) || (o3[e3] = r3);
  }
  clone() {
    return new n3({ color: y(this.color), placement: this.placement, style: this.style });
  }
  hash() {
    var _a;
    return `${this.placement}.${(_a = this.color) == null ? void 0 : _a.hash()}.${this.style}`;
  }
};
e([y2({ type: ["begin", "end", "begin-end"], json: { write: true } })], m.prototype, "placement", void 0), e([r2({ "line-marker": "line-marker" }, { readOnly: true }), y2({ json: { origins: { "web-map": { write: false } } } })], m.prototype, "type", void 0), e([y2({ type: n2 })], m.prototype, "style", void 0), e([r("style")], m.prototype, "writeStyle", null), e([y2({ type: l, value: null, json: { write: { allowNull: true } } })], m.prototype, "color", null), e([o("color")], m.prototype, "readColor", null), e([r("color")], m.prototype, "writeColor", null), m = n3 = e([n("esri.symbols.LineSymbolMarker")], m);
var u = m;

// node_modules/@arcgis/core/symbols/SimpleLineSymbol.js
var p;
var h = new s({ esriSLSSolid: "solid", esriSLSDash: "dash", esriSLSDot: "dot", esriSLSDashDot: "dash-dot", esriSLSDashDotDot: "long-dash-dot-dot", esriSLSNull: "none", esriSLSInsideFrame: "inside-frame", esriSLSShortDash: "short-dash", esriSLSShortDot: "short-dot", esriSLSShortDashDot: "short-dash-dot", esriSLSShortDashDotDot: "short-dash-dot-dot", esriSLSLongDash: "long-dash", esriSLSLongDashDot: "long-dash-dot" });
var d = p = class extends c {
  constructor(...r3) {
    super(...r3), this.type = "simple-line", this.style = "solid", this.cap = "round", this.join = "round", this.marker = null, this.miterLimit = 2;
  }
  normalizeCtorArgs(r3, o3, e3, s2, i2, n4) {
    if (r3 && "string" != typeof r3)
      return r3;
    const l3 = {};
    return null != r3 && (l3.style = r3), null != o3 && (l3.color = o3), null != e3 && (l3.width = o2(e3)), null != s2 && (l3.cap = s2), null != i2 && (l3.join = i2), null != n4 && (l3.miterLimit = o2(n4)), l3;
  }
  clone() {
    var _a;
    return new p({ color: y(this.color), style: this.style, width: this.width, cap: this.cap, join: this.join, miterLimit: this.miterLimit, marker: (_a = this.marker) == null ? void 0 : _a.clone() });
  }
  hash() {
    var _a, _b;
    return `${super.hash()}.${(_a = this.color) == null ? void 0 : _a.hash()}.${this.style}.${this.cap}.${this.join}.${this.miterLimit}.${(_b = this.marker) == null ? void 0 : _b.hash()}`;
  }
};
e([r2({ esriSLS: "simple-line" }, { readOnly: true })], d.prototype, "type", void 0), e([y2({ type: h.apiValues, json: { read: h.read, write: h.write } })], d.prototype, "style", void 0), e([y2({ type: ["butt", "round", "square"], json: { write: { overridePolicy: (r3, o3, e3) => ({ enabled: "round" !== r3 && (null == e3 || null == e3.origin) }) } } })], d.prototype, "cap", void 0), e([y2({ type: ["miter", "round", "bevel"], json: { write: { overridePolicy: (r3, o3, e3) => ({ enabled: "round" !== r3 && (null == e3 || null == e3.origin) }) } } })], d.prototype, "join", void 0), e([y2({ types: { key: "type", base: null, defaultKeyValue: "line-marker", typeMap: { "line-marker": u } }, json: { write: true, origins: { "web-scene": { write: false } } } })], d.prototype, "marker", void 0), e([y2({ type: Number, json: { read: false, write: false } })], d.prototype, "miterLimit", void 0), d = p = e([n("esri.symbols.SimpleLineSymbol")], d);
var m2 = d;

export {
  e2 as e,
  n2 as n,
  m2 as m
};
//# sourceMappingURL=chunk-SHFHZMHO.js.map
