{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/index.js"],
  "sourcesContent": ["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.6\n */\nexport { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client/index.js';\nimport { d as darkMode, a as autoMode } from './dom.js';\n\n/**\n * Emits when the mode is dynamically toggled between light and dark on <body> or in OS preferences.\n */\nfunction initModeChangeEvent() {\n  const { classList } = document.body;\n  const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  const getMode = () => classList.contains(darkMode) || (classList.contains(autoMode) && prefersDark) ? \"dark\" : \"light\";\n  const emitModeChange = (mode) => document.body.dispatchEvent(new CustomEvent(\"calciteModeChange\", { bubbles: true, detail: { mode } }));\n  const modeChangeHandler = (newMode) => {\n    currentMode !== newMode && emitModeChange(newMode);\n    currentMode = newMode;\n  };\n  let currentMode = getMode();\n  // emits event on page load\n  emitModeChange(currentMode);\n  // emits event when changing OS mode preferences\n  window\n    .matchMedia(\"(prefers-color-scheme: dark)\")\n    .addEventListener(\"change\", (event) => modeChangeHandler(event.matches ? \"dark\" : \"light\"));\n  // emits event when toggling between mode classes on <body>\n  new MutationObserver(() => modeChangeHandler(getMode())).observe(document.body, {\n    attributes: true,\n    attributeFilter: [\"class\"]\n  });\n}\n\n/**\n * This file is imported in Stencil's `globalScript` config option.\n *\n * @see {@link https://stenciljs.com/docs/config#globalscript}\n */\nfunction appGlobalScript () {\n  const isBrowser = typeof window !== \"undefined\" &&\n    typeof location !== \"undefined\" &&\n    typeof document !== \"undefined\" &&\n    window.location === location &&\n    window.document === document;\n  if (isBrowser) {\n    if (document.readyState === \"interactive\") {\n      initModeChangeEvent();\n    }\n    else {\n      document.addEventListener(\"DOMContentLoaded\", () => initModeChangeEvent(), { once: true });\n    }\n  }\n}\n\nconst globalScripts = appGlobalScript;\n\nglobalScripts();\n"],
  "mappings": ";;;;;;;;;;;AAWA,SAAS,sBAAsB;AAC7B,QAAM,EAAE,UAAU,IAAI,SAAS;AAC/B,QAAM,cAAc,OAAO,WAAW,8BAA8B,EAAE;AACtE,QAAM,UAAU,MAAM,UAAU,SAAS,QAAQ,KAAM,UAAU,SAAS,QAAQ,KAAK,cAAe,SAAS;AAC/G,QAAM,iBAAiB,CAAC,SAAS,SAAS,KAAK,cAAc,IAAI,YAAY,qBAAqB,EAAE,SAAS,MAAM,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;AACtI,QAAM,oBAAoB,CAAC,YAAY;AACrC,oBAAgB,WAAW,eAAe,OAAO;AACjD,kBAAc;AAAA,EAChB;AACA,MAAI,cAAc,QAAQ;AAE1B,iBAAe,WAAW;AAE1B,SACG,WAAW,8BAA8B,EACzC,iBAAiB,UAAU,CAAC,UAAU,kBAAkB,MAAM,UAAU,SAAS,OAAO,CAAC;AAE5F,MAAI,iBAAiB,MAAM,kBAAkB,QAAQ,CAAC,CAAC,EAAE,QAAQ,SAAS,MAAM;AAAA,IAC9E,YAAY;AAAA,IACZ,iBAAiB,CAAC,OAAO;AAAA,EAC3B,CAAC;AACH;AAOA,SAAS,kBAAmB;AAC1B,QAAM,YAAY,OAAO,WAAW,eAClC,OAAO,aAAa,eACpB,OAAO,aAAa,eACpB,OAAO,aAAa,YACpB,OAAO,aAAa;AACtB,MAAI,WAAW;AACb,QAAI,SAAS,eAAe,eAAe;AACzC,0BAAoB;AAAA,IACtB,OACK;AACH,eAAS,iBAAiB,oBAAoB,MAAM,oBAAoB,GAAG,EAAE,MAAM,KAAK,CAAC;AAAA,IAC3F;AAAA,EACF;AACF;AAEA,IAAM,gBAAgB;AAEtB,cAAc;",
  "names": []
}
