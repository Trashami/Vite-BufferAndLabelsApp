import {
  r as r2
} from "./chunk-QEYOWTXD.js";
import {
  i,
  r,
  t
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/support/elevationInfoUtils.js
function r3(e) {
  return e ? E : Z;
}
function u(t2, n) {
  return t(n) || !n.mode ? r3(t2).mode : n.mode;
}
function s(e, n) {
  return r(n) ? n : r3(e);
}
function i2(e, n) {
  return u(!!r(e) && e.hasZ, n);
}
function a(e, n) {
  return s(!!r(e) && e.hasZ, n);
}
function l(e) {
  const t2 = v(e);
  return i2(e.geometry, t2);
}
function f(e) {
  const r4 = v(e), u2 = i2(e.geometry, r4);
  return { mode: u2, offset: r(r4) && "on-the-ground" !== u2 ? i(r4.offset, 0) * r2(i(r4.unit, "meters")) : 0 };
}
function c(e) {
  if ("on-the-ground" === l(e))
    return false;
  const n = v(e), o = r(n) && n.featureExpressionInfo ? n.featureExpressionInfo.expression : null;
  return !(!o || "0" === o);
}
function v(e) {
  return e.layer && "elevationInfo" in e.layer ? e.layer.elevationInfo : null;
}
function d(o, r4, u2) {
  if (t(u2) || !u2.mode)
    return;
  const s2 = o.hasZ ? o.z : 0, i3 = r(u2.offset) ? u2.offset : 0;
  switch (u2.mode) {
    case "absolute-height":
      return s2 - i3;
    case "on-the-ground":
      return 0;
    case "relative-to-ground":
      return s2 - (i(r4.elevationProvider.getElevation(o.x, o.y, o.z, o.spatialReference, "ground"), 0) + i3);
    case "relative-to-scene":
      return s2 - (i(r4.elevationProvider.getElevation(o.x, o.y, o.z, o.spatialReference, "scene"), 0) + i3);
  }
}
function g(e, t2, n, o = null) {
  return m(e, t2.x, t2.y, t2.hasZ ? t2.z : 0, t2.spatialReference, n, o);
}
function h(e, t2, n, o, r4 = null) {
  return m(e, t2[0], t2[1], t2.length > 2 ? t2[2] : 0, n, o, r4);
}
function m(n, o, r4, u2, s2, i3, a2 = null) {
  if (t(i3))
    return;
  const l2 = r(a2) ? a2.mode : "absolute-height";
  if ("on-the-ground" === l2)
    return 0;
  const { absoluteZ: f2 } = b(o, r4, u2, s2, n, i3);
  return p(f2, o, r4, u2, s2, n, a2, l2);
}
function b(e, o, r4, u2, s2, i3) {
  const a2 = r(i3.offset) ? i3.offset : 0;
  switch (i3.mode) {
    case "absolute-height":
      return { absoluteZ: r4 + a2, elevation: 0 };
    case "on-the-ground": {
      const t2 = i(s2.elevationProvider.getElevation(e, o, 0, u2, "ground"), 0);
      return { absoluteZ: t2, elevation: t2 };
    }
    case "relative-to-ground": {
      const t2 = i(s2.elevationProvider.getElevation(e, o, r4, u2, "ground"), 0);
      return { absoluteZ: r4 + t2 + a2, elevation: t2 };
    }
    case "relative-to-scene": {
      const t2 = i(s2.elevationProvider.getElevation(e, o, r4, u2, "scene"), 0);
      return { absoluteZ: r4 + t2 + a2, elevation: t2 };
    }
  }
}
function p(e, o, r4, u2, s2, i3, a2, l2) {
  const f2 = r(a2) && r(a2.offset) ? a2.offset : 0;
  switch (l2) {
    case "absolute-height":
      return e - f2;
    case "relative-to-ground":
      return e - (i(i3.elevationProvider.getElevation(o, r4, u2, s2, "ground"), 0) + f2);
    case "relative-to-scene":
      return e - (i(i3.elevationProvider.getElevation(o, r4, u2, s2, "scene"), 0) + f2);
  }
}
function y(n, o) {
  if (t(o))
    return false;
  const { mode: r4 } = o;
  return r(r4) && ("scene" === n && "relative-to-scene" === r4 || "ground" === n && "absolute-height" !== r4);
}
var E = { mode: "absolute-height", offset: 0 };
var Z = { mode: "on-the-ground", offset: null };
function x(e, n) {
  return e === n || r(e) && r(n) && e.mode === n.mode && e.offset === n.offset;
}

export {
  u,
  s,
  i2 as i,
  a,
  l,
  f,
  c,
  d,
  g,
  h,
  y,
  E,
  x
};
//# sourceMappingURL=chunk-C6BDJNUQ.js.map
