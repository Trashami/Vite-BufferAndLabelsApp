import {
  S
} from "./chunk-QFFP6A5Q.js";
import {
  o
} from "./chunk-RXYULINL.js";
import {
  s
} from "./chunk-M5VHU5LK.js";
import {
  l
} from "./chunk-7QMMKGW4.js";
import {
  e,
  n2 as n,
  y
} from "./chunk-OOLCFNXJ.js";

// node_modules/@arcgis/core/networks/support/typeUtils.js
var t;
!function(n2) {
  n2[n2.RTJunctionJunctionConnectivity = 1] = "RTJunctionJunctionConnectivity", n2[n2.RTContainment = 2] = "RTContainment", n2[n2.RTAttachment = 3] = "RTAttachment", n2[n2.RTJunctionEdgeConnectivity = 4] = "RTJunctionEdgeConnectivity", n2[n2.RTEdgeJunctionEdgeConnectivity = 5] = "RTEdgeJunctionEdgeConnectivity";
}(t || (t = {}));
var o2 = new s({ connected: "connected", upstream: "upstream", downstream: "downstream", shortestPath: "shortest-path", subnetwork: "subnetwork", subnetworkController: "subnetwork-controller", loops: "loops", isolation: "isolation" });
var e2 = new s({ connectivity: "connectivity", attachment: "attachment", containment: "containment", junctionEdgeFromConnectivity: "junction-edge-from-connectivity", junctionMidspanConnectivity: "junction-midspan-connectivity", junctionEdgeToConnectivity: "junction-edge-to-connectivity" });
var i = new s({ normal: "normal", rebuild: "rebuild", forceRebuild: "force-rebuild" });

// node_modules/@arcgis/core/networks/support/TraceConfiguration.js
var i2 = class extends l {
  constructor(t2) {
    super(t2), this.conditionBarriers = [], this.outputConditions = [], this.functions = [], this.functionBarriers = [], this.traversabilityScope = null, this.shortestPathNetworkAttributeName = null, this.includeBarriers = null, this.validateConsistency = null, this.ignoreBarriersAtStartingPoints = null;
  }
};
e([y({ type: [Object], json: { write: true } })], i2.prototype, "conditionBarriers", void 0), e([y({ type: [Object], json: { write: true } })], i2.prototype, "outputConditions", void 0), e([y({ type: [Object], json: { write: true } })], i2.prototype, "functions", void 0), e([y({ type: [Object], json: { write: true } })], i2.prototype, "functionBarriers", void 0), e([y({ type: ["junctions", "edges", "junctionsAndEdges"], json: { write: true } })], i2.prototype, "traversabilityScope", void 0), e([y({ type: String, json: { write: true } })], i2.prototype, "shortestPathNetworkAttributeName", void 0), e([y({ type: Boolean, json: { write: true } })], i2.prototype, "includeBarriers", void 0), e([y({ type: Boolean, json: { write: true } })], i2.prototype, "validateConsistency", void 0), e([y({ type: Boolean, json: { write: true } })], i2.prototype, "ignoreBarriersAtStartingPoints", void 0), i2 = e([n("esri.networks.support.TraceConfiguration")], i2);
var s2 = i2;

// node_modules/@arcgis/core/networks/support/UNTraceConfiguration.js
var i3 = class extends s2 {
  constructor(t2) {
    super(t2), this.filterBarriers = [], this.domainNetworkName = null, this.filterBitsetNetworkAttributeName = null, this.filterFunctionBarriers = [], this.filterScope = null, this.includeContainers = null, this.includeContent = null, this.includeIsolated = null, this.includeStructures = null, this.includeUpToFirstSpatialContainer = null, this.nearestNeighbor = null, this.outputFilterCategories = [], this.outputFilters = [], this.propagators = [], this.subnetworkName = null, this.targetTierName = null, this.tierName = null, this.validateLocatability = null;
  }
};
e([y({ type: [Object], json: { write: true } })], i3.prototype, "filterBarriers", void 0), e([y({ type: String, json: { write: true } })], i3.prototype, "domainNetworkName", void 0), e([y({ type: String, json: { write: true } })], i3.prototype, "filterBitsetNetworkAttributeName", void 0), e([y({ type: [Object], json: { write: true } })], i3.prototype, "filterFunctionBarriers", void 0), e([y({ type: ["junctions", "edges", "junctionsAndEdges"], json: { write: true } })], i3.prototype, "filterScope", void 0), e([y({ type: Boolean, json: { write: true } })], i3.prototype, "includeContainers", void 0), e([y({ type: Boolean, json: { write: true } })], i3.prototype, "includeContent", void 0), e([y({ type: Boolean, json: { write: true } })], i3.prototype, "includeIsolated", void 0), e([y({ type: Boolean, json: { write: true } })], i3.prototype, "includeStructures", void 0), e([y({ type: Boolean, json: { write: true } })], i3.prototype, "includeUpToFirstSpatialContainer", void 0), e([y({ type: Object, json: { write: true } })], i3.prototype, "nearestNeighbor", void 0), e([y({ type: [Object], json: { write: true } })], i3.prototype, "outputFilterCategories", void 0), e([y({ type: [Object], json: { write: true } })], i3.prototype, "outputFilters", void 0), e([y({ type: [Object], json: { write: true } })], i3.prototype, "propagators", void 0), e([y({ type: String, json: { write: true } })], i3.prototype, "subnetworkName", void 0), e([y({ type: String, json: { write: true } })], i3.prototype, "targetTierName", void 0), e([y({ type: String, json: { write: true } })], i3.prototype, "tierName", void 0), e([y({ type: Boolean, json: { write: true } })], i3.prototype, "validateLocatability", void 0), i3 = e([n("esri.networks.support.UNTraceConfiguration")], i3);
var s3 = i3;

// node_modules/@arcgis/core/networks/support/NamedTraceConfiguration.js
var p = class extends S {
  constructor(r) {
    super(r), this.globalId = null, this.title = null, this.traceConfiguration = null, this.creationDate = null, this.creator = null, this.description = null, this.minStartingPoints = null, this.resultTypes = [], this.tags = [], this.traceType = null;
  }
  readTraceConfiguration(r, e3) {
    return void 0 !== r.tierName ? s3.fromJSON(r) : s2.fromJSON(r);
  }
};
e([y({ type: String, nonNullable: true, json: { origins: { "web-map": { read: { source: "id" }, write: { target: "id", isRequired: true } }, service: { read: { source: "globalId" }, write: { target: "globalId", isRequired: true } } }, read: false } })], p.prototype, "globalId", void 0), e([y({ type: String, nonNullable: true, json: { origins: { "web-map": { read: { source: "title" }, write: { target: "title", isRequired: true } }, service: { read: { source: "name" }, write: { target: "name", isRequired: true } } }, read: false } })], p.prototype, "title", void 0), e([y({ type: s2, json: { origins: { service: { read: true, write: true } }, read: false } })], p.prototype, "traceConfiguration", void 0), e([o("service", "traceConfiguration")], p.prototype, "readTraceConfiguration", null), e([y({ type: Date, json: { origins: { service: { read: true, write: true } }, read: false } })], p.prototype, "creationDate", void 0), e([y({ type: String, json: { origins: { service: { read: true, write: true } }, read: false } })], p.prototype, "creator", void 0), e([y({ type: String, json: { origins: { service: { read: true, write: true } }, read: false } })], p.prototype, "description", void 0), e([y({ type: ["none", "one", "many"], json: { origins: { service: { read: { source: "minNumStartingPoints" }, write: { target: "minNumStartingPoints" } } }, read: false } })], p.prototype, "minStartingPoints", void 0), e([y({ type: [Object], json: { origins: { service: { read: true, write: true } }, read: false } })], p.prototype, "resultTypes", void 0), e([y({ type: [String], json: { origins: { service: { read: true, write: true } }, read: false } })], p.prototype, "tags", void 0), e([y({ type: o2.apiValues, json: { type: o2.jsonValues, origins: { service: { read: o2.read, write: o2.write } }, read: false } })], p.prototype, "traceType", void 0), p = e([n("esri.networks.support.NamedTraceConfiguration")], p);
var c = p;

export {
  t,
  i,
  c
};
//# sourceMappingURL=chunk-XFAJKRMY.js.map
