import {
  n as n2,
  o,
  t
} from "./chunk-SM7XDAJD.js";
import {
  a,
  s as s3
} from "./chunk-KLOEF26H.js";
import "./chunk-44ZQUD2T.js";
import "./chunk-QPAL3PC4.js";
import "./chunk-QXJIQKLY.js";
import "./chunk-GRWIJKD6.js";
import "./chunk-WGK2FJEK.js";
import "./chunk-CNTOSDAN.js";
import {
  i
} from "./chunk-VPBDKONJ.js";
import {
  y as y3
} from "./chunk-L4LV52OG.js";
import {
  u
} from "./chunk-PCWW275T.js";
import "./chunk-7N2Z7KNR.js";
import "./chunk-DBT4KOKX.js";
import "./chunk-EPMXCACW.js";
import "./chunk-KG5RWWIW.js";
import "./chunk-27YO3FKC.js";
import "./chunk-6TBB7UXB.js";
import "./chunk-UO3LS2M5.js";
import "./chunk-EQNT4A7P.js";
import "./chunk-2GP5D74I.js";
import "./chunk-QISOH77W.js";
import "./chunk-XO5VJRK4.js";
import "./chunk-OAXPH6DL.js";
import "./chunk-O4DPVR3F.js";
import "./chunk-MATM5L52.js";
import "./chunk-4OM3EX6P.js";
import "./chunk-3OFVLRSL.js";
import "./chunk-UWKVAZQ6.js";
import "./chunk-FV3CMB37.js";
import {
  r as r2
} from "./chunk-4XFEPZ26.js";
import {
  y as y2
} from "./chunk-FERTI5PU.js";
import {
  h
} from "./chunk-VWCRJ6R6.js";
import "./chunk-MKNNZ33G.js";
import "./chunk-JQUWFKNU.js";
import {
  e as e2
} from "./chunk-TFHLTN6F.js";
import "./chunk-UDYHZLTE.js";
import "./chunk-IQBIGNPU.js";
import "./chunk-4JNOVZUK.js";
import "./chunk-ZNRXLY4R.js";
import "./chunk-75RMBUYZ.js";
import "./chunk-TJ2I6XQT.js";
import "./chunk-EDHROVWI.js";
import "./chunk-34YPGGJT.js";
import "./chunk-ZEEU5HOK.js";
import "./chunk-INL7BDTP.js";
import "./chunk-NDQ5FHGV.js";
import "./chunk-QWNKYSI4.js";
import "./chunk-AIDV7EKX.js";
import "./chunk-FZQZIM7U.js";
import "./chunk-CZBRZ6SU.js";
import "./chunk-RT3T2K4S.js";
import "./chunk-WJCI2CGX.js";
import "./chunk-REIQNAQW.js";
import "./chunk-NRP45AHD.js";
import "./chunk-B4DKBAM3.js";
import "./chunk-6M2AHKYV.js";
import "./chunk-UDND2Z3V.js";
import "./chunk-23Y3DIC6.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-RAX2HD42.js";
import "./chunk-ZYRIJWLX.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import "./chunk-3MNMDUQZ.js";
import "./chunk-UWG37XSU.js";
import {
  E as E2
} from "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import "./chunk-RXYULINL.js";
import {
  l
} from "./chunk-5NXILPDI.js";
import "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-7QMMKGW4.js";
import {
  e,
  n2 as n,
  y
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import {
  E,
  j
} from "./chunk-MJXQTGI2.js";
import {
  s as s2
} from "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import {
  s2 as s
} from "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import {
  r
} from "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/views/layers/TileLayerView.js
var i2 = (i3) => {
  let c = class extends i3 {
    async fetchPopupFeatures(e3, s4) {
      const { layer: a2 } = this;
      if (!e3)
        throw new s2("tilelayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: a2 });
      if ("tile" !== a2.type)
        throw new s2("tilelayerview:fetchPopupFeatures", "Layer type should be 'tile'", { type: a2.type });
      const i4 = this.get("view.scale"), c2 = a2.allSublayers.toArray().filter((e4) => {
        const r3 = 0 === e4.minScale || i4 <= e4.minScale, t2 = 0 === e4.maxScale || i4 >= e4.maxScale;
        return e4.popupTemplate && e4.popupEnabled && e4.visible && r3 && t2;
      });
      return E(c2.map(async (r3) => {
        const o2 = r3.createQuery(), a3 = r(s4) ? s4.event : null, i5 = s3({ renderer: r3.renderer, event: a3 });
        o2.geometry = this.createFetchPopupFeaturesQueryGeometry(e3, i5), o2.outFields = await r3.popupTemplate.getRequiredFields();
        return (await r3.queryFeatures(o2)).features;
      })).then((e4) => [].concat(...e4.map((e5) => e5.value).filter(Boolean)));
    }
  };
  return e([y()], c.prototype, "layer", void 0), c = e([n("esri.layers.mixins.TileLayerView")], c), c;
};

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var _ = [0, 0];
var I = class extends i2(i(t(y3(u)))) {
  constructor() {
    super(...arguments), this._tileStrategy = null, this._fetchQueue = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  update(e3) {
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume();
  }
  attach() {
    const e3 = "tileServers" in this.layer ? this.layer.tileServers : null;
    this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent), this._fetchQueue = new y2({ tileInfoView: this._tileInfoView, concurrency: e3 && 10 * e3.length || 10, process: (e4, t2) => this.fetchTile(e4, t2) }), this._tileStrategy = new r2({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), this.requestUpdate(), this.handles.add(l(() => this.resampling, () => {
      this.doRefresh();
    })), super.attach();
  }
  detach() {
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null;
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    var _a;
    return E2((_a = this.layer.tileInfo) == null ? void 0 : _a.spatialReference, e3);
  }
  createFetchPopupFeaturesQueryGeometry(e3, t2) {
    return a(e3, t2, this.view);
  }
  async doRefresh() {
    !this.attached || this.updateRequested || this.suspended || (this._fetchQueue.reset(), this._tileStrategy.tiles.forEach((e3) => this._enqueueTileFetch(e3)));
  }
  isUpdating() {
    var _a, _b;
    return (_b = (_a = this._fetchQueue) == null ? void 0 : _a.updating) != null ? _b : false;
  }
  acquireTile(e3) {
    const t2 = this._bitmapView.createTile(e3), i3 = t2.bitmap;
    return [i3.x, i3.y] = this._tileInfoView.getTileCoords(_, t2.key), i3.resolution = this._tileInfoView.getTileResolution(t2.key), [i3.width, i3.height] = this._tileInfoView.tileInfo.size, this._enqueueTileFetch(t2), this._bitmapView.addChild(t2), this.requestUpdate(), t2;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  async fetchTile(e3, t2 = {}) {
    const s4 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: r3, resamplingLevel: a2 = 0 } = t2;
    if (!s4)
      try {
        return await this._fetchImage(e3, r3);
      } catch (h2) {
        if (!j(h2) && !this.resampling)
          return o(this._tileInfoView.tileInfo.size);
        if (a2 < 3) {
          const i3 = this._tileInfoView.getTileParentId(e3.id);
          if (i3) {
            const s5 = new e2(i3), r4 = await this.fetchTile(s5, { ...t2, resamplingLevel: a2 + 1 });
            return n2(this._tileInfoView, r4, s5, e3);
          }
        }
        throw h2;
      }
    const l2 = new e2(0, 0, 0, 0);
    let o2;
    try {
      if (await s4.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, l2, { signal: r3 }), l2.level !== e3.level && !this.resampling)
        return o(this._tileInfoView.tileInfo.size);
      o2 = await this._fetchImage(l2, r3);
    } catch (h2) {
      if (j(h2))
        throw h2;
      o2 = await this._fetchImage(e3, r3);
    }
    return this.resampling ? n2(this._tileInfoView, o2, l2, e3) : o2;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const t2 = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = t2, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (s4) {
        j(s4) || s.getLogger(this.declaredClass).error(s4);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, t2) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: t2 });
  }
};
e([y()], I.prototype, "_fetchQueue", void 0), e([y()], I.prototype, "resampling", null), I = e([n("esri.views.2d.layers.TileLayerView2D")], I);
var V = I;
export {
  V as default
};
//# sourceMappingURL=TileLayerView2D-TCF45KUQ.js.map
