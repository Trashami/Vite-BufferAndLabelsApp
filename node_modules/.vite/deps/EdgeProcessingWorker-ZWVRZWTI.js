import {
  z
} from "./chunk-PZ5MIROQ.js";
import {
  A,
  a,
  f,
  h,
  m,
  u
} from "./chunk-DJMOV3FK.js";
import "./chunk-WWLBKNPY.js";
import "./chunk-ZNZ4EIIF.js";
import "./chunk-4OM3EX6P.js";
import "./chunk-RUM3DXFX.js";
import "./chunk-X6GHUY4U.js";
import "./chunk-3OFVLRSL.js";
import "./chunk-XP6I2GEX.js";
import "./chunk-67RD6CZ4.js";
import "./chunk-75RMBUYZ.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-6QC7MLLS.js";
import "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/edgeRendering/EdgeProcessingWorker.js
var o = class {
  async extract(e) {
    const t = c(e), n = f(t), r = [t.data.buffer];
    return { result: l(n, r), transferList: r };
  }
  async extractComponentsEdgeLocations(t) {
    const s = c(t), i = u(s.data, s.skipDeduplicate, s.indices, s.indicesLength), a2 = h(i, p, g), o2 = [];
    return { result: z(a2.regular.instancesData, o2), transferList: o2 };
  }
  async extractEdgeLocations(t) {
    const s = c(t), i = u(s.data, s.skipDeduplicate, s.indices, s.indicesLength), a2 = h(i, f2, g), o2 = [];
    return { result: z(a2.regular.instancesData, o2), transferList: o2 };
  }
};
function c(e) {
  return { data: A.createView(e.dataBuffer), indices: "Uint32Array" === e.indicesType ? new Uint32Array(e.indices) : "Uint16Array" === e.indicesType ? new Uint16Array(e.indices) : e.indices, indicesLength: e.indicesLength, writerSettings: e.writerSettings, skipDeduplicate: e.skipDeduplicate };
}
function l(t, n) {
  n.push(t.regular.lodInfo.lengths.buffer), n.push(t.silhouette.lodInfo.lengths.buffer);
  return { regular: { instancesData: z(t.regular.instancesData, n), lodInfo: { lengths: t.regular.lodInfo.lengths.buffer } }, silhouette: { instancesData: z(t.silhouette.instancesData, n), lodInfo: { lengths: t.silhouette.lodInfo.lengths.buffer } }, averageEdgeLength: t.averageEdgeLength };
}
var u2 = class {
  allocate(e) {
    return a.createBuffer(e);
  }
  trim(e, t) {
    return e.slice(0, t);
  }
  write(e, t, n) {
    e.position0.setVec(t, n.position0), e.position1.setVec(t, n.position1);
  }
};
var d = class {
  allocate(e) {
    return m.createBuffer(e);
  }
  trim(e, t) {
    return e.slice(0, t);
  }
  write(e, t, n) {
    e.position0.setVec(t, n.position0), e.position1.setVec(t, n.position1), e.componentIndex.set(t, n.componentIndex);
  }
};
var f2 = new u2();
var p = new d();
var g = { allocate: () => null, write: () => {
}, trim: () => null };
export {
  o as default
};
//# sourceMappingURL=EdgeProcessingWorker-ZWVRZWTI.js.map
