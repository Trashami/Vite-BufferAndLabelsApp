import {
  B,
  C,
  q,
  v
} from "./chunk-I4YZGF7W.js";
import {
  s as s2
} from "./chunk-LIZHLHNA.js";
import {
  s2 as s
} from "./chunk-UA3YPL2R.js";
import {
  t
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/views/2d/arcade/callExpressionWithFeature.js
function i(e, o, n, a, s3) {
  if (t(e))
    return null;
  const i2 = e.referencesGeometry() && s3 ? c(o, a, s3) : o, u2 = e.repurposeFeature(i2);
  try {
    return e.evaluate({ ...n, $feature: u2 });
  } catch (m2) {
    return s.getLogger("esri.views.2d.support.arcadeOnDemand").warn("Feature arcade evaluation failed:", m2), null;
  }
}
var u = /* @__PURE__ */ new Map();
function c(e, r, t2) {
  const { transform: o, hasZ: n, hasM: a } = t2;
  u.has(r) || u.set(r, m(r));
  const s3 = u.get(r)(e.geometry, o, n, a);
  return { ...e, geometry: s3 };
}
function m(t2) {
  const i2 = {};
  switch (t2) {
    case "esriGeometryPoint":
      return (e, r, t3, o) => v(r, i2, e, t3, o);
    case "esriGeometryPolygon":
      return (e, r, t3, o) => B(r, i2, e, t3, o);
    case "esriGeometryPolyline":
      return (e, r, t3, o) => C(r, i2, e, t3, o);
    case "esriGeometryMultipoint":
      return (e, r, t3, n) => q(r, i2, e, t3, n);
    default:
      return s.getLogger("esri.views.2d.support.arcadeOnDemand").error(new s2("mapview-arcade", `Unable to handle geometryType: ${t2}`)), (e) => e;
  }
}

export {
  i
};
//# sourceMappingURL=chunk-J42Y5N2P.js.map
