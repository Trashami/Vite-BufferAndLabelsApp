import {
  C
} from "./chunk-NVFGGIRQ.js";
import {
  s as s2
} from "./chunk-KDTWVGPE.js";
import {
  e as e3,
  n as n4
} from "./chunk-GLZIV37N.js";
import {
  e as e2
} from "./chunk-4RQKL5NC.js";
import {
  n as n3
} from "./chunk-HSH7J5EL.js";
import {
  P
} from "./chunk-757322TP.js";
import {
  h
} from "./chunk-36I5ESAQ.js";
import {
  d
} from "./chunk-REIQNAQW.js";
import {
  y as y3
} from "./chunk-OD3FDQCI.js";
import {
  S
} from "./chunk-TQEOEDAZ.js";
import {
  m
} from "./chunk-SHFHZMHO.js";
import {
  f,
  l
} from "./chunk-5NXILPDI.js";
import {
  n as n2
} from "./chunk-THVR7IAM.js";
import {
  e,
  n2 as n,
  t5 as t2,
  y as y2
} from "./chunk-OOLCFNXJ.js";
import {
  y
} from "./chunk-HVKDYDPP.js";
import {
  r,
  s,
  t
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/views/draw/support/HighlightHelper.js
var l2 = class extends d {
  constructor(r3) {
    super(r3), this.view = null;
  }
  get count() {
    return this.handles.size;
  }
  add(r3) {
    const e5 = Array.isArray(r3) ? r3 : [r3];
    null != r3 && e5 && e5.length && e5.forEach((r4) => this._highlight(r4));
  }
  remove(r3) {
    const e5 = Array.isArray(r3) ? r3 : [r3];
    null != r3 && e5 && e5.length && e5.forEach((r4) => this._unhighlight(r4));
  }
  removeAll() {
    this.handles.removeAll();
  }
  _highlight(r3) {
    const e5 = n4(this.view, r3.layer);
    e2(e5) && this.handles.add(e5.highlight(r3), `feature-${r3.getObjectId()}`);
  }
  _unhighlight(r3) {
    r3 && this.handles.remove(`feature-${r3.getObjectId()}`);
  }
};
e([y2({ readOnly: true })], l2.prototype, "count", null), e([y2()], l2.prototype, "view", void 0), e([y2()], l2.prototype, "add", null), l2 = e([n("esri.views.draw.support.HighlightHelper")], l2);
var h2 = l2;

// node_modules/@arcgis/core/views/draw/support/input/GraphicMoverEvents.js
var t3 = class {
  constructor(t4, i2, s4, h4, e5) {
    this.graphic = t4, this.index = i2, this.x = s4, this.y = h4, this.viewEvent = e5, this.type = "graphic-click";
  }
};
var i = class {
  constructor(t4, i2, s4, h4, e5) {
    this.graphic = t4, this.index = i2, this.x = s4, this.y = h4, this.viewEvent = e5, this.type = "graphic-double-click";
  }
};
var s3 = class {
  constructor(t4, i2, s4, h4, e5, r3, c2, a2, n6, p) {
    this.graphic = t4, this.allGraphics = i2, this.index = s4, this.x = h4, this.y = e5, this.dx = r3, this.dy = c2, this.totalDx = a2, this.totalDy = n6, this.viewEvent = p, this.defaultPrevented = false, this.type = "graphic-move-start";
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
};
var h3 = class {
  constructor(t4, i2, s4, h4, e5, r3, c2, a2, n6, p) {
    this.graphic = t4, this.allGraphics = i2, this.index = s4, this.x = h4, this.y = e5, this.dx = r3, this.dy = c2, this.totalDx = a2, this.totalDy = n6, this.viewEvent = p, this.defaultPrevented = false, this.type = "graphic-move";
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
};
var e4 = class {
  constructor(t4, i2, s4, h4, e5, r3, c2, a2, n6, p) {
    this.graphic = t4, this.allGraphics = i2, this.index = s4, this.x = h4, this.y = e5, this.dx = r3, this.dy = c2, this.totalDx = a2, this.totalDy = n6, this.viewEvent = p, this.defaultPrevented = false, this.type = "graphic-move-stop";
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
};
var r2 = class {
  constructor(t4, i2, s4, h4, e5) {
    this.graphic = t4, this.index = i2, this.x = s4, this.y = h4, this.viewEvent = e5, this.type = "graphic-pointer-over";
  }
};
var c = class {
  constructor(t4, i2, s4, h4, e5) {
    this.graphic = t4, this.index = i2, this.x = s4, this.y = h4, this.viewEvent = e5, this.type = "graphic-pointer-out";
  }
};
var a = class {
  constructor(t4, i2, s4, h4, e5) {
    this.graphic = t4, this.index = i2, this.x = s4, this.y = h4, this.viewEvent = e5, this.type = "graphic-pointer-down";
  }
};
var n5 = class {
  constructor(t4, i2, s4, h4, e5) {
    this.graphic = t4, this.index = i2, this.x = s4, this.y = h4, this.viewEvent = e5, this.type = "graphic-pointer-up";
  }
};

// node_modules/@arcgis/core/views/draw/support/GraphicMover.js
var P2 = "indicator-symbols";
var S2 = class extends n2.EventedAccessor {
  constructor(i2) {
    super(i2), this._activeGraphic = null, this._dragEvent = null, this._handles = new t2(), this._hoverGraphic = null, this._indicators = [], this._initialDragGeometry = null, this._viewHandles = new t2(), this._manipulators = [], this._layerViews = null, this.type = "graphic-mover", this.callbacks = { onGraphicClick() {
    }, onGraphicDoubleClick() {
    }, onGraphicMoveStart() {
    }, onGraphicMove() {
    }, onGraphicMoveStop() {
    }, onGraphicPointerOver() {
    }, onGraphicPointerOut() {
    }, onGraphicPointerDown() {
    }, onGraphicPointerUp() {
    } }, this.enableMoveAllGraphics = false, this.graphics = [], this.indicatorsEnabled = false, this.layer = new h({ listMode: "hide", internal: true, title: "GraphicMover highlight layer" }), this.view = null;
  }
  initialize() {
    e3(this.view, this.layer), this._highlightHelper = new h2({ view: this.view }), this.refresh(), this._handles.add([l(() => {
      var _a;
      return [this.graphics, (_a = this.graphics) == null ? void 0 : _a.length];
    }, () => this.refresh()), f(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.ready;
    }, () => {
      this._viewHandles.add([this.view.on("immediate-click", (i2) => this._clickHandler(i2), P.TOOL), this.view.on("double-click", (i2) => this._doubleClickHandler(i2), P.TOOL), this.view.on("pointer-down", (i2) => this._pointerDownHandler(i2), P.TOOL), this.view.on("pointer-move", (i2) => this._pointerMoveHandler(i2), P.TOOL), this.view.on("pointer-up", (i2) => this._pointerUpHandler(i2), P.TOOL), this.view.on("drag", (i2) => this._dragHandler(i2), P.TOOL), this.view.on("key-down", (i2) => this._keyDownHandler(i2), P.TOOL)]);
    }, { once: true, initial: true }), l(() => this.view, (i2) => {
      this._highlightHelper.removeAll(), this._highlightHelper.view = i2;
    })]);
  }
  destroy() {
    var _a;
    this._removeIndicators(), (_a = this.view.map) == null ? void 0 : _a.remove(this.layer), this.layer.destroy(), this.reset(), this._manipulators.forEach((i2) => i2.destroy()), this._manipulators = null, this._handles = s(this._handles), this._viewHandles = s(this._viewHandles);
  }
  set highlightsEnabled(i2) {
    var _a, _b;
    (_a = this._highlightHelper) == null ? void 0 : _a.removeAll(), this._set("highlightsEnabled", i2), i2 && ((_b = this._highlightHelper) == null ? void 0 : _b.add(this.graphics));
  }
  get state() {
    const i2 = !!this.get("view.ready"), t4 = !!this.get("graphics.length"), e5 = this._activeGraphic;
    return i2 && t4 ? e5 ? "moving" : "active" : i2 ? "ready" : "disabled";
  }
  refresh() {
    this.reset(), this._setup();
  }
  reset() {
    this._activeGraphic = null, this._hoverGraphic = null, this._dragEvent = null, this._highlightHelper.removeAll();
  }
  updateGeometry(i2, t4) {
    const e5 = this.graphics[i2];
    e5 && (e5.set("geometry", t4), this._setUpIndicators());
  }
  _setup() {
    this._setUpHighlights(), this._setUpIndicators(), this._setUpManipulators(), this._syncLayerViews();
  }
  _clickHandler(i2) {
    const t4 = this._findTargetGraphic(n3(i2));
    if (t4) {
      const e5 = new t3(t4, this.graphics.indexOf(t4), i2.x, i2.y, i2);
      this.emit("graphic-click", e5), this.callbacks.onGraphicClick && this.callbacks.onGraphicClick(e5);
    }
  }
  _doubleClickHandler(i2) {
    const t4 = this._findTargetGraphic(n3(i2));
    if (t4) {
      const e5 = new i(t4, this.graphics.indexOf(t4), i2.x, i2.y, i2);
      this.emit("graphic-double-click", e5), this.callbacks.onGraphicDoubleClick && this.callbacks.onGraphicDoubleClick(e5);
    }
  }
  _pointerDownHandler(i2) {
    const t4 = this._findTargetGraphic(n3(i2));
    if (t4) {
      this._activeGraphic = t4;
      const { x: e5, y: s4 } = i2, r3 = new a(t4, this.graphics.indexOf(t4), e5, s4, i2);
      this.emit("graphic-pointer-down", r3), this.callbacks.onGraphicPointerDown && this.callbacks.onGraphicPointerDown(r3);
    } else
      this._activeGraphic = null;
  }
  _pointerUpHandler(i2) {
    if (this._activeGraphic) {
      const { x: t4, y: e5 } = i2, s4 = this.graphics.indexOf(this._activeGraphic), r3 = new n5(this._activeGraphic, s4, t4, e5, i2);
      this.emit("graphic-pointer-up", r3), this.callbacks.onGraphicPointerUp && this.callbacks.onGraphicPointerUp(r3);
    }
  }
  _pointerMoveHandler(i2) {
    if (this._dragEvent)
      return;
    const t4 = this._findTargetGraphic(n3(i2));
    if (t4) {
      const { x: e5, y: s4 } = i2;
      if (this._hoverGraphic) {
        if (this._hoverGraphic === t4)
          return;
        const r4 = this.graphics.indexOf(this._hoverGraphic), h5 = new c(this.graphics[r4], r4, e5, s4, i2);
        this._hoverGraphic = null, this.emit("graphic-pointer-out", h5), this.callbacks.onGraphicPointerOut && this.callbacks.onGraphicPointerOut(h5);
      }
      const r3 = this.graphics.indexOf(t4), h4 = new r2(t4, r3, e5, s4, i2);
      return this._hoverGraphic = t4, this.emit("graphic-pointer-over", h4), void (this.callbacks.onGraphicPointerOver && this.callbacks.onGraphicPointerOver(h4));
    }
    if (this._hoverGraphic) {
      const { x: t5, y: e5 } = i2, s4 = this.graphics.indexOf(this._hoverGraphic), r3 = new c(this.graphics[s4], s4, t5, e5, i2);
      this._hoverGraphic = null, this.emit("graphic-pointer-out", r3), this.callbacks.onGraphicPointerOut && this.callbacks.onGraphicPointerOut(r3);
    }
  }
  _dragHandler(i2) {
    if ("start" !== i2.action && !this._dragEvent || !this._activeGraphic || !this._activeGraphic.geometry)
      return;
    "start" === i2.action && this._removeIndicators(), i2.stopPropagation();
    const { action: t4, x: e5, y: r3 } = i2, h4 = this.graphics.indexOf(this._activeGraphic), a2 = this._dragEvent ? e5 - this._dragEvent.x : 0, o = this._dragEvent ? r3 - this._dragEvent.y : 0, c2 = e5 - i2.origin.x, n6 = r3 - i2.origin.y, l3 = "start" === t4 ? this._activeGraphic.geometry : this._initialDragGeometry, p = s2(l3, c2, n6, this.view);
    if (this._activeGraphic.geometry = p, this.enableMoveAllGraphics && this.graphics.forEach((i3) => {
      i3 !== this._activeGraphic && (i3.geometry = s2(i3.geometry, a2, o, this.view));
    }), this._dragEvent = i2, "start" === t4) {
      this._initialDragGeometry = y(l3);
      const t5 = new s3(this._activeGraphic, this.graphics, h4, e5, r3, a2, o, c2, n6, i2);
      this.emit("graphic-move-start", t5), this.callbacks.onGraphicMoveStart && this.callbacks.onGraphicMoveStart(t5), t5.defaultPrevented && this._activeGraphic.set("geometry", l3);
    } else if ("update" === t4) {
      const t5 = new h3(this._activeGraphic, this.graphics, h4, e5, r3, a2, o, c2, n6, i2);
      this.emit("graphic-move", t5), this.callbacks.onGraphicMove && this.callbacks.onGraphicMove(t5), t5.defaultPrevented && (this._activeGraphic.geometry = l3);
    } else {
      const t5 = new e4(this._activeGraphic, this.graphics, h4, e5, r3, a2, o, c2, n6, i2);
      this._dragEvent = null, this._activeGraphic = null, this._setUpIndicators(), this.emit("graphic-move-stop", t5), this.callbacks.onGraphicMoveStop && this.callbacks.onGraphicMoveStop(t5), t5.defaultPrevented && (this.graphics[h4].set("geometry", this._initialDragGeometry), this._setUpIndicators()), this._initialDragGeometry = null;
    }
  }
  _keyDownHandler(i2) {
    "a" !== i2.key && "d" !== i2.key && "n" !== i2.key || "moving" !== this.state || i2.stopPropagation();
  }
  _findTargetGraphic(i2) {
    const t4 = this.view.toMap(i2);
    let e5 = null, s4 = Number.MAX_VALUE;
    this._syncLayerViews();
    const r3 = this._layerViews.flatMap((i3) => "graphicsViews" in i3 ? Array.from(i3.graphicsViews(), (i4) => i4.hitTest(t4)).flat() : i3.graphicsView.hitTest(t4)).filter((i3) => this.graphics.includes(i3));
    return r3.length ? r3[0] : (this._manipulators.forEach((t5) => {
      const r4 = t5.intersectionDistance(i2);
      r(r4) && r4 < s4 && (s4 = r4, e5 = t5.graphic);
    }), e5);
  }
  _syncLayerViews() {
    this._layerViews = [];
    const i2 = /* @__PURE__ */ new Set();
    for (const t4 of this.graphics) {
      const e5 = n4(this.view, t4.layer);
      e5 && i2.add(e5);
    }
    this._layerViews = [...i2];
  }
  _setUpManipulators() {
    const { graphics: i2, view: t4 } = this;
    this._manipulators.forEach((i3) => i3.destroy()), this._manipulators = (i2 == null ? void 0 : i2.length) ? i2.map((i3) => new C({ graphic: i3, view: t4 })) : [];
  }
  _setUpHighlights() {
    this.highlightsEnabled && this._highlightHelper.add(this.graphics);
  }
  _setUpIndicators() {
    if (this._removeIndicators(), this.indicatorsEnabled) {
      for (const i2 of this.graphics) {
        const t4 = i2.clone();
        t4.symbol = this._getSymbolForIndicator(i2), this._indicators.push(t4), this._handles.add(l(() => i2.symbol, () => this._setUpIndicators()), P2);
      }
      this.layer.addMany(this._indicators);
    }
  }
  _removeIndicators() {
    this._handles.remove(P2), this._indicators.length && (this.layer.removeMany(this._indicators), this._indicators.forEach((i2) => i2.destroy()), this._indicators = []);
  }
  _getSymbolForIndicator(i2) {
    const t4 = 12;
    if (t(i2.symbol))
      return null;
    switch (i2.symbol.type) {
      case "cim":
        return new y3({ style: "circle", size: t4, color: [0, 0, 0, 0], outline: { color: [255, 127, 0, 1], width: 1 } });
      case "picture-marker": {
        const { xoffset: t5, yoffset: e5, height: s4, width: r3 } = i2.symbol, h4 = s4 === r3 ? r3 : Math.max(s4, r3);
        return new y3({ xoffset: t5, yoffset: e5, size: h4, style: "square", color: [0, 0, 0, 0], outline: { color: [255, 127, 0, 1], width: 1 } });
      }
      case "simple-marker": {
        const { xoffset: t5, yoffset: e5, size: s4, style: r3 } = i2.symbol;
        return new y3({ xoffset: t5, yoffset: e5, style: "circle" === r3 ? "circle" : "square", size: s4 + 2, color: [0, 0, 0, 0], outline: { color: [255, 127, 0, 1], width: 1 } });
      }
      case "simple-fill":
        return new S({ color: [0, 0, 0, 0], outline: { style: "dash", color: [255, 127, 0, 1], width: 1 } });
      case "simple-line":
        return new m({ color: [255, 127, 0, 1], style: "dash", width: 1 });
      case "text": {
        const { xoffset: e5, yoffset: s4 } = i2.symbol;
        return new y3({ xoffset: e5, yoffset: s4, size: t4, color: [0, 0, 0, 0], outline: { color: [255, 127, 0, 1], width: 1 } });
      }
      default:
        return null;
    }
  }
};
e([y2()], S2.prototype, "_activeGraphic", void 0), e([y2({ readOnly: true })], S2.prototype, "type", void 0), e([y2()], S2.prototype, "callbacks", void 0), e([y2()], S2.prototype, "enableMoveAllGraphics", void 0), e([y2()], S2.prototype, "graphics", void 0), e([y2({ value: false })], S2.prototype, "highlightsEnabled", null), e([y2()], S2.prototype, "indicatorsEnabled", void 0), e([y2()], S2.prototype, "layer", void 0), e([y2({ readOnly: true })], S2.prototype, "state", null), e([y2()], S2.prototype, "view", void 0), S2 = e([n("esri.views.draw.support.GraphicMover")], S2);
var D = S2;

export {
  h2 as h,
  D
};
//# sourceMappingURL=chunk-W2R5RR3G.js.map
