import {
  sortable_esm_default
} from "./chunk-R3XXLRWM.js";
import {
  y as y2
} from "./chunk-627QBPPF.js";
import {
  e as e4
} from "./chunk-EKKHTIQT.js";
import {
  b,
  p
} from "./chunk-Z2QOAKIG.js";
import {
  u
} from "./chunk-VQXS4XNR.js";
import "./chunk-ZN2ROKCE.js";
import {
  n as n4
} from "./chunk-VJ7HYCLP.js";
import {
  e as e3
} from "./chunk-QRBRKBU3.js";
import {
  M,
  e2
} from "./chunk-NWBHRPMR.js";
import {
  f,
  k,
  n2 as n3
} from "./chunk-IIUWTGWW.js";
import "./chunk-K6AYGXUT.js";
import "./chunk-BHXTNOEK.js";
import "./chunk-IS4TIT4N.js";
import "./chunk-I4RYNNL6.js";
import "./chunk-US2IWMHE.js";
import "./chunk-FMJZBZWF.js";
import "./chunk-GOYVJTGW.js";
import "./chunk-ZPYDYUP5.js";
import {
  a as a2
} from "./chunk-REIQNAQW.js";
import "./chunk-KXVMEIWT.js";
import {
  j
} from "./chunk-UDND2Z3V.js";
import "./chunk-23Y3DIC6.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import "./chunk-3MNMDUQZ.js";
import "./chunk-UWG37XSU.js";
import "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import "./chunk-RXYULINL.js";
import {
  a,
  h,
  l
} from "./chunk-5NXILPDI.js";
import {
  n as n2
} from "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import {
  L,
  S
} from "./chunk-XQN7F674.js";
import "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import "./chunk-KAN4HXCG.js";
import "./chunk-4FEGON7M.js";
import {
  s as s2
} from "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-7QMMKGW4.js";
import {
  e,
  m,
  n2 as n,
  t5 as t2,
  y
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import {
  i
} from "./chunk-MJXQTGI2.js";
import {
  s
} from "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import {
  r,
  t
} from "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/widgets/Bookmarks/BookmarksUserState.js
var s3 = class extends m {
  constructor(t3) {
    super(t3);
  }
  get editedBookmark() {
    const { bookmark: t3 } = this;
    return t3 ? this._get("editedBookmark") || t3.clone() : null;
  }
  get state() {
    return this._get("state");
  }
  set state(t3) {
    this.validationState = void 0, this.loading = void 0, this._set("state", t3);
  }
};
e([y()], s3.prototype, "bookmark", void 0), e([y({ readOnly: true })], s3.prototype, "editedBookmark", null), e([y()], s3.prototype, "state", null), e([y()], s3.prototype, "validationState", void 0), e([y()], s3.prototype, "loading", void 0), s3 = e([n("esri.widgets.Bookmarks.UserState")], s3);
var a3 = s3;

// node_modules/@arcgis/core/widgets/Bookmarks/BookmarksViewModel.js
var u2 = j.ofType(b);
var k2 = { width: 128, height: 128, format: "png" };
var w = { takeScreenshot: true, captureViewpoint: true, captureRotation: true, captureScale: true, captureTimeExtent: true };
var d = { time: true };
var h2 = class extends e4(n2.EventedAccessor) {
  constructor(t3) {
    super(t3), this.abilities = { ...d }, this.activeBookmark = null, this.view = null;
  }
  destroy() {
    this.view = null, this._set("activeBookmark", null);
  }
  castAbilities(t3) {
    return { ...d, ...t3 };
  }
  get bookmarks() {
    var _a, _b, _c;
    return (_c = (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.bookmarks) != null ? _c : new u2();
  }
  set bookmarks(t3) {
    this._overrideIfSome("bookmarks", t3);
  }
  set defaultCreateOptions(t3) {
    this._set("defaultCreateOptions", { ...w, ...t3 });
  }
  get defaultCreateOptions() {
    return w;
  }
  set defaultEditOptions(t3) {
    this._set("defaultEditOptions", { ...w, ...t3 });
  }
  get defaultEditOptions() {
    return w;
  }
  get state() {
    const t3 = this.get("view");
    return t3 && !t3.ready ? "loading" : "ready";
  }
  async createBookmark(t3) {
    const { view: e5, defaultCreateOptions: o, abilities: r2 } = this;
    if (!e5)
      throw new s("create-bookmark:invalid-view", "Cannot create a bookmark without a view.");
    const { takeScreenshot: s4, screenshotSettings: n5, captureViewpoint: c3, captureRotation: p4, captureScale: l2, captureTimeExtent: u3 } = { ...o, ...t3 }, k3 = s4 ? await this._createThumbnail(n5) : void 0, w3 = r2.time && u3 && r(e5.timeExtent) ? e5.timeExtent.clone() : void 0;
    return new b({ ...k3 && { thumbnail: k3 }, ...u3 && { timeExtent: w3 }, ...c3 && { viewpoint: this._createViewpoint({ view: e5, captureScale: l2, captureRotation: p4 }) } });
  }
  async editBookmark(t3, e5) {
    const { view: o, defaultEditOptions: r2 } = this;
    if (!o)
      throw new s("edit-bookmark:invalid-view", "Cannot edit a bookmark without a view.");
    const { takeScreenshot: s4, screenshotSettings: n5, captureViewpoint: c3, captureRotation: p4, captureScale: m2, captureTimeExtent: l2 } = { ...r2, ...e5 }, u3 = s4 ? await this._createThumbnail(n5) : void 0;
    return u3 && (t3.thumbnail = u3), c3 && (t3.viewpoint = this._createViewpoint({ view: o, captureScale: m2, captureRotation: p4 })), l2 && r(o.timeExtent) && (t3.timeExtent = o.timeExtent.clone()), this.emit("bookmark-edit", { bookmark: t3 }), t3;
  }
  goTo(t3) {
    const { abilities: e5, view: o } = this;
    if (!o)
      throw new s("go-to:invalid-view", "Cannot go to a bookmark without a view");
    const r2 = t3 == null ? void 0 : t3.viewpoint;
    if (!r2)
      throw new s("go-to:invalid-bookmark", "Cannot go to a bookmark that does not contain a 'viewpoint'.", { bookmark: t3 });
    this._set("activeBookmark", t3);
    const a4 = { target: r2 }, s4 = this.callGoTo(a4), n5 = t3 == null ? void 0 : t3.timeExtent;
    return e5.time && n5 && (o.timeExtent = n5), this.emit("bookmark-select", { bookmark: t3 }), s4.catch(() => {
    }).then(() => this._set("activeBookmark", null)), s4;
  }
  async _createThumbnail(t3) {
    const e5 = await this.view.takeScreenshot({ ...k2, ...t3 });
    return new p({ url: e5.dataUrl });
  }
  _createViewpoint({ view: t3, captureRotation: o, captureScale: i4 }) {
    var _a, _b;
    const r2 = (_a = t3.viewpoint) == null ? void 0 : _a.clone();
    return new u({ targetGeometry: (_b = t3.extent) == null ? void 0 : _b.clone(), rotation: o && (r2 == null ? void 0 : r2.rotation) || 0, scale: i4 && (r2 == null ? void 0 : r2.scale) || 0 });
  }
};
e([y()], h2.prototype, "abilities", void 0), e([s2("abilities")], h2.prototype, "castAbilities", null), e([y({ readOnly: true })], h2.prototype, "activeBookmark", void 0), e([y({ type: u2 })], h2.prototype, "bookmarks", null), e([y()], h2.prototype, "defaultCreateOptions", null), e([y()], h2.prototype, "defaultEditOptions", null), e([y({ readOnly: true })], h2.prototype, "state", null), e([y()], h2.prototype, "view", void 0), h2 = e([n("esri.widgets.Bookmarks.BookmarksViewModel")], h2);
var v = h2;

// node_modules/@arcgis/core/widgets/FeatureTable/Grid/support/ButtonMenuItem.js
var i2;
var p2 = i2 = class extends m {
  constructor(o) {
    super(o), this.autoCloseMenu = false, this.iconClass = null, this.items = null, this.label = null, this.open = false, this.selected = false, this.selectionEnabled = false, this.clickFunction = null;
  }
  castItems(o) {
    return o ? o.map((o2) => o2 instanceof i2 ? o2 : new i2(o2)) : null;
  }
};
e([y()], p2.prototype, "autoCloseMenu", void 0), e([y()], p2.prototype, "iconClass", void 0), e([y()], p2.prototype, "items", void 0), e([s2("items")], p2.prototype, "castItems", null), e([y()], p2.prototype, "label", void 0), e([y()], p2.prototype, "open", void 0), e([y()], p2.prototype, "selected", void 0), e([y()], p2.prototype, "selectionEnabled", void 0), e([y()], p2.prototype, "clickFunction", void 0), p2 = i2 = e([n("esri.widgets.FeatureTable.Grid.support.ButtonMenuItem")], p2);
var c = p2;

// node_modules/@arcgis/core/widgets/FeatureTable/Grid/support/ButtonMenuViewModel.js
var c2 = class extends m {
  constructor(o) {
    super(o), this.items = null, this.open = false;
  }
  castItems(o) {
    return o ? o.map((o2) => o2 instanceof c ? o2 : new c(o2)) : null;
  }
};
e([y()], c2.prototype, "items", void 0), e([s2("items")], c2.prototype, "castItems", null), e([y()], c2.prototype, "open", void 0), c2 = e([n("esri.widgets.FeatureTable.Grid.support.ButtonMenuViewModel")], c2);
var i3 = c2;

// node_modules/@arcgis/core/widgets/FeatureTable/Grid/support/ButtonMenu.js
var p3 = { base: "esri-button-menu", content: "esri-button-menu__content", contentWrapper: "esri-button-menu__content-wrapper", itemWrapper: "esri-button-menu__item-wrapper", label: "esri-button-menu__label", icon: "esri-button-menu__icon", item: "esri-button-menu__item", itemLabel: "esri-button-menu__item-label", itemLabelContent: "esri-button-menu__item-label-content", selectableMenuItem: "esri-button-menu__item--selectable", selectedMenuItem: "esri-button-menu__item--selected", checkbox: "esri-button-menu__checkbox", embeddedContentWrapper: "esri-button-menu__embedded-content-wrapper", button: "esri-button-menu__button", buttonSelected: "esri-button-menu__button--selected", defaultIconClass: "esri-icon-menu", widget: "esri-widget" };
var h3 = class extends a2(M) {
  constructor(e5, t3) {
    super(e5, t3), this._menuContentNode = null, this._popover = null, this._rootNode = null, this.disabled = false, this.iconClass = "", this.viewModel = new i3(), this._handleOutsideClick = this._handleOutsideClick.bind(this);
  }
  postInitialize() {
    this._popover = new y2({ owner: this, open: !!this.open, placement: f(this.container) ? "bottom-start" : "bottom-end", renderContentFunction: this.renderMenuContent, anchorElement: this._rootNode }), this.handles.add(l(() => this.open, (e5) => {
      var _a;
      return (_a = this._popover) == null ? void 0 : _a.set("open", e5);
    })), document.addEventListener("click", this._handleOutsideClick);
  }
  destroy() {
    var _a;
    (_a = this._popover) == null ? void 0 : _a.destroy(), this._popover = null, document.removeEventListener("click", this._handleOutsideClick);
  }
  _handleOutsideClick(e5) {
    var _a, _b;
    if (!this.open || !this._rootNode || !this._menuContentNode)
      return;
    const t3 = e5.target;
    ((_a = this._menuContentNode) == null ? void 0 : _a.contains(t3)) || ((_b = this._rootNode) == null ? void 0 : _b.contains(t3)) || (this.open = false);
  }
  get items() {
    return this.viewModel.items;
  }
  set items(e5) {
    this.viewModel.items = e5;
  }
  get open() {
    return this.viewModel.open;
  }
  set open(e5) {
    this.viewModel.open = e5;
  }
  render() {
    return n3("div", { afterCreate: this._afterRootNodeCreate, bind: this, "data-node-ref": "_rootNode", class: this.classes(p3.base, p3.widget), key: "menu" }, this.renderMenuButton());
  }
  renderMenuButton() {
    const { iconClass: e5, id: t3, label: n5, open: o } = this, s4 = this.classes(p3.button, e5 != null ? e5 : p3.defaultIconClass, o ? p3.buttonSelected : null);
    return n3("button", { "aria-pressed": o.toString(), "aria-controls": `${t3}-menu`, "aria-expanded": o.toString(), "aria-haspopup": "true", "aria-label": n5, bind: this, class: s4, disabled: this.disabled, id: `${t3}-button`, title: n5 != null ? n5 : "", selected: o, onclick: this._toggleOpen, tabindex: this.disabled ? -1 : 0, type: "button" });
  }
  renderMenuContent() {
    var _a;
    const { id: e5, open: t3 } = this;
    return n3("div", { afterCreate: this._afterMenuContentNodeCreate, bind: this, class: p3.content, "data-node-ref": "_menuContentNode", key: "esri-button-menu-content", hidden: !t3 }, n3("ul", { "aria-labelledby": `${e5}-button`, bind: this, class: p3.itemWrapper, id: `${e5}-menu`, role: "menu" }, ((_a = this.items) == null ? void 0 : _a.length) && this.renderItems()));
  }
  renderItems() {
    var _a;
    return (_a = this.items) == null ? void 0 : _a.map((e5, t3) => this.renderItem(e5, t3));
  }
  renderItem(e5, t3, n5) {
    var _a;
    const s4 = r(n5) ? `${this.id}-menu-item-${t3}-${n5}` : `${this.id}-menu-item-${t3}`, i4 = `${s4}-label`, r2 = this.classes(p3.item, e5.selectionEnabled ? p3.selectableMenuItem : null, e5.selectionEnabled && e5.selected ? p3.selectedMenuItem : null);
    return n3("li", { afterCreate: this._afterMenuItemCreate, bind: this, class: r2, "data-item-index": t3, "data-item-subIndex": n5, for: s4, key: s4, onkeydown: (t4) => this._handleMenuItemKeydown(t4, e5), onclick: (t4) => this._handleMenuItemInteraction(t4, e5), role: "menuitem", tabindex: this.disabled ? -1 : 0 }, n3("input", { disabled: true, checked: e5.selected, class: p3.checkbox, id: s4, name: s4, tabindex: "-1", type: "checkbox" }), n3("label", { bind: this, class: this.classes(p3.button, p3.itemLabel), for: s4, id: i4 }, n3("span", { class: this.classes(p3.icon, e5.iconClass), "aria-hidden": "true" }), n3("span", { class: p3.itemLabelContent }, e5.label)), n3("ul", { "aria-labelledby": i4, class: p3.embeddedContentWrapper, id: `${this.id}-submenu`, role: "menu" }, (_a = e5 == null ? void 0 : e5.items) == null ? void 0 : _a.map((e6, n6) => this.renderItem(e6, t3, n6))));
  }
  _afterRootNodeCreate(e5) {
    var _a;
    this._rootNode = e5, (_a = this._popover) == null ? void 0 : _a.set("anchorElement", () => e5);
  }
  _handleMenuItemInteraction(e5, t3) {
    t3.selected = !t3.selected, t3.open = !(!t3.selected || !t3.items), t3.autoCloseMenu && this.set("open", false), t3.clickFunction && t3.clickFunction({ event: e5, item: t3 }), e5.stopPropagation();
  }
  _handleMenuItemKeydown(e5, n5) {
    const o = i(e5);
    k(o) && this._handleMenuItemInteraction(e5, n5), "Escape" === o && (this.open = false, e5.preventDefault(), e5.stopPropagation());
  }
  _afterMenuContentNodeCreate(e5) {
    this._menuContentNode = e5, e5.focus();
  }
  _toggleOpen() {
    this.open = !this.open;
  }
  _afterMenuItemCreate(e5) {
    0 === e5["data-item-index"] && e5.focus();
  }
};
e([y()], h3.prototype, "disabled", void 0), e([y()], h3.prototype, "iconClass", void 0), e([y()], h3.prototype, "items", null), e([y()], h3.prototype, "open", null), e([y()], h3.prototype, "viewModel", void 0), h3 = e([n("esri.widgets.FeatureTable.Grid.support.ButtonMenu")], h3);
var b2 = h3;

// node_modules/@arcgis/core/widgets/Bookmarks.js
function w2(t3, e5, o) {
  t3.splice(o, 0, t3.splice(e5, 1)[0]);
}
var S2 = "bookmarks";
var x = "data-bookmark-uid";
var T = { base: "esri-bookmarks esri-widget--panel", loaderContainer: "esri-bookmarks__loader-container", loader: "esri-bookmarks__loader", fadeIn: "esri-bookmarks--fade-in", bookmarkList: "esri-bookmarks__list", bookmarkListSortable: "esri-bookmarks__list--sortable", bookmark: "esri-bookmarks__bookmark", bookmarkButton: "esri-bookmarks__bookmark-button", bookmarkImageContainer: "esri-bookmarks__bookmark-image-container", bookmarkEditButtonContainer: "esri-bookmarks__bookmark-edit-button-container", bookmarkEditButton: "esri-bookmarks__bookmark-edit-button", bookmarkDragHandle: "esri-bookmarks_bookmark-drag-handle", bookmarkDragHandleIcon: "esri-bookmarks_bookmark-drag-handle-icon", bookmarkIcon: "esri-bookmarks__bookmark-icon", bookmarkImage: "esri-bookmarks__image", bookmarkLabel: "esri-bookmarks__bookmark-label", bookmarkName: "esri-bookmarks__bookmark-name", bookmarkTimeExtent: "esri-bookmarks__bookmark-time-extent", bookmarkActive: "esri-bookmarks__bookmark--active", noBookmarksContainer: "esri-widget__content--empty", noBookmarksHeader: "esri-bookmarks__no-bookmarks-heading", noBookmarksIcon: "esri-widget__no-bookmark-icon", noBookmarksDescription: "esri-bookmarks__no-bookmarks-description", addingBookmark: "esri-bookmarks__adding-bookmark", addBookmark: "esri-bookmarks__add-bookmark", addBookmarkButton: "esri-bookmarks__add-bookmark-button", addBookmarkIcon: "esri-bookmarks__add-bookmark-icon", authoringCard: "esri-bookmarks__authoring-card", authoringContainer: "esri-bookmarks__authoring-container", authoringForm: "esri-bookmarks__authoring-form", authoringLabel: "esri-bookmarks__authoring-label", authoringActions: "esri-bookmarks__authoring-actions", authoringInputInvalid: "esri-bookmarks__authoring-input--invalid", authoringDeleteButton: "esri-bookmarks__authoring-delete-button", authoringCancelButton: "esri-bookmarks__authoring-cancel-button", timeExtentContainer: "esri-bookmarks__time-extent-container", timeExtent: "esri-bookmarks__time-extent", timeExtentGroup: "esri-bookmarks__time-extent-group", timeExtentDate: "esri-bookmarks__time-extent-date", timeExtentTime: "esri-bookmarks__time-extent-time", esriWidget: "esri-widget", esriWidgetDisabled: "esri-widget--disabled", esriButton: "esri-button", esriButtonTertiary: "esri-button--tertiary", esriInput: "esri-input", iconHandle: "esri-icon-handle-vertical", iconPlus: "esri-icon-plus", iconEdit: "esri-icon-edit", iconHandleHorizontal: "esri-icon-handle-horizontal", iconRefresh: "esri-icon-refresh", iconLink: "esri-icon-link", iconRemove: "esri-icon-erase", widgetIcon: "esri-icon-bookmark", header: "esri-widget__heading", loading: "esri-icon-loading-indicator", rotating: "esri-rotating" };
var A = { addBookmark: true, thumbnail: true, time: true };
var C = /^https:\/\/.*/i;
var U = "esri.widgets.Bookmarks";
var M2 = class extends M {
  constructor(t3, e5) {
    super(t3, e5), this._handles = new t2(), this._addInputNode = null, this._editInputNode = null, this._urlEditInputNode = null, this._addBookmarkButtonNode = null, this._focusAddBookmarkButton = false, this._focusEditInputBox = false, this._focusAddInputBox = false, this._focusUrlEditInputBox = false, this._sortable = null, this._sortableNode = null, this._focusSortUid = null, this._selectedSortUid = null, this._sortableSavedItems = null, this._editIncludeTimeExtent = null, this._userState = null, this.disabled = false, this.editingEnabled = false, this.headingLevel = 2, this.iconClass = T.widgetIcon, this.messages = null, this.messagesCommon = null, this.messagesUnits = null, this.viewModel = new v(), this.visibleElements = { ...A };
  }
  initialize() {
    this.addHandles([l(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.bookmarks;
    }, () => this._bookmarksInitialized(), h), l(() => this.editingEnabled, () => this._toggleSorting(), h)]);
  }
  destroy() {
    this._destroySortable(), this._handles.destroy(), this._handles = null, this._editMenu.destroy();
  }
  loadDependencies() {
    return Promise.all([import("./calcite-label-EYZS5ETV.js"), import("./calcite-switch-CVJ3NCOM.js")]);
  }
  get _editMenuItems() {
    var _a, _b;
    const { messages: t3, _userState: e5 } = this, o = (_b = (_a = e5 == null ? void 0 : e5.editedBookmark) == null ? void 0 : _a.thumbnail) == null ? void 0 : _b.url;
    return [new c({ label: t3 == null ? void 0 : t3.menu.refreshThumbnail, iconClass: T.iconRefresh, clickFunction: () => this._refreshThumbnail() }), new c({ label: C.test(o) ? t3 == null ? void 0 : t3.menu.editImageUrl : t3 == null ? void 0 : t3.menu.useImageUrl, iconClass: T.iconLink, clickFunction: () => this._startUseImageUrl() }), o ? new c({ label: t3 == null ? void 0 : t3.menu.removeThumbnail, iconClass: T.iconRemove, clickFunction: () => this._removeThumbnail() }) : null].filter(Boolean);
  }
  get _editMenu() {
    const { _editMenuItems: t3, messages: e5, disabled: o } = this, i4 = this._get("_editMenu");
    i4 && i4.destroy();
    const s4 = new b2({ disabled: o, iconClass: T.iconHandleHorizontal, label: e5 == null ? void 0 : e5.menu.label });
    return s4.items = t3, s4;
  }
  get defaultCreateOptions() {
    return this.viewModel.defaultCreateOptions;
  }
  set defaultCreateOptions(t3) {
    this.viewModel.defaultCreateOptions = t3;
  }
  get defaultEditOptions() {
    return this.viewModel.defaultEditOptions;
  }
  set defaultEditOptions(t3) {
    this.viewModel.defaultEditOptions = t3;
  }
  get bookmarks() {
    return this.viewModel.bookmarks;
  }
  set bookmarks(t3) {
    this.viewModel.bookmarks = t3;
  }
  get goToOverride() {
    return this.viewModel.goToOverride;
  }
  set goToOverride(t3) {
    this.viewModel.goToOverride = t3;
  }
  get label() {
    var _a, _b;
    return (_b = (_a = this.messages) == null ? void 0 : _a.widgetLabel) != null ? _b : "";
  }
  set label(t3) {
    this._overrideIfSome("label", t3);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(t3) {
    this.viewModel.view = t3;
  }
  castVisibleElements(t3) {
    return { ...A, ...t3 };
  }
  endAddBookmark() {
    this._userState = null;
  }
  goTo(t3) {
    return this.viewModel.goTo(t3);
  }
  render() {
    const { state: t3 } = this.viewModel, e5 = "loading" === t3 ? this.renderLoading() : this.renderBookmarks();
    return n3("div", { class: this.classes(T.base, T.esriWidget, { [T.esriWidgetDisabled]: this.disabled }) }, e5);
  }
  startAddBookmark() {
    this._userState = new a3({ state: "add" }), this._focusAddInputBox = true, this.scheduleRender();
  }
  renderLoading() {
    return n3("div", { class: T.loaderContainer, key: "loader", tabIndex: this.disabled ? -1 : null }, n3("div", { class: T.loader }));
  }
  renderNoBookmarksContainer() {
    const { messages: t3, disabled: e5 } = this;
    return n3("div", { class: T.noBookmarksContainer, key: "no-bookmarks", tabIndex: e5 ? -1 : null }, n3("span", { "aria-hidden": "true", class: this.classes(T.noBookmarksIcon, T.widgetIcon) }), n3(n4, { level: this.headingLevel, class: this.classes(T.header, T.noBookmarksHeader) }, t3 == null ? void 0 : t3.noBookmarksHeading), n3("p", { class: T.noBookmarksDescription }, t3 == null ? void 0 : t3.noBookmarksDescription));
  }
  renderAddBookmarkLoading() {
    var _a;
    return n3("div", { key: "adding-bookmark", class: T.addingBookmark }, n3("span", { "aria-hidden": "true", class: this.classes(T.loading, T.rotating) }), (_a = this.messages) == null ? void 0 : _a.addingBookmark);
  }
  renderBookmarkItems(t3) {
    if (!t3)
      return null;
    const { _userState: e5, editingEnabled: o } = this;
    return t3.map((t4) => o && t4 && e5 && ("edit" === e5.state || "edit-thumbnail" === e5.state) && e5.bookmark === t4 ? "edit-thumbnail" === e5.state ? this.renderEditingBookmarkUrl(e5.editedBookmark) : this.renderEditingBookmark(e5.editedBookmark) : this.renderBookmark(t4)).toArray();
  }
  renderBookmarksContainer(t3) {
    var _a;
    const { _userState: e5, editingEnabled: o, disabled: i4 } = this, s4 = "add" === (e5 == null ? void 0 : e5.state), r2 = o && !s4 ? this.renderAddBookmarkButton() : null, a4 = o ? s4 && e5.loading ? this.renderAddBookmarkLoading() : "add" === (e5 == null ? void 0 : e5.state) ? this.renderAddingBookmark() : null : null;
    return [n3("ul", { key: "bookmark-list", "aria-label": (_a = this.messages) == null ? void 0 : _a.widgetLabel, class: this.classes(T.bookmarkList, { [T.bookmarkListSortable]: this.editingEnabled }), afterCreate: this._sortNodeCreated, afterRemoved: this._destroySortable, "data-node-ref": "_sortableNode", bind: this, tabIndex: i4 ? -1 : null }, this.renderBookmarkItems(t3)), r2, a4];
  }
  renderAddBookmarkButton() {
    var _a;
    return this.visibleElements.addBookmark ? n3("div", { key: "add-bookmark-item", class: T.addBookmark }, n3("button", { class: this.classes(T.esriButton, T.esriButtonTertiary, T.addBookmarkButton), disabled: this.disabled, onclick: this.startAddBookmark, afterCreate: this._storeAddBookmarkButton, afterUpdate: this._storeAddBookmarkButton, "data-node-ref": "_addBookmarkButtonNode", bind: this, type: "button" }, n3("span", { "aria-hidden": "true", class: this.classes(T.addBookmarkIcon, T.iconPlus) }), (_a = this.messages) == null ? void 0 : _a.addBookmark)) : null;
  }
  renderBookmarks() {
    const { bookmarks: t3 } = this.viewModel, e5 = t3 && t3.filter(Boolean), o = e5 && e5.length, i4 = o || this.editingEnabled ? this.renderBookmarksContainer(e5) : null;
    return [o ? null : this.renderNoBookmarksContainer(), i4];
  }
  renderEditContainer(t3) {
    const { messagesCommon: e5, disabled: o } = this, i4 = this._getBookmarkTitle(t3);
    return n3("div", { class: T.bookmarkEditButtonContainer, key: "edit-container" }, n3("button", { disabled: o, title: `${e5 == null ? void 0 : e5.edit} ${i4}`, "aria-label": `${e5 == null ? void 0 : e5.edit} ${i4}`, "data-bookmark": t3, onclick: this._showEditBookmarkForm, bind: this, class: T.bookmarkEditButton, type: "button" }, n3("span", { "aria-hidden": "true", class: T.iconEdit })));
  }
  renderDragHandle(t3) {
    const { messagesCommon: e5, disabled: o } = this, i4 = this._getBookmarkTitle(t3), s4 = { [x]: t3.uid };
    return n3("div", { role: "button", tabIndex: o ? -1 : 0, key: "drag-handle", bind: this, class: T.bookmarkDragHandle, onkeydown: this._dragHandleKeydown, afterCreate: this._focusDragHandle, afterUpdate: this._focusDragHandle, onblur: this._dragHandleBlur, "aria-pressed": this._selectedSortUid === t3.uid ? "true" : "false", "aria-label": `${e5 == null ? void 0 : e5.dragHandleTitle} ${i4}`, title: `${e5 == null ? void 0 : e5.dragHandleTitle} ${i4}`, ...s4 }, n3("span", { "aria-hidden": "true", class: this.classes(T.bookmarkDragHandleIcon, T.iconHandle) }));
  }
  renderBookmarkImageIcon() {
    return n3("span", { "aria-hidden": "true", class: this.classes(T.bookmarkIcon, T.widgetIcon) });
  }
  renderBookmarkImage(t3) {
    const { visibleElements: e5 } = this, { thumbnail: o } = t3, i4 = o && o.url || "";
    return e5.thumbnail && i4 ? n3("img", { src: i4, alt: "", class: T.bookmarkImage }) : null;
  }
  renderBookmarkTimeSwitch(t3) {
    const { messages: e5, disabled: o } = this, { timeExtent: i4 } = t3, { view: s4 } = this.viewModel;
    return s4.timeExtent || i4 ? n3("calcite-label", { layout: "inline-space-between", "disable-spacing": "true" }, e5.includeTimeExtent, n3("calcite-switch", { scale: "s", disabled: o, checked: !!i4, onCalciteSwitchChange: (t4) => this._editIncludeTimeExtent = !!t4.detail.switched })) : null;
  }
  renderBookmarkTimeExtent(t3) {
    const { visibleElements: e5 } = this, { timeExtent: o } = t3;
    return o ? n3("span", { class: T.timeExtent }, [r(o.start) && n3("span", { key: "start-date-group", class: T.timeExtentGroup }, n3("span", { key: "start-date", class: T.timeExtentDate }, this._formatDate(o.start)), e5.time && n3("span", { key: "start-time", class: T.timeExtentTime }, this._formatTime(o.start))), r(o.end) && (t(o.start) || o.start.getTime() !== o.end.getTime()) && n3("span", { key: "end-date-group", class: T.timeExtentGroup }, n3("span", { key: "end-date", class: T.timeExtentDate }, this._formatDate(o.end)), e5.time && n3("span", { key: "end-time", class: T.timeExtentTime }, this._formatTime(o.end)))]) : null;
  }
  renderBookmarkButton(t3) {
    const { disabled: e5 } = this, { timeExtent: o } = t3, { abilities: i4 } = this.viewModel, s4 = this._getBookmarkTitle(t3), r2 = n3("div", { class: T.bookmarkImageContainer }, this.renderBookmarkImage(t3) || this.renderBookmarkImageIcon()), a4 = i4.time && o ? n3("span", { key: "time-extent", class: T.bookmarkTimeExtent }, this.renderBookmarkTimeExtent(t3)) : null;
    return n3("button", { disabled: e5, key: "bookmark-button", class: T.bookmarkButton, bind: this, "data-bookmark": t3, onclick: this._goToBookmark, type: "button" }, r2, n3("div", { class: T.bookmarkLabel }, n3("span", { key: "bookmark-title", class: T.bookmarkName }, s4), a4));
  }
  renderBookmark(t3) {
    const { activeBookmark: e5 } = this.viewModel, o = { [T.bookmarkActive]: e5 === t3 }, i4 = this.editingEnabled ? this.renderEditContainer(t3) : null, s4 = { [x]: t3.uid }, r2 = this.editingEnabled ? this.renderDragHandle(t3) : null;
    return n3("li", { key: t3, class: this.classes(T.bookmark, o), ...s4 }, r2, this.renderBookmarkButton(t3), i4);
  }
  renderEditingBookmarkName(t3) {
    const { messages: e5, _userState: o, disabled: i4 } = this, s4 = "name-required" === o.validationState;
    return n3("label", { class: T.authoringLabel }, e5 == null ? void 0 : e5.title, s4 ? n3("strong", null, e5 == null ? void 0 : e5.invalidTitle) : null, n3("input", { required: true, disabled: i4, bind: this, class: this.classes(T.esriInput, s4 ? T.authoringInputInvalid : null), type: "text", value: t3.name, afterCreate: this._storeEditInput, afterUpdate: this._focusEditInput, "data-bookmark": t3, "data-node-ref": "_editInputNode", placeholder: e5 == null ? void 0 : e5.titlePlaceholder }));
  }
  renderEditingBookmarkUrlActions() {
    const { messagesCommon: t3, disabled: e5 } = this;
    return n3("div", { class: T.authoringActions }, n3("input", { type: "button", disabled: e5, value: t3 == null ? void 0 : t3.back, class: this.classes(T.esriButton, T.esriButtonTertiary), onclick: this._closeUrlEditBookmarkForm, bind: this }), n3("input", { class: T.esriButton, disabled: e5, type: "submit", value: t3 == null ? void 0 : t3.add }));
  }
  renderEditingBookmarkActions() {
    const { messagesCommon: t3, disabled: e5 } = this, { bookmark: o } = this._userState;
    return n3("div", { class: T.authoringActions }, n3("input", { type: "button", disabled: e5, value: t3 == null ? void 0 : t3.delete, class: this.classes(T.esriButton, T.esriButtonTertiary, T.authoringDeleteButton), "data-bookmark": o, onclick: this._deleteBookmark, bind: this }), n3("input", { disabled: e5, type: "button", value: t3 == null ? void 0 : t3.cancel, class: this.classes(T.esriButton, T.esriButtonTertiary), onclick: this._closeEditBookmarkForm, bind: this }), n3("input", { class: T.esriButton, disabled: e5, type: "submit", value: t3 == null ? void 0 : t3.save }));
  }
  renderEditingBookmarkUrlInput(t3) {
    var _a;
    const { messages: e5, _userState: o, disabled: i4 } = this, s4 = (_a = t3.thumbnail) == null ? void 0 : _a.url, r2 = C.test(s4) ? s4 : null, a4 = "absolute-url-required" === o.validationState;
    return n3("label", { class: T.authoringLabel }, a4 ? n3("strong", null, e5 == null ? void 0 : e5.invalidImageUrl) : null, n3("input", { required: true, disabled: i4, bind: this, class: this.classes(T.esriInput, a4 ? T.authoringInputInvalid : null), type: "text", value: r2, afterCreate: this._storeUrlEditInput, afterUpdate: this._focusUrlEditInput, "data-bookmark": t3, "data-node-ref": "_urlEditInputNode", title: e5 == null ? void 0 : e5.imageUrlTooltip, placeholder: e5 && `https://<${e5.imageUrlPlaceholder}>` }));
  }
  renderEditingBookmarkUrl(t3) {
    const e5 = { [x]: t3.uid };
    return n3("li", { key: "edit-bookmark-url-form", class: T.authoringCard, ...e5 }, n3("form", { class: T.authoringForm, disabled: this.disabled, onsubmit: this._editBookmarkUrlSubmit, bind: this }, this.renderEditingBookmarkUrlInput(t3), this.renderEditingBookmarkUrlActions()));
  }
  renderEditingBookmark(t3) {
    const e5 = { [x]: t3.uid }, { abilities: o } = this.viewModel, i4 = o.time ? n3("div", { key: "edit-bookmark-time-container", class: T.timeExtentContainer }, this.renderBookmarkTimeSwitch(t3), this._editIncludeTimeExtent && this.renderBookmarkTimeExtent(t3)) : null;
    return n3("li", { key: "edit-bookmark-form", class: T.authoringCard, ...e5 }, n3("form", { class: T.authoringForm, disabled: this.disabled, onsubmit: this._editBookmarkSubmit, bind: this }, n3("div", { class: T.authoringContainer }, n3("div", { class: T.bookmarkImageContainer }, this.renderBookmarkImage(t3), this._editMenu.render()), this.renderEditingBookmarkName(t3)), i4, this.renderEditingBookmarkActions()));
  }
  renderAddingBookmarkName() {
    const { _userState: t3, messages: e5, disabled: o } = this, i4 = "name-required" === t3.validationState;
    return n3("label", { class: T.authoringLabel }, e5 == null ? void 0 : e5.title, i4 ? n3("strong", null, e5 == null ? void 0 : e5.invalidTitle) : null, n3("input", { required: true, disabled: o, bind: this, class: this.classes(T.esriInput, i4 ? T.authoringInputInvalid : null), type: "text", afterCreate: this._storeAddInput, afterUpdate: this._focusAddInput, "data-node-ref": "_addInputNode", value: "", placeholder: e5 == null ? void 0 : e5.titlePlaceholder }));
  }
  renderAddingBookmarkActions() {
    const { messagesCommon: t3, disabled: e5 } = this;
    return n3("div", { class: this.classes(T.authoringActions) }, n3("input", { type: "button", disabled: e5, value: t3 == null ? void 0 : t3.cancel, class: this.classes(T.esriButton, T.esriButtonTertiary, T.authoringCancelButton), onclick: this._endAddBookmark.bind(this), bind: this }), n3("input", { class: T.esriButton, disabled: e5, type: "submit", value: t3 == null ? void 0 : t3.add }));
  }
  renderAddingBookmark() {
    return n3("div", { key: "add-bookmark-form", class: T.authoringCard }, n3("form", { class: T.authoringForm, onsubmit: this._addBookmarkSubmit, bind: this }, this.renderAddingBookmarkName(), this.renderAddingBookmarkActions()));
  }
  _getBookmarkTitle(t3) {
    var _a;
    return t3.name || ((_a = this.messagesCommon) == null ? void 0 : _a.untitled);
  }
  _formatDate(t3) {
    return t3 ? L(t3, S("short-date")) : null;
  }
  _formatTime(t3) {
    return t3 ? L(t3, S("long-time")) : null;
  }
  _dragHandleBlur() {
    this._selectedSortUid = null, this.scheduleRender();
  }
  _dragHandleKeydown(t3) {
    const { _sortableSavedItems: o } = this, i4 = ["ArrowDown", "ArrowUp", "Escape", "Tab", " ", "Enter"], s4 = i(t3);
    if (!i4.includes(s4))
      return;
    const { _sortable: r2, _selectedSortUid: a4 } = this, n5 = r2.toArray(), d2 = t3.target.getAttribute(x), l2 = n5.indexOf(d2);
    if (k(s4)) {
      const t4 = a4 && a4 === d2;
      return this._selectedSortUid = t4 ? null : d2, this._sortableSavedItems = t4 ? null : this._sortable.toArray(), void this.scheduleRender();
    }
    if ("Tab" === s4)
      return this._selectedSortUid = null, void this.scheduleRender();
    if ("Escape" === s4 && o)
      return t3.stopPropagation(), this._selectedSortUid = null, this._updateSortItems(o, r2, d2), void this.scheduleRender();
    if (-1 === l2 || !a4)
      return;
    const k3 = "ArrowUp" === s4 ? l2 - 1 : l2 + 1;
    k3 >= n5.length || k3 <= -1 || (w2(n5, l2, k3), this._updateSortItems(n5, r2, d2));
  }
  _updateSortItems(t3, e5, o) {
    e5.sort(t3), this._sortBookmarks(e5), this._focusSortUid = o, this._selectedSortUid = o;
  }
  _focusDragHandle(t3) {
    const { _focusSortUid: e5 } = this;
    if (!t3 || !e5)
      return;
    t3.getAttribute(x) === e5 && (t3.focus(), this._focusSortUid = null);
  }
  _toggleSorting() {
    const { _sortable: t3, _sortableNode: e5, editingEnabled: o, disabled: i4 } = this;
    if (e5)
      if (t3)
        t3.option("disabled", i4 || !o);
      else {
        const t4 = sortable_esm_default.create(e5, { dataIdAttr: x, handle: `.${T.bookmarkDragHandle}`, group: S2, disabled: i4 || !o, onSort: () => this._sortBookmarks(t4) });
        this._sortable = t4;
      }
  }
  _sortNodeCreated(t3) {
    this._sortableNode = t3, this._toggleSorting();
  }
  _sortBookmarks(t3) {
    const { bookmarks: e5 } = this.viewModel;
    if (!e5)
      return;
    const o = t3.toArray();
    e5.sort((t4, e6) => {
      const i4 = o.indexOf(t4.uid), s4 = o.indexOf(e6.uid);
      return i4 > s4 ? 1 : i4 < s4 ? -1 : 0;
    });
  }
  _destroySortable() {
    const { _sortable: t3 } = this;
    t3 && t3.destroy(), this._sortable = null;
  }
  _endAddBookmark() {
    this._focusAddBookmarkButton = true, this.endAddBookmark();
  }
  _bookmarksInitialized() {
    const t3 = "bookmarks-init", { _handles: e5 } = this;
    e5.remove(t3), e5.add(a(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.bookmarks;
    }, "change", () => this._bookmarksChanged()), t3);
  }
  _bookmarksChanged() {
    const t3 = "bookmarks-change", { bookmarks: e5 } = this.viewModel, { _handles: o } = this;
    o.remove(t3);
    const i4 = e5.map((t4) => l(() => {
      var _a;
      return [t4 == null ? void 0 : t4.name, (_a = t4 == null ? void 0 : t4.thumbnail) == null ? void 0 : _a.url];
    }, () => this.scheduleRender()));
    o.add(i4, t3), this.scheduleRender();
  }
  _showEditBookmarkForm(t3) {
    const e5 = t3.currentTarget["data-bookmark"];
    this._editIncludeTimeExtent = !!e5.timeExtent, this._focusEditInputBox = true, this._userState = new a3({ bookmark: e5, state: "edit" }), this.viewModel.goTo(e5), this.scheduleRender();
  }
  _closeUrlEditBookmarkForm() {
    this._focusEditInputBox = true, this._userState.state = "edit";
  }
  _closeEditBookmarkForm() {
    this._userState = null;
  }
  _addBookmarkSubmit(t3) {
    t3.preventDefault();
    const { _addInputNode: e5, _userState: o } = this, i4 = e5 && e5.value.trim();
    i4 ? (o.loading = true, this.viewModel.createBookmark().then((t4) => {
      t4.name = i4, this.viewModel.bookmarks.add(t4), this._endAddBookmark();
    })) : o.validationState = "name-required";
  }
  async _editBookmarkAndClose(t3, e5) {
    const { viewModel: o } = this;
    await o.editBookmark(t3, { ...o.defaultEditOptions, ...e5 }), this._closeEditBookmarkForm();
  }
  _editBookmarkSubmit(t3) {
    t3.preventDefault();
    const { _editInputNode: e5, _userState: o, _editIncludeTimeExtent: i4 } = this, s4 = e5 && e5.value.trim();
    s4 ? (o.bookmark.name = s4, o.bookmark.thumbnail = o.editedBookmark.thumbnail, i4 || (o.bookmark.timeExtent = null), this._editBookmarkAndClose(o.bookmark, { takeScreenshot: false, captureTimeExtent: i4 })) : o.validationState = "name-required";
  }
  _storeAddBookmarkButton(t3) {
    this._addBookmarkButtonNode = t3, this._focusAddBookmark();
  }
  _storeEditInput(t3) {
    this._editInputNode = t3, this._focusEditInput();
  }
  _storeAddInput(t3) {
    this._addInputNode = t3, this._focusAddInput();
  }
  _storeUrlEditInput(t3) {
    this._urlEditInputNode = t3, this._focusUrlEditInput();
  }
  _focusUrlEditInput() {
    this._urlEditInputNode && this._focusUrlEditInputBox && (this._focusUrlEditInputBox = false, this._urlEditInputNode.focus());
  }
  _focusAddInput() {
    this._addInputNode && this._focusAddInputBox && (this._focusAddInputBox = false, this._addInputNode.focus());
  }
  _focusAddBookmark() {
    this._addBookmarkButtonNode && this._focusAddBookmarkButton && (this._focusAddBookmarkButton = false, this._addBookmarkButtonNode.focus());
  }
  _focusEditInput() {
    this._editInputNode && this._focusEditInputBox && (this._focusEditInputBox = false, this._editInputNode.focus());
  }
  _deleteBookmark(t3) {
    const e5 = t3.currentTarget["data-bookmark"];
    this.viewModel.bookmarks.remove(e5);
  }
  _goToBookmark(t3) {
    const e5 = t3.currentTarget["data-bookmark"];
    this.endAddBookmark(), this._closeEditBookmarkForm(), this.viewModel.goTo(e5);
  }
  async _refreshThumbnail() {
    const { _userState: t3, _editMenu: e5, viewModel: o } = this;
    t3.validationState = void 0, await o.editBookmark(this._userState.editedBookmark, { takeScreenshot: true, captureViewpoint: false, captureRotation: false, captureScale: false, captureTimeExtent: false }), e5.open = false, this._focusEditInputBox = true, this.scheduleRender();
  }
  _removeThumbnail() {
    const { _userState: t3, _editMenu: e5 } = this;
    t3.editedBookmark.thumbnail = null, t3.validationState = void 0, e5.open = false, this._focusEditInputBox = true, this.scheduleRender();
  }
  _startUseImageUrl() {
    this._userState.state = "edit-thumbnail", this._editMenu.open = false, this._focusUrlEditInputBox = true, this.scheduleRender();
  }
  _editBookmarkUrlSubmit(t3) {
    t3.preventDefault();
    const { _urlEditInputNode: e5, _userState: o } = this, i4 = e5.value;
    C.test(i4) ? (i4 && (o.editedBookmark.thumbnail = new p({ url: i4 })), this._closeUrlEditBookmarkForm()) : o.validationState = "absolute-url-required";
  }
};
e([y()], M2.prototype, "_editIncludeTimeExtent", void 0), e([y({ type: a3 })], M2.prototype, "_userState", void 0), e([y({ readOnly: true })], M2.prototype, "_editMenuItems", null), e([y({ readOnly: true })], M2.prototype, "_editMenu", null), e([y()], M2.prototype, "defaultCreateOptions", null), e([y()], M2.prototype, "defaultEditOptions", null), e([y()], M2.prototype, "bookmarks", null), e([y()], M2.prototype, "disabled", void 0), e([y()], M2.prototype, "editingEnabled", void 0), e([y()], M2.prototype, "headingLevel", void 0), e([y()], M2.prototype, "goToOverride", null), e([y()], M2.prototype, "iconClass", void 0), e([y()], M2.prototype, "label", null), e([y(), e2("esri/widgets/Bookmarks/t9n/Bookmarks")], M2.prototype, "messages", void 0), e([y(), e2("esri/t9n/common")], M2.prototype, "messagesCommon", void 0), e([y(), e2("esri/core/t9n/Units")], M2.prototype, "messagesUnits", void 0), e([y()], M2.prototype, "uiStrings", void 0), e([y()], M2.prototype, "view", null), e([y({ type: v }), e3(["select-bookmark", "bookmark-edit", "bookmark-select"])], M2.prototype, "viewModel", void 0), e([y()], M2.prototype, "visibleElements", void 0), e([s2("visibleElements")], M2.prototype, "castVisibleElements", null), e([y()], M2.prototype, "endAddBookmark", null), e([y()], M2.prototype, "startAddBookmark", null), M2 = e([n(U)], M2);
var N = M2;

// dep:@arcgis_core_widgets_Bookmarks
var arcgis_core_widgets_Bookmarks_default = N;
export {
  arcgis_core_widgets_Bookmarks_default as default
};
//# sourceMappingURL=@arcgis_core_widgets_Bookmarks.js.map
