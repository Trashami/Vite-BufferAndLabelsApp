import {
  n as n2
} from "./chunk-ZEEU5HOK.js";
import {
  n
} from "./chunk-NDQ5FHGV.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Util.js
var a = n();
var o = class {
  constructor(t) {
    this.message = t;
  }
  toString() {
    return `AssertException: ${this.message}`;
  }
};
function e(t, n3) {
  if (!t)
    throw n3 = n3 || "assert", console.log(new Error(n3).stack), new o(n3);
}
function s(t, n3) {
  t || (n3 = n3 || "", console.warn("Verify failed: " + n3 + "\n" + new Error("verify").stack));
}
function c(t, n3, r, a2) {
  let o2, e2 = (r[0] - t[0]) / n3[0], s2 = (a2[0] - t[0]) / n3[0];
  e2 > s2 && (o2 = e2, e2 = s2, s2 = o2);
  let c2 = (r[1] - t[1]) / n3[1], u2 = (a2[1] - t[1]) / n3[1];
  if (c2 > u2 && (o2 = c2, c2 = u2, u2 = o2), e2 > u2 || c2 > s2)
    return false;
  c2 > e2 && (e2 = c2), u2 < s2 && (s2 = u2);
  let i = (r[2] - t[2]) / n3[2], f2 = (a2[2] - t[2]) / n3[2];
  return i > f2 && (o2 = i, i = f2, f2 = o2), !(e2 > f2 || i > s2) && (f2 < s2 && (s2 = f2), !(s2 < 0));
}
function u(n3, r, a2, o2, e2, s2 = n2()) {
  const c2 = (o2[e2] - a2[e2]) * (r[0] - n3[0]) - (o2[0] - a2[0]) * (r[e2] - n3[e2]), u2 = (o2[0] - a2[0]) * (n3[e2] - a2[e2]) - (o2[e2] - a2[e2]) * (n3[0] - a2[0]);
  if (0 === c2)
    return false;
  const i = u2 / c2;
  return s2[0] = n3[0] + i * (r[0] - n3[0]), s2[1] = n3[e2] + i * (r[e2] - n3[e2]), true;
}
function f(t, n3) {
  return Math.log(t) / Math.log(n3);
}
function h(t, n3, r, a2) {
  t[12] = n3, t[13] = r, t[14] = a2;
}
function M(t) {
  return 1 === t[0] && 0 === t[1] && 0 === t[2] && 0 === t[3] && 0 === t[4] && 1 === t[5] && 0 === t[6] && 0 === t[7] && 0 === t[8] && 0 === t[9] && 1 === t[10] && 0 === t[11] && 1 === t[15];
}
function l(t, n3, r) {
  return 2 * Math.atan(Math.sqrt(n3 * n3 + r * r) * Math.tan(0.5 * t) / n3);
}
function m(t, n3, r) {
  return 2 * Math.atan(Math.sqrt(n3 * n3 + r * r) * Math.tan(0.5 * t) / r);
}
function g(t, n3, r) {
  return 2 * Math.atan(n3 * Math.tan(0.5 * t) / Math.sqrt(n3 * n3 + r * r));
}
function k(t, n3, r) {
  return 2 * Math.atan(r * Math.tan(0.5 * t) / Math.sqrt(n3 * n3 + r * r));
}

export {
  e,
  s,
  c,
  u,
  f,
  h,
  M,
  l,
  m,
  g,
  k
};
//# sourceMappingURL=chunk-EGV5SNBD.js.map
