import {
  T,
  n
} from "./chunk-US2IWMHE.js";
import {
  x
} from "./chunk-YM6PUX7G.js";
import {
  r as r2
} from "./chunk-BLJKKR5D.js";
import {
  f
} from "./chunk-X2S4RQJ4.js";
import {
  w2 as w
} from "./chunk-UWG37XSU.js";
import {
  k2 as k
} from "./chunk-LNZAOBFW.js";
import {
  r
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/support/timeUtils.js
function a(t2) {
  if (!t2)
    return t2;
  const { start: i, end: o } = t2;
  return new T({ start: r(i) ? n(i, -i.getTimezoneOffset(), "minutes") : i, end: r(o) ? n(o, -o.getTimezoneOffset(), "minutes") : o });
}
function f2(t2) {
  if (!t2)
    return t2;
  const { start: i, end: o } = t2;
  return new T({ start: r(i) ? n(i, i.getTimezoneOffset(), "minutes") : i, end: r(o) ? n(o, o.getTimezoneOffset(), "minutes") : o });
}

// node_modules/@arcgis/core/layers/support/commonProperties.js
var l = { type: Boolean, value: true, json: { origins: { service: { read: false, write: false }, "web-map": { read: false, write: false } }, name: "screenSizePerspective", write: true } };
var p = { type: Boolean, value: true, json: { name: "disablePopup", read: { reader: (e2, r3) => !r3.disablePopup }, write: { enabled: true, writer(e2, r3, i) {
  r3[i] = !e2;
} } } };
var m = { type: Boolean, value: true, nonNullable: true, json: { name: "showLabels", write: true } };
var f3 = { type: String, json: { origins: { "portal-item": { write: false } }, write: { isRequired: true, ignoreOrigin: true, writer: f } } };
var c = { type: Boolean, value: true, nonNullable: true, json: { origins: { service: { read: { enabled: false } } }, name: "showLegend", write: true } };
var d = { value: null, type: x, json: { origins: { service: { name: "elevationInfo", write: true } }, name: "layerDefinition.elevationInfo", write: true } };
function y(e2) {
  return { type: e2, readOnly: true, json: { origins: { service: { read: true } }, read: false } };
}
var w2 = { type: Number, json: { origins: { "web-document": { write: true, read: true }, "portal-item": { write: true } } } };
var u = { ...w2, json: { ...w2.json, origins: { "web-document": { ...w2.json.origins["web-document"], write: { enabled: true, target: { opacity: { type: Number }, "layerDefinition.drawingInfo.transparency": { type: Number } } } } }, read: { source: ["layerDefinition.drawingInfo.transparency", "drawingInfo.transparency"], reader: (e2, r3, i) => i && "service" !== i.origin || !r3.drawingInfo || void 0 === r3.drawingInfo.transparency ? r3.layerDefinition && r3.layerDefinition.drawingInfo && void 0 !== r3.layerDefinition.drawingInfo.transparency ? r2(r3.layerDefinition.drawingInfo.transparency) : void 0 : r2(r3.drawingInfo.transparency) } } };
var g = { type: T, readOnly: true, get() {
  var _a, _b;
  if (!((_a = this.layer) == null ? void 0 : _a.timeInfo))
    return null;
  const { datesInUnknownTimezone: e2, timeOffset: r3, useViewTime: i } = this.layer, n2 = (_b = this.view) == null ? void 0 : _b.timeExtent;
  let a2 = this.layer.timeExtent;
  e2 && (a2 = f2(a2));
  let s = i ? n2 && a2 ? n2.intersection(a2) : n2 || a2 : a2;
  if (!s || s.isEmpty || s.isAllTime)
    return s;
  r3 && (s = s.offset(-r3.value, r3.unit)), e2 && (s = a(s));
  const l2 = this._get("timeExtent");
  return s.equals(l2) ? l2 : s;
} };
var b = { type: w, readOnly: true, json: { origins: { service: { read: { source: ["fullExtent", "spatialReference"], reader: (e2, n2) => {
  const t2 = w.fromJSON(e2);
  return null != n2.spatialReference && "object" == typeof n2.spatialReference && (t2.spatialReference = k.fromJSON(n2.spatialReference)), t2;
} } } }, read: false } };
var j = { type: String, json: { origins: { service: { read: false }, "portal-item": { read: false } } } };
var v = { type: Number, json: { origins: { service: { write: { enabled: false } } }, read: { source: "layerDefinition.minScale" }, write: { target: "layerDefinition.minScale" } } };
var I = { type: Number, json: { origins: { service: { write: { enabled: false } } }, read: { source: "layerDefinition.maxScale" }, write: { target: "layerDefinition.maxScale" } } };
var D = { json: { write: { ignoreOrigin: true }, origins: { "web-map": { read: false, write: false } } } };

export {
  l,
  p,
  m,
  f3 as f,
  c,
  d,
  y,
  w2 as w,
  u,
  g,
  b,
  j,
  v,
  I,
  D
};
//# sourceMappingURL=chunk-YGVY4EIZ.js.map
