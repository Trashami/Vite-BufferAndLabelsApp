import {
  s
} from "./chunk-XLJB6BCW.js";
import {
  t
} from "./chunk-FZSI6IGI.js";

// node_modules/@arcgis/core/chunks/geometryEngineJSON.js
function t2(n) {
  return s.extendedSpatialReferenceInfo(n);
}
function r(t3, r2, i2) {
  return s.clip(t, t3, r2, i2);
}
function i(t3, r2, i2) {
  return s.cut(t, t3, r2, i2);
}
function a(t3, r2, i2) {
  return s.contains(t, t3, r2, i2);
}
function o(t3, r2, i2) {
  return s.crosses(t, t3, r2, i2);
}
function s2(t3, r2, i2, a2) {
  return s.distance(t, t3, r2, i2, a2);
}
function u(t3, r2, i2) {
  return s.equals(t, t3, r2, i2);
}
function c(t3, r2, i2) {
  return s.intersects(t, t3, r2, i2);
}
function f(t3, r2, i2) {
  return s.touches(t, t3, r2, i2);
}
function l(t3, r2, i2) {
  return s.within(t, t3, r2, i2);
}
function p(t3, r2, i2) {
  return s.disjoint(t, t3, r2, i2);
}
function g(t3, r2, i2) {
  return s.overlaps(t, t3, r2, i2);
}
function d(t3, r2, i2, a2) {
  return s.relate(t, t3, r2, i2, a2);
}
function m(t3, r2) {
  return s.isSimple(t, t3, r2);
}
function h(t3, r2) {
  return s.simplify(t, t3, r2);
}
function y(t3, r2, i2 = false) {
  return s.convexHull(t, t3, r2, i2);
}
function x(t3, r2, i2) {
  return s.difference(t, t3, r2, i2);
}
function S(t3, r2, i2) {
  return s.symmetricDifference(t, t3, r2, i2);
}
function w(t3, r2, i2) {
  return s.intersect(t, t3, r2, i2);
}
function A(t3, r2, i2 = null) {
  return s.union(t, t3, r2, i2);
}
function D(t3, r2, i2, a2, o2, s3, u2) {
  return s.offset(t, t3, r2, i2, a2, o2, s3, u2);
}
function R(t3, r2, i2, a2, o2 = false) {
  return s.buffer(t, t3, r2, i2, a2, o2);
}
function j(t3, r2, i2, a2, o2, s3, u2) {
  return s.geodesicBuffer(t, t3, r2, i2, a2, o2, s3, u2);
}
function E(t3, r2, i2, a2 = true) {
  return s.nearestCoordinate(t, t3, r2, i2, a2);
}
function L(t3, r2, i2) {
  return s.nearestVertex(t, t3, r2, i2);
}
function T(t3, r2, i2, a2, o2) {
  return s.nearestVertices(t, t3, r2, i2, a2, o2);
}
function b(n, t3, r2, i2) {
  if (null == t3 || null == i2)
    throw new Error("Illegal Argument Exception");
  const a2 = s.rotate(t3, r2, i2);
  return a2.spatialReference = n, a2;
}
function v(n, t3, r2) {
  if (null == t3 || null == r2)
    throw new Error("Illegal Argument Exception");
  const i2 = s.flipHorizontal(t3, r2);
  return i2.spatialReference = n, i2;
}
function z(n, t3, r2) {
  if (null == t3 || null == r2)
    throw new Error("Illegal Argument Exception");
  const i2 = s.flipVertical(t3, r2);
  return i2.spatialReference = n, i2;
}
function I(t3, r2, i2, a2, o2) {
  return s.generalize(t, t3, r2, i2, a2, o2);
}
function V(t3, r2, i2, a2) {
  return s.densify(t, t3, r2, i2, a2);
}
function H(t3, r2, i2, a2, o2 = 0) {
  return s.geodesicDensify(t, t3, r2, i2, a2, o2);
}
function B(t3, r2, i2) {
  return s.planarArea(t, t3, r2, i2);
}
function _(t3, r2, i2) {
  return s.planarLength(t, t3, r2, i2);
}
function q(t3, r2, i2, a2) {
  return s.geodesicArea(t, t3, r2, i2, a2);
}
function C(t3, r2, i2, a2) {
  return s.geodesicLength(t, t3, r2, i2, a2);
}
function P(t3, r2, i2) {
  return null == r2 || null == i2 ? [] : s.intersectLinesToPoints(t, t3, r2, i2);
}
function G(n, t3) {
  s.changeDefaultSpatialReferenceTolerance(n, t3);
}
function M(n) {
  s.clearDefaultSpatialReferenceTolerance(n);
}
var O = Object.freeze(Object.defineProperty({ __proto__: null, extendedSpatialReferenceInfo: t2, clip: r, cut: i, contains: a, crosses: o, distance: s2, equals: u, intersects: c, touches: f, within: l, disjoint: p, overlaps: g, relate: d, isSimple: m, simplify: h, convexHull: y, difference: x, symmetricDifference: S, intersect: w, union: A, offset: D, buffer: R, geodesicBuffer: j, nearestCoordinate: E, nearestVertex: L, nearestVertices: T, rotate: b, flipHorizontal: v, flipVertical: z, generalize: I, densify: V, geodesicDensify: H, planarArea: B, planarLength: _, geodesicArea: q, geodesicLength: C, intersectLinesToPoints: P, changeDefaultSpatialReferenceTolerance: G, clearDefaultSpatialReferenceTolerance: M }, Symbol.toStringTag, { value: "Module" }));

export {
  t2 as t,
  r,
  i,
  a,
  o,
  s2 as s,
  u,
  c,
  f,
  l,
  p,
  g,
  d,
  m,
  h,
  y,
  x,
  S,
  w,
  A,
  D,
  R,
  j,
  E,
  L,
  T,
  b,
  v,
  z,
  I,
  V,
  H,
  B,
  _,
  q,
  C,
  P,
  G,
  M,
  O
};
//# sourceMappingURL=chunk-IMTHGBRQ.js.map
