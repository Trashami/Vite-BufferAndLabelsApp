import {
  SLOTS,
  defineCustomElement as defineCustomElement7
} from "./chunk-WOEJV63F.js";
import {
  defineCustomElement as defineCustomElement4,
  defineCustomElement2 as defineCustomElement5
} from "./chunk-UWO4D4SI.js";
import {
  defineCustomElement as defineCustomElement6
} from "./chunk-OQZIQID5.js";
import "./chunk-ZHU6EFH7.js";
import {
  defineCustomElement as defineCustomElement3
} from "./chunk-MAZQE4E3.js";
import {
  defineCustomElement as defineCustomElement2
} from "./chunk-7X4BE3AM.js";
import {
  defineCustomElement as defineCustomElement8
} from "./chunk-5M3ODEYG.js";
import "./chunk-6TGAL6XD.js";
import {
  updateHostInteraction
} from "./chunk-RVRLVFVP.js";
import {
  defineCustomElement
} from "./chunk-SUPXC335.js";
import "./chunk-LPMLQD63.js";
import {
  getElementDir
} from "./chunk-K6AYGXUT.js";
import "./chunk-BHXTNOEK.js";
import {
  H,
  Host,
  createEvent,
  h,
  proxyCustomElement
} from "./chunk-IS4TIT4N.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/node_modules/@esri/calcite-components/dist/components/calcite-flow-item.js
var CSS = {
  backButton: "back-button"
};
var ICONS = {
  backLeft: "chevron-left",
  backRight: "chevron-right"
};
var TEXT = {
  back: "Back"
};
var SLOTS2 = {
  headerActionsStart: "header-actions-start",
  headerActionsEnd: "header-actions-end",
  headerMenuActions: "header-menu-actions",
  headerContent: "header-content",
  fab: "fab",
  footer: "footer",
  footerActions: "footer-actions"
};
var flowItemCss = "@keyframes in{0%{opacity:0}100%{opacity:1}}@keyframes in-down{0%{opacity:0;transform:translate3D(0, -5px, 0)}100%{opacity:1;transform:translate3D(0, 0, 0)}}@keyframes in-up{0%{opacity:0;transform:translate3D(0, 5px, 0)}100%{opacity:1;transform:translate3D(0, 0, 0)}}@keyframes in-scale{0%{opacity:0;transform:scale3D(0.95, 0.95, 1)}100%{opacity:1;transform:scale3D(1, 1, 1)}}:root{--calcite-animation-timing:calc(150ms * var(--calcite-internal-duration-factor));--calcite-internal-duration-factor:var(--calcite-duration-factor, 1);--calcite-internal-animation-timing-fast:calc(100ms * var(--calcite-internal-duration-factor));--calcite-internal-animation-timing-medium:calc(200ms * var(--calcite-internal-duration-factor));--calcite-internal-animation-timing-slow:calc(300ms * var(--calcite-internal-duration-factor))}.calcite-animate{opacity:0;animation-fill-mode:both;animation-duration:var(--calcite-animation-timing)}.calcite-animate__in{animation-name:in}.calcite-animate__in-down{animation-name:in-down}.calcite-animate__in-up{animation-name:in-up}.calcite-animate__in-scale{animation-name:in-scale}@media (prefers-reduced-motion: reduce){:root{--calcite-internal-duration-factor:0.01}}:host{box-sizing:border-box;background-color:var(--calcite-ui-foreground-1);color:var(--calcite-ui-text-2);font-size:var(--calcite-font-size--1)}:host *{box-sizing:border-box}:root{--calcite-floating-ui-transition:var(--calcite-animation-timing)}:host([hidden]){display:none}:host([disabled]){pointer-events:none;cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-ui-opacity-disabled)}:host{position:relative;display:flex;inline-size:100%;flex:1 1 auto;overflow:hidden}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.back-button{border-width:0px;border-style:solid;border-color:var(--calcite-ui-border-3);border-inline-end-width:1px}";
var FlowItem = proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.calciteFlowItemBack = createEvent(this, "calciteFlowItemBack", 6);
    this.calciteFlowItemBackClick = createEvent(this, "calciteFlowItemBackClick", 6);
    this.calciteFlowItemScroll = createEvent(this, "calciteFlowItemScroll", 6);
    this.calciteFlowItemClose = createEvent(this, "calciteFlowItemClose", 6);
    this.closable = false;
    this.closed = false;
    this.disabled = false;
    this.loading = false;
    this.menuOpen = false;
    this.showBackButton = false;
    this.handlePanelScroll = (event) => {
      event.stopPropagation();
      this.calciteFlowItemScroll.emit();
    };
    this.handlePanelClose = (event) => {
      event.stopPropagation();
      this.calciteFlowItemClose.emit();
    };
    this.backButtonClick = () => {
      this.calciteFlowItemBackClick.emit();
      this.calciteFlowItemBack.emit();
    };
    this.setBackRef = (node) => {
      this.backButtonEl = node;
    };
    this.setContainerRef = (node) => {
      this.containerEl = node;
    };
    this.getBackLabel = () => {
      return this.intlBack || TEXT.back;
    };
  }
  componentDidRender() {
    updateHostInteraction(this);
  }
  async setFocus() {
    const { backButtonEl, containerEl } = this;
    if (backButtonEl) {
      backButtonEl.setFocus();
      return;
    }
    containerEl === null || containerEl === void 0 ? void 0 : containerEl.setFocus();
  }
  async scrollContentTo(options) {
    var _a;
    await ((_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.scrollContentTo(options));
  }
  renderBackButton() {
    const { el } = this;
    const rtl = getElementDir(el) === "rtl";
    const { showBackButton, backButtonClick } = this;
    const label = this.getBackLabel();
    const icon = rtl ? ICONS.backRight : ICONS.backLeft;
    return showBackButton ? h("calcite-action", { "aria-label": label, class: CSS.backButton, icon, key: "flow-back-button", onClick: backButtonClick, ref: this.setBackRef, scale: "s", slot: "header-actions-start", text: label }) : null;
  }
  render() {
    const { closable, closed, description, disabled, heading, headingLevel, heightScale, intlBack, intlClose, intlOptions, loading, menuOpen, widthScale, backButtonEl } = this;
    const label = this.getBackLabel();
    return h(Host, null, h("calcite-panel", { closable, closed, description, disabled, heading, headingLevel, heightScale, intlBack, intlClose, intlOptions, loading, menuOpen, onCalcitePanelClose: this.handlePanelClose, onCalcitePanelScroll: this.handlePanelScroll, ref: this.setContainerRef, widthScale }, this.renderBackButton(), h("slot", { name: SLOTS2.headerActionsStart, slot: SLOTS.headerActionsStart }), h("slot", { name: SLOTS2.headerActionsEnd, slot: SLOTS.headerActionsEnd }), h("slot", { name: SLOTS2.headerContent, slot: SLOTS.headerContent }), h("slot", { name: SLOTS2.headerMenuActions, slot: SLOTS.headerMenuActions }), h("slot", { name: SLOTS2.fab, slot: SLOTS.fab }), h("slot", { name: SLOTS2.footerActions, slot: SLOTS.footerActions }), h("slot", { name: SLOTS2.footer, slot: SLOTS.footer }), h("slot", null)), backButtonEl ? h("calcite-tooltip", { label, placement: "auto", referenceElement: backButtonEl }, label) : null);
  }
  get el() {
    return this;
  }
  static get style() {
    return flowItemCss;
  }
}, [1, "calcite-flow-item", {
  "closable": [1540],
  "closed": [1540],
  "beforeBack": [16],
  "description": [1],
  "disabled": [516],
  "heading": [1],
  "headingLevel": [514, "heading-level"],
  "heightScale": [513, "height-scale"],
  "intlBack": [1, "intl-back"],
  "intlClose": [1, "intl-close"],
  "intlOptions": [1, "intl-options"],
  "loading": [516],
  "menuOpen": [516, "menu-open"],
  "showBackButton": [516, "show-back-button"],
  "widthScale": [513, "width-scale"],
  "backButtonEl": [32],
  "setFocus": [64],
  "scrollContentTo": [64]
}]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-flow-item", "calcite-action", "calcite-action-menu", "calcite-icon", "calcite-loader", "calcite-panel", "calcite-popover", "calcite-scrim", "calcite-tooltip"];
  components.forEach((tagName) => {
    switch (tagName) {
      case "calcite-flow-item":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, FlowItem);
        }
        break;
      case "calcite-action":
        if (!customElements.get(tagName)) {
          defineCustomElement3();
        }
        break;
      case "calcite-action-menu":
        if (!customElements.get(tagName)) {
          defineCustomElement5();
        }
        break;
      case "calcite-icon":
        if (!customElements.get(tagName)) {
          defineCustomElement();
        }
        break;
      case "calcite-loader":
        if (!customElements.get(tagName)) {
          defineCustomElement2();
        }
        break;
      case "calcite-panel":
        if (!customElements.get(tagName)) {
          defineCustomElement7();
        }
        break;
      case "calcite-popover":
        if (!customElements.get(tagName)) {
          defineCustomElement4();
        }
        break;
      case "calcite-scrim":
        if (!customElements.get(tagName)) {
          defineCustomElement6();
        }
        break;
      case "calcite-tooltip":
        if (!customElements.get(tagName)) {
          defineCustomElement8();
        }
        break;
    }
  });
}
defineCustomElement$1();
var CalciteFlowItem = FlowItem;
var defineCustomElement9 = defineCustomElement$1;
export {
  CalciteFlowItem,
  defineCustomElement9 as defineCustomElement
};
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.
 * v1.0.0-beta.97
 */
//# sourceMappingURL=calcite-flow-item-4EZB4D7E.js.map
