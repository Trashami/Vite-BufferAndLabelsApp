import {
  n as n3,
  r as r3
} from "./chunk-O5SNR6GN.js";
import {
  D,
  h as h4
} from "./chunk-W2R5RR3G.js";
import "./chunk-NVFGGIRQ.js";
import {
  g as g3
} from "./chunk-OC4VQIMD.js";
import {
  V,
  e2 as e4,
  u
} from "./chunk-6W5CPYUF.js";
import {
  h as h2
} from "./chunk-CCMJCJP5.js";
import {
  h as h3,
  j as j3,
  l2 as l3,
  m as m2
} from "./chunk-6NRJP66X.js";
import {
  s as s4
} from "./chunk-KDTWVGPE.js";
import "./chunk-YBAOLQVA.js";
import "./chunk-KLOEF26H.js";
import "./chunk-URFNTHOE.js";
import "./chunk-QISOH77W.js";
import "./chunk-QB3YZMAB.js";
import "./chunk-77RDPZ67.js";
import "./chunk-ZX55SO5Y.js";
import "./chunk-FCIHN4UG.js";
import "./chunk-UWKVAZQ6.js";
import "./chunk-XFDO4CMR.js";
import "./chunk-IVLBGTXL.js";
import "./chunk-GHN7C53L.js";
import "./chunk-XLJB6BCW.js";
import "./chunk-CNM6M4B2.js";
import {
  e as e3
} from "./chunk-7ZIYPBIN.js";
import {
  e as e2
} from "./chunk-GLZIV37N.js";
import "./chunk-IMBIE27L.js";
import {
  p as p2
} from "./chunk-2NKIENHY.js";
import "./chunk-2J2YGTXG.js";
import "./chunk-C6BDJNUQ.js";
import "./chunk-Y3Q6KWWE.js";
import "./chunk-OJ2HHY2O.js";
import "./chunk-4RQKL5NC.js";
import "./chunk-HSH7J5EL.js";
import {
  P as P2
} from "./chunk-757322TP.js";
import "./chunk-P3W4YLFD.js";
import "./chunk-75RMBUYZ.js";
import {
  l as l2
} from "./chunk-MFXTPFHI.js";
import "./chunk-RW4M3CI3.js";
import "./chunk-ZEEU5HOK.js";
import "./chunk-FFVIDMFN.js";
import "./chunk-ZN2ROKCE.js";
import "./chunk-NWBHRPMR.js";
import "./chunk-IIUWTGWW.js";
import "./chunk-K6AYGXUT.js";
import "./chunk-BHXTNOEK.js";
import "./chunk-IS4TIT4N.js";
import "./chunk-I4RYNNL6.js";
import "./chunk-NCONZRBI.js";
import "./chunk-A4HIS5ZJ.js";
import "./chunk-NDQ5FHGV.js";
import {
  j as j2
} from "./chunk-HUQX7WZO.js";
import "./chunk-ZWUEORSX.js";
import "./chunk-QWNKYSI4.js";
import "./chunk-FMJZBZWF.js";
import "./chunk-GOYVJTGW.js";
import "./chunk-ZPYDYUP5.js";
import {
  h
} from "./chunk-36I5ESAQ.js";
import "./chunk-CYI2FLSH.js";
import "./chunk-TDV3ZXCQ.js";
import "./chunk-XJCUKRCO.js";
import "./chunk-SOEQPPQP.js";
import "./chunk-22F6X66Z.js";
import "./chunk-AIDV7EKX.js";
import "./chunk-FZQZIM7U.js";
import "./chunk-YM6PUX7G.js";
import "./chunk-QEYOWTXD.js";
import "./chunk-CZBRZ6SU.js";
import "./chunk-KDO6J2FO.js";
import "./chunk-RT3T2K4S.js";
import "./chunk-WJCI2CGX.js";
import "./chunk-REIQNAQW.js";
import {
  g as g2
} from "./chunk-J6LQZWZI.js";
import {
  y as y2
} from "./chunk-OD3FDQCI.js";
import "./chunk-J2PJNRU7.js";
import "./chunk-56SPM3WK.js";
import "./chunk-XMZAPOBR.js";
import "./chunk-BLJKKR5D.js";
import "./chunk-ZGNCYHMZ.js";
import "./chunk-X2S4RQJ4.js";
import "./chunk-FUPLN7UM.js";
import "./chunk-376OPXM4.js";
import "./chunk-DER356EU.js";
import "./chunk-MZIWIEIR.js";
import "./chunk-TQEOEDAZ.js";
import "./chunk-SHFHZMHO.js";
import {
  c
} from "./chunk-NRP45AHD.js";
import "./chunk-IWQ7452U.js";
import "./chunk-NAN5J6QS.js";
import "./chunk-B4DKBAM3.js";
import "./chunk-6M2AHKYV.js";
import "./chunk-SZIJNKCV.js";
import "./chunk-6O43OEU5.js";
import "./chunk-J2K7ZDSV.js";
import "./chunk-2UML3WQZ.js";
import "./chunk-KXVMEIWT.js";
import {
  j
} from "./chunk-UDND2Z3V.js";
import "./chunk-23Y3DIC6.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-RAX2HD42.js";
import "./chunk-ZYRIJWLX.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import {
  f,
  g,
  m2 as m,
  r as r2
} from "./chunk-3MNMDUQZ.js";
import {
  w
} from "./chunk-UWG37XSU.js";
import "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import "./chunk-RXYULINL.js";
import {
  P,
  f as f2,
  l,
  w as w2
} from "./chunk-5NXILPDI.js";
import {
  n as n2
} from "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-XQN7F674.js";
import "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import "./chunk-KAN4HXCG.js";
import "./chunk-4FEGON7M.js";
import "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-CXFRNDG4.js";
import "./chunk-7QMMKGW4.js";
import {
  e,
  n2 as n,
  t5 as t2,
  y
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import "./chunk-MJXQTGI2.js";
import {
  s as s3
} from "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import {
  s2
} from "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import {
  p,
  q,
  r,
  s,
  t
} from "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/views/draw/support/Reshape.js
var B = class {
  constructor(e5, t3, i) {
    this.graphic = e5, this.mover = t3, this.selected = i, this.type = "reshape-start";
  }
};
var J = class {
  constructor(e5, t3, i) {
    this.graphic = e5, this.mover = t3, this.selected = i, this.type = "reshape";
  }
};
var Q = class {
  constructor(e5, t3, i) {
    this.graphic = e5, this.mover = t3, this.selected = i, this.type = "reshape-stop";
  }
};
var W = class {
  constructor(e5, t3, i) {
    this.mover = e5, this.dx = t3, this.dy = i, this.type = "move-start";
  }
};
var X = class {
  constructor(e5, t3, i) {
    this.mover = e5, this.dx = t3, this.dy = i, this.type = "move";
  }
};
var Y = class {
  constructor(e5, t3, i) {
    this.mover = e5, this.dx = t3, this.dy = i, this.type = "move-stop";
  }
};
var Z = class {
  constructor(e5) {
    this.added = e5, this.type = "vertex-select";
  }
};
var $ = class {
  constructor(e5) {
    this.removed = e5, this.type = "vertex-deselect";
  }
};
var ee = class {
  constructor(e5, t3, i, s5) {
    this.added = e5, this.graphic = t3, this.oldGraphic = i, this.vertices = s5, this.type = "vertex-add";
  }
};
var te = class {
  constructor(e5, t3, i, s5) {
    this.removed = e5, this.graphic = t3, this.oldGraphic = i, this.vertices = s5, this.type = "vertex-remove";
  }
};
var ie = h2.reshapeGraphics;
var se = { vertices: { default: new y2({ style: "circle", size: ie.vertex.size, color: ie.vertex.color, outline: { color: ie.vertex.outlineColor, width: 1 } }), hover: new y2({ style: "circle", size: ie.vertex.hoverSize, color: ie.vertex.hoverColor, outline: { color: ie.vertex.hoverOutlineColor, width: 1 } }), selected: new y2({ style: "circle", size: ie.selected.size, color: ie.selected.color, outline: { color: ie.selected.outlineColor, width: 1 } }) }, midpoints: { default: new y2({ style: "circle", size: ie.midpoint.size, color: ie.midpoint.color, outline: { color: ie.midpoint.outlineColor, width: 1 } }), hover: new y2({ style: "circle", size: ie.midpoint.size, color: ie.midpoint.color, outline: { color: ie.midpoint.outlineColor, width: 1 } }) } };
var oe = class extends n2.EventedAccessor {
  constructor(e5) {
    super(e5), this._activeOperationInfo = null, this._editGeometryOperations = null, this._handles = new t2(), this._graphicAttributes = { esriSketchTool: "box" }, this._mover = null, this._snappingTask = null, this._stagedVertex = null, this._tooltip = null, this._viewHandles = new t2(), this.callbacks = { onReshapeStart() {
    }, onReshape() {
    }, onReshapeStop() {
    }, onMoveStart() {
    }, onMove() {
    }, onMoveStop() {
    }, onGraphicClick() {
    } }, this.enableMidpoints = true, this.enableMovement = true, this.enableVertices = true, this.graphic = null, this.layer = null, this.midpointGraphics = new j(), this.midpointSymbol = new y2({ style: "circle", size: 6, color: [200, 200, 200], outline: { color: [100, 100, 100], width: 1 } }), this.selectedVertices = [], this.snappingManager = null, this.tooltipOptions = new p2(), this.type = "reshape", this.vertexGraphics = new j(), this.view = null;
  }
  initialize() {
    const e5 = this.view;
    this._highlightHelper = new h4({ view: e5 }), this._setup(), this._handles.add([f2(() => e5 == null ? void 0 : e5.ready, () => {
      const { layer: e6, view: t3 } = this;
      e2(t3, e6), this._viewHandles.add(t3.on("key-down", (e7) => this._keyDownHandler(e7), P2.TOOL));
    }, { once: true, initial: true }), P(() => this.graphic, () => this.refresh()), P(() => this.layer, (e6, t3) => {
      t3 && (this._clearSelection(), this._resetGraphics(t3)), this.refresh();
    }), P(() => this.enableMidpoints, () => this.refresh()), l(() => this.tooltipOptions.enabled, (e6) => {
      this._tooltip = e6 ? new m2({ view: this.view }) : s(this._tooltip);
    }, w2)]);
  }
  destroy() {
    var _a;
    this._reset(), (_a = this._mover) == null ? void 0 : _a.destroy(), this._mover = null, this._tooltip = s(this._tooltip), this._handles = s(this._handles), this._viewHandles = s(this._viewHandles);
  }
  set highlightsEnabled(e5) {
    var _a;
    (_a = this._highlightHelper) == null ? void 0 : _a.removeAll(), this._set("highlightsEnabled", e5), this._setUpHighlights();
  }
  get state() {
    const e5 = !!this.get("view.ready"), t3 = !(!this.get("graphic") || !this.get("layer"));
    return e5 && t3 ? "active" : e5 ? "ready" : "disabled";
  }
  set symbols(e5) {
    const { midpoints: t3 = se.midpoints, vertices: i = se.vertices } = e5 || {};
    this._set("symbols", { midpoints: t3, vertices: i });
  }
  isUIGraphic(e5) {
    const t3 = [];
    return this.graphic && t3.push(this.graphic), t3.concat(this.vertexGraphics.items, this.midpointGraphics.items), t3.length && t3.includes(e5);
  }
  refresh() {
    this._reset(), this._setup();
  }
  reset() {
    this.graphic = null;
  }
  clearSelection() {
    this._clearSelection();
  }
  removeSelectedVertices() {
    this.selectedVertices.length && this._removeVertices(this.selectedVertices);
  }
  _setup() {
    const { graphic: e5, layer: t3 } = this;
    if (!t3 || !e5 || t(e5.geometry))
      return;
    const i = e5.geometry;
    "mesh" !== i.type && "extent" !== i.type ? ("polygon" === i.type && g(i), this._setUpHighlights(), this._setupGraphics(), this._setupMover()) : this._logGeometryTypeError();
  }
  _setUpHighlights() {
    this.highlightsEnabled && this.graphic && this._highlightHelper.add(this.graphic);
  }
  _setUpGeometryHelper() {
    const e5 = this.graphic.geometry;
    if (t(e5) || "mesh" === e5.type || "extent" === e5.type)
      return void this._logGeometryTypeError();
    const t3 = "multipoint" === e5.type ? new m({ paths: e5.points, spatialReference: e5.spatialReference }) : e5;
    this._editGeometryOperations = V.fromGeometry(t3, l2.Local);
  }
  _saveSnappingContextForHandle(e5, t3) {
    var _a;
    this._snappingGraphicsLayer = new h({ listMode: "hide", internal: true, title: "Reshape snapping layer" }), this.view.map.layers.add(this._snappingGraphicsLayer), this._snappingContext = new e4({ editGeometryOperations: this._editGeometryOperations, elevationInfo: { mode: "on-the-ground", offset: 0 }, pointer: ((_a = t3.viewEvent) == null ? void 0 : _a.pointerType) || "mouse", excludeFeature: this.graphic, visualizer: new g3(this._snappingGraphicsLayer), vertexHandle: this._getVertexFromEditGeometry(e5) });
  }
  _reset() {
    this._clearSelection(), this._highlightHelper.removeAll(), this._updateTooltip(), this._resetGraphics(), this._resetSnappingStateVars(), this._activeOperationInfo = null, this._mover && this._mover.destroy(), this._mover = null, this.view.cursor = "default";
  }
  _resetSnappingStateVars() {
    var _a;
    r(this.snappingManager) && this.snappingManager.doneSnapping(), r(this._snappingGraphicsLayer) && (((_a = this.view) == null ? void 0 : _a.map) && this.view.map.layers.remove(this._snappingGraphicsLayer), this._snappingGraphicsLayer.destroy()), this._editGeometryOperations = s(this._editGeometryOperations), this._snappingTask = p(this._snappingTask), this._snappingTask = null, this._snappingContext = null, this._stagedVertex = null;
  }
  _resetGraphics(e5) {
    this._removeMidpointGraphics(e5), this._removeVertexGraphics(e5), this._set("selectedVertices", []);
  }
  _removeMidpointGraphics(e5) {
    const t3 = e5 || this.layer;
    t3 && t3.removeMany(this.midpointGraphics.items), this.midpointGraphics.items.forEach((e6) => e6.destroy()), this.midpointGraphics.removeAll();
  }
  _removeVertexGraphics(e5) {
    const t3 = e5 || this.layer;
    t3 && t3.removeMany(this.vertexGraphics.items), this.vertexGraphics.items.forEach((e6) => e6.destroy()), this.vertexGraphics.removeAll();
  }
  _getCoordinatesForUI(e5) {
    const t3 = r2(e5.clone());
    if ("polygon" === e5.type)
      for (const i of t3) {
        const e6 = i[i.length - 1];
        i[0][0] === e6[0] && i[0][1] === e6[1] && i.length > 2 && i.pop();
      }
    return t3;
  }
  _setupGraphics() {
    const e5 = this.graphic.geometry;
    if (r(e5) && ("polyline" === e5.type || "polygon" === e5.type)) {
      const t3 = this._getCoordinatesForUI(e5);
      this.enableMidpoints && this._setUpMidpointGraphics(t3), this.enableVertices && this._setUpVertexGraphics(t3);
    }
  }
  _setUpMidpointGraphics(e5) {
    this._removeMidpointGraphics();
    const t3 = this._createMidpointGraphics(e5);
    this.midpointGraphics.addMany(t3), this.layer.addMany(t3);
  }
  _setUpVertexGraphics(e5) {
    this._removeVertexGraphics();
    const t3 = this._createVertexGraphics(e5);
    this.vertexGraphics.addMany(t3), this._storeRelatedVertexIndices(), this.layer.addMany(t3);
  }
  _createVertexGraphics(e5) {
    const { _graphicAttributes: i, symbols: s5, view: { spatialReference: o } } = this, r4 = [];
    return e5 == null ? void 0 : e5.forEach((e6, n4) => {
      e6.forEach((e7, a) => {
        var _a;
        const [h5, p3] = e7;
        r4.push(new g2({ geometry: new w({ x: h5, y: p3, spatialReference: o }), symbol: (_a = s5 == null ? void 0 : s5.vertices) == null ? void 0 : _a.default, attributes: { ...i, pathIndex: n4, pointIndex: a } }));
      });
    }), r4;
  }
  _createMidpointGraphics(e5) {
    const { _graphicAttributes: i, symbols: s5, view: { spatialReference: o } } = this, r4 = [];
    return e5 == null ? void 0 : e5.forEach((e6, n4) => {
      e6.forEach((a, h5) => {
        const [p3, c2] = a, l4 = e6[h5 + 1] ? h5 + 1 : 0;
        if ("polygon" === q(this.graphic.geometry, "type") || 0 !== l4) {
          const [a2, d] = e6[l4], [m3, v] = f([p3, c2], [a2, d]);
          r4.push(new g2({ geometry: new w({ x: m3, y: v, spatialReference: o }), symbol: s5.midpoints.default, attributes: { ...i, pathIndex: n4, pointIndexStart: h5, pointIndexEnd: l4 } }));
        }
      });
    }), r4;
  }
  _storeRelatedVertexIndices() {
    const e5 = this.vertexGraphics.items;
    if (!e5)
      return;
    const t3 = e5.map(({ geometry: e6 }) => ({ x: e6.x, y: e6.y }));
    for (let i = 0; i < t3.length; i++) {
      const s5 = [];
      for (let e6 = 0; e6 < t3.length; e6++) {
        if (i === e6)
          continue;
        const o = t3[i], r4 = t3[e6];
        o.x === r4.x && o.y === r4.y && s5.push(e6);
      }
      e5[i].attributes.relatedGraphicIndices = s5;
    }
  }
  _setupMover() {
    const { enableMovement: e5, graphic: t3, midpointGraphics: i, vertexGraphics: s5, view: o } = this, r4 = s5.concat(i).items;
    e5 && r4.push(t3), this._mover = new D({ enableMoveAllGraphics: false, highlightsEnabled: false, indicatorsEnabled: false, graphics: r4, view: o, callbacks: { onGraphicClick: (e6) => this._onGraphicClickCallback(e6), onGraphicMoveStart: (e6) => this._onGraphicMoveStartCallback(e6), onGraphicMove: (e6) => this._onGraphicMoveCallback(e6), onGraphicMoveStop: (e6) => this._onGraphicMoveStopCallback(e6), onGraphicPointerOver: (e6) => this._onGraphicPointerOverCallback(e6), onGraphicPointerOut: (e6) => this._onGraphicPointerOutCallback(e6) } });
  }
  _onGraphicClickCallback(e5) {
    e5.viewEvent.stopPropagation();
    const t3 = e5.graphic;
    if (t3 === this.graphic)
      this.clearSelection(), this.emit("graphic-click", e5), this.callbacks.onGraphicClick && this.callbacks.onGraphicClick(e5);
    else if (this._isMidpoint(t3)) {
      if (2 === e5.viewEvent.button)
        return;
      const i = this.graphic.clone(), s5 = this._createVertexFromMidpoint(t3);
      this.refresh(), this._emitVertexAddEvent([t3], i, s5);
    } else if (this._isVertex(t3))
      if (e5.viewEvent.stopPropagation(), 2 === e5.viewEvent.button)
        this._removeVertices(t3);
      else {
        e5.viewEvent.native.shiftKey || this._clearSelection(), this.selectedVertices.includes(t3) ? this._removeFromSelection(t3, true) : this._addToSelection(t3);
      }
  }
  _setUpOperation(e5) {
    const { graphic: t3, dx: i, dy: s5 } = e5, o = t3 === this.graphic;
    this._resetSnappingStateVars(), this._setUpGeometryHelper(), this._saveSnappingContextForHandle(t3, e5), this._activeOperationInfo = { target: this.graphic, mover: t3, operationType: o ? "move" : "reshape", totalDx: i, totalDy: s5 };
  }
  _onGraphicMoveStartCallback(e5) {
    const { dx: t3, dy: i, graphic: s5 } = e5;
    if (s5 === this.graphic) {
      const { geometry: o } = s5;
      return this._setUpOperation(e5), this._emitMoveStartEvent(t3, i), void (r(o) && "point" === o.type && this._onHandleMove(s5, t3, i, e5, () => {
        this._updateTooltip(this.graphic, e5.viewEvent), this._emitMoveEvent(t3, i);
      }));
    }
    if (!this.selectedVertices.includes(s5)) {
      if (this._clearSelection(), this._isMidpoint(s5)) {
        const e6 = this.graphic.clone(), t4 = this._createVertexFromMidpoint(s5);
        this._emitVertexAddEvent([s5], e6, t4);
      }
      this._addToSelection(s5);
    }
    this._setUpOperation(e5), this._emitReshapeStartEvent(s5), this._onHandleMove(s5, t3, i, e5, () => {
      this._updateTooltip(s5, e5.viewEvent), this._emitReshapeEvent(s5);
    });
  }
  _onGraphicMoveCallback(e5) {
    const { dx: t3, dy: i, graphic: s5 } = e5;
    this._activeOperationInfo.totalDx += t3, this._activeOperationInfo.totalDy += i;
    const { operationType: o } = this._activeOperationInfo, { geometry: r4 } = s5;
    if (!t(r4)) {
      if ("move" !== o)
        this._onHandleMove(s5, t3, i, e5, () => {
          this._updateTooltip(s5, e5.viewEvent), this._emitReshapeEvent(s5);
        });
      else if ("point" === r4.type)
        this._onHandleMove(s5, t3, i, e5, () => {
          this._updateTooltip(this.graphic, e5.viewEvent), this._emitMoveEvent(t3, i);
        });
      else if ("polyline" === r4.type || "polygon" === r4.type) {
        const s6 = this._getCoordinatesForUI(r4);
        this._updateVertexGraphicLocations(s6), this._updateTooltip(this.graphic, e5.viewEvent), this._emitMoveEvent(t3, i);
      }
    }
  }
  _onGraphicMoveStopCallback(e5) {
    const { dx: t3, dy: i, graphic: s5 } = e5, { operationType: o } = this._activeOperationInfo;
    this._activeOperationInfo.totalDx += t3, this._activeOperationInfo.totalDy += i, this._onHandleMove(s5, t3, i, e5, () => "move" === o ? this._emitMoveStopEvent() : this._emitReshapeStopEvent(s5)), this._isMidpoint(s5) ? this.refresh() : (this._updateTooltip(this._isVertex(s5) ? s5 : null), this._resetSnappingStateVars(), this._activeOperationInfo = null);
  }
  _updateVertexGraphicLocations(e5) {
    const t3 = this.view.spatialReference;
    for (const i of this.vertexGraphics) {
      const { pathIndex: s5, pointIndex: o } = i.attributes, [r4, n4] = e5[s5][o];
      i.geometry = new w({ x: r4, y: n4, spatialReference: t3 });
    }
    this._updateMidpointGraphicLocations(e5);
  }
  _updateMidpointGraphicLocations(e5) {
    for (const t3 of this.midpointGraphics) {
      const { pathIndex: i, pointIndexStart: s5, pointIndexEnd: o } = t3.attributes, [r4, n4] = e5[i][s5], [a, h5] = e5[i][o], [p3, c2] = f([r4, n4], [a, h5]);
      t3.geometry = new w({ x: p3, y: c2, spatialReference: this.view.spatialReference });
    }
  }
  _getIndicesForVertexGraphic({ attributes: e5 }) {
    return [(e5 == null ? void 0 : e5.pathIndex) || 0, (e5 == null ? void 0 : e5.pointIndex) || 0];
  }
  _getVertexFromEditGeometry(e5) {
    const [t3, i] = this._getIndicesForVertexGraphic(e5);
    return this._editGeometryOperations.data.components[t3].vertices[i];
  }
  _onHandleMove(e5, t3, s5, o, r4) {
    if (p(this._snappingTask), !this._snappingContext)
      return;
    const n4 = e5.geometry, a = "graphic-move-stop" === o.type;
    if (r(this.snappingManager) && this.selectedVertices.length < 2 && !a) {
      const o2 = this.snappingManager;
      this._stagedVertex = o2.update({ point: n4, context: this._snappingContext }), this._syncGeometryAfterVertexMove(e5, new w(this._stagedVertex), t3, s5, a), r4(), this._snappingTask = j2(async (i) => {
        const h5 = await o2.snap({ point: n4, context: this._snappingContext, signal: i });
        h5.valid && (this._stagedVertex = h5.apply(), this._syncGeometryAfterVertexMove(e5, new w(this._stagedVertex), t3, s5, a), r4());
      });
    } else {
      const i = r(this._stagedVertex) ? new w(this._stagedVertex) : n4;
      this._syncGeometryAfterVertexMove(e5, i, t3, s5, a), r4();
    }
  }
  async _syncGeometryAfterVertexMove(e5, t3, i, s5, o = false) {
    const r4 = this._editGeometryOperations.data.geometry;
    if ("point" === r4.type)
      e5.geometry = t3;
    else {
      const { x: n4, y: a } = t3, [h5, p3] = this._getIndicesForVertexGraphic(e5);
      let c2 = r2(r4);
      const l4 = c2[h5].length - 1;
      c2[h5][p3] = [n4, a], "polygon" === r4.type && (0 === p3 ? c2[h5][l4] = [n4, a] : p3 === l4 && (c2[h5][0] = [n4, a])), this._isVertex(e5) && (c2 = this._moveRelatedCoordinates(c2, e5, n4, a), c2 = this._moveSelectedHandleCoordinates(c2, e5, i, s5, "polygon" === r4.type), this._updateMidpointGraphicLocations(c2)), this.graphic.geometry = r4.clone();
      const d = this._getVertexFromEditGeometry(e5), m3 = n4 - d.pos[0], v = a - d.pos[1];
      this._editGeometryOperations.moveVertices([d], m3, v, 0), o && (this._mover ? this._mover.updateGeometry(this._mover.graphics.indexOf(e5), t3) : e5.geometry = t3);
    }
  }
  _moveRelatedCoordinates(e5, t3, i, s5) {
    const { relatedGraphicIndices: o } = t3.attributes;
    for (const r4 of o) {
      const o2 = this.vertexGraphics.getItemAt(r4), { pathIndex: n4, pointIndex: a } = o2.attributes;
      e5[n4][a] = [i, s5], o2.geometry = t3.geometry;
    }
    return e5;
  }
  _moveSelectedHandleCoordinates(e5, t3, i, s5, o) {
    for (const r4 of this.selectedVertices)
      if (r4 !== t3) {
        const { pathIndex: t4, pointIndex: n4, relatedGraphicIndices: a } = r4.attributes, h5 = s4(r4.geometry, i, s5, this.view), p3 = e5[t4].length - 1;
        e5[t4][n4] = [h5.x, h5.y], r4.geometry = h5, o && (0 === n4 ? e5[t4][p3] = [h5.x, h5.y] : n4 === p3 && (e5[t4][0] = [h5.x, h5.y]));
        for (const i2 of a) {
          const t5 = this.vertexGraphics.getItemAt(i2), { pathIndex: s6, pointIndex: o2 } = t5.attributes;
          e5[s6][o2] = [h5.x, h5.y], t5.geometry = h5;
        }
      }
    return e5;
  }
  _onGraphicPointerOverCallback(e5) {
    const t3 = e5.graphic, i = this._isVertex(t3);
    i && !this._isSelected(t3) && (t3.symbol = this.symbols.vertices.hover), this._updateTooltip(i ? t3 : null), this._updateHoverCursor(t3);
  }
  _onGraphicPointerOutCallback(e5) {
    const t3 = e5.graphic;
    this._isVertex(t3) && !this._isSelected(t3) && (t3.symbol = this.symbols.vertices.default), this.view.cursor = "default", this._updateTooltip();
  }
  _createVertexFromMidpoint(e5) {
    const { _graphicAttributes: t3, graphic: i } = this, s5 = i.geometry;
    if (t(s5) || "polygon" !== s5.type && "polyline" !== s5.type)
      return [];
    const o = s5.clone(), r4 = [], { pathIndex: n4, pointIndexStart: a, pointIndexEnd: h5 } = e5.attributes, { x: c2, y: l4 } = e5.geometry, d = 0 === h5 ? a + 1 : h5, m3 = r2(o);
    return m3[n4].splice(d, 0, [c2, l4]), e5.attributes = { ...t3, pathIndex: n4, pointIndex: d, relatedGraphicIndices: [] }, r4.push({ coordinates: m3[n4][d], componentIndex: n4, vertexIndex: d }), this.graphic.geometry = o, r4;
  }
  _addToSelection(e5) {
    e5 instanceof g2 && (e5 = [e5]);
    for (const t3 of e5)
      t3.symbol = this.symbols.vertices.selected;
    this._set("selectedVertices", this.selectedVertices.concat(e5)), this._emitSelectEvent(e5);
  }
  _removeFromSelection(e5, i) {
    const { vertices: s5 } = this.symbols, o = i ? s5.hover : s5.default;
    e5 instanceof g2 && (e5 = [e5]);
    for (const t3 of e5)
      this.selectedVertices.splice(this.selectedVertices.indexOf(t3), 1), this._set("selectedVertices", this.selectedVertices), t3.set("symbol", o);
    this._emitDeselectEvent(e5);
  }
  _clearSelection() {
    if (this.selectedVertices.length) {
      const e5 = this.selectedVertices;
      for (const t3 of this.selectedVertices)
        t3.set("symbol", this.symbols.vertices.default);
      this._set("selectedVertices", []), this._emitDeselectEvent(e5);
    }
  }
  _keyDownHandler(e5) {
    e3.delete.includes(e5.key) && !e5.repeat && this.selectedVertices.length && this._removeVertices(this.selectedVertices);
  }
  _removeVertices(e5) {
    const i = this.graphic.geometry;
    if (t(i) || "polygon" !== i.type && "polyline" !== i.type)
      return;
    if ("polygon" === i.type && this.vertexGraphics.length < 4 || this.vertexGraphics.length < 3)
      return;
    e5 instanceof g2 && (e5 = [e5]);
    const s5 = this.graphic.clone(), o = i.clone();
    let r4 = r2(o);
    const n4 = [];
    e5 instanceof g2 && (e5 = [e5]);
    for (const t3 of e5) {
      const { x: e6, y: i2 } = t3.geometry;
      for (let t4 = 0; t4 < r4.length; t4++) {
        const s6 = r4[t4];
        for (let o2 = 0; o2 < s6.length; o2++) {
          const [a, h5] = s6[o2];
          e6 === a && i2 === h5 && (n4.push({ coordinates: r4[t4][o2], componentIndex: t4, vertexIndex: o2 }), r4[t4].splice(Number(o2), 1));
        }
      }
    }
    if ("polygon" === o.type)
      r4 = r4.filter((e6) => {
        if (e6.length < 2)
          return false;
        const [t3, i2] = e6[0], [s6, o2] = e6[e6.length - 1];
        return (2 !== e6.length || t3 !== s6 || i2 !== o2) && (t3 === s6 && i2 === o2 || e6.push(e6[0]), true);
      }), o.rings = r4;
    else {
      for (const e6 of r4)
        1 === e6.length && r4.splice(r4.indexOf(e6), 1);
      o.paths = r4;
    }
    this.graphic.geometry = o, this.refresh(), this._emitVertexRemoveEvent(e5, s5, n4);
  }
  _isVertex(e5) {
    return this.vertexGraphics.includes(e5);
  }
  _isSelected(e5) {
    return this._isVertex(e5) && this.selectedVertices.includes(e5);
  }
  _isMidpoint(e5) {
    return this.midpointGraphics.includes(e5);
  }
  _updateHoverCursor(e5) {
    this.view.cursor = this._isMidpoint(e5) ? "copy" : "move";
  }
  _updateTooltip(e5, t3) {
    t(this._tooltip) || (e5 ? e5 === this.graphic ? this._updateMoveGraphicTooltip(t3) : this._updateMoveVertexTooltip(t3) : this._tooltip.clear());
  }
  _updateMoveGraphicTooltip(e5) {
    const { _tooltip: t3, tooltipOptions: i, view: s5 } = this;
    if (t(t3))
      return;
    const o = new r3({ tooltipOptions: i });
    if (e5) {
      const { x: t4, y: i2 } = e5.origin, r4 = s5.toMap(e5), n4 = s5.toMap(c(t4, i2)), a = h3(n4, r4);
      o.distance = r(a) ? a : j3;
    }
    t3.info = o;
  }
  _updateMoveVertexTooltip(e5) {
    const { _tooltip: t3, graphic: { geometry: i }, tooltipOptions: s5, view: o } = this;
    if (t(t3))
      return;
    const r4 = new n3({ tooltipOptions: s5 });
    if (r(i) && ("polygon" === i.type ? r4.area = u(i) : "polyline" === i.type && (r4.totalLength = l3(i))), e5) {
      const { x: t4, y: i2 } = e5.origin, s6 = o.toMap(e5), n4 = o.toMap(c(t4, i2)), a = h3(n4, s6);
      r4.distance = r(a) ? a : j3;
    }
    t3.info = r4;
  }
  _emitMoveStartEvent(e5, t3) {
    const i = new W(this.graphic, e5, t3);
    this.emit("move-start", i), this.callbacks.onMoveStart && this.callbacks.onMoveStart(i);
  }
  _emitMoveEvent(e5, t3) {
    const i = new X(this.graphic, e5, t3);
    this.emit("move", i), this.callbacks.onMove && this.callbacks.onMove(i);
  }
  _emitMoveStopEvent() {
    const { totalDx: e5, totalDy: t3 } = this._activeOperationInfo, i = new Y(this.graphic, e5, t3);
    this.emit("move-stop", i), this.callbacks.onMoveStop && this.callbacks.onMoveStop(i);
  }
  _emitReshapeStartEvent(e5) {
    const t3 = new B(this.graphic, e5, this.selectedVertices);
    this.emit("reshape-start", t3), this.callbacks.onReshapeStart && this.callbacks.onReshapeStart(t3);
  }
  _emitReshapeEvent(e5) {
    const t3 = new J(this.graphic, e5, this.selectedVertices);
    this.emit("reshape", t3), this.callbacks.onReshape && this.callbacks.onReshape(t3);
  }
  _emitReshapeStopEvent(e5) {
    const t3 = new Q(this.graphic, e5, this.selectedVertices);
    this.emit("reshape-stop", t3), this.callbacks.onReshapeStop && this.callbacks.onReshapeStop(t3);
  }
  _emitSelectEvent(e5) {
    const t3 = new Z(e5);
    this.emit("select", t3), this.callbacks.onVertexSelect && this.callbacks.onVertexSelect(t3);
  }
  _emitDeselectEvent(e5) {
    const t3 = new $(e5);
    this.emit("deselect", t3), this.callbacks.onVertexDeselect && this.callbacks.onVertexDeselect(t3);
  }
  _emitVertexAddEvent(e5, t3, i) {
    const s5 = new ee(e5, this.graphic, t3, i);
    this.emit("vertex-add", s5), this.callbacks.onVertexAdd && this.callbacks.onVertexAdd(s5);
  }
  _emitVertexRemoveEvent(e5, t3, i) {
    const s5 = new te(e5, this.graphic, t3, i);
    this.emit("vertex-remove", s5), this.callbacks.onVertexRemove && this.callbacks.onVertexRemove(s5);
  }
  _logGeometryTypeError() {
    s2.getLogger(this.declaredClass).error(new s3("reshape:invalid-geometry", "Reshape operation not supported for the provided graphic. The geometry type is not supported."));
  }
};
e([y()], oe.prototype, "_tooltip", void 0), e([y()], oe.prototype, "callbacks", void 0), e([y()], oe.prototype, "enableMidpoints", void 0), e([y()], oe.prototype, "enableMovement", void 0), e([y()], oe.prototype, "enableVertices", void 0), e([y()], oe.prototype, "graphic", void 0), e([y({ value: true })], oe.prototype, "highlightsEnabled", null), e([y()], oe.prototype, "layer", void 0), e([y({ readOnly: true })], oe.prototype, "midpointGraphics", void 0), e([y()], oe.prototype, "midpointSymbol", void 0), e([y({ readOnly: true })], oe.prototype, "selectedVertices", void 0), e([y()], oe.prototype, "snappingManager", void 0), e([y({ readOnly: true })], oe.prototype, "state", null), e([y({ value: se })], oe.prototype, "symbols", null), e([y({ type: p2 })], oe.prototype, "tooltipOptions", void 0), e([y({ readOnly: true })], oe.prototype, "type", void 0), e([y({ readOnly: true })], oe.prototype, "vertexGraphics", void 0), e([y()], oe.prototype, "view", void 0), oe = e([n("esri.views.draw.support.Reshape")], oe);
var re = oe;
export {
  re as default
};
//# sourceMappingURL=Reshape-6KPL2XJN.js.map
