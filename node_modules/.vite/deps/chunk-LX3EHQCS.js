import {
  i as i2,
  p,
  s2
} from "./chunk-ELKWN2M6.js";
import {
  g,
  u2
} from "./chunk-5OCDKMG5.js";
import {
  s
} from "./chunk-OF6PIPJD.js";
import {
  e as e5
} from "./chunk-6WTG5RYO.js";
import {
  o as o3
} from "./chunk-ZSBQER52.js";
import {
  d
} from "./chunk-GDICPMRK.js";
import {
  t as t3
} from "./chunk-BW4YO4QD.js";
import {
  n as n3
} from "./chunk-S6WNSMC7.js";
import {
  e as e6
} from "./chunk-JPRTIOCM.js";
import {
  n as n2,
  t as t2
} from "./chunk-AMNM3DGI.js";
import {
  t
} from "./chunk-RNRS2JL4.js";
import {
  h
} from "./chunk-SBPLVEUA.js";
import {
  u
} from "./chunk-3IISYLTT.js";
import {
  v
} from "./chunk-7QNA4ADD.js";
import {
  e as e4
} from "./chunk-FGA4AGTH.js";
import {
  o as o2
} from "./chunk-MYQCUAHK.js";
import {
  e as e2
} from "./chunk-C6PUUIY2.js";
import {
  e as e3
} from "./chunk-BQL7VXQR.js";
import {
  o as o4
} from "./chunk-735C75BI.js";
import {
  n,
  o
} from "./chunk-ZLTZ3KAT.js";
import {
  O
} from "./chunk-RUM3DXFX.js";
import {
  e
} from "./chunk-OOLCFNXJ.js";
import {
  i
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/RibbonLineTechniqueConfiguration.js
var r;
!function(o5) {
  o5[o5.BUTT = 0] = "BUTT", o5[o5.SQUARE = 1] = "SQUARE", o5[o5.ROUND = 2] = "ROUND", o5[o5.COUNT = 3] = "COUNT";
}(r || (r = {}));
var s3 = class extends s {
  constructor() {
    super(...arguments), this.output = h.Color, this.capType = r.BUTT, this.transparencyPassType = o2.NONE, this.occluder = false, this.hasSlicePlane = false, this.hasPolygonOffset = false, this.writeDepth = false, this.draped = false, this.stippleEnabled = false, this.stippleOffColorEnabled = false, this.stippleScaleWithLineWidth = false, this.stipplePreferContinuous = true, this.roundJoins = false, this.applyMarkerOffset = false, this.vvSize = false, this.vvColor = false, this.vvOpacity = false, this.falloffEnabled = false, this.innerColorEnabled = false, this.hasOccludees = false, this.hasMultipassTerrain = false, this.cullAboveGround = false, this.wireframe = false, this.objectAndLayerIdColorInstanced = false;
  }
};
e([e5({ count: h.COUNT })], s3.prototype, "output", void 0), e([e5({ count: r.COUNT })], s3.prototype, "capType", void 0), e([e5({ count: o2.COUNT })], s3.prototype, "transparencyPassType", void 0), e([e5()], s3.prototype, "occluder", void 0), e([e5()], s3.prototype, "hasSlicePlane", void 0), e([e5()], s3.prototype, "hasPolygonOffset", void 0), e([e5()], s3.prototype, "writeDepth", void 0), e([e5()], s3.prototype, "draped", void 0), e([e5()], s3.prototype, "stippleEnabled", void 0), e([e5()], s3.prototype, "stippleOffColorEnabled", void 0), e([e5()], s3.prototype, "stippleScaleWithLineWidth", void 0), e([e5()], s3.prototype, "stipplePreferContinuous", void 0), e([e5()], s3.prototype, "roundJoins", void 0), e([e5()], s3.prototype, "applyMarkerOffset", void 0), e([e5()], s3.prototype, "vvSize", void 0), e([e5()], s3.prototype, "vvColor", void 0), e([e5()], s3.prototype, "vvOpacity", void 0), e([e5()], s3.prototype, "falloffEnabled", void 0), e([e5()], s3.prototype, "innerColorEnabled", void 0), e([e5()], s3.prototype, "hasOccludees", void 0), e([e5()], s3.prototype, "hasMultipassTerrain", void 0), e([e5()], s3.prototype, "cullAboveGround", void 0), e([e5()], s3.prototype, "wireframe", void 0), e([e5({ constValue: true })], s3.prototype, "stippleRequiresClamp", void 0), e([e5({ constValue: true })], s3.prototype, "stippleRequiresStretchMeasure", void 0), e([e5({ constValue: true })], s3.prototype, "hasVvInstancing", void 0), e([e5({ constValue: true })], s3.prototype, "hasSliceTranslatedView", void 0), e([e5()], s3.prototype, "objectAndLayerIdColorInstanced", void 0);

// node_modules/@arcgis/core/chunks/RibbonLine.glsl.js
var j = 1;
function R(R2) {
  const A2 = new o(), { vertex: P, fragment: F } = A2, z = R2.hasMultipassTerrain && (R2.output === h.Color || R2.output === h.Alpha);
  A2.include(t3), A2.include(s2, R2), A2.include(u2, R2);
  const E = R2.applyMarkerOffset && !R2.draped;
  E && (P.uniforms.add(new o4("markerScale", (e7) => e7.markerScale)), A2.include(i2, { space: p.World })), R2.output === h.Depth && A2.include(o3, R2), A2.include(d, R2), v(P, R2), P.uniforms.add([new e4("inverseProjectionMatrix", (e7, i3) => i3.camera.inverseProjectionMatrix), new e3("nearFar", (e7, i3) => i3.camera.nearFar), new o4("miterLimit", (e7) => "miter" !== e7.join ? 0 : e7.miterLimit), new e2("viewport", (e7, i3) => i3.camera.fullViewport)]), P.constants.add("LARGE_HALF_FLOAT", "float", 65500), A2.attributes.add(O.POSITION, "vec3"), A2.attributes.add(O.SUBDIVISIONFACTOR, "float"), A2.attributes.add(O.UV0, "vec2"), A2.attributes.add(O.AUXPOS1, "vec3"), A2.attributes.add(O.AUXPOS2, "vec3"), A2.varyings.add("vColor", "vec4"), A2.varyings.add("vpos", "vec3"), t2(A2), z && A2.varyings.add("depth", "float");
  const T = R2.capType === r.ROUND, W = R2.stippleEnabled && R2.stippleScaleWithLineWidth || T;
  W && A2.varyings.add("vLineWidth", "float");
  const V = R2.stippleEnabled && R2.stippleScaleWithLineWidth;
  V && A2.varyings.add("vLineSizeInv", "float");
  const O2 = R2.innerColorEnabled || T;
  O2 && A2.varyings.add("vLineDistance", "float");
  const N = R2.stippleEnabled && T, _ = R2.falloffEnabled || N;
  _ && A2.varyings.add("vLineDistanceNorm", "float"), T && (A2.varyings.add("vSegmentSDF", "float"), A2.varyings.add("vReverseSegmentSDF", "float")), P.code.add(n`#define PERPENDICULAR(v) vec2(v.y, -v.x);
float interp(float ncp, vec4 a, vec4 b) {
return (-ncp - a.z) / (b.z - a.z);
}
vec2 rotate(vec2 v, float a) {
float s = sin(a);
float c = cos(a);
mat2 m = mat2(c, -s, s, c);
return m * v;
}`), P.code.add(n`vec4 projectAndScale(vec4 pos) {
vec4 posNdc = proj * pos;
posNdc.xy *= viewport.zw / posNdc.w;
return posNdc;
}`), n2(A2), P.code.add(n`
    void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next, in bool isStartVertex) {
      float vnp = nearFar[0] * 0.99;

      if(pos.z > -nearFar[0]) {
        //current pos behind ncp --> we need to clip
        if (!isStartVertex) {
          if(prev.z < -nearFar[0]) {
            //previous in front of ncp
            pos = mix(prev, pos, interp(vnp, prev, pos));
            next = pos;
          } else {
            pos = vec4(0.0, 0.0, 0.0, 1.0);
          }
        } else {
          if(next.z < -nearFar[0]) {
            //next in front of ncp
            pos = mix(pos, next, interp(vnp, pos, next));
            prev = pos;
          } else {
            pos = vec4(0.0, 0.0, 0.0, 1.0);
          }
        }
      } else {
        //current position visible
        if (prev.z > -nearFar[0]) {
          //previous behind ncp
          prev = mix(pos, prev, interp(vnp, pos, prev));
        }
        if (next.z > -nearFar[0]) {
          //next behind ncp
          next = mix(next, pos, interp(vnp, next, pos));
        }
      }

      ${z ? "depth = pos.z;" : ""}
      linearDepth = calculateLinearDepth(nearFar,pos.z);

      pos = projectAndScale(pos);
      next = projectAndScale(next);
      prev = projectAndScale(prev);
    }
  `), P.uniforms.add(new o4("pixelRatio", (e7, i3) => i3.camera.pixelRatio)), P.code.add(n`
  void main(void) {
    // unpack values from uv0.y
    bool isStartVertex = abs(abs(uv0.y)-3.0) == 1.0;

    float coverage = 1.0;

    // Check for special value of uv0.y which is used by the Renderer when graphics
    // are removed before the VBO is recompacted. If this is the case, then we just
    // project outside of clip space.
    if (uv0.y == 0.0) {
      // Project out of clip space
      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);
    }
    else {
      bool isJoin = abs(uv0.y) < 3.0;

      float lineSize = getSize();
      float lineWidth = lineSize * pixelRatio;

      ${W ? n`vLineWidth = lineWidth;` : ""}
      ${V ? n`vLineSizeInv = 1.0 / lineSize;` : ""}

      // convert sub-pixel coverage to alpha
      if (lineWidth < 1.0) {
        coverage = lineWidth;
        lineWidth = 1.0;
      }else{
        // Ribbon lines cannot properly render non-integer sizes. Round width to integer size if
        // larger than one for better quality. Note that we do render < 1 pixels more or less correctly
        // so we only really care to round anything larger than 1.
        lineWidth = floor(lineWidth + 0.5);
      }

      vec4 pos  = view * vec4(position.xyz, 1.0);
      vec4 prev = view * vec4(auxpos1.xyz, 1.0);
      vec4 next = view * vec4(auxpos2.xyz, 1.0);
  `), E && P.code.add(n`vec4 other = isStartVertex ? next : prev;
bool markersHidden = areWorldMarkersHidden(pos, other);
if(!isJoin && !markersHidden) {
pos.xyz += normalize(other.xyz - pos.xyz) * getWorldMarkerSize(pos) * 0.5;
}`), P.code.add(n`clipAndTransform(pos, prev, next, isStartVertex);
vec2 left = (pos.xy - prev.xy);
vec2 right = (next.xy - pos.xy);
float leftLen = length(left);
float rightLen = length(right);`);
  (R2.stippleEnabled || T) && P.code.add(n`
      float isEndVertex = float(!isStartVertex);
      vec2 segmentOrigin = mix(pos.xy, prev.xy, isEndVertex);
      vec2 segment = mix(right, left, isEndVertex);
      ${T ? n`vec2 segmentEnd = mix(next.xy, pos.xy, isEndVertex);` : ""}
    `), P.code.add(n`left = (leftLen > 0.001) ? left/leftLen : vec2(0.0, 0.0);
right = (rightLen > 0.001) ? right/rightLen : vec2(0.0, 0.0);
vec2 capDisplacementDir = vec2(0, 0);
vec2 joinDisplacementDir = vec2(0, 0);
float displacementLen = lineWidth;
if (isJoin) {
bool isOutside = (left.x * right.y - left.y * right.x) * uv0.y > 0.0;
joinDisplacementDir = normalize(left + right);
joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);
if (leftLen > 0.001 && rightLen > 0.001) {
float nDotSeg = dot(joinDisplacementDir, left);
displacementLen /= length(nDotSeg * left - joinDisplacementDir);
if (!isOutside) {
displacementLen = min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));
}
}
if (isOutside && (displacementLen > miterLimit * lineWidth)) {`), R2.roundJoins ? P.code.add(n`
        vec2 startDir = leftLen < 0.001 ? right : left;
        startDir = PERPENDICULAR(startDir);

        vec2 endDir = rightLen < 0.001 ? left : right;
        endDir = PERPENDICULAR(endDir);

        float factor = ${R2.stippleEnabled ? n`min(1.0, subdivisionFactor * ${n.float((j + 2) / (j + 1))})` : n`subdivisionFactor`};

        float rotationAngle = acos(clamp(dot(startDir, endDir), -1.0, 1.0));
        joinDisplacementDir = rotate(startDir, -sign(uv0.y) * factor * rotationAngle);
      `) : P.code.add(n`if (leftLen < 0.001) {
joinDisplacementDir = right;
}
else if (rightLen < 0.001) {
joinDisplacementDir = left;
}
else {
joinDisplacementDir = (isStartVertex || subdivisionFactor > 0.0) ? right : left;
}
joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);`);
  const I = R2.capType !== r.BUTT;
  return P.code.add(n`
        displacementLen = lineWidth;
      }
    } else {
      // CAP handling ---------------------------------------------------
      joinDisplacementDir = isStartVertex ? right : left;
      joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);

      ${I ? n`capDisplacementDir = isStartVertex ? -right : left;` : ""}
    }
  `), P.code.add(n`
    // Displacement (in pixels) caused by join/or cap
    vec2 dpos = joinDisplacementDir * sign(uv0.y) * displacementLen + capDisplacementDir * displacementLen;

    ${_ || O2 ? n`float lineDistNorm = sign(uv0.y) * pos.w;` : ""}

    ${O2 ? n`vLineDistance = lineWidth * lineDistNorm;` : ""}
    ${_ ? n`vLineDistanceNorm = lineDistNorm;` : ""}

    pos.xy += dpos;
  `), T && P.code.add(n`vec2 segmentDir = normalize(segment);
vSegmentSDF = (isJoin && isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentOrigin, segmentDir) * pos.w) ;
vReverseSegmentSDF = (isJoin && !isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentEnd, -segmentDir) * pos.w);`), R2.stippleEnabled && (R2.draped ? P.uniforms.add(new o4("worldToScreenRatio", (e7, i3) => 1 / i3.screenToPCSRatio)) : P.code.add(n`vec3 segmentCenter = mix((auxpos2 + position) * 0.5, (position + auxpos1) * 0.5, isEndVertex);
float worldToScreenRatio = computeWorldToScreenRatio(segmentCenter);`), P.code.add(n`float segmentLengthScreenDouble = length(segment);
float segmentLengthScreen = segmentLengthScreenDouble * 0.5;
float discreteWorldToScreenRatio = discretizeWorldToScreenRatio(worldToScreenRatio);
float segmentLengthRender = length(mix(auxpos2 - position, position - auxpos1, isEndVertex));
vStipplePatternStretch = worldToScreenRatio / discreteWorldToScreenRatio;`), R2.draped ? P.code.add(n`float segmentLengthPseudoScreen = segmentLengthScreen / pixelRatio * discreteWorldToScreenRatio / worldToScreenRatio;
float startPseudoScreen = uv0.x * discreteWorldToScreenRatio - mix(0.0, segmentLengthPseudoScreen, isEndVertex);`) : P.code.add(n`float startPseudoScreen = mix(uv0.x, uv0.x - segmentLengthRender, isEndVertex) * discreteWorldToScreenRatio;
float segmentLengthPseudoScreen = segmentLengthRender * discreteWorldToScreenRatio;`), P.uniforms.add(new o4("stipplePatternPixelSize", (e7) => g(e7))), P.code.add(n`
      float patternLength = ${R2.stippleScaleWithLineWidth ? "lineSize * " : ""} stipplePatternPixelSize;

      // Compute the coordinates at both start and end of the line segment, because we need both to clamp to in the fragment shader
      vStippleDistanceLimits = computeStippleDistanceLimits(startPseudoScreen, segmentLengthPseudoScreen, segmentLengthScreen, patternLength);

      vStippleDistance = mix(vStippleDistanceLimits.x, vStippleDistanceLimits.y, isEndVertex);

      // Adjust the coordinate to the displaced position (the pattern is shortened/overextended on the in/outside of joins)
      if (segmentLengthScreenDouble >= 0.001) {
        // Project the actual vertex position onto the line segment. Note that the resulting factor is within [0..1] at the
        // original vertex positions, and slightly outside of that range at the displaced positions
        vec2 stippleDisplacement = pos.xy - segmentOrigin;
        float stippleDisplacementFactor = dot(segment, stippleDisplacement) / (segmentLengthScreenDouble * segmentLengthScreenDouble);

        // Apply this offset to the actual vertex coordinate (can be screen or pseudo-screen space)
        vStippleDistance += (stippleDisplacementFactor - isEndVertex) * (vStippleDistanceLimits.y - vStippleDistanceLimits.x);
      }

      // Cancel out perspective correct interpolation because we want this length the really represent the screen distance
      vStippleDistanceLimits *= pos.w;
      vStippleDistance *= pos.w;

      // Disable stipple distance limits on caps
      vStippleDistanceLimits = isJoin ?
                                 vStippleDistanceLimits :
                                 isStartVertex ?
                                  vec2(-1e038, vStippleDistanceLimits.y) :
                                  vec2(vStippleDistanceLimits.x, 1e038);
    `)), P.code.add(n`
      // Convert back into NDC
      pos.xy = (pos.xy / viewport.zw) * pos.w;

      vColor = getColor();
      vColor.a *= coverage;

      ${R2.wireframe && !R2.draped ? "pos.z -= 0.001 * pos.w;" : ""}

      // transform final position to camera space for slicing
      vpos = (inverseProjectionMatrix * pos).xyz;
      gl_Position = pos;
      forwardObjectAndLayerIdColor();
    }
  }
  `), z && A2.include(n3, R2), A2.include(u, R2), F.include(e6), F.code.add(n`
  void main() {
    discardBySlice(vpos);
    ${z ? "terrainDepthTest(gl_FragCoord, depth);" : ""}
  `), R2.wireframe ? F.code.add(n`vec4 finalColor = vec4(1.0, 0.0, 1.0, 1.0);`) : (T && F.code.add(n`
      float sdf = min(vSegmentSDF, vReverseSegmentSDF);
      vec2 fragmentPosition = vec2(
        min(sdf, 0.0),
        vLineDistance
      ) * gl_FragCoord.w;

      float fragmentRadius = length(fragmentPosition);
      float fragmentCapSDF = (fragmentRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale
      float capCoverage = clamp(0.5 - fragmentCapSDF, 0.0, 1.0);

      if (capCoverage < ${n.float(t)}) {
        discard;
      }
    `), N ? F.code.add(n`
      vec2 stipplePosition = vec2(
        min(getStippleSDF() * 2.0 - 1.0, 0.0),
        vLineDistanceNorm * gl_FragCoord.w
      );
      float stippleRadius = length(stipplePosition * vLineWidth);
      float stippleCapSDF = (stippleRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale
      float stippleCoverage = clamp(0.5 - stippleCapSDF, 0.0, 1.0);
      float stippleAlpha = step(${n.float(t)}, stippleCoverage);
      `) : F.code.add(n`float stippleAlpha = getStippleAlpha();`), F.uniforms.add(new e2("intrinsicColor", (e7) => e7.color)), F.code.add(n`discardByStippleAlpha(stippleAlpha, stippleAlphaColorDiscard);
vec4 color = intrinsicColor * vColor;`), R2.innerColorEnabled && (F.uniforms.add(new e2("innerColor", (i3) => i(i3.innerColor, i3.color))), F.uniforms.add(new o4("innerWidth", (e7, i3) => e7.innerWidth * i3.camera.pixelRatio)), F.code.add(n`float distToInner = abs(vLineDistance * gl_FragCoord.w) - innerWidth;
float innerAA = clamp(0.5 - distToInner, 0.0, 1.0);
float innerAlpha = innerColor.a + color.a * (1.0 - innerColor.a);
color = mix(color, vec4(innerColor.rgb, innerAlpha), innerAA);`)), F.code.add(n`vec4 finalColor = blendStipple(color, stippleAlpha);`), R2.falloffEnabled && (F.uniforms.add(new o4("falloff", (e7) => e7.falloff)), F.code.add(n`finalColor.a *= pow(max(0.0, 1.0 - abs(vLineDistanceNorm * gl_FragCoord.w)), falloff);`))), F.code.add(n`
    if (finalColor.a < ${n.float(t)}) {
      discard;
    }

    ${R2.output === h.Alpha ? n`gl_FragColor = vec4(finalColor.a);` : ""}
    ${R2.output === h.Color ? n`gl_FragColor = highlightSlice(finalColor, vpos);` : ""}
    ${R2.output === h.Color && R2.transparencyPassType === o2.Color ? "gl_FragColor = premultiplyAlpha(gl_FragColor);" : ""}
    ${R2.output === h.Highlight ? n`gl_FragColor = vec4(1.0);` : ""}
    ${R2.output === h.Depth ? n`outputDepth(linearDepth);` : ""}
    ${R2.output === h.ObjectAndLayerIdColor ? n`outputObjectAndLayerIdColor();` : ""}
  }
  `), A2;
}
var A = Object.freeze(Object.defineProperty({ __proto__: null, NUM_ROUND_JOIN_SUBDIVISIONS: j, build: R }, Symbol.toStringTag, { value: "Module" }));

export {
  r,
  s3 as s,
  j,
  R,
  A
};
//# sourceMappingURL=chunk-LX3EHQCS.js.map
