import {
  c,
  i,
  t as t3
} from "./chunk-XFAJKRMY.js";
import {
  Ze
} from "./chunk-53VWTVL2.js";
import {
  d
} from "./chunk-4HXPP4EA.js";
import {
  x as x2
} from "./chunk-AMLHWG76.js";
import {
  O
} from "./chunk-QFFP6A5Q.js";
import {
  m as m3
} from "./chunk-J5VTDQTQ.js";
import {
  x
} from "./chunk-BYSA56OH.js";
import {
  m as m2
} from "./chunk-6O43OEU5.js";
import {
  w2 as w
} from "./chunk-UWG37XSU.js";
import {
  k2 as k
} from "./chunk-LNZAOBFW.js";
import {
  U
} from "./chunk-DMI7A7TC.js";
import {
  j as j2
} from "./chunk-KAN4HXCG.js";
import {
  s as s3
} from "./chunk-M5VHU5LK.js";
import {
  l,
  u2 as u
} from "./chunk-7QMMKGW4.js";
import {
  e,
  m,
  n2 as n,
  y
} from "./chunk-OOLCFNXJ.js";
import {
  j,
  t2
} from "./chunk-MJXQTGI2.js";
import {
  s as s2
} from "./chunk-LIZHLHNA.js";
import {
  s2 as s
} from "./chunk-UA3YPL2R.js";
import {
  r,
  t
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/layers/support/featureQueryAll.js
async function t4(r2, t5, o2) {
  t5 = t5.clone(), r2.capabilities.query.supportsMaxRecordCountFactor && (t5.maxRecordCountFactor = u2(r2));
  const i3 = a(r2), n3 = r2.capabilities.query.supportsPagination;
  t5.start = 0, t5.num = i3;
  let s6 = null;
  for (; ; ) {
    const a5 = await r2.source.queryFeaturesJSON(t5, o2);
    if (t(s6) ? s6 = a5 : s6.features = s6.features.concat(a5.features), s6.exceededTransferLimit = a5.exceededTransferLimit, !n3 || !a5.exceededTransferLimit)
      break;
    t5.start += i3;
  }
  return s6;
}
function a(e4) {
  return u2(e4) * o(e4);
}
function o(e4) {
  return e4.capabilities.query.maxRecordCount || 2e3;
}
function u2(e4) {
  return e4.capabilities.query.supportsMaxRecordCountFactor ? x2.MAX_MAX_RECORD_COUNT_FACTOR : 1;
}

// node_modules/@arcgis/core/networks/support/utils.js
async function s4(e4, t5) {
  if ("Utility Network Layer" === e4) {
    const { default: e5 } = await import("./UtilityNetwork-MWENDTUO.js");
    return new e5({ layerUrl: t5 });
  }
  return null;
}
async function i2(r2) {
  let a5 = "portalItem" in r2 ? r2 : { portalItem: r2 };
  !a5.portalItem || a5.portalItem instanceof x || (a5 = { ...a5, portalItem: new x(a5.portalItem) });
  const n3 = a5.portalItem;
  if (await n3.load(), "Feature Service" !== n3.type)
    throw new s2("portal:unknown-item-type", "Unknown item type '${type}'", { type: n3.type });
  const l3 = n3.url, i3 = await U(l3, { responseType: "json", query: { f: "json" } }), u4 = "Network Layer";
  if (i3.data.type && i3.data.type.includes(u4))
    return s4(i3.data.type, l3);
  if (i3.data.layers) {
    const e4 = i3.data.layers.find((e5) => e5.type.includes(u4));
    if (e4) {
      const t5 = `${l3}/${e4.id}`;
      return s4(e4.type, t5);
    }
  }
  return null;
}

// node_modules/@arcgis/core/rest/networks/support/QueryNamedTraceConfigurationsParameters.js
var e2 = class extends l {
  constructor(r2) {
    super(r2), this.globalIds = [], this.creators = [], this.tags = [], this.names = [];
  }
};
e([y({ type: [String], json: { write: true } })], e2.prototype, "globalIds", void 0), e([y({ type: [String], json: { write: true } })], e2.prototype, "creators", void 0), e([y({ type: [String], json: { write: true } })], e2.prototype, "tags", void 0), e([y({ type: [String], json: { write: true } })], e2.prototype, "names", void 0), e2 = e([n("esri.rest.networks.support.QueryNamedTraceConfigurationsParameters")], e2);
var p = e2;

// node_modules/@arcgis/core/rest/networks/support/ValidateNetworkTopologyParameters.js
var p2 = class extends l {
  constructor(t5) {
    super(t5), this.gdbVersion = null, this.sessionID = null, this.validationType = null, this.validateArea = null, this.validationSet = null, this.returnEdits = false;
  }
};
e([y({ type: String, json: { write: true } })], p2.prototype, "gdbVersion", void 0), e([y({ type: String, json: { write: true } })], p2.prototype, "sessionID", void 0), e([y({ type: i.apiValues, json: { type: i.jsonValues, read: i.read, write: i.write } })], p2.prototype, "validationType", void 0), e([y({ type: w, json: { write: true } })], p2.prototype, "validateArea", void 0), e([y({ type: [Object], json: { write: true } })], p2.prototype, "validationSet", void 0), e([y({ type: Boolean, json: { write: true } })], p2.prototype, "returnEdits", void 0), p2 = e([n("esri.rest.networks.support.ValidateNetworkTopologyParameters")], p2);
var a2 = p2;

// node_modules/@arcgis/core/networks/Network.js
var v = class extends O(m2) {
  constructor(e4) {
    super(e4), this.id = null, this.title = null, this.layerUrl = null, this.dataElement = null, this.fullExtent = null, this.spatialReference = null, this.type = null, this.sourceJSON = null;
  }
  static fromPortalItem(e4) {
    return i2(e4);
  }
  initialize() {
    this.when().catch((e4) => {
      var _a, _b;
      j(e4) || s.getLogger(this.declaredClass).error("#load()", `Failed to load layer (title: '${(_a = this.title) != null ? _a : "no title"}', id: '${(_b = this.id) != null ? _b : "no id"}')`, { error: e4 });
    });
  }
  get datasetName() {
    var _a, _b;
    return (_b = (_a = this.dataElement) == null ? void 0 : _a.name) != null ? _b : null;
  }
  get owner() {
    var _a, _b;
    return (_b = (_a = this.dataElement) == null ? void 0 : _a.userIdentity) != null ? _b : null;
  }
  get schemaGeneration() {
    var _a, _b;
    return (_b = (_a = this.dataElement) == null ? void 0 : _a.schemaGeneration) != null ? _b : null;
  }
  get parsedUrl() {
    return j2(this.layerUrl);
  }
  get featureServiceUrl() {
    const e4 = this.parsedUrl && m3(this.parsedUrl.path);
    return r(e4) ? e4.url.path : null;
  }
  get networkServiceUrl() {
    return this.featureServiceUrl ? this.featureServiceUrl.replace(/\/FeatureServer/i, "/UtilityNetworkServer") : null;
  }
  get layerId() {
    const e4 = this.parsedUrl && m3(this.parsedUrl.path);
    return r(e4) ? e4.sublayer : null;
  }
  get networkSystemLayers() {
    return null;
  }
  async load(e4) {
    return this.addResolvingPromise(this._fetchDataElement(this.featureServiceUrl, this.layerId.toString(), e4)), this.addResolvingPromise(this._fetchLayerMetaData(this.layerUrl, e4)), this;
  }
  getLayerIdBySourceId(e4) {
    if (this.dataElement) {
      const r2 = this.dataElement.domainNetworks;
      for (const t5 of r2) {
        for (const r3 of t5.edgeSources ? t5.edgeSources : [])
          if (r3.sourceId === e4)
            return r3.layerId;
        for (const r3 of t5.junctionSources ? t5.junctionSources : [])
          if (r3.sourceId === e4)
            return r3.layerId;
      }
      return null;
    }
    return null;
  }
  async queryNamedTraceConfigurations(e4, r2) {
    var _a, _b;
    const { queryNamedTraceConfigurations: t5 } = await import("./queryNamedTraceConfigurations-OEQJYH4I.js"), o2 = this.networkServiceUrl, a5 = new p({ ...e4 });
    return (_b = (_a = await t5(o2, a5, { ...r2 })) == null ? void 0 : _a.namedTraceConfigurations) != null ? _b : null;
  }
  async validateNetworkTopology(e4, r2) {
    var _a;
    if (!e4.validateArea)
      throw new s2("network:undefined-validateArea", "the network must have validateArea defined in the validate network topology parameters.");
    const { validateNetworkTopology: o2 } = await import("./validateNetworkTopology-7LTKERUU.js"), a5 = this.networkServiceUrl, s6 = new a2({ ...e4, returnEdits: true }), i3 = await o2(a5, s6, { ...r2 });
    if (i3 == null ? void 0 : i3.serviceEdits) {
      const e5 = { edits: null, addedFeatures: [], updatedFeatures: [], deletedFeatures: [], addedAttachments: [], updatedAttachments: [], deletedAttachments: [], editedFeatures: i3.serviceEdits };
      d.emit("edits", { serviceUrl: (_a = this.featureServiceUrl) != null ? _a : "", layerId: null, event: e5 });
    }
    return i3;
  }
  async _fetchLayerMetaData(e4, t5) {
    const o2 = await U(e4, { responseType: "json", query: { f: "json" }, ...t5 });
    this.sourceJSON = o2.data, this.read(o2.data, { origin: "service" });
  }
  async _fetchDataElement(e4, t5, o2) {
    if (this.dataElement)
      return;
    const a5 = await U(`${e4}/queryDataElements`, { responseType: "json", query: { layers: JSON.stringify([t5]), f: "json" }, ...o2 }).then((e5) => {
      var _a;
      return (_a = e5.data.layerDataElements) == null ? void 0 : _a[0];
    });
    a5 && this.read(a5, { origin: "service" });
  }
};
e([y({ type: String, nonNullable: true, json: { origins: { "web-map": { read: true, write: { isRequired: true } }, service: { read: true } }, read: false } })], v.prototype, "id", void 0), e([y({ type: String, nonNullable: true, json: { origins: { "web-map": { read: true, write: { isRequired: true } }, service: { read: { source: "name" } } }, read: false } })], v.prototype, "title", void 0), e([y({ type: String, nonNullable: true, json: { origins: { "web-map": { read: { source: "url" }, write: { target: "url", isRequired: true } } }, read: false } })], v.prototype, "layerUrl", void 0), e([y({ type: Object, json: { origins: { service: { read: true } }, read: false } })], v.prototype, "dataElement", void 0), e([y({ type: w, json: { origins: { service: { read: { source: "extent" } } }, read: false } })], v.prototype, "fullExtent", void 0), e([y({ type: k, json: { origins: { service: { read: { source: "extent.spatialReference" } } }, read: false } })], v.prototype, "spatialReference", void 0), e([y({ type: ["utility", "trace"], readOnly: true, json: { read: false, write: false } })], v.prototype, "type", void 0), e([y({ readOnly: true })], v.prototype, "datasetName", null), e([y({ readOnly: true })], v.prototype, "owner", null), e([y({ readOnly: true })], v.prototype, "schemaGeneration", null), e([y({ readOnly: true })], v.prototype, "parsedUrl", null), e([y({ readOnly: true })], v.prototype, "featureServiceUrl", null), e([y({ readOnly: true })], v.prototype, "networkServiceUrl", null), e([y({ readOnly: true })], v.prototype, "layerId", null), e([y()], v.prototype, "sourceJSON", void 0), e([y({ readOnly: true })], v.prototype, "networkSystemLayers", null), v = e([n("esri.networks.Network")], v);
var w2 = v;

// node_modules/@arcgis/core/networks/RulesTable.js
var a3 = class extends u(m2) {
  constructor(e4) {
    super(e4), this.request = U;
  }
  initialize() {
  }
  async load(e4) {
    const t5 = this.layer.load(e4).then(() => this._initializeRulesTable());
    return this.addResolvingPromise(t5), this;
  }
  getFeatureSQL(e4, t5) {
    var _a, _b;
    const s6 = e4.layerId.toString(), o2 = (_a = e4.fieldsIndex) == null ? void 0 : _a.normalizeFieldName("assetGroup"), r2 = (_b = e4.fieldsIndex) == null ? void 0 : _b.normalizeFieldName("assetType"), n3 = o2 ? t5.attributes[o2] : null, i3 = r2 ? t5.attributes[r2] : null, a5 = this.rulesHash[s6];
    if (a5) {
      const e5 = a5.assetGroupHash[n3];
      if (e5) {
        const t6 = e5.assetTypeHash[i3];
        return t6 || null;
      }
    }
    return null;
  }
  async _initializeRulesTable() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    const e4 = {};
    let t5;
    !function(e5) {
      e5[e5.from = 0] = "from", e5[e5.to = 1] = "to", e5[e5.via = 2] = "via";
    }(t5 || (t5 = {}));
    const s6 = [{ networkSourceId: "fromNetworkSource", assetGroupId: "fromAssetGroup", assetTypeId: "fromAssetType" }, { networkSourceId: "toNetworkSource", assetGroupId: "toAssetGroup", assetTypeId: "toAssetType" }, { networkSourceId: "viaNetworkSource", assetGroupId: "viaAssetGroup", assetTypeId: "viaAssetType" }];
    for (const o2 of this.rules) {
      if (o2.ruleType !== t3.RTJunctionJunctionConnectivity && o2.ruleType !== t3.RTJunctionEdgeConnectivity && o2.ruleType !== t3.RTEdgeJunctionEdgeConnectivity)
        continue;
      let r2 = [[t5.from, t5.to], [t5.to, t5.from]];
      o2.ruleType === t3.RTEdgeJunctionEdgeConnectivity && (r2 = [[t5.from, t5.via], [t5.via, t5.from], [t5.to, t5.via], [t5.via, t5.to]]);
      for (const n3 of r2) {
        const r3 = n3.shift(), a5 = n3.shift();
        let u4 = false;
        switch (o2.ruleType) {
          case t3.RTEdgeJunctionEdgeConnectivity:
            u4 = r3 === t5.from || r3 === t5.to;
            break;
          case t3.RTJunctionEdgeConnectivity:
            u4 = r3 === t5.to;
        }
        const c2 = s6[r3], p6 = o2[c2.networkSourceId].layerId.toString(), d2 = (_b = (_a = o2[c2.assetGroupId]) == null ? void 0 : _a.assetGroupCode) == null ? void 0 : _b.toString(), l3 = (_d = (_c = o2[c2.assetTypeId]) == null ? void 0 : _c.assetTypeCode) == null ? void 0 : _d.toString(), y2 = s6[a5], f2 = o2[y2.networkSourceId].layerId.toString(), m4 = (_f = (_e = o2[y2.assetGroupId]) == null ? void 0 : _e.assetGroupCode) == null ? void 0 : _f.toString(), T2 = o2[y2.assetTypeId], h = (_g = T2 == null ? void 0 : T2.assetTypeCode) == null ? void 0 : _g.toString(), v2 = e4[p6] ? e4[p6] : { assetGroupHash: {} };
        if (!(d2 && l3 && m4 && h))
          continue;
        const S = v2.assetGroupHash[d2] ? v2.assetGroupHash[d2] : { assetTypeHash: {} }, I = S.assetTypeHash[l3] ? S.assetTypeHash[l3] : {};
        if (I[f2] = I[f2] ? I[f2] : {}, u4) {
          I[p6] = I[p6] ? I[p6] : {};
          const e5 = `(assetgroup = ${d2} AND assettype = ${l3})`;
          I[p6].anyVertex = I[p6].anyVertex ? `${I[p6].anyVertex}` : `${e5}`, "esriNECPEndVertex" === T2.connectivityPolicy && (I[p6].endVertex = ((_h = I[p6]) == null ? void 0 : _h.endVertex) ? `${I[p6].endVertex}` : `${e5}`);
        }
        const g = `(assetgroup = ${m4} AND assettype = ${h})`;
        I[f2].anyVertex = ((_i = I[f2]) == null ? void 0 : _i.anyVertex) ? `${I[f2].anyVertex} OR ${g}` : `${g}`, "esriNECPEndVertex" === T2.connectivityPolicy && (I[f2].endVertex = ((_j = I[f2]) == null ? void 0 : _j.endVertex) ? `${I[f2].endVertex} OR ${g}` : `${g}`), S.assetTypeHash[l3] = I, v2.assetGroupHash[d2] = S, e4[p6] = v2;
      }
    }
    this.rulesHash = e4;
  }
};
e([y({ constructOnly: true })], a3.prototype, "layer", void 0), e([y({ constructOnly: true })], a3.prototype, "rules", void 0), e([y()], a3.prototype, "rulesHash", void 0), e([y({ constructOnly: true })], a3.prototype, "request", void 0), a3 = e([n("esri.networks.RulesTable")], a3);
var u3 = a3;

// node_modules/@arcgis/core/networks/support/NetworkSystemLayers.js
var e3 = class extends m {
  constructor(r2) {
    super(r2), this.rulesTableId = null, this.rulesTableUrl = null, this.subnetworksTableId = null, this.subnetworksTableUrl = null, this.dirtyAreasLayerId = null, this.dirtyAreasLayerUrl = null;
  }
};
e([y({ constructOnly: true })], e3.prototype, "rulesTableId", void 0), e([y({ constructOnly: true })], e3.prototype, "rulesTableUrl", void 0), e([y({ constructOnly: true })], e3.prototype, "subnetworksTableId", void 0), e([y({ constructOnly: true })], e3.prototype, "subnetworksTableUrl", void 0), e([y({ constructOnly: true })], e3.prototype, "dirtyAreasLayerId", void 0), e([y({ constructOnly: true })], e3.prototype, "dirtyAreasLayerUrl", void 0), e3 = e([n("esri.networks.support.NetworkSystemLayers")], e3);
var l2 = e3;

// node_modules/@arcgis/core/networks/support/Terminal.js
var s5 = class extends l {
  constructor(r2) {
    super(r2), this.id = null, this.name = null;
  }
};
e([y({ type: Number, json: { read: { source: "terminalId" }, write: { target: "terminalId" } } })], s5.prototype, "id", void 0), e([y({ type: String, json: { read: { source: "terminalName" }, write: { target: "terminalName" } } })], s5.prototype, "name", void 0), e([y({ type: Boolean, json: { write: true } })], s5.prototype, "isUpstreamTerminal", void 0), s5 = e([n("esri.networks.support.Terminal")], s5);
var p3 = s5;

// node_modules/@arcgis/core/networks/support/TerminalConfiguration.js
var a4 = new s3({ esriUNTMBidirectional: "bidirectional", esriUNTMDirectional: "directional" });
var n2 = class extends l {
  constructor(r2) {
    super(r2), this.defaultConfiguration = null, this.id = null, this.name = null, this.terminals = [], this.traversabilityModel = null;
  }
};
e([y({ type: String, json: { write: true } })], n2.prototype, "defaultConfiguration", void 0), e([y({ type: Number, json: { read: { source: "terminalConfigurationId" }, write: { target: "terminalConfigurationId" } } })], n2.prototype, "id", void 0), e([y({ type: String, json: { read: { source: "terminalConfigurationName" }, write: { target: "terminalConfigurationName" } } })], n2.prototype, "name", void 0), e([y({ type: [p3], json: { write: true } })], n2.prototype, "terminals", void 0), e([y({ type: a4.apiValues, json: { type: a4.jsonValues, read: a4.read, write: a4.write } })], n2.prototype, "traversabilityModel", void 0), n2 = e([n("esri.networks.support.TerminalConfiguration")], n2);
var p4 = n2;

// node_modules/@arcgis/core/networks/UtilityNetwork.js
var p5 = "esri.networks.UtilityNetwork";
var T = s.getLogger(p5);
var f = class extends w2 {
  constructor(e4) {
    super(e4), this.sharedNamedTraceConfigurations = [], this.type = "utility";
  }
  get serviceTerritoryFeatureLayerId() {
    var _a, _b;
    return (_b = (_a = this.dataElement) == null ? void 0 : _a.serviceTerritoryFeatureLayerId) != null ? _b : null;
  }
  get networkSystemLayers() {
    var _a, _b, _c, _d, _e, _f;
    return new l2({ rulesTableId: (_a = this.sourceJSON) == null ? void 0 : _a.systemLayers.rulesTableId, rulesTableUrl: this.sourceJSON ? `${this.featureServiceUrl}/${(_b = this.sourceJSON) == null ? void 0 : _b.systemLayers.rulesTableId}` : null, subnetworksTableId: (_c = this.sourceJSON) == null ? void 0 : _c.systemLayers.subnetworksTableId, subnetworksTableUrl: this.sourceJSON ? `${this.featureServiceUrl}/${(_d = this.sourceJSON) == null ? void 0 : _d.systemLayers.subnetworksTableId}` : null, dirtyAreasLayerId: (_e = this.sourceJSON) == null ? void 0 : _e.systemLayers.dirtyAreasLayerId, dirtyAreasLayerUrl: this.sourceJSON ? `${this.featureServiceUrl}/${(_f = this.sourceJSON) == null ? void 0 : _f.systemLayers.dirtyAreasLayerId}` : null });
  }
  get rulesTableId() {
    var _a;
    return t2(T, "rulesTableId", { replacement: "networkSystemLayers.rulesTableId" }), (_a = this.sourceJSON) == null ? void 0 : _a.systemLayers.rulesTableId;
  }
  get rulesTableUrl() {
    return t2(T, "rulesTableUrl", { replacement: "networkSystemLayers.rulesTableUrl" }), this.sourceJSON ? `${this.featureServiceUrl}/${this.networkSystemLayers.rulesTableId}` : null;
  }
  get subnetworksTableId() {
    var _a;
    return t2(T, "subnetworksTableId", { replacement: "networkSystemLayers.subnetworksTableId" }), (_a = this.sourceJSON) == null ? void 0 : _a.systemLayers.subnetworksTableId;
  }
  get subnetworksTableUrl() {
    return t2(T, "subnetworksTableUrl", { replacement: "networkSystemLayers.subnetworksTableUrl" }), this.sourceJSON ? `${this.featureServiceUrl}/${this.networkSystemLayers.subnetworksTableId}` : null;
  }
  get terminalConfigurations() {
    var _a;
    return ((_a = this.dataElement) == null ? void 0 : _a.terminalConfigurations.map((e4) => p4.fromJSON(e4))) || [];
  }
  get domainNetworkNames() {
    var _a;
    return ((_a = this.dataElement) == null ? void 0 : _a.domainNetworks.map((e4) => e4.domainNetworkName)) || [];
  }
  get _utilityLayerList() {
    var _a, _b;
    const e4 = /* @__PURE__ */ new Set();
    return (_b = (_a = this.dataElement) == null ? void 0 : _a.domainNetworks) == null ? void 0 : _b.map((t5) => {
      t5.edgeSources.map((t6) => {
        e4.add(t6.layerId);
      }), t5.junctionSources.map((t6) => {
        e4.add(t6.layerId);
      });
    }), e4;
  }
  async load(e4) {
    return this.addResolvingPromise(super.load(e4)), this.addResolvingPromise(this._loadNamedTraceConfigurationsFromNetwork(e4)), this;
  }
  getTerminalConfiguration(e4) {
    var _a, _b, _c, _d;
    let t5 = null, r2 = null;
    const s6 = e4.layer;
    let a5 = null;
    if ("feature" !== (s6 == null ? void 0 : s6.type))
      return null;
    if (a5 = s6.layerId, null === a5)
      return null;
    const o2 = e4.attributes;
    if (null == o2)
      return null;
    for (const l3 of Object.keys(o2))
      "ASSETGROUP" === l3.toUpperCase() && (t5 = e4.getAttribute(l3)), "ASSETTYPE" === l3.toUpperCase() && (r2 = e4.getAttribute(l3));
    if (!this.dataElement)
      return null;
    let n3 = null;
    const i3 = this.dataElement.domainNetworks;
    for (const l3 of i3) {
      const e5 = (_a = l3.junctionSources) == null ? void 0 : _a.find((e6) => e6.layerId === a5);
      if (e5) {
        const s7 = (_b = e5.assetGroups) == null ? void 0 : _b.find((e6) => e6.assetGroupCode === t5);
        if (s7) {
          const e6 = (_c = s7.assetTypes) == null ? void 0 : _c.find((e7) => e7.assetTypeCode === r2);
          if (e6) {
            n3 = e6.terminalConfigurationId;
            break;
          }
        }
      }
    }
    if (null != n3) {
      const e5 = (_d = this.dataElement.terminalConfigurations) == null ? void 0 : _d.find((e6) => e6.terminalConfigurationId === n3);
      return e5 ? p4.fromJSON(e5) : null;
    }
    return null;
  }
  getTierNames(e4) {
    var _a;
    const t5 = (_a = this.dataElement) == null ? void 0 : _a.domainNetworks.find((t6) => t6.domainNetworkName === e4);
    return (t5 == null ? void 0 : t5.tiers.map((e5) => e5.name)) || [];
  }
  async getRulesTable() {
    return this._createRulesTable();
  }
  isUtilityLayer(e4) {
    return this._utilityLayerList.has(e4.layerId);
  }
  async _loadNamedTraceConfigurationsFromNetwork(e4) {
    var _a;
    if (0 === ((_a = this.sharedNamedTraceConfigurations) == null ? void 0 : _a.length))
      return;
    const t5 = this.sharedNamedTraceConfigurations.map((e5) => e5.globalId), r2 = await this.queryNamedTraceConfigurations({ globalIds: t5 }, e4);
    for (const s6 of this.sharedNamedTraceConfigurations) {
      const e5 = r2 == null ? void 0 : r2.find((e6) => e6.globalId === s6.globalId);
      if (e5) {
        const t6 = e5.write({}, { origin: "service" });
        s6.read(t6, { origin: "service" });
      }
    }
  }
  async _createRulesTable() {
    var _a;
    const e4 = new Ze({ url: this.rulesTableUrl });
    await e4.load();
    const t5 = (_a = this.dataElement) == null ? void 0 : _a.domainNetworks;
    if (!t5)
      return null;
    const r2 = t5.flatMap((e5) => [...e5.edgeSources, ...e5.junctionSources]), s6 = (await this._queryRulesTable(e4)).map((t6) => this._hydrateRuleInfo(e4, r2, t6));
    return new u3({ layer: e4, rules: s6 });
  }
  async _queryRulesTable(e4) {
    const t5 = new x2({ where: "1=1", outFields: ["*"] });
    return (await t4(e4, t5)).features;
  }
  _hydrateRuleInfo(e4, t5, r2) {
    const s6 = e4.fieldsIndex, a5 = s6.get("RULETYPE"), o2 = s6.get("CREATIONDATE"), n3 = s6.get("FROMNETWORKSOURCEID"), i3 = s6.get("FROMASSETGROUP"), l3 = s6.get("FROMASSETTYPE"), u4 = s6.get("FROMTERMINALID"), d2 = s6.get("TONETWORKSOURCEID"), m4 = s6.get("TOASSETGROUP"), y2 = s6.get("TOASSETTYPE"), p6 = s6.get("TOTERMINALID"), T2 = s6.get("VIANETWORKSOURCEID"), f2 = s6.get("VIAASSETGROUP"), b2 = s6.get("VIAASSETTYPE"), g = s6.get("VIATERMINALID"), I = r2.attributes[a5.name], S = new Date(r2.attributes[o2.name]), h = [{ networkSourceId: r2.attributes[n3.name], assetGroupId: r2.attributes[i3.name], assetTypeId: r2.attributes[l3.name], terminalId: r2.attributes[u4.name] }, { networkSourceId: r2.attributes[d2.name], assetGroupId: r2.attributes[m4.name], assetTypeId: r2.attributes[y2.name], terminalId: r2.attributes[p6.name] }, { networkSourceId: r2.attributes[T2.name], assetGroupId: r2.attributes[f2.name], assetTypeId: r2.attributes[b2.name], terminalId: r2.attributes[g.name] }];
    let w3;
    !function(e5) {
      e5[e5.from = 0] = "from", e5[e5.to = 1] = "to", e5[e5.via = 2] = "via";
    }(w3 || (w3 = {}));
    const N = { ruleType: I, creationDate: S };
    for (const k2 of [w3.from, w3.to, w3.via]) {
      if (I !== t3.RTEdgeJunctionEdgeConnectivity && k2 === w3.via)
        continue;
      const e5 = h[k2], r3 = t5.find((t6) => t6.sourceId === e5.networkSourceId), s7 = r3 == null ? void 0 : r3.assetGroups.find((t6) => t6.assetGroupCode === e5.assetGroupId), a6 = s7 == null ? void 0 : s7.assetTypes.find((t6) => t6.assetTypeCode === e5.assetTypeId);
      let o3 = this._getTerminal(I, a6, e5);
      I !== t3.RTContainment && I !== t3.RTAttachment || (o3 = null);
      let n4 = "";
      switch (k2) {
        case w3.from:
          n4 = "from";
          break;
        case w3.to:
          n4 = "to";
          break;
        case w3.via:
          n4 = "via";
      }
      N[`${n4}NetworkSource`] = r3, N[`${n4}AssetGroup`] = s7, N[`${n4}AssetType`] = a6, N[`${n4}Terminal`] = o3;
    }
    return N;
  }
  _getTerminal(e4, t5, r2) {
    var _a, _b, _c;
    if (e4 === t3.RTAttachment || e4 === t3.RTContainment)
      return null;
    const s6 = t5 == null ? void 0 : t5.terminalConfigurationId, a5 = (_a = this.terminalConfigurations) == null ? void 0 : _a.find((e5) => e5.id === s6);
    return (_c = (_b = a5 == null ? void 0 : a5.terminals) == null ? void 0 : _b.find((e5) => e5.id === r2.terminalId)) != null ? _c : null;
  }
};
e([y({ type: [c], json: { origins: { "web-map": { read: { source: "traceConfigurations" }, write: { target: "traceConfigurations" } }, service: { read: { source: "traceConfigurations" } } }, read: false } })], f.prototype, "sharedNamedTraceConfigurations", void 0), e([y({ type: ["utility"], readOnly: true, json: { read: false, write: false } })], f.prototype, "type", void 0), e([y({ readOnly: true })], f.prototype, "serviceTerritoryFeatureLayerId", null), e([y({ readOnly: true })], f.prototype, "networkSystemLayers", null), e([y({ readOnly: true })], f.prototype, "rulesTableId", null), e([y({ readOnly: true })], f.prototype, "rulesTableUrl", null), e([y({ readOnly: true })], f.prototype, "subnetworksTableId", null), e([y({ readOnly: true })], f.prototype, "subnetworksTableUrl", null), e([y({ readOnly: true })], f.prototype, "terminalConfigurations", null), e([y({ readOnly: true })], f.prototype, "domainNetworkNames", null), f = e([n("esri.networks.UtilityNetwork")], f);
var b = f;

export {
  b
};
//# sourceMappingURL=chunk-LYH4KRKH.js.map
