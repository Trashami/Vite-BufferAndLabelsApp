import {
  e as e3,
  t as t3
} from "./chunk-QXHTRQEZ.js";
import "./chunk-KYSY3ZPW.js";
import {
  t as t2
} from "./chunk-RDNOEC45.js";
import "./chunk-QRBRKBU3.js";
import {
  M,
  e2
} from "./chunk-NWBHRPMR.js";
import {
  n2
} from "./chunk-IIUWTGWW.js";
import "./chunk-K6AYGXUT.js";
import "./chunk-BHXTNOEK.js";
import "./chunk-IS4TIT4N.js";
import "./chunk-I4RYNNL6.js";
import "./chunk-FMJZBZWF.js";
import "./chunk-GOYVJTGW.js";
import "./chunk-ZPYDYUP5.js";
import {
  P,
  a,
  f
} from "./chunk-5NXILPDI.js";
import "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-XQN7F674.js";
import "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import "./chunk-KAN4HXCG.js";
import "./chunk-4FEGON7M.js";
import "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import {
  e,
  m,
  n2 as n,
  t5 as t,
  y
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import "./chunk-MJXQTGI2.js";
import "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/widgets/Expand/ExpandViewModel.js
var r = class extends m {
  constructor(e4) {
    super(e4), this._viewpointHandle = null, this._handles = new t(), this.group = null;
  }
  initialize() {
    this._handles.add(a(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.ui;
    }, "expand", (e4) => {
      const { target: t4 } = e4;
      t4 && t4 !== this && t4.expanded && t4.group && t4.group === this.group && this._collapse();
    }));
  }
  destroy() {
    this._viewpointHandle = null, this.view = null, this._handles.destroy(), this._handles = null;
  }
  set autoCollapse(e4) {
    this._set("autoCollapse", e4), this._watchViewpoint();
  }
  set expanded(e4) {
    const t4 = !!e4;
    this._set("expanded", t4);
    const i = this.get("view.ui");
    i && i.emit("expand", { target: this }), this._viewpointHandleChange(t4);
  }
  get state() {
    return this.get("view.ready") ? "ready" : "disabled";
  }
  set view(e4) {
    this._get("view") !== e4 && (this._set("view", e4), e4 && f(() => e4.ready, () => {
      this.view === e4 && this._watchViewpoint();
    }, { once: true, initial: true }));
  }
  _viewpointHandleChange(e4) {
    this._viewpointHandle && (e4 ? f(() => this.view.stationary, () => this._viewpointHandle.resume(), { once: true, initial: true }) : this._viewpointHandle.pause());
  }
  _watchViewpoint() {
    const e4 = "viewpoint";
    this._handles.remove(e4), this._viewpointHandle = null;
    const { autoCollapse: t4, view: i } = this;
    if (i && t4) {
      const t5 = P(() => "3d" === i.type ? i.camera : i.viewpoint, () => this._collapse());
      this._handles.add(t5, e4), this._viewpointHandle = t5;
    }
  }
  _collapse() {
    this.expanded = false;
  }
};
e([y({ value: false })], r.prototype, "autoCollapse", null), e([y({ value: false })], r.prototype, "expanded", null), e([y()], r.prototype, "group", void 0), e([y({ readOnly: true })], r.prototype, "state", null), e([y({ value: null })], r.prototype, "view", null), r = e([n("esri.widgets.Expand.ExpandViewModel")], r);
var p = r;

// node_modules/@arcgis/core/widgets/Expand.js
var l = { base: "esri-expand esri-widget", modeAuto: "esri-expand--auto", modeDrawer: "esri-expand--drawer", modeFloating: "esri-expand--floating", container: "esri-expand__container", containerExpanded: "esri-expand__container--expanded", panel: "esri-expand__panel", button: "esri-widget--button", text: "esri-icon-font-fallback-text", icon: "esri-collapse__icon", iconExpanded: "esri-expand__icon--expanded", iconNumber: "esri-expand__icon-number", iconNumberExpanded: "esri-expand__icon-number--expanded", expandIcon: "esri-icon-expand", collapseIcon: "esri-icon-collapse", content: "esri-expand__content", contentExpanded: "esri-expand__content--expanded", expandMask: "esri-expand__mask", expandMaskExpanded: "esri-expand__mask--expanded" };
var c = class extends M {
  constructor(e4, t4) {
    super(e4, t4), this.closeOnEsc = true, this.collapseTooltip = "", this.content = "", this.expandTooltip = "", this.iconNumber = 0, this.messages = null, this.messagesCommon = null, this.mode = "auto", this.viewModel = new p(), this._handleKeyDown = (e5) => {
      const { closeOnEsc: t5, _toggleButtonEl: n3, expanded: o } = this;
      if (!o || !t5 || e5.target === n3 || "Escape" !== e5.key)
        return;
      ("function" == typeof t5 ? t5(e5) : t5) && (this.expanded = false, n3 == null ? void 0 : n3.focus());
    };
  }
  get contentId() {
    return `${this.id}_controls_content`;
  }
  get expandTitle() {
    const { expanded: e4, messagesCommon: t4, collapseTooltip: n3, expandTooltip: o } = this;
    return e4 ? n3 || t4.collapse : o || t4.expand;
  }
  get autoCollapse() {
    return this.viewModel.autoCollapse;
  }
  set autoCollapse(e4) {
    this.viewModel.autoCollapse = e4;
  }
  get collapseIconClass() {
    return l.collapseIcon;
  }
  set collapseIconClass(e4) {
    this._overrideIfSome("collapseIconClass", e4);
  }
  get expanded() {
    return this.viewModel.expanded;
  }
  set expanded(e4) {
    this.viewModel.expanded = e4;
  }
  get expandIconClass() {
    return e3(this.content) ? this.content.iconClass : l.expandIcon;
  }
  set expandIconClass(e4) {
    this._overrideIfSome("expandIconClass", e4);
  }
  get group() {
    return this.viewModel.group;
  }
  set group(e4) {
    this.viewModel.group = e4;
  }
  get label() {
    var _a, _b;
    return (_b = (_a = this.messages) == null ? void 0 : _a.widgetLabel) != null ? _b : "";
  }
  set label(e4) {
    this._overrideIfSome("label", e4);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e4) {
    this.viewModel.view = e4;
  }
  expand() {
    this.viewModel.expanded = true;
  }
  collapse() {
    this.viewModel.expanded = false;
  }
  toggle() {
    this.viewModel.expanded = !this.viewModel.expanded;
  }
  render() {
    const { mode: e4 } = this, t4 = { [l.modeAuto]: "auto" === e4, [l.modeDrawer]: "drawer" === e4, [l.modeFloating]: "floating" === e4 };
    return n2("div", { class: this.classes(l.base, t4), onkeydown: this._handleKeyDown }, this.renderMask(), this.renderContainer());
  }
  renderContainer() {
    const { expanded: e4 } = this, t4 = { [l.containerExpanded]: e4 };
    return n2("div", { class: this.classes(l.container, t4) }, this.renderPanel(), this.renderContent());
  }
  renderMask() {
    const { expanded: e4 } = this, t4 = { [l.expandMaskExpanded]: e4 };
    return n2("div", { bind: this, onclick: this._toggle, class: this.classes(l.expandMask, t4) });
  }
  renderBadgeNumber() {
    const { expanded: e4, iconNumber: t4 } = this;
    return t4 && !e4 ? n2("span", { key: "expand__icon-number", class: l.iconNumber }, t4) : null;
  }
  renderPanelNumber() {
    const { iconNumber: e4, expanded: t4 } = this;
    return e4 && t4 ? n2("span", { key: "expand__expand-icon-number", class: this.classes(l.iconNumber, l.iconNumberExpanded) }, e4) : null;
  }
  renderIcon() {
    const { collapseIconClass: e4, expandIconClass: t4, expanded: n3 } = this, o = { [l.iconExpanded]: n3, [e4]: n3, [t4]: !n3 };
    return e4 === t4 && (o[e4] = true), n2("span", { "aria-hidden": "true", class: this.classes(l.icon, o) });
  }
  renderTitle() {
    return n2("span", { class: l.text }, this.expandTitle);
  }
  renderExpandButton() {
    const { expanded: e4, expandTitle: t4, contentId: n3 } = this;
    return n2("div", { afterCreate: this._storeToggleButtonEl, "aria-controls": n3, "aria-expanded": e4 ? "true" : "false", bind: this, class: l.button, onclick: this._toggle, onkeydown: this._toggle, role: "button", tabindex: "0", title: t4 }, this.renderBadgeNumber(), this.renderIcon(), this.renderTitle());
  }
  renderPanel() {
    return n2("div", { class: l.panel }, this.renderExpandButton(), this.renderPanelNumber());
  }
  renderContent() {
    const { expanded: e4, contentId: t4, content: n3 } = this, o = { [l.contentExpanded]: e4 }, s = { id: t4, role: "region", class: this.classes(l.content, o) };
    return "string" == typeof n3 ? n2("div", { key: "content__string", innerHTML: n3, ...s }) : e3(n3) ? n2("div", { key: "content__widget", ...s }, n3.render()) : n3 instanceof HTMLElement ? n2("div", { key: "content__html-element", bind: n3, afterCreate: this._attachToNode, ...s }) : t3(n3) ? n2("div", { key: "content__node", bind: n3.domNode, afterCreate: this._attachToNode, ...s }) : null;
  }
  _toggle() {
    this.toggle();
  }
  _attachToNode(e4) {
    const t4 = this;
    e4.appendChild(t4);
  }
  _storeToggleButtonEl(e4) {
    this._toggleButtonEl = e4;
  }
};
e([y({ readOnly: true })], c.prototype, "contentId", null), e([y({ readOnly: true })], c.prototype, "expandTitle", null), e([y()], c.prototype, "autoCollapse", null), e([y()], c.prototype, "closeOnEsc", void 0), e([y()], c.prototype, "collapseIconClass", null), e([y()], c.prototype, "collapseTooltip", void 0), e([y()], c.prototype, "content", void 0), e([y()], c.prototype, "expanded", null), e([y()], c.prototype, "expandIconClass", null), e([y()], c.prototype, "expandTooltip", void 0), e([y()], c.prototype, "group", null), e([y()], c.prototype, "iconNumber", void 0), e([y()], c.prototype, "label", null), e([y(), e2("esri/widgets/Expand/t9n/Expand")], c.prototype, "messages", void 0), e([y(), e2("esri/t9n/common")], c.prototype, "messagesCommon", void 0), e([y()], c.prototype, "mode", void 0), e([y()], c.prototype, "view", null), e([y({ type: p })], c.prototype, "viewModel", void 0), e([t2()], c.prototype, "_toggle", null), c = e([n("esri.widgets.Expand")], c);
var u = c;

// dep:@arcgis_core_widgets_Expand
var arcgis_core_widgets_Expand_default = u;
export {
  arcgis_core_widgets_Expand_default as default
};
//# sourceMappingURL=@arcgis_core_widgets_Expand.js.map
