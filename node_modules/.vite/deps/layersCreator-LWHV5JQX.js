import {
  y
} from "./chunk-4JUCJNTV.js";
import {
  a
} from "./chunk-RLIH5RCN.js";
import "./chunk-QVMWXE75.js";
import "./chunk-PQLPA2XZ.js";
import "./chunk-BWNO4YZY.js";
import "./chunk-FFVIDMFN.js";
import {
  t
} from "./chunk-O5PXWHV2.js";
import "./chunk-J5VTDQTQ.js";
import "./chunk-HUQX7WZO.js";
import {
  x
} from "./chunk-BYSA56OH.js";
import "./chunk-ZWUEORSX.js";
import "./chunk-ZPYDYUP5.js";
import "./chunk-SOEQPPQP.js";
import "./chunk-RT3T2K4S.js";
import "./chunk-WJCI2CGX.js";
import "./chunk-X2S4RQJ4.js";
import "./chunk-6M2AHKYV.js";
import "./chunk-SZIJNKCV.js";
import "./chunk-6O43OEU5.js";
import "./chunk-J2K7ZDSV.js";
import "./chunk-2UML3WQZ.js";
import {
  j
} from "./chunk-UDND2Z3V.js";
import "./chunk-23Y3DIC6.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import "./chunk-3MNMDUQZ.js";
import "./chunk-UWG37XSU.js";
import "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import "./chunk-RXYULINL.js";
import "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import "./chunk-KAN4HXCG.js";
import "./chunk-4FEGON7M.js";
import "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-7QMMKGW4.js";
import "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import {
  E
} from "./chunk-MJXQTGI2.js";
import "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import "./chunk-UA3YPL2R.js";
import "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/portal/support/featureCollectionUtils.js
function e(e2) {
  return t2(e2, "notes");
}
function r(e2) {
  return t2(e2, "markup");
}
function n(e2) {
  return t2(e2, "route");
}
function t2(e2, r2) {
  return !(!e2.layerType || "ArcGISFeatureLayer" !== e2.layerType) && e2.featureCollectionType === r2;
}

// node_modules/@arcgis/core/layers/support/layersCreator.js
async function l(e2, a2, y2) {
  if (!a2)
    return;
  const t3 = [];
  for (const r2 of a2) {
    const e3 = d(r2, y2);
    "GroupLayer" === r2.layerType ? t3.push(M(e3, r2, y2)) : t3.push(e3);
  }
  const i = await E(t3);
  for (const r2 of i)
    !r2.value || y2.filter && !y2.filter(r2.value) || e2.add(r2.value);
}
var c = { ArcGISDimensionLayer: "DimensionLayer", ArcGISFeatureLayer: "FeatureLayer", ArcGISImageServiceLayer: "ImageryLayer", ArcGISMapServiceLayer: "MapImageLayer", PointCloudLayer: "PointCloudLayer", ArcGISSceneServiceLayer: "SceneLayer", IntegratedMeshLayer: "IntegratedMeshLayer", OGCFeatureLayer: "OGCFeatureLayer", BuildingSceneLayer: "BuildingSceneLayer", ArcGISTiledElevationServiceLayer: "ElevationLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", ArcGISTiledMapServiceLayer: "TileLayer", GroupLayer: "GroupLayer", GeoJSON: "GeoJSONLayer", WebTiledLayer: "WebTileLayer", CSV: "CSVLayer", VectorTileLayer: "VectorTileLayer", WFS: "WFSLayer", WMS: "WMSLayer", DefaultTileLayer: "TileLayer", KML: "KMLLayer", RasterDataLayer: "UnsupportedLayer", Voxel: "VoxelLayer", LineOfSightLayer: "LineOfSightLayer" };
var s = { ArcGISTiledElevationServiceLayer: "ElevationLayer", DefaultTileLayer: "ElevationLayer", RasterDataElevationLayer: "UnsupportedLayer" };
var p = { ArcGISTiledMapServiceLayer: "TileLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", OpenStreetMap: "OpenStreetMapLayer", WebTiledLayer: "WebTileLayer", VectorTileLayer: "VectorTileLayer", ArcGISImageServiceLayer: "UnsupportedLayer", WMS: "UnsupportedLayer", ArcGISMapServiceLayer: "UnsupportedLayer", DefaultTileLayer: "TileLayer" };
var S = { ArcGISAnnotationLayer: "UnsupportedLayer", ArcGISDimensionLayer: "UnsupportedLayer", ArcGISFeatureLayer: "FeatureLayer", ArcGISImageServiceLayer: "ImageryLayer", ArcGISImageServiceVectorLayer: "ImageryLayer", ArcGISMapServiceLayer: "MapImageLayer", ArcGISStreamLayer: "StreamLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", ArcGISTiledMapServiceLayer: "TileLayer", BingMapsAerial: "BingMapsLayer", BingMapsRoad: "BingMapsLayer", BingMapsHybrid: "BingMapsLayer", CSV: "CSVLayer", DefaultTileLayer: "TileLayer", GeoRSS: "GeoRSSLayer", GeoJSON: "GeoJSONLayer", GroupLayer: "GroupLayer", KML: "KMLLayer", OGCFeatureLayer: "OGCFeatureLayer", OrientedImageryLayer: "OrientedImageryLayer", SubtypeGroupLayer: "SubtypeGroupLayer", VectorTileLayer: "VectorTileLayer", WFS: "WFSLayer", WMS: "WMSLayer", WebTiledLayer: "WebTileLayer" };
var u = { ArcGISFeatureLayer: "FeatureLayer" };
var I = { ArcGISImageServiceLayer: "ImageryLayer", ArcGISImageServiceVectorLayer: "ImageryLayer", ArcGISMapServiceLayer: "MapImageLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", ArcGISTiledMapServiceLayer: "TileLayer", OpenStreetMap: "OpenStreetMapLayer", VectorTileLayer: "VectorTileLayer", WebTiledLayer: "WebTileLayer", BingMapsAerial: "BingMapsLayer", BingMapsRoad: "BingMapsLayer", BingMapsHybrid: "BingMapsLayer", WMS: "WMSLayer", DefaultTileLayer: "TileLayer" };
async function d(e2, r2) {
  return m(await T(e2, r2), e2, r2);
}
async function m(e2, r2, a2) {
  const y2 = new e2();
  return y2.read(r2, a2.context), "group" === y2.type && g(r2) && await A(y2, r2, a2.context), await t(y2, a2.context), y2;
}
async function T(e2, r2) {
  const o = r2.context, l2 = G(o);
  let c2 = e2.layerType || e2.type;
  !c2 && r2 && r2.defaultLayerType && (c2 = r2.defaultLayerType);
  const s2 = l2[c2];
  let p2 = s2 ? a[s2] : a.UnknownLayer;
  if (f(e2)) {
    const r3 = o == null ? void 0 : o.portal;
    if (e2.itemId) {
      const t3 = new x({ id: e2.itemId, portal: r3 });
      await t3.load();
      const i = (await y(t3)).className || "UnknownLayer";
      p2 = a[i];
    }
  } else
    "ArcGISFeatureLayer" === c2 ? e(e2) || r(e2) ? p2 = a.MapNotesLayer : n(e2) ? p2 = a.RouteLayer : g(e2) && (p2 = a.GroupLayer) : e2.wmtsInfo && e2.wmtsInfo.url && e2.wmtsInfo.layerIdentifier ? p2 = a.WMTSLayer : "WFS" === c2 && "2.0.0" !== e2.wfsInfo.version && (p2 = a.UnsupportedLayer);
  return p2();
}
function g(e2) {
  var _a, _b, _c;
  if ("ArcGISFeatureLayer" !== e2.layerType || f(e2))
    return false;
  return ((_c = (_b = (_a = e2.featureCollection) == null ? void 0 : _a.layers) == null ? void 0 : _b.length) != null ? _c : 0) > 1;
}
function f(e2) {
  return "Feature Collection" === e2.type;
}
function G(e2) {
  let r2;
  if ("web-scene" === e2.origin)
    switch (e2.layerContainerType) {
      case "basemap":
        r2 = p;
        break;
      case "ground":
        r2 = s;
        break;
      default:
        r2 = c;
    }
  else
    switch (e2.layerContainerType) {
      case "basemap":
        r2 = I;
        break;
      case "tables":
        r2 = u;
        break;
      default:
        r2 = S;
    }
  return r2;
}
async function M(r2, a2, y2) {
  const t3 = new j(), i = l(t3, Array.isArray(a2.layers) ? a2.layers : [], y2), L = await r2;
  if (await i, "group" === L.type)
    return L.layers.addMany(t3), L;
}
async function A(e2, r2, y2) {
  const t3 = a.FeatureLayer, i = await t3(), L = r2.featureCollection, n2 = L.showLegend, o = L.layers.map((a2, t4) => {
    var _a, _b;
    const L2 = new i();
    L2.read(a2, y2);
    const o2 = { ...y2, ignoreDefaults: true };
    return L2.read({ id: `${e2.id}-sublayer-${t4}`, visibility: (_b = (_a = r2.visibleLayers) == null ? void 0 : _a.includes(t4)) != null ? _b : true }, o2), null != n2 && L2.read({ showLegend: n2 }, o2), L2;
  });
  e2.layers.addMany(o);
}
export {
  l as populateOperationalLayers
};
//# sourceMappingURL=layersCreator-LWHV5JQX.js.map
