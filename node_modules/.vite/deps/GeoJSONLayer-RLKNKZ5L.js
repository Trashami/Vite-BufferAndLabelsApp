import {
  l as l2
} from "./chunk-WKJPACEU.js";
import "./chunk-OP2HNSVZ.js";
import {
  c as c3
} from "./chunk-TZTENXCS.js";
import {
  n as n4,
  p as p4
} from "./chunk-RQPDRERN.js";
import "./chunk-MBLYC2KR.js";
import "./chunk-XGEPEYGB.js";
import {
  n as n5
} from "./chunk-6BYMCM5A.js";
import {
  p as p5
} from "./chunk-BR5PSTJI.js";
import {
  i as i2,
  j as j3
} from "./chunk-2T7LFOXQ.js";
import "./chunk-NCONZRBI.js";
import "./chunk-76CXRT5P.js";
import {
  s as s3
} from "./chunk-LZKCWJVH.js";
import "./chunk-7Q5M7ANT.js";
import {
  a
} from "./chunk-LPRQBCQL.js";
import "./chunk-QR4K7IDQ.js";
import {
  o
} from "./chunk-7N45W3EA.js";
import {
  p as p6
} from "./chunk-MQVQXXLV.js";
import "./chunk-A4HIS5ZJ.js";
import {
  x as x3
} from "./chunk-AMLHWG76.js";
import "./chunk-OFQYIOO7.js";
import {
  v as v2
} from "./chunk-G3HEFWHV.js";
import {
  p as p2
} from "./chunk-3GENFQBG.js";
import {
  c as c2
} from "./chunk-FX6IXM55.js";
import {
  O
} from "./chunk-QFFP6A5Q.js";
import {
  n as n3,
  p2 as p3
} from "./chunk-JP3KAUQB.js";
import "./chunk-INL7BDTP.js";
import "./chunk-PDEVQZ7U.js";
import "./chunk-7XXQ7762.js";
import "./chunk-DVGM5RQS.js";
import "./chunk-R6OA44DQ.js";
import "./chunk-QTYVDCOW.js";
import {
  c,
  d,
  f,
  j as j2,
  l,
  m as m2,
  p,
  w as w3
} from "./chunk-YGVY4EIZ.js";
import "./chunk-HSDU7DIL.js";
import "./chunk-FWRLW4G5.js";
import "./chunk-JNNRJ7GQ.js";
import "./chunk-E52E6T7N.js";
import {
  x as x2
} from "./chunk-UK3I5WXR.js";
import {
  y as y2
} from "./chunk-GLGOVVCK.js";
import "./chunk-BUVDI6S7.js";
import "./chunk-6Z6ZAVRA.js";
import "./chunk-PK4W65H4.js";
import "./chunk-GY2AJLN6.js";
import "./chunk-W62B63EU.js";
import "./chunk-N43PI2UO.js";
import "./chunk-O6VYMEIX.js";
import "./chunk-NDQ5FHGV.js";
import "./chunk-HUQX7WZO.js";
import "./chunk-BYSA56OH.js";
import "./chunk-US2IWMHE.js";
import {
  u
} from "./chunk-ZL4T4NIV.js";
import "./chunk-NAKEKTIK.js";
import "./chunk-QWNKYSI4.js";
import "./chunk-FMJZBZWF.js";
import "./chunk-GOYVJTGW.js";
import "./chunk-ZPYDYUP5.js";
import {
  n as n2
} from "./chunk-TDV3ZXCQ.js";
import {
  t as t2
} from "./chunk-XJCUKRCO.js";
import {
  b
} from "./chunk-SOEQPPQP.js";
import "./chunk-22F6X66Z.js";
import "./chunk-AIDV7EKX.js";
import "./chunk-FZQZIM7U.js";
import "./chunk-YM6PUX7G.js";
import "./chunk-QEYOWTXD.js";
import "./chunk-CZBRZ6SU.js";
import "./chunk-KDO6J2FO.js";
import "./chunk-RT3T2K4S.js";
import "./chunk-WJCI2CGX.js";
import "./chunk-J6LQZWZI.js";
import "./chunk-OD3FDQCI.js";
import "./chunk-J2PJNRU7.js";
import "./chunk-56SPM3WK.js";
import "./chunk-XMZAPOBR.js";
import "./chunk-BLJKKR5D.js";
import "./chunk-ZGNCYHMZ.js";
import "./chunk-X2S4RQJ4.js";
import {
  k as k2
} from "./chunk-FUPLN7UM.js";
import {
  F,
  x as x4
} from "./chunk-376OPXM4.js";
import "./chunk-DER356EU.js";
import "./chunk-MZIWIEIR.js";
import "./chunk-TQEOEDAZ.js";
import "./chunk-SHFHZMHO.js";
import "./chunk-NRP45AHD.js";
import "./chunk-IWQ7452U.js";
import "./chunk-NAN5J6QS.js";
import "./chunk-B4DKBAM3.js";
import "./chunk-6M2AHKYV.js";
import "./chunk-SZIJNKCV.js";
import {
  m
} from "./chunk-6O43OEU5.js";
import "./chunk-J2K7ZDSV.js";
import "./chunk-2UML3WQZ.js";
import "./chunk-KXVMEIWT.js";
import "./chunk-UDND2Z3V.js";
import "./chunk-23Y3DIC6.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-RAX2HD42.js";
import "./chunk-ZYRIJWLX.js";
import "./chunk-C5H57NTD.js";
import "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import {
  i
} from "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import {
  v2 as v
} from "./chunk-3MNMDUQZ.js";
import {
  w2
} from "./chunk-UWG37XSU.js";
import {
  k2 as k
} from "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import "./chunk-RXYULINL.js";
import "./chunk-5NXILPDI.js";
import "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-XQN7F674.js";
import "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import {
  j
} from "./chunk-KAN4HXCG.js";
import "./chunk-4FEGON7M.js";
import "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-CXFRNDG4.js";
import "./chunk-7QMMKGW4.js";
import {
  e,
  n2 as n,
  y
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import {
  w,
  x
} from "./chunk-MJXQTGI2.js";
import {
  s as s2
} from "./chunk-LIZHLHNA.js";
import "./chunk-BTUHYGXO.js";
import {
  s2 as s
} from "./chunk-UA3YPL2R.js";
import {
  has
} from "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import {
  r,
  t
} from "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/layers/graphics/sources/GeoJSONSource.js
var y3 = "esri.layers.graphics.sources.GeoJSONSource";
var f2 = s.getLogger(y3);
var g = class extends m {
  constructor() {
    super(...arguments), this.type = "geojson", this.refresh = x(async (e2) => {
      await this.load();
      const { extent: t3, timeExtent: r2 } = await this._connection.invoke("refresh", e2);
      return this.sourceJSON.extent = t3, r2 && (this.sourceJSON.timeInfo.timeExtent = [r2.start, r2.end]), { dataChanged: true, updates: { extent: this.sourceJSON.extent, timeInfo: this.sourceJSON.timeInfo } };
    });
  }
  load(e2) {
    const t3 = r(e2) ? e2.signal : null;
    return this.addResolvingPromise(this._startWorker(t3)), Promise.resolve(this);
  }
  destroy() {
    var _a;
    (_a = this._connection) == null ? void 0 : _a.close(), this._connection = null;
  }
  applyEdits(e2) {
    return this.load().then(() => this._applyEdits(e2));
  }
  openPorts() {
    return this.load().then(() => this._connection.openPorts());
  }
  queryFeatures(e2, t3 = {}) {
    return this.load(t3).then(() => this._connection.invoke("queryFeatures", e2 ? e2.toJSON() : null, t3)).then((e3) => x2.fromJSON(e3));
  }
  queryFeaturesJSON(e2, t3 = {}) {
    return this.load(t3).then(() => this._connection.invoke("queryFeatures", e2 ? e2.toJSON() : null, t3));
  }
  queryFeatureCount(e2, t3 = {}) {
    return this.load(t3).then(() => this._connection.invoke("queryFeatureCount", e2 ? e2.toJSON() : null, t3));
  }
  queryObjectIds(e2, t3 = {}) {
    return this.load(t3).then(() => this._connection.invoke("queryObjectIds", e2 ? e2.toJSON() : null, t3));
  }
  queryExtent(e2, t3 = {}) {
    return this.load(t3).then(() => this._connection.invoke("queryExtent", e2 ? e2.toJSON() : null, t3)).then((e3) => ({ count: e3.count, extent: w2.fromJSON(e3.extent) }));
  }
  querySnapping(e2, t3 = {}) {
    return this.load(t3).then(() => this._connection.invoke("querySnapping", e2, t3));
  }
  _applyEdits(e2) {
    if (!this._connection)
      throw new s2("geojson-layer-source:edit-failure", "Memory source not loaded");
    const r2 = this.layer.objectIdField, o2 = [], s4 = [], i3 = [];
    if (e2.addFeatures)
      for (const t3 of e2.addFeatures)
        o2.push(this._serializeFeature(t3));
    if (e2.deleteFeatures)
      for (const t3 of e2.deleteFeatures)
        "objectId" in t3 && null != t3.objectId ? s4.push(t3.objectId) : "attributes" in t3 && null != t3.attributes[r2] && s4.push(t3.attributes[r2]);
    if (e2.updateFeatures)
      for (const t3 of e2.updateFeatures)
        i3.push(this._serializeFeature(t3));
    return this._connection.invoke("applyEdits", { adds: o2, updates: i3, deletes: s4 }).then(({ extent: e3, timeExtent: t3, featureEditResults: r3 }) => (this.sourceJSON.extent = e3, t3 && (this.sourceJSON.timeInfo.timeExtent = [t3.start, t3.end]), this._createEditsResult(r3)));
  }
  _createEditsResult(e2) {
    return { addFeatureResults: e2.addResults ? e2.addResults.map(this._createFeatureEditResult, this) : [], updateFeatureResults: e2.updateResults ? e2.updateResults.map(this._createFeatureEditResult, this) : [], deleteFeatureResults: e2.deleteResults ? e2.deleteResults.map(this._createFeatureEditResult, this) : [], addAttachmentResults: [], updateAttachmentResults: [], deleteAttachmentResults: [] };
  }
  _createFeatureEditResult(e2) {
    const r2 = true === e2.success ? null : e2.error || { code: void 0, description: void 0 };
    return { objectId: e2.objectId, globalId: e2.globalId, error: r2 ? new s2("geojson-layer-source:edit-failure", r2.description, { code: r2.code }) : null };
  }
  _serializeFeature(e2) {
    const { attributes: t3 } = e2, r2 = this._geometryForSerialization(e2);
    return r2 ? { geometry: r2.toJSON(), attributes: t3 } : { attributes: t3 };
  }
  _geometryForSerialization(e2) {
    const { geometry: t3 } = e2;
    return t(t3) ? null : "mesh" === t3.type || "extent" === t3.type ? v.fromExtent(t3.extent) : t3;
  }
  async _startWorker(e2) {
    this._connection = await u("GeoJSONSourceWorker", { strategy: has("feature-layers-workers") ? "dedicated" : "local", signal: e2 });
    const { fields: t3, spatialReference: r2, hasZ: o2, geometryType: s4, objectIdField: i3, url: n6, timeInfo: u2, customParameters: l3 } = this.layer, d2 = "defaults" === this.layer.originOf("spatialReference"), p7 = { url: n6, customParameters: l3, fields: t3 && t3.map((e3) => e3.toJSON()), geometryType: i.toJSON(s4), hasZ: o2, objectIdField: i3, timeInfo: u2 ? u2.toJSON() : null, spatialReference: d2 ? null : r2 && r2.toJSON() }, h = await this._connection.invoke("load", p7, { signal: e2 });
    for (const a2 of h.warnings)
      f2.warn(a2.message, { layer: this.layer, warning: a2 });
    h.featureErrors.length && f2.warn(`Encountered ${h.featureErrors.length} validation errors while loading features`, h.featureErrors), this.sourceJSON = h.layerDefinition, this.capabilities = l2(this.sourceJSON.hasZ, true);
  }
};
e([y()], g.prototype, "capabilities", void 0), e([y()], g.prototype, "type", void 0), e([y({ constructOnly: true })], g.prototype, "layer", void 0), e([y()], g.prototype, "sourceJSON", void 0), g = e([n(y3)], g);

// node_modules/@arcgis/core/layers/GeoJSONLayer.js
var Z = s3();
var M = class extends c3(o(n4(p4(n2(a(t2(p2(c2(v2(O(b))))))))))) {
  constructor(e2) {
    super(e2), this.copyright = null, this.definitionExpression = null, this.displayField = null, this.editingEnabled = false, this.elevationInfo = null, this.fields = null, this.fieldsIndex = null, this.fullExtent = null, this.geometryType = null, this.hasZ = void 0, this.labelsVisible = true, this.labelingInfo = null, this.legendEnabled = true, this.objectIdField = null, this.operationalLayerType = "GeoJSON", this.popupEnabled = true, this.popupTemplate = null, this.screenSizePerspectiveEnabled = true, this.source = new g({ layer: this }), this.spatialReference = k.WGS84, this.templates = null, this.title = "GeoJSON", this.type = "geojson", this.typeIdField = null, this.types = null;
  }
  destroy() {
    var _a;
    (_a = this.source) == null ? void 0 : _a.destroy();
  }
  load(e2) {
    const t3 = this.loadFromPortal({ supportedTypes: ["GeoJson"], supportsData: false }, e2).catch(w).then(() => this.source.load(e2)).then(() => {
      this.read(this.source.sourceJSON, { origin: "service", url: this.parsedUrl }), this.revert(["objectIdField", "fields", "timeInfo"], "service"), F(this.renderer, this.fieldsIndex), x4(this.timeInfo, this.fieldsIndex);
    });
    return this.addResolvingPromise(t3), Promise.resolve(this);
  }
  get capabilities() {
    return this.source ? this.source.capabilities : null;
  }
  get createQueryVersion() {
    return this.commitProperty("definitionExpression"), this.commitProperty("timeExtent"), this.commitProperty("timeOffset"), this.commitProperty("geometryType"), this.commitProperty("capabilities"), (this._get("createQueryVersion") || 0) + 1;
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  get isTable() {
    return this.loaded && null == this.geometryType;
  }
  get parsedUrl() {
    return this.url ? j(this.url) : null;
  }
  set renderer(e2) {
    F(e2, this.fieldsIndex), this._set("renderer", e2);
  }
  set url(e2) {
    if (!e2)
      return void this._set("url", e2);
    const t3 = j(e2);
    this._set("url", t3.path), t3.query && (this.customParameters = { ...this.customParameters, ...t3.query });
  }
  async applyEdits(e2, t3) {
    const r2 = await import("./editingSupport-6MAA475O.js");
    await this.load();
    const i3 = await r2.applyEdits(this, this.source, e2, t3);
    return this.read({ extent: this.source.sourceJSON.extent, timeInfo: this.source.sourceJSON.timeInfo }, { origin: "service", ignoreDefaults: true }), i3;
  }
  on(e2, t3) {
    return super.on(e2, t3);
  }
  createPopupTemplate(e2) {
    return p6(this, e2);
  }
  createQuery() {
    const e2 = new x3(), t3 = this.get("capabilities.data");
    e2.returnGeometry = true, t3 && t3.supportsZ && (e2.returnZ = true), e2.outFields = ["*"], e2.where = this.definitionExpression || "1=1";
    const { timeOffset: r2, timeExtent: i3 } = this;
    return e2.timeExtent = null != r2 && null != i3 ? i3.offset(-r2.value, r2.unit) : i3 || null, e2;
  }
  getFieldDomain(e2, t3) {
    let r2, i3 = false;
    const o2 = t3 && t3.feature, s4 = o2 && o2.attributes, p7 = this.typeIdField && s4 && s4[this.typeIdField];
    return null != p7 && this.types && (i3 = this.types.some((t4) => t4.id == p7 && (r2 = t4.domains && t4.domains[e2], r2 && "inherited" === r2.type && (r2 = this._getLayerDomain(e2)), true))), i3 || r2 || (r2 = this._getLayerDomain(e2)), r2;
  }
  getField(e2) {
    return this.fieldsIndex.get(e2);
  }
  queryFeatures(e2, t3) {
    return this.load().then(() => this.source.queryFeatures(x3.from(e2) || this.createQuery(), t3)).then((e3) => {
      if (e3 == null ? void 0 : e3.features)
        for (const t4 of e3.features)
          t4.layer = t4.sourceLayer = this;
      return e3;
    });
  }
  queryObjectIds(e2, t3) {
    return this.load().then(() => this.source.queryObjectIds(x3.from(e2) || this.createQuery(), t3));
  }
  queryFeatureCount(e2, t3) {
    return this.load().then(() => this.source.queryFeatureCount(x3.from(e2) || this.createQuery(), t3));
  }
  queryExtent(e2, t3) {
    return this.load().then(() => this.source.queryExtent(x3.from(e2) || this.createQuery(), t3));
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e2, updates: t3 } = await this.source.refresh(this.customParameters);
      return r(t3) && this.read(t3, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e2;
    } catch {
    }
    return false;
  }
  _getLayerDomain(e2) {
    if (!this.fields)
      return null;
    let t3 = null;
    return this.fields.some((r2) => (r2.name === e2 && (t3 = r2.domain), !!t3)), t3;
  }
};
e([y({ readOnly: true, json: { read: false, write: false } })], M.prototype, "capabilities", null), e([y({ type: String })], M.prototype, "copyright", void 0), e([y({ readOnly: true })], M.prototype, "createQueryVersion", null), e([y({ readOnly: true })], M.prototype, "defaultPopupTemplate", null), e([y({ type: String, json: { name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], M.prototype, "definitionExpression", void 0), e([y({ type: String })], M.prototype, "displayField", void 0), e([y({ type: Boolean })], M.prototype, "editingEnabled", void 0), e([y(d)], M.prototype, "elevationInfo", void 0), e([y({ type: [y2], json: { name: "layerDefinition.fields", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "fields" } } } })], M.prototype, "fields", void 0), e([y(Z.fieldsIndex)], M.prototype, "fieldsIndex", void 0), e([y({ type: w2, json: { name: "extent" } })], M.prototype, "fullExtent", void 0), e([y({ type: ["point", "polygon", "polyline", "multipoint"], json: { read: { reader: i.read } } })], M.prototype, "geometryType", void 0), e([y({ type: Boolean })], M.prototype, "hasZ", void 0), e([y(j2)], M.prototype, "id", void 0), e([y({ type: Boolean, readOnly: true })], M.prototype, "isTable", null), e([y(m2)], M.prototype, "labelsVisible", void 0), e([y({ type: [j3], json: { name: "layerDefinition.drawingInfo.labelingInfo", read: { reader: i2 }, write: true } })], M.prototype, "labelingInfo", void 0), e([y(c)], M.prototype, "legendEnabled", void 0), e([y({ type: ["show", "hide"] })], M.prototype, "listMode", void 0), e([y({ type: String, json: { name: "layerDefinition.objectIdField", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "objectIdField" } } } })], M.prototype, "objectIdField", void 0), e([y(w3)], M.prototype, "opacity", void 0), e([y({ type: ["GeoJSON"] })], M.prototype, "operationalLayerType", void 0), e([y({ readOnly: true })], M.prototype, "parsedUrl", null), e([y(p)], M.prototype, "popupEnabled", void 0), e([y({ type: k2, json: { name: "popupInfo", write: true } })], M.prototype, "popupTemplate", void 0), e([y({ types: p3, json: { name: "layerDefinition.drawingInfo.renderer", write: true, origins: { service: { name: "drawingInfo.renderer" }, "web-scene": { types: n3 } } } })], M.prototype, "renderer", null), e([y(l)], M.prototype, "screenSizePerspectiveEnabled", void 0), e([y({ readOnly: true })], M.prototype, "source", void 0), e([y({ type: k })], M.prototype, "spatialReference", void 0), e([y({ type: [p5] })], M.prototype, "templates", void 0), e([y()], M.prototype, "title", void 0), e([y({ json: { read: false }, readOnly: true })], M.prototype, "type", void 0), e([y({ type: String, readOnly: true })], M.prototype, "typeIdField", void 0), e([y({ type: [n5] })], M.prototype, "types", void 0), e([y(f)], M.prototype, "url", null), M = e([n("esri.layers.GeoJSONLayer")], M);
var k3 = M;
export {
  k3 as default
};
//# sourceMappingURL=GeoJSONLayer-RLKNKZ5L.js.map
