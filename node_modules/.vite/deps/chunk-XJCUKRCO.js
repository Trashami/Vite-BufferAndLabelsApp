import {
  e,
  n2 as n,
  y
} from "./chunk-OOLCFNXJ.js";

// node_modules/@arcgis/core/layers/mixins/ScaleRangeLayer.js
var t = (t2) => {
  let l = class extends t2 {
    constructor() {
      super(...arguments), this.minScale = 0, this.maxScale = 0;
    }
    get effectiveScaleRange() {
      const e2 = { minScale: this.minScale, maxScale: this.maxScale }, a = this.parent;
      a && "effectiveScaleRange" in a && r(e2, a.effectiveScaleRange);
      const c = this._get("effectiveScaleRange");
      return c && c.minScale === e2.minScale && c.maxScale === e2.maxScale ? c : e2;
    }
  };
  return e([y({ type: Number, nonNullable: true, json: { write: true } })], l.prototype, "minScale", void 0), e([y({ type: Number, nonNullable: true, json: { write: true } })], l.prototype, "maxScale", void 0), e([y({ readOnly: true })], l.prototype, "effectiveScaleRange", null), l = e([n("esri.layers.mixins.ScaleRangeLayer")], l), l;
};
function r(e2, a) {
  return e2.minScale = e2.minScale > 0 ? a.minScale > 0 ? Math.min(e2.minScale, a.minScale) : e2.minScale : a.minScale, e2.maxScale = e2.maxScale > 0 ? a.maxScale > 0 ? Math.max(e2.maxScale, a.maxScale) : e2.maxScale : a.maxScale, e2;
}

export {
  t
};
//# sourceMappingURL=chunk-XJCUKRCO.js.map
