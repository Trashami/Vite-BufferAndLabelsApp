import {
  c,
  n
} from "./chunk-HVKDYDPP.js";
import {
  r
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/config.js
var _a;
var s = { analysisTheme: { accentColor: [255, 128, 0], textColor: "white" }, apiKey: void 0, applicationUrl: (_a = globalThis.location) == null ? void 0 : _a.href, assetsPath: "", fontsUrl: "https://static.arcgis.com/fonts", geometryServiceUrl: "https://utility.arcgisonline.com/arcgis/rest/services/Geometry/GeometryServer", geoRSSServiceUrl: "https://utility.arcgis.com/sharing/rss", kmlServiceUrl: "https://utility.arcgis.com/sharing/kml", portalUrl: "https://www.arcgis.com", routeServiceUrl: "https://route-api.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World", workers: { loaderConfig: { has: {}, paths: {}, map: {}, packages: [] } }, request: { crossOriginNoCorsDomains: null, httpsDomains: ["arcgis.com", "arcgisonline.com", "esrikr.com", "premiumservices.blackbridge.com", "esripremium.accuweather.com", "gbm.digitalglobe.com", "firstlook.digitalglobe.com", "msi.digitalglobe.com"], interceptors: [], maxUrlLength: 2e3, priority: "high", proxyRules: [], proxyUrl: null, timeout: 6e4, trustedServers: [], useIdentity: true }, log: { interceptors: [], level: null } };
if (globalThis.esriConfig && (n(s, globalThis.esriConfig, true), delete s.has), !s.assetsPath) {
  {
    const e = "4.25.4";
    s.assetsPath = `https://js.arcgis.com/${e.slice(0, -2)}/@arcgis/core/assets`;
  }
  s.defaultAssetsPath = s.assetsPath;
}

// node_modules/@arcgis/core/core/Logger.js
var o = { info: 0, warn: 1, error: 2, none: 3 };
var s2 = class {
  constructor(e) {
    this.level = null, this._module = "", this._parent = null, this.writer = null, this._loggedMessages = { error: /* @__PURE__ */ new Map(), warn: /* @__PURE__ */ new Map(), info: /* @__PURE__ */ new Map() }, null != e.level && (this.level = e.level), null != e.writer && (this.writer = e.writer), this._module = e.module, s2._loggers[this.module] = this;
    const t = this.module.lastIndexOf(".");
    -1 !== t && (this._parent = s2.getLogger(this.module.slice(0, t)));
  }
  get module() {
    return this._module;
  }
  get parent() {
    return this._parent;
  }
  error(...e) {
    this._log("error", "always", ...e);
  }
  warn(...e) {
    this._log("warn", "always", ...e);
  }
  info(...e) {
    this._log("info", "always", ...e);
  }
  errorOnce(...e) {
    this._log("error", "once", ...e);
  }
  warnOnce(...e) {
    this._log("warn", "once", ...e);
  }
  infoOnce(...e) {
    this._log("info", "once", ...e);
  }
  errorOncePerTick(...e) {
    this._log("error", "oncePerTick", ...e);
  }
  warnOncePerTick(...e) {
    this._log("warn", "oncePerTick", ...e);
  }
  infoOncePerTick(...e) {
    this._log("info", "oncePerTick", ...e);
  }
  get test() {
    const e = this;
    return { loggedMessages: e._loggedMessages, clearLoggedWarnings: () => e._loggedMessages.warn.clear() };
  }
  static get testSingleton() {
    return { resetLoggers(e = {}) {
      const t = s2._loggers;
      return s2._loggers = e, t;
    }, set throttlingDisabled(e) {
      s2._throttlingDisabled = e;
    } };
  }
  static getLogger(e) {
    let t = s2._loggers[e];
    return t || (t = new s2({ module: e })), t;
  }
  _log(t, r2, ...o2) {
    if (!this._matchLevel(t))
      return;
    if ("always" !== r2 && !s2._throttlingDisabled) {
      const e = this._argsToKey(o2), n2 = this._loggedMessages[t].get(e);
      if ("once" === r2 && null != n2 || "oncePerTick" === r2 && n2 && n2 >= s2._tickCounter)
        return;
      this._loggedMessages[t].set(e, s2._tickCounter), s2._scheduleTickCounterIncrement();
    }
    for (const s3 of s.log.interceptors)
      if (s3(t, this.module, ...o2))
        return;
    this._inheritedWriter()(t, this.module, ...o2);
  }
  _parentWithMember(e, r2) {
    let o2 = this;
    for (; r(o2); ) {
      const r3 = o2[e];
      if (r(r3))
        return r3;
      o2 = o2.parent;
    }
    return r2;
  }
  _inheritedWriter() {
    return this._parentWithMember("writer", this._consoleWriter);
  }
  _consoleWriter(e, t, ...r2) {
    console[e](`[${t}]`, ...r2);
  }
  _matchLevel(t) {
    const r2 = s.log.level ? s.log.level : "warn";
    return o[this._parentWithMember("level", r2)] <= o[t];
  }
  _argsToKey(...e) {
    const t = (e2, t2) => "object" != typeof t2 || Array.isArray(t2) ? t2 : "[Object]";
    return c(JSON.stringify(e, t));
  }
  static _scheduleTickCounterIncrement() {
    s2._tickCounterScheduled || (s2._tickCounterScheduled = true, Promise.resolve().then(() => {
      s2._tickCounter++, s2._tickCounterScheduled = false;
    }));
  }
};
s2._loggers = {}, s2._tickCounter = 0, s2._tickCounterScheduled = false, s2._throttlingDisabled = false;

export {
  s,
  s2
};
//# sourceMappingURL=chunk-UA3YPL2R.js.map
