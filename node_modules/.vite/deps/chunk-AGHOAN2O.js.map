{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nimport{textureSize as e}from\"../util/WebGL2Utils.js\";import{glsl as r}from\"../../shaderModules/interfaces.js\";import{createTexture2DPassSizeUniforms as s}from\"../../shaderModules/Texture2DPassUniform.js\";import{TextureSizeUniformType as o}from\"../../shaderModules/TextureSizeUniformType.js\";import{blurSizePixels as t}from\"../../../lib/SSAOHelper.js\";function n(n,a){const i=n.fragment;a.receiveAmbientOcclusion?(i.uniforms.add(s(\"ssaoTex\",((e,r)=>r.ssaoHelper.colorTexture),a.hasWebGL2Context?o.None:o.InvSize)),i.constants.add(\"blurSizePixelsInverse\",\"float\",1/t),i.code.add(r`\n      float evaluateAmbientOcclusionInverse() {\n        vec2 ssaoTextureSizeInverse = ${e(a,\"ssaoTex\",!0)};\n        return texture2D(ssaoTex, gl_FragCoord.xy * blurSizePixelsInverse * ssaoTextureSizeInverse).a;\n      }\n\n      float evaluateAmbientOcclusion() {\n        return 1.0 - evaluateAmbientOcclusionInverse();\n      }\n    `)):i.code.add(r`float evaluateAmbientOcclusionInverse() { return 1.0; }\nfloat evaluateAmbientOcclusion() { return 0.0; }`)}export{n as EvaluateAmbientOcclusion};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nimport{neverReached as i}from\"../../../../../../core/compilerUtils.js\";import{EvaluateAmbientLighting as n}from\"./EvaluateAmbientLighting.glsl.js\";import{EvaluateAmbientOcclusion as t}from\"./EvaluateAmbientOcclusion.glsl.js\";import{addMainLightDirection as e,addMainLightIntensity as o,MainLighting as a}from\"./MainLighting.glsl.js\";import{PhysicallyBasedRendering as r}from\"./PhysicallyBasedRendering.glsl.js\";import{PBRMode as l}from\"./PhysicallyBasedRenderingParameters.glsl.js\";import{PiUtils as d}from\"./PiUtils.glsl.js\";import{BooleanPassUniform as c}from\"../../shaderModules/BooleanPassUniform.js\";import{FloatPassUniform as s}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as m}from\"../../shaderModules/interfaces.js\";import{ambientBoost as g}from\"../../../lighting/SceneLighting.js\";function h(i){i.constants.add(\"ambientBoostFactor\",\"float\",g)}function u(i){i.uniforms.add(new s(\"lightingGlobalFactor\",((i,n)=>n.lighting.globalFactor)))}function p(g,p){const v=g.fragment;switch(g.include(t,p),p.pbrMode!==l.Disabled&&g.include(r,p),g.include(n,p),g.include(d),v.code.add(m`\n    const float GAMMA_SRGB = 2.1;\n    const float INV_GAMMA_SRGB = 0.4761904;\n    ${p.pbrMode===l.Disabled?\"\":\"const vec3 GROUND_REFLECTANCE = vec3(0.2);\"}\n  `),h(v),u(v),e(v),v.code.add(m`\n    float additionalDirectedAmbientLight(vec3 vPosWorld) {\n      float vndl = dot(${p.spherical?m`normalize(vPosWorld)`:m`vec3(0.0, 0.0, 1.0)`}, mainLightDirection);\n      return smoothstep(0.0, 1.0, clamp(vndl * 2.5, 0.0, 1.0));\n    }\n  `),o(v),v.code.add(m`vec3 evaluateAdditionalLighting(float ambientOcclusion, vec3 vPosWorld) {\nfloat additionalAmbientScale = additionalDirectedAmbientLight(vPosWorld);\nreturn (1.0 - ambientOcclusion) * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor * mainLightIntensity;\n}`),p.pbrMode){case l.Disabled:case l.WaterOnIntegratedMesh:case l.Water:g.include(a,p),v.code.add(m`vec3 evaluateSceneLighting(vec3 normalWorld, vec3 albedo, float shadow, float ssao, vec3 additionalLight)\n{\nvec3 mainLighting = evaluateMainLighting(normalWorld, shadow);\nvec3 ambientLighting = calculateAmbientIrradiance(normalWorld, ssao);\nvec3 albedoLinear = pow(albedo, vec3(GAMMA_SRGB));\nvec3 totalLight = mainLighting + ambientLighting + additionalLight;\ntotalLight = min(totalLight, vec3(PI));\nvec3 outColor = vec3((albedoLinear / PI) * totalLight);\nreturn pow(outColor, vec3(INV_GAMMA_SRGB));\n}`);break;case l.Normal:case l.Schematic:v.code.add(m`const float fillLightIntensity = 0.25;\nconst float horizonLightDiffusion = 0.4;\nconst float additionalAmbientIrradianceFactor = 0.02;\nvec3 evaluateSceneLightingPBR(vec3 normal, vec3 albedo, float shadow, float ssao, vec3 additionalLight, vec3 viewDir, vec3 normalGround, vec3 mrr, vec3 _emission, float additionalAmbientIrradiance)\n{\nvec3 viewDirection = -viewDir;\nvec3 mainLightDirection = mainLightDirection;\nvec3 h = normalize(viewDirection + mainLightDirection);\nPBRShadingInfo inputs;\ninputs.NdotL = clamp(dot(normal, mainLightDirection), 0.001, 1.0);\ninputs.NdotV = clamp(abs(dot(normal, viewDirection)), 0.001, 1.0);\ninputs.NdotH = clamp(dot(normal, h), 0.0, 1.0);\ninputs.VdotH = clamp(dot(viewDirection, h), 0.0, 1.0);\ninputs.NdotNG = clamp(dot(normal, normalGround), -1.0, 1.0);\nvec3 reflectedView = normalize(reflect(viewDirection, normal));\ninputs.RdotNG = clamp(dot(reflectedView, normalGround), -1.0, 1.0);\ninputs.albedoLinear = pow(albedo, vec3(GAMMA_SRGB));\ninputs.ssao = ssao;\ninputs.metalness = mrr[0];\ninputs.roughness = clamp(mrr[1] * mrr[1], 0.001, 0.99);`),v.code.add(m`inputs.f0 = (0.16 * mrr[2] * mrr[2]) * (1.0 - inputs.metalness) + inputs.albedoLinear * inputs.metalness;\ninputs.f90 = vec3(clamp(dot(inputs.f0, vec3(50.0 * 0.33)), 0.0, 1.0));\ninputs.diffuseColor = inputs.albedoLinear * (vec3(1.0) - inputs.f0) * (1.0 - inputs.metalness);`),p.useFillLights?v.uniforms.add(new c(\"hasFillLights\",((i,n)=>n.enableFillLights))):v.constants.add(\"hasFillLights\",\"bool\",!1),v.code.add(m`vec3 ambientDir = vec3(5.0 * normalGround[1] - normalGround[0] * normalGround[2], - 5.0 * normalGround[0] - normalGround[2] * normalGround[1], normalGround[1] * normalGround[1] + normalGround[0] * normalGround[0]);\nambientDir = ambientDir != vec3(0.0)? normalize(ambientDir) : normalize(vec3(5.0, -1.0, 0.0));\ninputs.NdotAmbDir = hasFillLights ? abs(dot(normal, ambientDir)) : 1.0;\nvec3 mainLightIrradianceComponent = inputs.NdotL * (1.0 - shadow) * mainLightIntensity;\nvec3 fillLightsIrradianceComponent = inputs.NdotAmbDir * mainLightIntensity * fillLightIntensity;\nvec3 ambientLightIrradianceComponent = calculateAmbientIrradiance(normal, ssao) + additionalLight;\ninputs.skyIrradianceToSurface = ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;\ninputs.groundIrradianceToSurface = GROUND_REFLECTANCE * ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;`),v.uniforms.add([new s(\"lightingSpecularStrength\",((i,n)=>n.lighting.mainLight.specularStrength)),new s(\"lightingEnvironmentStrength\",((i,n)=>n.lighting.mainLight.environmentStrength))]),v.code.add(m`vec3 horizonRingDir = inputs.RdotNG * normalGround - reflectedView;\nvec3 horizonRingH = normalize(viewDirection + horizonRingDir);\ninputs.NdotH_Horizon = dot(normal, horizonRingH);\nvec3 mainLightRadianceComponent = lightingSpecularStrength * normalDistribution(inputs.NdotH, inputs.roughness) * mainLightIntensity * (1.0 - shadow);\nvec3 horizonLightRadianceComponent = lightingEnvironmentStrength * normalDistribution(inputs.NdotH_Horizon, min(inputs.roughness + horizonLightDiffusion, 1.0)) * mainLightIntensity * fillLightIntensity;\nvec3 ambientLightRadianceComponent = lightingEnvironmentStrength * calculateAmbientRadiance(ssao) + additionalLight;\ninputs.skyRadianceToSurface = ambientLightRadianceComponent + mainLightRadianceComponent + horizonLightRadianceComponent;\ninputs.groundRadianceToSurface = GROUND_REFLECTANCE * (ambientLightRadianceComponent + horizonLightRadianceComponent) + mainLightRadianceComponent;\ninputs.averageAmbientRadiance = ambientLightIrradianceComponent[1] * (1.0 + GROUND_REFLECTANCE[1]);`),v.code.add(m`\n        vec3 reflectedColorComponent = evaluateEnvironmentIllumination(inputs);\n        vec3 additionalMaterialReflectanceComponent = inputs.albedoLinear * additionalAmbientIrradiance;\n        vec3 emissionComponent = pow(_emission, vec3(GAMMA_SRGB));\n        vec3 outColorLinear = reflectedColorComponent + additionalMaterialReflectanceComponent + emissionComponent;\n        ${p.pbrMode===l.Schematic?m`vec3 outColor = pow(max(vec3(0.0), outColorLinear - 0.005 * inputs.averageAmbientRadiance), vec3(INV_GAMMA_SRGB));`:m`vec3 outColor = pow(blackLevelSoftCompression(outColorLinear, inputs), vec3(INV_GAMMA_SRGB));`}\n        return outColor;\n      }\n    `);break;default:i(p.pbrMode);case l.COUNT:}}export{p as EvaluateSceneLighting,h as addAmbientBoostFactor,u as addLightingGlobalFactor};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAI+V,SAASA,GAAEA,IAAEC,IAAE;AAAC,QAAM,IAAED,GAAE;AAAS,EAAAC,GAAE,2BAAyB,EAAE,SAAS,IAAI,EAAE,WAAW,CAACC,IAAEC,OAAIA,GAAE,WAAW,cAAcF,GAAE,mBAAiB,EAAE,OAAK,EAAE,OAAO,CAAC,GAAE,EAAE,UAAU,IAAI,yBAAwB,SAAQ,IAAE,CAAC,GAAE,EAAE,KAAK,IAAID;AAAA;AAAA,wCAEzhB,EAAEC,IAAE,WAAU,IAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOnD,KAAG,EAAE,KAAK,IAAID;AAAA,iDAC8B;AAAC;;;ACVivB,SAAS,EAAE,GAAE;AAAC,IAAE,UAAU,IAAI,sBAAqB,SAAQ,CAAC;AAAC;AAAC,SAASI,GAAE,GAAE;AAAC,IAAE,SAAS,IAAI,IAAI,EAAE,wBAAwB,CAACC,IAAEC,OAAIA,GAAE,SAAS,YAAa,CAAC;AAAC;AAAC,SAAS,EAAE,GAAEC,IAAE;AAAC,QAAM,IAAE,EAAE;AAAS,UAAO,EAAE,QAAQD,IAAEC,EAAC,GAAEA,GAAE,YAAU,EAAE,YAAU,EAAE,QAAQD,IAAEC,EAAC,GAAE,EAAE,QAAQ,GAAEA,EAAC,GAAE,EAAE,QAAQ,CAAC,GAAE,EAAE,KAAK,IAAID;AAAA;AAAA;AAAA,MAG/jCC,GAAE,YAAU,EAAE,WAAS,KAAG;AAAA,GAC7B,GAAE,EAAE,CAAC,GAAEH,GAAE,CAAC,GAAEI,GAAE,CAAC,GAAE,EAAE,KAAK,IAAIF;AAAA;AAAA,yBAENC,GAAE,YAAUD,2BAAwBA;AAAA;AAAA;AAAA,GAG1D,GAAE,EAAE,CAAC,GAAE,EAAE,KAAK,IAAIA;AAAA;AAAA;AAAA,EAGnB,GAAEC,GAAE;AAAA,SAAc,EAAE;AAAA,SAAc,EAAE;AAAA,SAA2B,EAAE;AAAM,QAAE,QAAQE,IAAEF,EAAC,GAAE,EAAE,KAAK,IAAID;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASjG;AAAE;AAAA,SAAW,EAAE;AAAA,SAAY,EAAE;AAAU,QAAE,KAAK,IAAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAmBI,GAAE,EAAE,KAAK,IAAIA;AAAA;AAAA,gGAE2B,GAAEC,GAAE,gBAAc,EAAE,SAAS,IAAI,IAAI,EAAE,iBAAiB,CAAC,GAAED,OAAIA,GAAE,gBAAiB,CAAC,IAAE,EAAE,UAAU,IAAI,iBAAgB,QAAO,KAAE,GAAE,EAAE,KAAK,IAAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yJAOlF,GAAE,EAAE,SAAS,IAAI,CAAC,IAAI,EAAE,4BAA4B,CAAC,GAAEA,OAAIA,GAAE,SAAS,UAAU,gBAAiB,GAAE,IAAI,EAAE,+BAA+B,CAAC,GAAEA,OAAIA,GAAE,SAAS,UAAU,mBAAoB,CAAC,CAAC,GAAE,EAAE,KAAK,IAAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oGAQ5P,GAAE,EAAE,KAAK,IAAIA;AAAA;AAAA;AAAA;AAAA;AAAA,UAKvGC,GAAE,YAAU,EAAE,YAAUD,yHAAsHA;AAAA;AAAA;AAAA,KAGnJ;AAAE;AAAA;AAAc,QAAEC,GAAE,OAAO;AAAA,SAAO,EAAE;AAAA;AAAO;",
  "names": ["n", "a", "e", "r", "u", "i", "n", "p", "o", "r"]
}
