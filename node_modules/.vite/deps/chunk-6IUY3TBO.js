import {
  s as s8
} from "./chunk-OTFFDA2T.js";
import {
  a as a4
} from "./chunk-FV3CMB37.js";
import {
  T
} from "./chunk-XVNMSHWX.js";
import {
  c as c2
} from "./chunk-GKDTZQDA.js";
import {
  S as S3,
  a as a3,
  b2 as b,
  e as e5,
  g,
  i as i3,
  i2 as i4,
  i3 as i5,
  l as l4,
  m as m4,
  n as n4,
  o as o2,
  r as r4,
  r2 as r5,
  s as s7,
  u as u2,
  u2 as u3,
  u3 as u4
} from "./chunk-SI2PF7MG.js";
import {
  A,
  C,
  E as E2,
  M as M2,
  N,
  R,
  S as S2,
  V,
  h as h2
} from "./chunk-NF6EUNPP.js";
import {
  t as t4
} from "./chunk-RQ3CU5II.js";
import {
  d2 as d,
  f as f3,
  q,
  w,
  y as y3
} from "./chunk-O7LTV6XN.js";
import {
  I
} from "./chunk-4TWWY75O.js";
import {
  l as l3,
  n as n3
} from "./chunk-VJ7HYCLP.js";
import {
  r as r3
} from "./chunk-KYSY3ZPW.js";
import {
  t as t2
} from "./chunk-RDNOEC45.js";
import {
  M,
  e2 as e3
} from "./chunk-NWBHRPMR.js";
import {
  f as f2,
  i,
  n2,
  p
} from "./chunk-IIUWTGWW.js";
import {
  t as t3
} from "./chunk-JP3KAUQB.js";
import {
  a as a2,
  j2 as j3
} from "./chunk-7XXQ7762.js";
import {
  s as s6
} from "./chunk-FMJZBZWF.js";
import {
  i as i2
} from "./chunk-22F6X66Z.js";
import {
  c3 as c,
  y as y2
} from "./chunk-OD3FDQCI.js";
import {
  re
} from "./chunk-376OPXM4.js";
import {
  S
} from "./chunk-TQEOEDAZ.js";
import {
  m as m3
} from "./chunk-SHFHZMHO.js";
import {
  e as e4,
  u
} from "./chunk-NRP45AHD.js";
import {
  j as j2
} from "./chunk-UDND2Z3V.js";
import {
  l
} from "./chunk-RAX2HD42.js";
import {
  a,
  f,
  h,
  j,
  l as l2
} from "./chunk-5NXILPDI.js";
import {
  m as m2
} from "./chunk-XQN7F674.js";
import {
  U
} from "./chunk-DMI7A7TC.js";
import {
  o
} from "./chunk-ZHAW7FZS.js";
import {
  Bt
} from "./chunk-KAN4HXCG.js";
import {
  s as s5
} from "./chunk-4FEGON7M.js";
import {
  s as s3
} from "./chunk-VWYWOOPX.js";
import {
  s as s4
} from "./chunk-M5VHU5LK.js";
import {
  e as e2,
  m,
  n2 as n,
  r2,
  t5 as t,
  y
} from "./chunk-OOLCFNXJ.js";
import {
  E,
  x
} from "./chunk-MJXQTGI2.js";
import {
  s2
} from "./chunk-UA3YPL2R.js";
import {
  e,
  r,
  s
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/widgets/Legend/support/clusterUtils.js
var l5 = (e6, l8) => {
  const a7 = e6.featuresTilingScheme.getClosestInfoForScale(e6.scale).level;
  return (l8 == null ? void 0 : l8.levels) ? l8.levels[a7] : null;
};
function a5(a7, i8) {
  if (!a7 || !("visualVariables" in a7) || !a7.visualVariables)
    return null;
  const s12 = a7.visualVariables.find((e6) => "size" === e6.type), n8 = l5(i8, s12);
  return n8 ? new j3({ field: s12.field, minSize: n8[2].size, minDataValue: n8[2].value, maxSize: n8[3].size, maxDataValue: n8[3].value }) : null;
}

// node_modules/@arcgis/core/widgets/Legend/support/relationshipRampUtils.js
var s9 = { HH: 315, HL: 45, LL: 135, LH: 225 };
var l6 = { 2: [["HL", "HH"], ["LL", "LH"]], 3: [["HL", "HM", "HH"], ["ML", "MM", "MH"], ["LL", "LM", "LH"]], 4: [["HL", "HM1", "HM2", "HH"], ["M2L", "M2M1", "M2M2", "M2H"], ["M1L", "M1M1", "M1M2", "M1H"], ["LL", "LM1", "LM2", "LH"]] };
function n5(t7) {
  if (!t7)
    return;
  const { type: s12 } = t7;
  if (s12.includes("3d"))
    return T(t7.symbolLayers.getItemAt(0));
  if ("simple-line" === s12) {
    const o4 = y3(t7);
    return o4 && o4.color;
  }
  if ("simple-marker" === t7.type && ("x" === t7.style || "cross" === t7.style)) {
    const o4 = y3(t7);
    return o4 && o4.color;
  }
  return f3(t7);
}
function H(t7, e6) {
  const o4 = e6.HH.label, r8 = e6.LL.label, s12 = e6.HL.label, l8 = e6.LH.label;
  switch (t7) {
    case "HH":
    default:
      return { top: o4, bottom: r8, left: s12, right: l8 };
    case "HL":
      return { top: s12, bottom: l8, left: r8, right: o4 };
    case "LL":
      return { top: r8, bottom: o4, left: l8, right: s12 };
    case "LH":
      return { top: l8, bottom: s12, left: o4, right: r8 };
  }
}
function i6(t7) {
  const { focus: e6, infos: o4, numClasses: r8 } = t7, s12 = l6[r8], L5 = {};
  o4.forEach((t8) => {
    L5[t8.value] = { label: t8.label, fill: n5(t8.symbol) };
  });
  const i8 = [];
  for (let l8 = 0; l8 < r8; l8++) {
    const t8 = [];
    for (let e7 = 0; e7 < r8; e7++) {
      const o5 = L5[s12[l8][e7]];
      t8.push(o5.fill);
    }
    i8.push(t8);
  }
  return { type: "relationship-ramp", numClasses: r8, focus: e6, colors: i8, labels: H(e6, L5), rotation: u5(e6) };
}
function u5(t7) {
  let e6 = s9[t7];
  return t7 && null == e6 && (e6 = s9.HH), e6 || 0;
}

// node_modules/@arcgis/core/widgets/Legend/support/sizeRampUtils.js
var p2 = 30;
var y5 = 12;
var b2 = [255, 255, 255];
var h3 = [200, 200, 200];
var d2 = [128, 128, 128];
var w2 = 20;
var g2 = 5;
function S4(e6) {
  return "esri.symbols.SimpleMarkerSymbol" === e6.declaredClass;
}
function v(e6) {
  return "esri.symbols.PictureMarkerSymbol" === e6.declaredClass;
}
function z(e6) {
  return "esri.symbols.SimpleLineSymbol" === e6.declaredClass;
}
function j4(e6) {
  return "esri.symbols.TextSymbol" === e6.declaredClass;
}
function V2(e6, l8) {
  const t7 = e6.length - 1;
  return e6.map((e7, o4) => o2(e7, o4, t7, l8));
}
async function k(e6, l8, o4, s12, n8, a7, u11) {
  const c6 = l8.legendOptions, m6 = c6 && c6.customValues, f7 = u11 || await U2(e6, o4), p6 = !!f7, y7 = !!m6, b5 = null != l8.minSize && null != l8.maxSize, h7 = l8.stops && l8.stops.length > 1, d4 = !!l8.target;
  if (!p6 || !y7 && !(b5 || h7 && !d4))
    return;
  const w5 = d(f7);
  let g4 = null, S5 = null, v5 = null;
  S5 = w5 && !h7 ? u2([l8.minDataValue, l8.maxDataValue]) : m6 || await D(l8, f7, s12, n8);
  const z3 = e6 == null ? void 0 : e6.authoringInfo, j6 = "univariate-color-size" === (z3 == null ? void 0 : z3.type), k3 = j6 && "above-and-below" === (z3 == null ? void 0 : z3.univariateTheme);
  if (!S5 && h7 && (S5 = l8.stops.map((e7) => e7.value), g4 = l8.stops.some((e7) => !!e7.label), "flow" === e6.type && (S5 = u2(S5)), g4 && (v5 = l8.stops.map((e7) => e7.label))), w5 && (S5 == null ? void 0 : S5.length) > 2 && !k3 && (S5 = [S5[0], S5[S5.length - 1]]), !S5)
    return null;
  j6 && 5 !== (S5 == null ? void 0 : S5.length) && (S5 = E3({ minSize: S5[0], maxSize: S5[S5.length - 1] }));
  const C4 = w5 ? x2(e6, S5) : null, I5 = w(f7), M4 = g4 ? null : V2(S5, a7);
  return (await Promise.all(S5.map(async (t7, o5) => {
    const i8 = w5 ? C4[o5] : await B(l8, f7, t7, s12, n8);
    return { value: t7, symbol: P(k3 && "class-breaks" === e6.type ? L(e6, o5) : f7, i8), label: g4 ? v5[o5] : M4[o5], size: i8, outlineSize: I5 };
  }))).reverse();
}
function x2(e6, l8) {
  const t7 = e6 == null ? void 0 : e6.authoringInfo, o4 = "univariate-color-size" === (t7 == null ? void 0 : t7.type);
  let s12 = [y5, p2];
  if (o4) {
    const e7 = l8[0], t8 = l8[l8.length - 1], o5 = y5, n8 = p2;
    s12 = l8.map((l9) => o5 + (l9 - e7) / (t8 - e7) * (n8 - o5));
  }
  return o4 && "below" === (t7 == null ? void 0 : t7.univariateTheme) && s12.reverse(), s12;
}
function L(e6, l8) {
  const t7 = e6.classBreakInfos, o4 = t7.length, s12 = o4 < 2 || !(l8 >= 2) ? t7[0].symbol.clone() : t7[o4 - 1].symbol.clone();
  return e6.visualVariables.some((e7) => "color" === e7.type) && (s12.type.includes("3d") ? I2(s12) : M3(s12)), s12;
}
async function U2(e6, l8) {
  var _a;
  if ("flow" === e6.type)
    return u3(e6, l8);
  if ("pie-chart" === e6.type)
    return new y2({ color: null, outline: ((_a = e6.outline) == null ? void 0 : _a.width) ? e6.outline : new m3() });
  let t7 = null, o4 = null;
  if ("simple" === e6.type)
    t7 = e6.symbol;
  else if ("class-breaks" === e6.type) {
    const l9 = e6.classBreakInfos;
    t7 = l9 && l9[0] && l9[0].symbol, o4 = l9.length > 1;
  } else if ("unique-value" === e6.type) {
    const l9 = e6.uniqueValueInfos;
    t7 = l9 && l9[0] && l9[0].symbol, o4 = l9.length > 1;
  }
  return !t7 || C2(t7) ? null : (t7 = t7.clone(), (l8 || o4) && (t7.type.includes("3d") ? I2(t7) : M3(t7)), t7);
}
function C2(e6) {
  if (e6) {
    if (c(e6)) {
      return !!e6.symbolLayers && e6.symbolLayers.some((e7) => e7 && "fill" === e7.type);
    }
    return e6.type.includes("fill");
  }
  return false;
}
function I2(e6) {
  "line-3d" === e6.type ? e6.symbolLayers.forEach((e7) => {
    e7.material = { color: d2 };
  }) : e6.symbolLayers.forEach((e7) => {
    "icon" !== e7.type || e7.resource && e7.resource.href ? e7.material = { color: h3 } : (e7.material = { color: b2 }, e7.outline = { color: d2, size: 1.5 });
  });
}
function M3(l8) {
  var _a, _b;
  const t7 = r3();
  if ("cim" === l8.type)
    I(l8, new l(h3));
  else if (l8.type.includes("line"))
    l8.color = d2;
  else if (l8.color = t7 ? d2 : b2, "simple-marker" === l8.type)
    if (l8.outline) {
      const e6 = (_b = (_a = l8.outline) == null ? void 0 : _a.color) == null ? void 0 : _b.toHex();
      "#ffffff" === e6 && (l8.outline.color = d2);
    } else
      l8.outline = { color: d2, width: 1.5 };
}
async function D(e6, l8, o4, s12) {
  const n8 = (await import("./visualVariableUtils-VEK2HJVO.js")).getSizeRangeAtScale(e6, o4, s12), i8 = n8 && E3(n8);
  if (!n8 && !i8)
    return;
  let r8 = i8.map((l9) => T2(l9, e6, n8));
  r8 = u2(r8);
  for (let t7 = 1; t7 < r8.length - 1; t7++) {
    const n9 = await q2(e6, l8, r8[t7], r8[t7 - 1], o4, s12);
    n9 && (r8[t7] = n9[0], i8[t7] = n9[1]);
  }
  return r8;
}
function E3(e6) {
  const l8 = e6.minSize, t7 = e6.maxSize, o4 = g2, s12 = (t7 - l8) / (o4 - 1), n8 = [];
  for (let i8 = 0; i8 < o4; i8++)
    n8.push(l8 + s12 * i8);
  return n8;
}
function T2(e6, l8, t7) {
  const o4 = t7.minSize, s12 = t7.maxSize, n8 = l8.minDataValue, i8 = l8.maxDataValue;
  let r8 = null;
  if (e6 <= o4)
    r8 = n8;
  else if (e6 >= s12)
    r8 = i8;
  else {
    r8 = (e6 - o4) / (s12 - o4) * (i8 - n8) + n8;
  }
  return r8;
}
async function q2(e6, l8, n8, i8, r8, a7) {
  const u11 = await B(e6, l8, n8, r8, a7), c6 = await B(e6, l8, i8, r8, a7), m6 = i3(n8), f7 = m6.fractional, p6 = w2;
  let y7 = m6.integer, b5 = null, h7 = null;
  n8 > 0 && n8 < 1 && (b5 = 10 ** f7, y7 = i3(n8 *= b5).integer);
  for (let o4 = y7 - 1; o4 >= 0; o4--) {
    const i9 = 10 ** o4;
    let m7 = Math.floor(n8 / i9) * i9, f8 = Math.ceil(n8 / i9) * i9;
    null != b5 && (m7 /= b5, f8 /= b5);
    let y8 = (m7 + f8) / 2;
    [, y8] = u2([m7, y8, f8], { indexes: [1] });
    const d4 = await B(e6, l8, m7, r8, a7), w5 = await B(e6, l8, f8, r8, a7), g4 = await B(e6, l8, y8, r8, a7), S5 = l4(u11, d4, c6, null), v5 = l4(u11, w5, c6, null), z3 = l4(u11, g4, c6, null);
    let j6 = S5.previous <= p6, V3 = v5.previous <= p6;
    if (j6 && V3 && (S5.previous <= v5.previous ? (j6 = true, V3 = false) : (V3 = true, j6 = false)), j6 ? h7 = [m7, d4] : V3 ? h7 = [f8, w5] : z3.previous <= p6 && (h7 = [y8, g4]), h7)
      break;
  }
  return h7;
}
async function B(e6, l8, t7, o4, s12) {
  const { getSize: n8 } = await import("./visualVariableUtils-VEK2HJVO.js");
  return n8(e6, t7, { scale: o4, view: s12, shape: "simple-marker" === l8.type ? l8.style : null });
}
function P(e6, t7) {
  const o4 = e6.clone();
  if (c(o4))
    d(o4) || o4.symbolLayers.forEach((e7) => {
      "fill" !== e7.type && (e7.size = t7);
    });
  else if (S4(o4))
    o4.size = t7;
  else if (v(o4)) {
    const e7 = o4.width, l8 = o4.height;
    o4.height = t7, o4.width = t7 * (e7 / l8);
  } else
    z(o4) ? o4.width = t7 : j4(o4) && o4.font && (o4.font.size = t7);
  return o4;
}

// node_modules/@arcgis/core/widgets/smartMapping/support/utils.js
function s10(t7) {
  const n8 = 2, i8 = Math.floor(Math.log10(Math.abs(t7))) + 1, e6 = i8 < 4 || i8 > 6 ? 4 : i8, r8 = 1e6, a7 = Math.abs(t7) >= r8 ? "compact" : "standard";
  return m2(t7, { notation: a7, minimumSignificantDigits: n8, maximumSignificantDigits: e6 });
}

// node_modules/@arcgis/core/widgets/Legend/support/ActiveLayerInfo.js
var se = "https://utility.arcgis.com/sharing/tools/legend";
var le = "esri.layers.ImageryLayer";
var re2 = "esri.layers.ImageryTileLayer";
var ie = "esri.layers.WCSLayer";
var ne = /^\s*(return\s+)?\$view\.scale\s*(;)?\s*$/i;
var ae = new s4({ esriGeometryPoint: "point", esriGeometryMultipoint: "multipoint", esriGeometryPolyline: "polyline", esriGeometryPolygon: "polygon", esriGeometryMultiPatch: "multipatch" });
var oe = { u1: [0, 1], u2: [0, 3], u4: [0, 15], u8: [0, 255], s8: [-128, 127], u16: [0, 65535], s16: [-32768, 32767], u32: [0, 4294967295], s32: [-2147483648, 2147483647], f32: [-34e38, 34e38], f64: [-Number.MAX_VALUE, Number.MAX_VALUE] };
var ue = new y2({ size: 6, outline: { color: [128, 128, 128, 0.5], width: 0.5 } });
var ce = new S({ style: "solid" });
function de(e6) {
  return "flow" === e6.type;
}
function ye(e6) {
  return "vector-field" === e6.type;
}
function he(e6) {
  return "raster-colormap" === e6.type;
}
function me(e6) {
  return "raster-stretch" === e6.type;
}
function fe(e6) {
  return "raster-shaded-relief" === e6.type;
}
function pe(e6) {
  return "esri.renderers.SimpleRenderer" === e6.declaredClass;
}
function ge(e6) {
  return "esri.renderers.ClassBreaksRenderer" === e6.declaredClass;
}
function be(e6) {
  return "esri.renderers.UniqueValueRenderer" === e6.declaredClass;
}
function _e(e6) {
  return "esri.renderers.HeatmapRenderer" === e6.declaredClass;
}
function Se(e6) {
  return ve(e6) || we(e6) || Ce(e6) || Le(e6);
}
function Le(e6) {
  return "esri.renderers.PointCloudRGBRenderer" === e6.declaredClass;
}
function ve(e6) {
  return "esri.renderers.PointCloudClassBreaksRenderer" === e6.declaredClass;
}
function we(e6) {
  return "esri.renderers.PointCloudStretchRenderer" === e6.declaredClass;
}
function Ce(e6) {
  return "esri.renderers.PointCloudUniqueValueRenderer" === e6.declaredClass;
}
function Ee(e6) {
  return "esri.renderers.DotDensityRenderer" === e6.declaredClass;
}
function Ie(e6) {
  return "esri.renderers.PieChartRenderer" === e6.declaredClass;
}
function Re(e6, t7) {
  return pe(e6) || ge(e6) || be(e6) || _e(e6) || Ee(e6) || Ie(e6) ? "2d" === t7.type || s8(e6) : me(e6) || he(e6) || fe(e6) || ve(e6) || we(e6) || Ce(e6) || ye(e6) || de(e6);
}
function Fe(e6) {
  return "esri.layers.BuildingSceneLayer" === e6.declaredClass;
}
function Ve(e6) {
  return "esri.layers.SubtypeGroupLayer" === e6.declaredClass;
}
function Te(e6) {
  return "esri.layers.VoxelLayer" === e6.declaredClass;
}
function ze(e6) {
  return "esri.layers.WMSLayer" === e6.declaredClass;
}
function xe(e6) {
  return "esri.layers.WMTSLayer" === e6.declaredClass;
}
function je(e6) {
  return "esri.layers.MapImageLayer" === e6.declaredClass;
}
function De(e6) {
  return "esri.layers.TileLayer" === e6.declaredClass;
}
function Oe(e6) {
  return "esri.layers.FeatureLayer" === e6.declaredClass;
}
function Pe(e6) {
  return e6.declaredClass === le;
}
function Me(e6) {
  return e6.declaredClass === re2;
}
function Ae(e6) {
  return e6.declaredClass === ie;
}
function Be(e6) {
  return "stretch-ramp" === e6.type;
}
function Ue(e6) {
  var _a;
  return "univariate-color-size" === ((_a = "authoringInfo" in e6 && (e6 == null ? void 0 : e6.authoringInfo)) == null ? void 0 : _a.type);
}
function ke(e6) {
  const t7 = "authoringInfo" in e6 && (e6 == null ? void 0 : e6.authoringInfo);
  return "univariate-color-size" === (t7 == null ? void 0 : t7.type) && "above-and-below" === (t7 == null ? void 0 : t7.univariateTheme);
}
var Ne = new y2({ style: "path", path: "M10,5 L5,0 0,5 M5,0 L5,15", size: 15, outline: { width: 1, color: [85, 85, 85, 1] } });
var qe = {};
var $e = class extends m {
  constructor(e6) {
    super(e6), this._handles = new t(), this._hasColorRamp = false, this._hasOpacityRamp = false, this._hasSizeRamp = false, this._webStyleSymbolCache = /* @__PURE__ */ new Map(), this._dotDensityUrlCache = /* @__PURE__ */ new Map(), this._scaleDrivenSizeVariable = null, this._hasClusterSizeVariable = false, this.children = new j2(), this.layerView = null, this.layer = null, this.legendElements = [], this.parent = null, this.hideLayersNotInCurrentView = false, this.keepCacheOnDestroy = false, this.respectLayerVisibility = true, this.sublayerIds = [], this.title = null, this.view = null;
  }
  initialize() {
    const e6 = () => this.notifyChange("ready");
    this._handles.add([a(() => this.children, "change", (t7) => {
      const { added: s12, removed: l8 } = t7, r8 = this._handles;
      s12.forEach((t8) => {
        const s13 = `activeLayerInfo-ready-watcher-${t8.layer.uid}`;
        r8.add(l2(() => t8.ready, e6, h), s13);
      }), l8.forEach((e7) => r8.remove(e7.layer.uid)), e6();
    })]), this.keepCacheOnDestroy || (qe = {});
  }
  destroy() {
    this._handles.destroy(), this._handles = null, this._webStyleSymbolCache = null, this._dotDensityUrlCache = null, this._scaleDrivenSizeVariable = null, this.keepCacheOnDestroy || (qe = null);
  }
  get effectList() {
    const e6 = this.layer;
    let t7 = null;
    return "effect" in e6 && e6.effect && (t7 = new a4(), t7.effect = e6.effect, t7.endTransitions(), t7.scale = this.scale), t7;
  }
  get opacity() {
    var _a;
    const e6 = this.layer.opacity, t7 = (_a = this.parent) == null ? void 0 : _a.opacity, s12 = this.layer.parent, l8 = s12 && "uid" in s12 ? this._getParentLayerOpacity(s12) : null;
    return null != t7 ? t7 * e6 : null != l8 ? l8 * e6 : e6;
  }
  get ready() {
    return null === this.layer || (this.children.length > 0 ? this._isGroupActive() : this.legendElements.length > 0);
  }
  get scale() {
    return this.view && this.view.scale;
  }
  get isScaleDriven() {
    const e6 = this.layer;
    if (null === e6)
      return false;
    if ("effect" in e6 && e6.effect && Array.isArray(e6.effect))
      return true;
    if ("featureReduction" in e6 && e6.featureReduction) {
      if ("cluster" === e6.featureReduction.type)
        return true;
      if ("binning" === e6.featureReduction.type && "renderer" in e6.featureReduction && e6.featureReduction.renderer)
        return this._isRendererScaleDriven(e6.featureReduction.renderer);
    }
    return "renderer" in e6 && e6.renderer ? this._isRendererScaleDriven(e6.renderer) : this._isLayerScaleDriven(this.layer);
  }
  get version() {
    return this._get("version") + 1;
  }
  async buildLegendElementsForFeatureCollections(e6) {
    if (!(!this.hideLayersNotInCurrentView || await this._isLayerInCurrentView()))
      return this.legendElements = [], void this.notifyChange("ready");
    const t7 = Array.from(e6, (e7) => {
      if (Oe(e7))
        return this._getRendererLegendElements(e7.renderer, { title: e7.title });
      if (e7.featureSet && e7.featureSet.features.length) {
        const t8 = e7.layerDefinition, s12 = t8 && t8.drawingInfo, l8 = s12 && t3(s12.renderer), r8 = ae.read(t8.geometryType);
        return l8 ? this._getRendererLegendElements(l8, { title: e7.name, geometryType: r8 }) : (s2.getLogger(this.declaredClass).warn("drawingInfo not available!"), null);
      }
      return null;
    });
    try {
      const e7 = [];
      await E(t7).then((t8) => {
        t8.forEach(({ value: t9 }) => t9 && e7.push(...t9));
      }), this.legendElements = e7, this.notifyChange("ready");
    } catch (s12) {
      s2.getLogger(this.declaredClass).warn("error while building legend for layer!", s12);
    }
  }
  async buildLegendElementsForRenderer(e6) {
    try {
      const t7 = !this.hideLayersNotInCurrentView || await this._isLayerInCurrentView();
      this.legendElements = t7 ? await this._getRendererLegendElements(e6) : [], this.notifyChange("ready");
    } catch (t7) {
      s2.getLogger(this.declaredClass).warn("error while building legend for layer!", t7);
    }
  }
  async buildLegendElementsForFeatureReduction(e6) {
    try {
      const t7 = !this.hideLayersNotInCurrentView || await this._isLayerInCurrentView();
      this.legendElements = t7 ? await this._getLegendElementsForFeatureReduction(e6) : [], this.notifyChange("ready");
    } catch (t7) {
      s2.getLogger(this.declaredClass).warn("error while building legend for layer!", t7);
    }
  }
  async buildLegendElementsForTools() {
    var _a, _b;
    const e6 = this.layer;
    if (Te(e6))
      this._constructLegendElementsForVoxellayer();
    else if (xe(e6))
      this._constructLegendElementsForWMTSlayer();
    else if (ze(e6))
      await this._constructLegendElementsForWMSSublayers();
    else if (Fe(e6))
      await this._constructLegendElementsForBuildingSceneLayer();
    else if (je(e6) || De(e6) || Ve(e6))
      await this._constructLegendElementsForSublayers();
    else {
      this._handles.remove("imageryLayers-watcher");
      let t7 = "default";
      if (Pe(e6)) {
        t7 = (((_a = e6 == null ? void 0 : e6.renderingRule) == null ? void 0 : _a.functionName) || "default") + "_" + (((_b = e6.bandIds) == null ? void 0 : _b.length) ? e6.bandIds.join("") : "###");
      }
      await this._getLegendLayers(`${e6.uid}-${t7}`).then(async (t8) => {
        this.legendElements = [], this.notifyChange("ready");
        const s12 = t8.map(async (t9) => {
          if (Pe(e6) || Me(e6)) {
            const t10 = l2(() => ["renderingRule" in e6 && e6.renderingRule, e6.bandIds], () => x(async () => {
              qe.default = null, e6.renderer ? await this.buildLegendElementsForRenderer(e6.renderer) : await this.buildLegendElementsForTools();
            })());
            this._handles.add(t10, "imageryLayers-watcher");
          }
          const s13 = this._generateSymbolTableElementForLegendLayer(t9);
          s13 && s13.infos.length && (Pe(e6) && (s13.title = e6.title), this.legendElements.push(s13)), this.notifyChange("ready");
        });
        await E(s12);
      }).catch((e7) => {
        s2.getLogger(this.declaredClass).warn("Request to server for legend has failed!", e7);
      });
    }
  }
  async _isLayerInCurrentView() {
    const e6 = this.layer, t7 = this.layerView, s12 = t7 && "createQuery" in t7 && "queryFeatureCount" in t7;
    if (!s12 && !(t7 && "createQuery" in e6 && "queryFeatureCount" in e6))
      return true;
    await j(() => !t7.updating);
    const l8 = s12 ? "createQuery" in t7 && t7.createQuery() : "createQuery" in e6 && e6.createQuery();
    l8.geometry = this.view.extent;
    return 0 !== (s12 ? "queryFeatureCount" in t7 && await t7.queryFeatureCount(l8) : "queryFeatureCount" in e6 && await e6.queryFeatureCount(l8));
  }
  _getParentLayerOpacity(e6) {
    let t7 = 1;
    const s12 = e6.parent;
    return s12 && "uid" in s12 && (t7 = this._getParentLayerOpacity(s12)), e6.opacity * t7;
  }
  _isGroupActive() {
    const e6 = this.children;
    return !!e6.length && e6.some((e7) => e7.ready);
  }
  _isRendererScaleDriven(e6) {
    if ("dot-density" === e6.type)
      return true;
    const t7 = "valueExpression" in e6 && e6.valueExpression;
    if (ne.test(t7))
      return true;
    const s12 = "visualVariables" in e6 && e6.visualVariables;
    return !!s12 && s12.some((e7) => this._isScaleDrivenSizeVariable(e7));
  }
  _isScaleDrivenSizeVariable(e6) {
    if (e6 && "size" !== e6.type)
      return false;
    const t7 = e6, s12 = t7.minSize, l8 = t7.maxSize;
    return "object" == typeof s12 && s12 ? this._isScaleDrivenSizeVariable(s12) : "object" == typeof l8 && l8 ? this._isScaleDrivenSizeVariable(l8) : !!t7.expression || ne.test(t7.valueExpression);
  }
  _isLayerScaleDriven(e6) {
    if ("minScale" in e6 && e6.minScale > 0 || "maxScale" in e6 && e6.maxScale > 0)
      return true;
    if ("sublayers" in e6 && e6.sublayers)
      return e6.sublayers.some((e7) => this._isLayerScaleDriven(e7));
    const t7 = e6.parent;
    if (false === e6.loaded && t7 && je(t7) && "source" in e6 && e6.source && "map-layer" === e6.source.type) {
      for (const s12 of t7.sourceJSON.layers)
        if (s12.id === e6.source.mapLayerId && (s12.minScale > 0 || s12.maxScale > 0))
          return true;
    }
    return false;
  }
  async _constructLegendElementsForVoxellayer() {
    var _a;
    this.legendElements = [], this._handles.remove("voxel-style-watcher"), this._handles.remove("voxel-current-variable");
    const e6 = this.layer;
    this._handles.add(l2(() => e6.currentVariableId, () => this._constructLegendElementsForVoxellayer()), "voxel-current-variable"), this._handles.add(l2(() => e6.getVariableStyles(), () => this._constructLegendElementsForVoxellayer()), "voxel-style-watcher");
    const t7 = e(e6.getVariableStyle(null)), s12 = [];
    if (t7) {
      if ((_a = t7.uniqueValues) == null ? void 0 : _a.length) {
        const e7 = [];
        t7.uniqueValues.forEach((t8) => {
          t8.enabled && e7.push({ label: t8.label || `${t8.value}`, value: t8.value, symbol: new S({ color: t8.color, outline: null }) });
        }), e7.length && s12.push({ type: "symbol-table", title: t7.label, infos: e7 });
      } else if (t7.transferFunction) {
        const { colorStops: e7, stretchRange: l9 } = t7.transferFunction, r9 = e7.toArray().reverse(), i8 = l9.map((e8, t8) => `${0 === t8 ? s7 : i4} ${s10(e8)}`).reverse(), n8 = r9.map((e8) => ({ color: e8.color, value: null, label: null }));
        n8[0].label = i8[0], n8[n8.length - 1].label = i8[1], s12.push({ type: "color-ramp", title: t7.label, infos: n8, preview: g(r9.map((e8) => e8.color)) });
      }
    }
    const l8 = e6.opacity, r8 = s12.reduce((e7, t8) => e7.concat(this._getAllInfos(t8)), []).filter((e7) => !!(e7 == null ? void 0 : e7.symbol)).map((e7) => this._getSymbolPreview(e7, l8));
    await E(r8), this.legendElements = s12, this.notifyChange("ready");
  }
  _constructLegendElementsForWMTSlayer() {
    this.legendElements = [], this._handles.remove("wmts-activeLayer-watcher");
    const e6 = this.layer.activeLayer;
    if (this._handles.add(l2(() => {
      const { layer: e7 } = this;
      return e7 && "activeLayer" in e7 && e7.activeLayer;
    }, () => this._constructLegendElementsForWMTSlayer()), "wmts-activeLayer-watcher"), e6.styleId && e6.styles) {
      let t7 = null;
      e6.styles.some((s12) => e6.styleId === s12.id && (t7 = s12.legendUrl, true)), t7 && (this.legendElements = [{ type: "symbol-table", title: e6.title, infos: [{ src: t7, opacity: this.opacity }] }]);
    }
    this.notifyChange("ready");
  }
  async _constructLegendElementsForWMSSublayers() {
    this.legendElements = [], this._handles.remove("wms-sublayers-watcher");
    const e6 = this.layer;
    let t7 = null;
    (e6.customParameters || e6.customLayerParameters) && (t7 = { ...e6.customParameters, ...e6.customLayerParameters }), this._handles.add(l2(() => {
      const { layer: e7 } = this;
      return e7 && "sublayers" in e7 && e7.sublayers;
    }, () => this._constructLegendElementsForWMSSublayers()), "wms-sublayers-watcher"), this.legendElements = await this._generateLegendElementsForWMSSublayers(e6.sublayers, t7), this.notifyChange("ready");
  }
  async _generateLegendElementsForWMSSublayers(e6, t7) {
    const s12 = [];
    this._handles.add(e6.on("change", () => this._constructLegendElementsForWMSSublayers()), "wms-sublayers-watcher");
    const l8 = e6.toArray();
    for (const r8 of l8) {
      const e7 = l2(() => [r8.title, r8.visible, r8.legendEnabled], () => this._constructLegendElementsForWMSSublayers());
      if (this._handles.add(e7, "wms-sublayers-watcher"), !this.respectLayerVisibility || r8.visible && r8.legendEnabled) {
        const e8 = await this._generateSymbolTableElementForWMSSublayer(r8, t7);
        e8 && e8.infos.length && s12.unshift(e8);
      }
    }
    return s12;
  }
  async _generateSymbolTableElementForWMSSublayer(e6, t7) {
    if (!e6.legendUrl && e6.sublayers) {
      const s12 = (await this._generateLegendElementsForWMSSublayers(e6.sublayers, t7)).filter((e7) => e7);
      return { type: "symbol-table", title: e6.title, infos: s12 };
    }
    return this._generateSymbolTableElementForLegendUrl(e6, t7);
  }
  async _generateSymbolTableElementForLegendUrl(e6, t7) {
    var _a;
    let s12 = e6.legendUrl;
    if (!s12)
      return;
    const r8 = { type: "symbol-table", title: e6.title || e6.name || e6.id && e6.id + "", infos: [] };
    t7 && (s12 = Bt(s12, t7));
    let i8 = null;
    const n8 = (_a = e6.layer) == null ? void 0 : _a.opacity;
    try {
      i8 = (await U(s12, { responseType: "image" })).data, i8 && (i8.style.opacity = n8);
    } catch {
    }
    return r8.infos.push({ src: s12, preview: i8, opacity: n8 }), r8;
  }
  _getLegendLayers(e6, t7) {
    const s12 = qe && qe[e6];
    return s12 ? Promise.resolve(s12) : this._legendRequest(t7).then((t8) => {
      const s13 = t8.layers;
      return qe[e6] = s13, s13;
    });
  }
  _legendRequest(e6) {
    const t7 = this.layer;
    let s12 = { f: "json", dynamicLayers: e6 };
    if (Pe(t7)) {
      const e7 = t7.exportImageServiceParameters.renderingRule;
      if (e7 && (s12.renderingRule = JSON.stringify(e7.rasterFunctionDefinition || e7.toJSON())), t7.bandIds && (s12.bandIds = t7.bandIds.join()), t7.raster || t7.viewId || t7.customParameters) {
        const { raster: e8, viewId: l8, customParameters: r9 } = t7;
        s12 = { raster: e8, viewId: l8, ...s12, ...r9 };
      }
    }
    let r8 = t7.url.replace(/(\/)+$/, "");
    if ("version" in t7 && t7.version >= 10.01) {
      const e7 = r8.indexOf("?");
      e7 > -1 ? r8 = r8.substring(0, e7) + "/legend" + r8.substring(e7) : r8 += "/legend";
    } else {
      const e7 = r8.toLowerCase().indexOf("/rest/"), t8 = r8.substring(0, e7) + r8.substring(e7 + 5, r8.length);
      r8 = se + "?soapUrl=" + encodeURI(t8) + "&returnbytes=true";
    }
    return U(r8, { query: s12 }).then((e7) => e7.data);
  }
  async _constructLegendElementsForBuildingSceneLayer() {
    this.legendElements = [], this._handles.remove("sublayers-watcher");
    const e6 = this.layer;
    this._handles.add(l2(() => e6.sublayers, () => this._constructLegendElementsForBuildingSceneLayer()), "sublayers-watcher");
    try {
      this.legendElements = await this._generateLegendElementsForBuildingSublayers(e6.sublayers, this.opacity), this.notifyChange("ready");
    } catch (t7) {
      s2.getLogger(this.declaredClass).warn("Request to server for legend has failed!", t7);
    }
  }
  async _generateLegendElementsForBuildingSublayers(e6, t7) {
    let s12 = [];
    this._handles.add(e6.on("change", () => this._constructLegendElementsForBuildingSceneLayer()), "sublayers-watcher");
    const l8 = e6.toArray();
    for (const r8 of l8) {
      const e7 = l2(() => ["renderer" in r8 && r8.renderer, r8.opacity, r8.title, r8.visible], () => this._constructLegendElementsForBuildingSceneLayer());
      if (this._handles.add(e7, "sublayers-watcher"), !this.respectLayerVisibility || r8.visible) {
        const e8 = r8 && null != r8.opacity ? r8.opacity : null, l9 = null != e8 ? e8 * t7 : t7;
        if ("building-group" === r8.type) {
          const e9 = { type: "symbol-table", title: r8.title, infos: [] }, t8 = await this._generateLegendElementsForBuildingSublayers(r8.sublayers, l9);
          e9.infos.push(...t8), s12 = [e9, ...s12];
        } else if (r8.renderer) {
          s12 = [...await this._getRendererLegendElements(r8.renderer, { title: r8.title, opacity: l9, sublayer: r8 }), ...s12];
        }
      }
    }
    return s12.filter((e7) => !!e7 && (!("infos" in e7) || e7.infos.length > 0));
  }
  async _constructLegendElementsForSublayers() {
    this.legendElements = [], this._handles.remove("sublayers-watcher");
    const e6 = this.layer;
    this._handles.add(l2(() => e6.sublayers, () => this._constructLegendElementsForSublayers), "sublayers-watcher");
    try {
      this.legendElements = await this._generateLegendElementsForSublayers(e6.sublayers, this.opacity), this.notifyChange("ready");
    } catch (t7) {
      s2.getLogger(this.declaredClass).warn("Request to server for legend has failed!", t7);
    }
  }
  async _generateLegendElementsForSublayers(e6, t7, s12) {
    const l8 = this.layer;
    let r8 = [];
    this._handles.add(e6.on("change", () => this._constructLegendElementsForSublayers()), "sublayers-watcher");
    let i8 = e6.toArray();
    !s12 && this.sublayerIds && this.sublayerIds.length && (i8 = this.sublayerIds.map((e7) => l8.findSublayerById(e7)).filter(Boolean));
    for (const n8 of i8) {
      const e7 = l2(() => [n8.renderer, n8.opacity, n8.title, n8.visible, n8.legendEnabled], () => this._constructLegendElementsForSublayers());
      if (this._handles.add(e7, "sublayers-watcher"), !this.respectLayerVisibility || n8.visible && n8.legendEnabled && this._isSublayerInScale(n8)) {
        const e8 = n8 && null != n8.opacity ? n8.opacity : null, i9 = null != e8 ? e8 * t7 : t7, a7 = !!Ve(l8) || n8.originIdOf("renderer") > r2.SERVICE;
        if (n8.renderer && !n8.sublayers && a7) {
          await n8.load();
          r8 = [...await this._getRendererLegendElements(n8.renderer, { title: n8.title, opacity: i9, sublayer: n8 }), ...r8];
        } else {
          const e9 = await this._generateSymbolTableElementForSublayer(n8, i9, s12);
          e9 && r8.unshift(e9);
        }
      }
    }
    return r8.filter((e7) => !!e7 && (!("infos" in e7) || e7.infos.length > 0));
  }
  async _generateSymbolTableElementForSublayer(e6, t7, s12) {
    if (!s12) {
      s12 = /* @__PURE__ */ new Map();
      const t8 = this.layer, l9 = e6.source;
      let r8 = null;
      if (!(!l9 || "map-layer" === l9.type && l9.mapLayerId === e6.id && (!l9.gdbVersion || l9.gdbVersion === ("gdbVersion" in t8 && t8.gdbVersion))) || e6.originIdOf("renderer") > r2.SERVICE || e6.originIdOf("labelingInfo") > r2.SERVICE || e6.originIdOf("labelsVisible") > r2.SERVICE) {
        const e7 = new c2({ layer: this.layer });
        r8 = e7.hasDynamicLayers ? e7.dynamicLayers : null, e7.destroy();
      }
      const i8 = r8 || `${t8.uid}-default`;
      (await this._getLegendLayers(i8, r8)).forEach((e7) => s12.set(e7.layerId, e7));
    }
    const l8 = s12.get(e6.id);
    if ((!l8 || (l8 == null ? void 0 : l8.subLayerIds) && l8.defaultVisibility) && e6.sublayers) {
      const l9 = await this._generateLegendElementsForSublayers(e6.sublayers, t7, s12);
      return { type: "symbol-table", title: e6.title, infos: l9 };
    }
    return this._generateSymbolTableElementForLegendLayer(l8, e6, t7);
  }
  _generateSymbolTableElementForLegendLayer(e6, t7, s12) {
    var _a;
    if (!e6 || !e6.legend || this.respectLayerVisibility && !this._isLegendLayerInScale(e6, t7))
      return null;
    const l8 = t7 == null ? void 0 : t7.renderer;
    let r8 = (t7 == null ? void 0 : t7.title) || e6.layerName;
    if (l8 && (!t7 || (t7 == null ? void 0 : t7.originIdOf("renderer")) > r2.SERVICE)) {
      const e7 = (t7 == null ? void 0 : t7.title) || this._getRendererTitle(l8, t7);
      e7 && (r8 && "string" != typeof e7 && "title" in e7 && (e7.title = r8), r8 = e7);
    }
    const i8 = { type: "symbol-table", title: r8, legendType: e6.legendType ? e6.legendType : null, infos: [] }, n8 = t7 ? this._sanitizeLegendForSublayer(e6.legend.slice(), t7) : e6.legend;
    return ((_a = e6.legendGroups) == null ? void 0 : _a.length) > 0 ? e6.legendGroups.forEach((t8) => {
      var _a2;
      const l9 = { type: "symbol-table", title: t8.heading, legendType: e6.legendType ? e6.legendType : null, infos: this._generateSymbolTableElementInfosForLegendLayer(n8.filter((e7) => e7.groupId === t8.id), e6.layerId, s12) };
      ((_a2 = l9.infos) == null ? void 0 : _a2.length) > 0 && i8.infos.push(l9);
    }) : i8.infos = this._generateSymbolTableElementInfosForLegendLayer(n8, e6.layerId, s12), i8.infos.length > 0 ? i8 : null;
  }
  _generateSymbolTableElementInfosForLegendLayer(e6, t7, l8) {
    return e6.map((e7) => {
      let r8 = e7.url;
      if (e7.imageData && e7.imageData.length > 0)
        r8 = `data:image/png;base64,${e7.imageData}`;
      else {
        if (0 === r8.indexOf("http"))
          return null;
        r8 = o(`${this.layer.url}/${t7}/images/${r8}`);
      }
      return { label: e7.label, src: r8, opacity: l8 != null ? l8 : this.opacity, width: e7.width, height: e7.height };
    }).filter((e7) => !!e7);
  }
  _isSublayerInScale(e6) {
    const t7 = e6.minScale || 0, s12 = e6.maxScale || 0;
    return !(t7 > 0 && t7 < this.scale || s12 > this.scale);
  }
  _isLegendLayerInScale(e6, t7) {
    const s12 = t7 || this.layer;
    let l8 = null, r8 = null, i8 = true;
    return !s12.minScale && 0 !== s12.minScale || !s12.maxScale && 0 !== s12.maxScale ? (0 === e6.minScale && s12.tileInfo && (l8 = s12.tileInfo.lods[0].scale), 0 === e6.maxScale && s12.tileInfo && (r8 = s12.tileInfo.lods[s12.tileInfo.lods.length - 1].scale)) : (l8 = Math.min(s12.minScale, e6.minScale) || s12.minScale || e6.minScale, r8 = Math.max(s12.maxScale, e6.maxScale)), (l8 > 0 && l8 < this.scale || r8 > this.scale) && (i8 = false), i8;
  }
  _sanitizeLegendForSublayer(e6, t7) {
    if ("version" in this.layer && this.layer.version < 10.1 || 0 === e6.length)
      return e6;
    const s12 = t7.renderer, l8 = e6.some((e7) => e7.values);
    let r8 = null, i8 = null;
    return l8 && e6.some((e7, t8) => (e7.values || (r8 = t8, i8 = e7, i8.label || (i8.label = "others")), null != i8)), s12 ? "unique-value" === s12.type ? i8 && (e6.splice(r8, 1), e6.push(i8)) : "class-breaks" === s12.type && (i8 && e6.splice(r8, 1), e6.reverse(), i8 && e6.push(i8)) : i8 && (e6.splice(r8, 1), e6.push(i8)), e6;
  }
  async _getRendererLegendElements(e6, t7 = {}) {
    if (!Re(e6, this.view))
      return s2.getLogger(this.declaredClass).warn(`Renderer of type '${e6.type}' not supported!`), [];
    if (Se(e6))
      return this._constructPointCloudRendererLegendElements(e6, t7);
    if (Ee(e6))
      return this._constructDotDensityRendererLegendElements(e6);
    const s12 = await this._loadRenderer(e6);
    return Ie(s12) ? this._constructPieChartRendererLegendElements(s12) : this._constructRendererLegendElements(s12, t7);
  }
  async _getLegendElementsForFeatureReduction(e6) {
    let t7 = null;
    return "binning" === e6.type ? t7 = e6.renderer : "cluster" === e6.type && (t7 = this._getClusterRenderer(e6)), t7 ? this._getRendererLegendElements(t7) : [];
  }
  _getPointCloudRendererTitle(e6) {
    return e6.legendOptions && e6.legendOptions.title || e6.field;
  }
  _constructPointCloudRendererLegendElements(e6, t7 = {}) {
    const s12 = t7.title, l8 = [];
    let r8 = null, i8 = null;
    if (ve(e6))
      r8 = { type: "symbol-table", title: s12 || this._getPointCloudRendererTitle(e6), infos: [] }, e6.colorClassBreakInfos.forEach((e7) => {
        r8.infos.unshift({ label: e7.label || e7.minValue + " - " + e7.maxValue, value: [e7.minValue, e7.maxValue], symbol: this._getAppliedCloneSymbol(ue, e7.color) });
      });
    else if (we(e6)) {
      const t8 = e6.stops;
      let l9 = null;
      if (t8.length && (1 === t8.length && (l9 = t8[0].color), !l9)) {
        const e7 = t8[0].value, s13 = t8[t8.length - 1].value;
        if (null != e7 && null != s13) {
          l9 = u4(e7 + (s13 - e7) / 2, t8);
        }
      }
      r8 = { type: "symbol-table", title: null, infos: [{ label: null, value: null, symbol: this._getAppliedCloneSymbol(ue, l9 || ue.color) }] };
      const n9 = a3(e6.stops);
      i8 = { type: "color-ramp", title: s12 || this._getPointCloudRendererTitle(e6), infos: n9, preview: g(n9.map((e7) => e7.color)) };
    } else
      Ce(e6) && (r8 = { type: "symbol-table", title: s12 || this._getPointCloudRendererTitle(e6), infos: [] }, e6.colorUniqueValueInfos.forEach((e7) => {
        r8.infos.push({ label: e7.label || e7.values.join(", "), value: e7.values.join(", "), symbol: this._getAppliedCloneSymbol(ue, e7.color) });
      }));
    r8 && r8.infos.length && l8.push(r8), i8 && i8.infos.length && l8.push(i8);
    const n8 = l8.reduce((e7, t8) => e7.concat(t8.infos), []).filter((e7) => !!e7.symbol).map((t8) => this._getSymbolPreview(t8, this.opacity, { symbolConfig: { applyColorModulation: !!e6.colorModulation } }));
    return E(n8).then(() => l8);
  }
  _getElementInfoForDotDensity(e6, t7) {
    var _a;
    const { backgroundColor: s12, outline: l8, dotSize: r8 } = e6, i8 = (_a = this.effectList) == null ? void 0 : _a.effects.map((e7) => e7.toJSON()), n8 = i2(i8), a7 = r8 + "-" + t7 + "-" + s12 + "-" + (l8 && JSON.stringify(l8.toJSON())) + "-" + n8, o4 = this._dotDensityUrlCache, u11 = o4.has(a7) ? o4.get(a7) : m4(e6, t7);
    o4.set(a7, u11);
    const c6 = { shape: { type: "image", x: 0, y: 0, width: u11.width, height: u11.height, src: u11.src }, fill: null, stroke: null, offset: [0, 0] }, d4 = h2([[c6]], [u11.width, u11.height], { effectView: this.effectList });
    return { opacity: 1, src: u11.src, preview: d4, width: u11.width, height: u11.height };
  }
  _constructDotDensityRendererLegendElements(e6) {
    const t7 = e6.calculateDotValue(this.view.scale), s12 = e6.legendOptions && e6.legendOptions.unit, l8 = { type: "symbol-table", title: { value: t7 && Math.round(t7), unit: s12 || "" }, infos: [] };
    return e6.attributes.forEach((t8) => {
      const s13 = this._getElementInfoForDotDensity(e6, t8.color);
      s13.label = t8.label || t8.valueExpressionTitle || t8.field, l8.infos.push(s13);
    }), Promise.resolve([l8]);
  }
  async _constructPieChartRendererLegendElements(e6) {
    var _a, _b, _c, _d;
    const t7 = this.layer.opacity, s12 = [], l8 = "Others", r8 = e6.outline;
    e6.attributes.forEach((e7) => {
      const t8 = new y2({ color: e7.color, outline: r8 }), l9 = e7.label || e7.valueExpressionTitle || e7.field;
      s12.push({ label: l9, symbol: t8 });
    });
    const i8 = s12.length ? [...s12] : [];
    if (((_a = e6.othersCategory) == null ? void 0 : _a.color) && 0 !== ((_b = e6.othersCategory) == null ? void 0 : _b.threshold)) {
      const t8 = new y2({ color: e6.othersCategory.color, outline: r8 });
      s12.push({ label: e6.othersCategory.label || l8, symbol: t8 });
    }
    if ((_c = e6.defaultColor) == null ? void 0 : _c.a) {
      const t8 = new y2({ color: e6.defaultColor, outline: r8 });
      s12.push({ label: e6.defaultLabel, symbol: t8 });
    }
    const n8 = await this._getVisualVariableLegendElements(e6, this.layer) || [];
    if (s12.length) {
      n8.unshift({ type: "symbol-table", title: null, infos: s12 });
      const t8 = i8.filter((e7) => e7.label !== l8).map((e7) => e7.symbol.color).filter(Boolean), a8 = b(t8, { holePercentage: e6.holePercentage, backgroundColor: (_d = e6.backgroundFillSymbol) == null ? void 0 : _d.color, effectList: this.effectList, outline: r8 });
      n8.unshift({ type: "pie-chart-ramp", title: this._getRendererTitle(e6, this.layer), infos: s12, preview: a8 });
    }
    const a7 = n8.reduce((e7, t8) => e7.concat(this._getAllInfos(t8)), []).filter((e7) => !!(e7 == null ? void 0 : e7.symbol) && !(e7 == null ? void 0 : e7.preview)).map((e7) => this._getSymbolPreview(e7, t7, { effectList: this.effectList }));
    return await E(a7), n8;
  }
  async _constructRendererLegendElements(e6, t7 = {}) {
    const { title: s12, sublayer: l8 } = t7, r8 = l8 || this.layer;
    this._hasColorRamp = false, this._hasOpacityRamp = false, this._hasSizeRamp = false, this._scaleDrivenSizeVariable = null;
    const i8 = await this._getVisualVariableLegendElements(e6, r8) || [], n8 = { type: "symbol-table", title: s12 || this._getRendererTitle(e6, r8), infos: [] };
    let a7 = null, o4 = false;
    const c6 = /* @__PURE__ */ new Set();
    if (de(e6) && !this._hasSizeRamp) {
      const t8 = await u3(e6);
      n8.infos.push({ label: null, symbol: t8 });
    } else if (Ue(e6)) {
      let t8 = s12;
      const l9 = ke(e6) ? "univariate-above-and-below-ramp" : "univariate-color-size-ramp", r9 = i8.findIndex((e7) => "color-ramp" === e7.type), n9 = -1 !== r9 ? i8.splice(r9, 1)[0] : null, a8 = i8.findIndex((e7) => "size-ramp" === e7.type), o5 = -1 !== a8 ? i8.splice(a8, 1)[0] : null, u11 = [];
      n9 && (t8 = n9.title, u11.push(n9)), o5 && (t8 = o5.title, u11.push(o5)), u11.length > 0 && i8.push({ type: l9, title: t8, infos: u11 });
    } else if (_e(e6)) {
      const t8 = r5(e6);
      i8.push({ type: "heatmap-ramp", title: s12 || this._getRendererTitle(e6, r8), infos: t8, preview: g(t8.map((e7) => e7.color), { effectList: this.effectList }) });
    } else if (be(e6)) {
      const t8 = e6 && e6.authoringInfo;
      if (t8 && "relationship" === t8.type) {
        const { focus: s13, numClasses: l9, field1: a8, field2: o5 } = t8;
        if (l9 && a8 && o5) {
          const t9 = [a8, o5];
          let u11 = u5(s13) || 0;
          for (const e7 of t9) {
            const { field: t10, normalizationField: s14, label: l10 } = e7, i9 = l10 || { field: this._getFieldAlias(t10, r8), normField: s14 && this._getFieldAlias(s14, r8) }, a9 = Ne.clone();
            a9.angle = u11, n8.infos.push({ label: i9, symbol: a9 }), c6.add(a9), u11 += 90;
          }
          const d4 = i6({ focus: s13, numClasses: l9, infos: e6.uniqueValueInfos });
          i8.unshift(d4);
        }
      } else if (Pe(this.layer) || Me(this.layer))
        e6.uniqueValueInfos.forEach((e7) => {
          e7.symbol && n8.infos.push({ label: e7.label || e7.value, value: e7.value, symbol: e7.symbol });
        });
      else {
        const { field: t9, field2: s13, field3: l9, fieldDelimiter: i9, valueExpression: a8 } = e6, o5 = !(!t9 && !a8 || !s13 && !l9), u11 = [];
        if (e6.uniqueValueGroups.forEach((e7) => {
          const n9 = { type: "symbol-table", title: e7.heading, infos: [] };
          e7.classes.forEach((e8) => {
            const { symbol: u12, values: c7 } = e8;
            if (u12) {
              const d4 = [], y8 = [];
              for (const e9 of c7) {
                const { value: n10, value2: u13, value3: c8 } = e9, h9 = [], m8 = [];
                (t9 || a8) && (h9.push(n10), m8.push(this._getDomainName(t9, n10, r8))), s13 && (h9.push(u13), m8.push(this._getDomainName(s13, u13, r8))), l9 && (h9.push(c8), m8.push(this._getDomainName(l9, c8, r8))), d4.push(o5 ? h9.join(i9 || "") : h9[0]), y8.push(m8.join(" - "));
              }
              const h8 = d4.join(", ");
              let m7 = e8.label;
              if (!m7) {
                const e9 = y8.filter(Boolean);
                m7 = e9.length ? e9.join(", ") : h8;
              }
              n9.infos.push({ label: m7, value: h8, symbol: u12 });
            }
          }), n9.infos.length && u11.push(n9);
        }), u11.length) {
          const e7 = u11[0];
          1 === u11.length && "title" in e7 && !e7.title ? n8.infos.push(...e7.infos) : n8.infos.push(...u11);
        }
      }
      e6.defaultSymbol && (n8.infos.push({ label: e6.defaultLabel || "others", symbol: e6.defaultSymbol }), o4 = true);
    } else if (ge(e6)) {
      a7 = this._isUnclassedRenderer(e6);
      (!a7 || !this._hasSizeRamp) && (e6.classBreakInfos.forEach((e7) => {
        e7.symbol && n8.infos.unshift({ label: e7.label || (a7 ? null : e7.minValue + " - " + e7.maxValue), value: [e7.minValue, e7.maxValue], symbol: e7.symbol });
      }), a7 && (n8.title = null), this._updateInfosforClassedSizeRenderer(e6, n8.infos)), e6.defaultSymbol && !a7 && (n8.infos.push({ label: e6.defaultLabel || "others", symbol: e6.defaultSymbol }), o4 = true);
    } else if (me(e6))
      if (Me(this.layer) || Ae(this.layer)) {
        const t8 = this._constructTileImageryStretchRendererElements(e6);
        Be(t8) ? i8.push(t8) : n8.infos = t8;
      } else {
        const t8 = this.layer;
        let s13, l9;
        e6.statistics && e6.statistics.length && (s13 = null != e6.statistics[0].min ? e6.statistics[0].min : e6.statistics[0][0], l9 = null != e6.statistics[0].max ? e6.statistics[0].max : e6.statistics[0][1]);
        let r9 = [];
        const a8 = e(t8.renderingRule ? await t8.generateRasterInfo(t8.renderingRule) : t8.serviceRasterInfo), o5 = a8.keyProperties.BandProperties, c7 = oe[t8.rasterInfo.pixelType.toLowerCase()];
        1 === a8.bandCount || t8.bandIds && 1 === t8.bandIds.length ? (s13 = null != s13 ? s13 : a8.statistics ? a8.statistics[t8.bandIds[0]].min : c7[0], l9 = null != l9 ? l9 : a8.statistics ? a8.statistics[t8.bandIds[0]].max : c7[1], s13 || l9 ? i8.push(this._getStretchLegendElements(e6, { min: s13, max: l9 })) : this._getServerSideLegend()) : a8.bandCount >= 3 ? o5 && o5.length >= a8.bandCount ? t8.bandIds && 3 === t8.bandIds.length ? (r9 = t8.bandIds.map((e7) => o5[e7].BandName), n8.infos = this._createSymbolTableElementMultiBand(r9)) : "lerc" === t8.format ? (r9 = [0, 1, 2].map((e7) => o5[e7].BandName), n8.infos = this._createSymbolTableElementMultiBand(r9)) : this._getServerSideLegend() : "lerc" === t8.format ? (r9 = ["band1", "band2", "band3"], n8.infos = this._createSymbolTableElementMultiBand(r9)) : this._getServerSideLegend() : this._getServerSideLegend();
      }
    else if (he(e6))
      e6.colormapInfos.forEach((e7) => {
        n8.infos.push({ label: e7.label, value: e7.value, symbol: this._getAppliedCloneSymbol(ce, e7.color) });
      });
    else if (pe(e6)) {
      let s13 = e6.symbol;
      switch (t7.geometryType) {
        case "point":
          s13 = "pointSymbol" in r8 && r8.pointSymbol;
          break;
        case "polyline":
          s13 = "lineSymbol" in r8 && r8.lineSymbol;
          break;
        case "polygon":
          s13 = "polygonSymbol" in r8 && r8.polygonSymbol;
      }
      const l9 = this._hasClusterSizeVariable && this._getClusterSymbol() || !this._hasSizeRamp;
      e6.symbol && l9 && n8.infos.push({ label: e6.label, symbol: s13 });
    } else if (ye(e6)) {
      e6.outputUnit && (this.title = "(" + e6.toJSON().outputUnit + ")"), n8.title = e6.attributeField;
      const t8 = e6.getClassBreakInfos();
      (t8 == null ? void 0 : t8.length) ? t8.forEach((e7) => {
        n8.infos.push({ label: e7.minValue + " - " + e7.maxValue, symbol: e7.symbol });
      }) : n8.infos.push({ label: e6.attributeField, symbol: e6.getDefaultSymbol() });
    } else
      fe(e6) && i8.push(this._getStretchLegendElements(e6, { min: 0, max: 255 }));
    const y7 = e6.defaultSymbol;
    !y7 || o4 || pe(e6) || a7 && !this._hasColorRamp && !this._hasSizeRamp && !this._hasOpacityRamp || i8.push({ type: "symbol-table", infos: [{ label: e6.defaultLabel || "others", symbol: y7 }] }), n8.infos.length && i8.unshift(n8);
    const h7 = null == t7.opacity ? this.opacity : t7.opacity, m6 = this._isTallSymbol("visualVariables" in e6 && e6.visualVariables), f7 = Pe(this.layer) || Me(this.layer), p6 = i8.reduce((e7, t8) => e7.concat(this._getAllInfos(t8)), []).filter((e7) => !!(e7 == null ? void 0 : e7.symbol)).map((e7) => this._getSymbolPreview(e7, h7, { isDefault: e7.symbol === y7, applyScaleDrivenSize: !c6.has(e7.symbol), symbolConfig: { isTall: m6, isSquareFill: f7 }, effectList: c6.has(e7.symbol) ? null : this.effectList }));
    return e6 = null, await E(p6), i8;
  }
  _getServerSideLegend() {
    setTimeout(() => this.buildLegendElementsForTools(), 0);
  }
  _getAllInfos(e6) {
    const t7 = e6 == null ? void 0 : e6.infos;
    return t7 ? t7.reduce((e7, t8) => e7.concat(this._getAllInfos(t8)), []) : [e6];
  }
  _constructTileImageryStretchRendererElements(e6) {
    var _a, _b;
    const t7 = this.layer, s12 = t7.rasterInfo, l8 = s12.bandCount || e6.statistics.length;
    let r8, i8, n8 = [];
    const a7 = s12.keyProperties && s12.keyProperties.BandProperties, o4 = ((_a = e6 == null ? void 0 : e6.statistics) == null ? void 0 : _a.length) ? e6.statistics : s12 == null ? void 0 : s12.statistics;
    if (o4)
      r8 = void 0 !== o4[0].min ? o4[0].min : o4[0][0], i8 = o4[0].max || o4[0][1];
    else {
      const e7 = oe[t7.rasterInfo.pixelType.toLowerCase()];
      r8 = e7[0], i8 = e7[1];
    }
    if (t7.hasStandardTime() && (r8 = t7.getStandardTimeValue(r8), i8 = t7.getStandardTimeValue(i8)), 1 === s12.bandCount || 1 === ((_b = t7.bandIds) == null ? void 0 : _b.length))
      return this._getStretchLegendElements(e6, { min: r8, max: i8 });
    function u11(e7) {
      var _a2;
      const l9 = (((_a2 = t7 == null ? void 0 : t7.bandIds) == null ? void 0 : _a2.length) ? t7.bandIds : Array.from(Array(Math.min(s12.bandCount, 3)).keys())).map((t8) => e7 && e7[t8] && e7[t8].BandName || "band" + (t8 + 1));
      return l9.length < 3 ? l9.push(l9[1]) : l9.length > 3 && l9.splice(3), l9;
    }
    return n8 = a7 && a7.length >= l8 ? u11(a7) : u11(), this._createSymbolTableElementMultiBand(n8);
  }
  _getStretchLegendElements(e6, t7) {
    const s12 = e6.colorRamp, l8 = i5(s12, t7);
    return { type: "stretch-ramp", title: "", infos: l8, preview: g(l8.map((e7) => e7.color)) };
  }
  _getClusterSymbol() {
    var _a;
    const e6 = this.layer, t7 = "featureReduction" in e6 && e6.featureReduction, s12 = t7 && "symbol" in t7 && t7.renderer;
    return s12 && true !== ((_a = s12 == null ? void 0 : s12.authoringInfo) == null ? void 0 : _a.isAutoGenerated) ? null : t7 && "symbol" in t7 && t7.symbol;
  }
  async _getSizeLegendElement(e6, t7, s12, l8) {
    return { type: "size-ramp", title: this._hasClusterSizeVariable ? this._getClusterTitle(t7) : e6, infos: await k(s12, t7, await n4(s12), this.scale, this.view.type, l8, this._hasClusterSizeVariable ? this._getClusterSymbol() : null) };
  }
  _createSymbolTableElementMultiBand(e6) {
    const t7 = [], s12 = ["red", "green", "blue"];
    return e6.forEach((e7, l8) => {
      var _a;
      t7.push({ label: { colorName: s12[l8], bandName: e7 }, src: e5[l8], opacity: (_a = this.opacity) != null ? _a : 1 });
    }), t7;
  }
  _updateInfosforClassedSizeRenderer(e6, t7) {
    const s12 = e6.authoringInfo && "class-breaks-size" === e6.authoringInfo.type, l8 = e6.classBreakInfos.some((e7) => d(e7.symbol));
    if (s12 && l8) {
      const s13 = p2, l9 = y5, r8 = e6.classBreakInfos.length, i8 = (s13 - l9) / (r8 > 1 ? r8 - 1 : r8);
      t7.forEach((e7, t8) => {
        e7.size = s13 - i8 * t8;
      });
    }
  }
  _isTallSymbol(e6) {
    let t7 = false, s12 = false;
    if (e6)
      for (let l8 = 0; l8 < e6.length && (!t7 || !s12); l8++) {
        const r8 = e6[l8];
        "size" === r8.type && ("height" === r8.axis && (t7 = true), "width-and-depth" === r8.axis && (s12 = true));
      }
    return t7 && s12;
  }
  async _getSymbolPreview(e6, t7, s12) {
    let l8 = !(s12 == null ? void 0 : s12.isDefault) && null == e6.size && this._hasSizeRamp ? e4(t4.size) : e6.size;
    if (this._scaleDrivenSizeVariable && (s12 == null ? void 0 : s12.applyScaleDrivenSize)) {
      const { getSize: t8 } = await import("./visualVariableUtils-VEK2HJVO.js");
      l8 = t8(this._scaleDrivenSizeVariable, null, { view: this.view.type, scale: this.scale, shape: "simple-marker" === e6.symbol.type ? e6.symbol.style : null });
    }
    return S3(e6.symbol, { size: l8, opacity: t7, scale: false, symbolConfig: s12 == null ? void 0 : s12.symbolConfig, effectView: s12 == null ? void 0 : s12.effectList }).then((t8) => (e6.preview = t8, e6)).catch(() => (e6.preview = null, e6));
  }
  _getClusterRenderer(e6) {
    var _a, _b;
    this._hasClusterSizeVariable = false;
    const t7 = "renderer" in this.layer && this.layer.renderer, s12 = ((_a = e6.renderer) == null ? void 0 : _a.clone()) || (t7 == null ? void 0 : t7.clone()), l8 = e(a5(this.layerView._effectiveRenderer, this.view));
    if (l8 && "visualVariables" in s12) {
      const t8 = (_b = s12.visualVariables) == null ? void 0 : _b.some((e7) => "size" === e7.type && "outline" !== e7.target && !ne.test(e7.valueExpression));
      if (!t8) {
        if ("clusterMinSize" in e6 && "clusterMaxSize" in e6) {
          const { clusterMinSize: t10, clusterMaxSize: s13 } = e6;
          l8.legendOptions = new a2({ showLegend: t10 !== s13 });
        }
        const t9 = s12.visualVariables || [];
        s12.visualVariables = t9.concat([l8]), this._hasClusterSizeVariable = true;
      }
    }
    return s12;
  }
  async _loadRenderer(e6) {
    const t7 = [], s12 = e6.clone(), l8 = await n4(s12);
    if (ge(s12) || be(s12)) {
      const e7 = (s12.classBreakInfos || s12.uniqueValueInfos).map((e8) => this._fetchSymbol(e8.symbol, l8).then((t8) => {
        e8.symbol = t8;
      }).catch(() => {
        e8.symbol = null;
      }));
      Array.prototype.push.apply(t7, e7);
    }
    return t7.push(this._fetchSymbol(s12.symbol || s12.defaultSymbol, s12.defaultSymbol ? null : l8).then((e7) => {
      this._applySymbolToRenderer(s12, e7, pe(s12));
    }).catch(() => {
      this._applySymbolToRenderer(s12, null, pe(s12));
    })), E(t7).then(() => s12);
  }
  _applySymbolToRenderer(e6, t7, s12) {
    s12 ? e6.symbol = t7 : e6.defaultSymbol = t7;
  }
  async _fetchSymbol(e6, t7) {
    if (!e6)
      throw new Error();
    if ("web-style" === e6.type) {
      const s12 = this._webStyleSymbolCache;
      try {
        const l8 = await ("2d" === this.view.type ? e6.fetchCIMSymbol({ cache: s12 }) : e6.fetchSymbol({ cache: s12 }));
        return this._getAppliedCloneSymbol(l8, t7);
      } catch {
        throw s2.getLogger(this.declaredClass).warn("Fetching web-style failed!"), new Error();
      }
    }
    return this._getAppliedCloneSymbol(e6, t7);
  }
  _getAppliedCloneSymbol(e6, s12) {
    if (!e6 || !s12)
      return e6;
    const l8 = e6.clone(), r8 = s12 && s12.toRgba();
    return l8.type.includes("3d") ? this._applyColorTo3dSymbol(l8, r8) : "cim" === l8.type ? I(l8, s12) : l8.color && (l8.color = new l(r8 || l8.color)), l8;
  }
  _applyColorTo3dSymbol(e6, s12) {
    s12 && e6.symbolLayers.forEach((e7) => {
      e7 && (e7.material || (e7.material = {}), e7.material.color = new l(s12));
    });
  }
  async _getVisualVariableLegendElements(e6, t7) {
    if (!("visualVariables" in e6) || !e6.visualVariables || "vector-field" === e6.type)
      return null;
    const s12 = e6.visualVariables, l8 = [], r8 = [], i8 = [];
    for (const c6 of s12)
      "color" === c6.type ? l8.push(c6) : "size" === c6.type ? r8.push(c6) : "opacity" === c6.type && i8.push(c6);
    const n8 = [...l8, ...r8, ...i8];
    let a7, o4;
    if (0 === l8.length && ge(e6) && e6.classBreakInfos && 1 === e6.classBreakInfos.length) {
      const t8 = e6.classBreakInfos[0];
      a7 = t8 && t8.symbol;
    }
    if (0 === l8.length && pe(e6) && (a7 = e6.symbol), a7)
      if (a7.type.includes("3d")) {
        const e7 = a7.symbolLayers.getItemAt(0);
        "water" === e7.type ? r(e7.color) && (o4 = e7.color) : r(e7.material) && r(e7.material.color) && (o4 = e7.material.color);
      } else
        a7.url || (o4 = a7.color);
    const u11 = this.effectList;
    return (await Promise.all(n8.map(async (s13) => {
      if (!s13.legendOptions || false !== s13.legendOptions.showLegend) {
        const l9 = de(e6) ? s13.field : this._getRampTitle(s13, t7);
        let r9 = null;
        const i9 = "getField" in t7 && t7.getField && t7.getField(s13.field), n9 = i9 && re(i9);
        if ("color" === s13.type) {
          const e7 = await r4(s13, null, n9);
          r9 = { type: "color-ramp", title: l9, infos: e7, preview: g(e7.map((e8) => e8.color), { effectList: u11 }) }, this._hasColorRamp || (this._hasColorRamp = !(null == r9.infos || !r9.infos.length));
        } else if ("size" === s13.type && "outline" !== s13.target)
          ne.test(s13.valueExpression) ? this._hasClusterSizeVariable || (this._scaleDrivenSizeVariable = s13) : (r9 = await this._getSizeLegendElement(l9, s13, e6, n9), this._hasSizeRamp || (this._hasSizeRamp = !(null == r9.infos || !r9.infos.length)));
        else if ("opacity" === s13.type) {
          const e7 = await r4(s13, o4, n9);
          r9 = { type: "opacity-ramp", title: l9, infos: e7, preview: g(e7.map((e8) => e8.color), { effectList: u11 }) }, this._hasOpacityRamp || (this._hasOpacityRamp = !(null == r9.infos || !r9.infos.length));
        }
        return r9 && r9.infos ? r9 : null;
      }
    }))).filter((e7) => !!e7);
  }
  _getDomainName(e6, t7, s12) {
    if (e6 && "function" != typeof e6) {
      const l8 = "getField" in s12 && s12.getField && s12.getField(e6), r8 = l8 && "getFieldDomain" in s12 && s12.getFieldDomain ? s12.getFieldDomain(l8.name) : null;
      return r8 && "coded-value" === r8.type ? r8.getName(t7) : null;
    }
    return null;
  }
  _getClusterTitle(e6) {
    const t7 = this.layer, s12 = e6.field;
    if ("featureReduction" in t7 && t7.featureReduction && "cluster" === t7.featureReduction.type) {
      const e7 = t7.featureReduction, l8 = "popupTemplate" in e7 && e7.popupTemplate, r8 = l8 && l8.fieldInfos;
      if (r8) {
        for (const t8 of r8)
          if (t8.fieldName === s12)
            return "cluster_count" === s12 ? t8.label || { showCount: true } : t8.label;
      }
    }
    return { showCount: true };
  }
  _getRampTitle(e6, t7) {
    let s12 = e6.field, l8 = e6.normalizationField, r8 = false, i8 = false, n8 = false, a7 = null;
    s12 = "function" == typeof s12 ? null : s12, l8 = "function" == typeof l8 ? null : l8;
    const o4 = e6.legendOptions && e6.legendOptions.title;
    if (null != o4)
      a7 = o4;
    else if (e6.valueExpressionTitle)
      a7 = e6.valueExpressionTitle;
    else {
      if ("renderer" in t7 && t7.renderer && "authoringInfo" in t7.renderer && t7.renderer.authoringInfo && t7.renderer.authoringInfo.visualVariables) {
        const e7 = t7.renderer.authoringInfo.visualVariables;
        for (let t8 = 0; t8 < e7.length; t8++) {
          const s13 = e7[t8];
          if ("color" === s13.type) {
            if ("ratio" === s13.style) {
              r8 = true;
              break;
            }
            if ("percent" === s13.style) {
              i8 = true;
              break;
            }
            if ("percent-of-total" === s13.style) {
              n8 = true;
              break;
            }
          }
        }
      }
      a7 = { field: s12 && this._getFieldAlias(s12, t7), normField: l8 && this._getFieldAlias(l8, t7), ratio: r8, ratioPercent: i8, ratioPercentTotal: n8 };
    }
    return a7;
  }
  _getRendererTitle(e6, t7) {
    const s12 = e6;
    if (s12.legendOptions && s12.legendOptions.title)
      return s12.legendOptions.title;
    if (s12.valueExpressionTitle)
      return s12.valueExpressionTitle;
    let l8 = s12.field, r8 = null, i8 = null;
    if (ge(s12) && (r8 = s12.normalizationField, i8 = "percent-of-total" === s12.normalizationType), l8 = "function" == typeof l8 ? null : l8, r8 = "function" == typeof r8 ? null : r8, be(s12)) {
      const { field2: e7, field3: r9, fieldDelimiter: i9 } = s12;
      let n9 = l8 && this._getFieldAlias(l8, t7);
      return e7 && (n9 = `<${n9}>${i9}<${this._getFieldAlias(e7, t7)}>`, r9 && (n9 = `${n9}${i9}<${this._getFieldAlias(r9, t7)}>`)), n9;
    }
    let n8 = null;
    return (l8 || r8) && (n8 = { field: l8 && this._getFieldAlias(l8, t7), normField: r8 && this._getFieldAlias(r8, t7), normByPct: i8 }), n8;
  }
  _getFieldAlias(e6, t7) {
    const s12 = "popupTemplate" in t7 && t7.popupTemplate, l8 = s12 && s12.fieldInfos;
    let r8 = null;
    l8 && l8.some((t8) => e6 === t8.fieldName && (r8 = t8, true));
    let i8 = null;
    "getField" in t7 && t7.getField ? i8 = t7.getField(e6) : "fieldsIndex" in t7 && t7.fieldsIndex && (i8 = t7.fieldsIndex.get(e6));
    let n8 = null;
    const a7 = "featureReduction" in t7 && t7.featureReduction;
    a7 && (!r8 && "popupTemplate" in a7 && a7.popupTemplate && a7.popupTemplate.fieldInfos && a7.popupTemplate.fieldInfos.some((t8) => {
      var _a;
      return (e6 == null ? void 0 : e6.toLowerCase()) === ((_a = t8.fieldName) == null ? void 0 : _a.toLowerCase()) && (r8 = t8, true);
    }), "fields" in a7 && a7.fields && (n8 = a7.fields.find((t8) => {
      var _a;
      return ((_a = t8.name) == null ? void 0 : _a.toLowerCase()) === (e6 == null ? void 0 : e6.toLowerCase());
    })));
    const o4 = r8 || i8 || n8;
    let u11 = null;
    return o4 && (u11 = (r8 == null ? void 0 : r8.label) || (i8 == null ? void 0 : i8.alias) || (n8 == null ? void 0 : n8.alias) || "name" in o4 && o4.name || "fieldName" in o4 && o4.fieldName), u11;
  }
  _isUnclassedRenderer(e6) {
    const t7 = e6.visualVariables;
    let s12 = false;
    return ge(e6) && e6.classBreakInfos && 1 === e6.classBreakInfos.length && t7 && (s12 = e6.field ? t7.some((t8) => !(!t8 || e6.field !== t8.field || (e6.normalizationField || t8.normalizationField) && e6.normalizationField !== t8.normalizationField)) : !!t7.length), s12;
  }
};
e2([y()], $e.prototype, "children", void 0), e2([y({ readOnly: true })], $e.prototype, "effectList", null), e2([y()], $e.prototype, "layerView", void 0), e2([y()], $e.prototype, "layer", void 0), e2([y()], $e.prototype, "legendElements", void 0), e2([y({ readOnly: true })], $e.prototype, "opacity", null), e2([y()], $e.prototype, "parent", void 0), e2([y({ readOnly: true, dependsOn: [] })], $e.prototype, "ready", null), e2([y()], $e.prototype, "hideLayersNotInCurrentView", void 0), e2([y()], $e.prototype, "keepCacheOnDestroy", void 0), e2([y()], $e.prototype, "respectLayerVisibility", void 0), e2([y({ readOnly: true })], $e.prototype, "scale", null), e2([y()], $e.prototype, "sublayerIds", void 0), e2([y({ readOnly: true })], $e.prototype, "isScaleDriven", null), e2([y()], $e.prototype, "title", void 0), e2([y({ readOnly: true, dependsOn: ["ready"], value: 0 })], $e.prototype, "version", null), e2([y()], $e.prototype, "view", void 0), $e = e2([n("esri.widgets.Legend.support.ActiveLayerInfo")], $e);
var We = $e;

// node_modules/@arcgis/core/widgets/Legend/LegendViewModel.js
var h4 = { state: "state", view: "view", allLayerViews: "all-layer-views", legendProperties: "legend-properties" };
var c3 = j2.ofType(We);
var L3 = ["esri.layers.BuildingSceneLayer", "esri.layers.CSVLayer", "esri.layers.FeatureLayer", "esri.layers.GeoJSONLayer", "esri.layers.GeoRSSLayer", "esri.layers.GroupLayer", "esri.layers.HeatmapLayer", "esri.layers.ImageryLayer", "esri.layers.ImageryTileLayer", "esri.layers.MapImageLayer", "esri.layers.OGCFeatureLayer", "esri.layers.PointCloudLayer", "esri.layers.StreamLayer", "esri.layers.SceneLayer", "esri.layers.SubtypeGroupLayer", "esri.layers.TileLayer", "esri.layers.VoxelLayer", "esri.layers.WFSLayer", "esri.layers.WMSLayer", "esri.layers.WMTSLayer", "esri.layers.WCSLayer"];
var u6 = "view.basemapView.baseLayerViews";
var _ = "view.groundView.layerViews";
var f4 = "view.basemapView.referenceLayerViews";
var p3 = [u6, _, "view.layerViews", f4];
var v2 = class extends m {
  constructor(e6) {
    super(e6), this._handles = new t(), this._layerViewByLayerId = {}, this._layerInfosByLayerViewId = {}, this._activeLayerInfosByLayerViewId = {}, this._activeLayerInfosWithNoParent = new j2(), this.activeLayerInfos = new c3(), this.basemapLegendVisible = false, this.groundLegendVisible = false, this.hideLayersNotInCurrentView = false, this.keepCacheOnDestroy = false, this.respectLayerVisibility = true, this.layerInfos = [], this.view = null;
  }
  initialize() {
    this._handles.add(l2(() => this.view, () => this._viewHandles(), h), h4.view), this._handles.add(s5(() => this._refresh()));
  }
  destroy() {
    this._destroyViewActiveLayerInfos(), this._handles.destroy(), this._handles = null, this.view = null;
  }
  get state() {
    return this.get("view.ready") ? "ready" : "disabled";
  }
  _viewHandles() {
    this._handles.remove(h4.state), this.view && this._handles.add(l2(() => this.state, () => this._stateHandles(), h), h4.state);
  }
  _stateHandles() {
    this._resetAll(), "ready" === this.state && this._watchPropertiesAndAllLayerViews();
  }
  _resetAll() {
    this._handles.remove([h4.allLayerViews, h4.legendProperties]), this._destroyViewActiveLayerInfos(), this.activeLayerInfos.removeAll();
  }
  _destroyViewActiveLayerInfos() {
    Object.keys(this._activeLayerInfosByLayerViewId).forEach(this._destroyViewActiveLayerInfo, this);
  }
  _destroyViewActiveLayerInfo(e6) {
    this._handles.remove(e6);
    const i8 = this._activeLayerInfosByLayerViewId[e6];
    delete this._activeLayerInfosByLayerViewId[e6], i8 && i8.parent && i8.parent.children.remove(i8);
  }
  _watchPropertiesAndAllLayerViews() {
    const { allLayerViews: e6 } = this.view;
    e6.length && this._refresh(), this._handles.add(e6.on("change", (e7) => this._allLayerViewsChangeHandle(e7)), h4.allLayerViews), this._handles.add(l2(() => [this.layerInfos, this.basemapLegendVisible, this.groundLegendVisible], () => this._propertiesChangeHandle()), h4.legendProperties);
  }
  _allLayerViewsChangeHandle(e6) {
    e6.removed.forEach((e7) => this._destroyViewActiveLayerInfo(e7.uid)), this._refresh();
  }
  _propertiesChangeHandle() {
    this._destroyViewActiveLayerInfos(), this._refresh();
  }
  _refresh() {
    this._layerInfosByLayerViewId = {}, this.activeLayerInfos.removeAll(), this._generateLayerViews().filter(this._filterLayerViewsByLayerInfos, this).filter(this._isLayerViewSupported, this).forEach(this._generateActiveLayerInfo, this), this._sortActiveLayerInfos(this.activeLayerInfos);
  }
  _sortActiveLayerInfos(e6) {
    if (e6.length < 2)
      return;
    const i8 = [];
    e6.forEach((r9) => {
      if (!r9.parent) {
        const t7 = r9.layer.parent, s12 = t7 && "uid" in t7 && this._layerViewByLayerId[t7.uid], a7 = s12 && this._activeLayerInfosByLayerViewId[s12.uid];
        a7 && e6.includes(a7) && (i8.push(r9), r9.parent = a7, a7.children.add(r9), this._sortActiveLayerInfos(a7.children));
      }
    }), e6.removeMany(i8);
    const r8 = {};
    this.view.allLayerViews.forEach((e7, i9) => r8[e7.layer.uid] = i9), e6.sort((e7, i9) => {
      const t7 = r8[e7.layer.uid] || 0;
      return (r8[i9.layer.uid] || 0) - t7;
    });
  }
  _generateLayerViews() {
    const e6 = [];
    return p3.filter(this._filterLayerViews, this).map(this.get, this).filter((e7) => null != e7).forEach(this._collectLayerViews("layerViews", e6)), e6;
  }
  _filterLayerViews(e6) {
    const i8 = !this.basemapLegendVisible && (e6 === u6 || e6 === f4), r8 = !this.groundLegendVisible && e6 === _;
    return !i8 && !r8;
  }
  _collectLayerViews(e6, i8) {
    const r8 = (t7) => (t7 && t7.forEach((t8) => {
      i8.push(t8), r8(t8[e6]);
    }), i8);
    return r8;
  }
  _filterLayerViewsByLayerInfos(e6) {
    const i8 = this.layerInfos;
    return !i8 || !i8.length || i8.some((i9) => this._hasLayerInfo(i9, e6));
  }
  _hasLayerInfo(e6, i8) {
    const r8 = this._isLayerUIDMatching(e6.layer, i8.layer.uid);
    return r8 && (this._layerInfosByLayerViewId[i8.uid] = e6), r8;
  }
  _isLayerUIDMatching(e6, i8) {
    return e6 && (e6.uid === i8 || this._hasLayerUID(e6.layers, i8));
  }
  _hasLayerUID(e6, i8) {
    return e6 && e6.some((e7) => this._isLayerUIDMatching(e7, i8));
  }
  _isLayerViewSupported(e6) {
    return !!L3.includes(e6.layer.declaredClass) && (this._layerViewByLayerId[e6.layer.uid] = e6, true);
  }
  _generateActiveLayerInfo(e6) {
    this._isLayerActive(e6) ? this._buildActiveLayerInfo(e6) : (this._handles.remove(e6.uid), this._handles.add(l2(() => {
      var _a;
      return [e6.legendEnabled, (_a = e6.layer) == null ? void 0 : _a.legendEnabled];
    }, () => this._layerActiveHandle(e6)), e6.uid));
  }
  _layerActiveHandle(e6) {
    this._isLayerActive(e6) && (this._handles.remove(e6.uid), this._buildActiveLayerInfo(e6));
  }
  _isLayerActive(e6) {
    return !this.respectLayerVisibility || e6.legendEnabled && e6.get("layer.legendEnabled");
  }
  _buildActiveLayerInfo(e6) {
    var _a;
    const i8 = e6.layer, r8 = e6.uid, t7 = this._layerInfosByLayerViewId[r8];
    let o4 = this._activeLayerInfosByLayerViewId[r8];
    if (!o4) {
      const s12 = t7 && void 0 !== t7.title && t7.layer.uid === i8.uid;
      o4 = new We({ layer: i8, layerView: e6, title: s12 ? t7.title : i8.title, view: this.view, respectLayerVisibility: this.respectLayerVisibility, hideLayersNotInCurrentView: this.hideLayersNotInCurrentView, keepCacheOnDestroy: this.keepCacheOnDestroy, sublayerIds: t7 && t7.sublayerIds || [] }), this._activeLayerInfosByLayerViewId[r8] = o4;
    }
    const l8 = i8.parent && "uid" in i8.parent && this._layerViewByLayerId[(_a = i8.parent) == null ? void 0 : _a.uid];
    if (o4.parent = this._activeLayerInfosByLayerViewId[l8 == null ? void 0 : l8.uid], !this._handles.has(r8)) {
      const t8 = [l2(() => i8.title, (e7) => this._titleHandle(e7, o4)), l2(() => [i8.opacity, "renderer" in i8 && i8.renderer, "pointSymbol" in i8 && i8.pointSymbol, "lineSymbol" in i8 && i8.lineSymbol, "polygonSymbol" in i8 && i8.polygonSymbol], () => this._constructLegendElements(o4)), f(() => {
        var _a2;
        return true === ((_a2 = this.view) == null ? void 0 : _a2.stationary);
      }, () => this._scaleHandle(o4), h), l2(() => e6._effectiveRenderer, () => this._constructLegendElements(o4)), l2(() => "effect" in i8 && i8.effect, () => this._constructLegendElements(o4))];
      if (this.respectLayerVisibility) {
        const r9 = l2(() => e6.legendEnabled, (e7) => this._legendEnabledHandle(e7, o4)), a7 = l2(() => i8.legendEnabled, (e7) => this._legendEnabledHandle(e7, o4));
        t8.push(r9, a7);
      }
      this._handles.add(t8, r8);
    }
    o4.isScaleDriven || this._constructLegendElements(o4), this._addActiveLayerInfo(o4);
  }
  _titleHandle(e6, i8) {
    i8.title = e6, this._constructLegendElements(i8);
  }
  _legendEnabledHandle(e6, i8) {
    e6 ? this._addActiveLayerInfo(i8) : this._removeActiveLayerInfo(i8);
  }
  _scaleHandle(e6) {
    (e6.isScaleDriven || e6.hideLayersNotInCurrentView) && this._constructLegendElements(e6);
  }
  _addActiveLayerInfo(e6) {
    var _a;
    const { layerView: i8, layer: r8 } = e6;
    if (this._isLayerActive(i8) && !this.activeLayerInfos.includes(e6)) {
      const i9 = e6.parent;
      if (i9)
        i9.children.includes(e6) || i9.children.push(e6), this._sortActiveLayerInfos(i9.children);
      else {
        const i10 = (_a = this.layerInfos) == null ? void 0 : _a.some((e7) => e7.layer.uid === r8.uid);
        r8.parent && "uid" in r8.parent && !i10 ? this._activeLayerInfosWithNoParent.add(e6) : (this.activeLayerInfos.add(e6), this._sortActiveLayerInfos(this.activeLayerInfos));
      }
      if (this._activeLayerInfosWithNoParent.length) {
        const e7 = [];
        this._activeLayerInfosWithNoParent.forEach((i10) => {
          const r9 = i10.layer.parent, t7 = r9 && "uid" in r9 && this._layerViewByLayerId[r9 == null ? void 0 : r9.uid], s12 = this._activeLayerInfosByLayerViewId[t7 == null ? void 0 : t7.uid];
          s12 && (e7.push(i10), i10.parent = s12);
        }), e7.length && (this._activeLayerInfosWithNoParent.removeMany(e7), e7.forEach((e8) => this._addActiveLayerInfo(e8)));
      }
    }
  }
  _removeActiveLayerInfo(e6) {
    const i8 = e6.parent;
    i8 ? i8.children.remove(e6) : this.activeLayerInfos.remove(e6);
  }
  _constructLegendElements(e6) {
    const i8 = e6.layer;
    "featureCollections" in i8 && i8.featureCollections ? e6.buildLegendElementsForFeatureCollections(i8.featureCollections) : "featureReduction" in i8 && i8.featureReduction && "renderer" in i8.featureReduction && ("binning" === i8.featureReduction.type || "cluster" === i8.featureReduction.type) ? e6.buildLegendElementsForFeatureReduction(i8.featureReduction) : "renderer" in i8 && i8.renderer && !("sublayers" in i8) ? e6.buildLegendElementsForRenderer(i8.renderer) : "url" in i8 && i8.url ? e6.buildLegendElementsForTools() : e6.children.forEach((e7) => this._constructLegendElements(e7));
  }
};
e2([y({ type: c3 })], v2.prototype, "activeLayerInfos", void 0), e2([y()], v2.prototype, "basemapLegendVisible", void 0), e2([y()], v2.prototype, "groundLegendVisible", void 0), e2([y()], v2.prototype, "hideLayersNotInCurrentView", void 0), e2([y()], v2.prototype, "keepCacheOnDestroy", void 0), e2([y()], v2.prototype, "respectLayerVisibility", void 0), e2([y()], v2.prototype, "layerInfos", void 0), e2([y({ readOnly: true })], v2.prototype, "state", null), e2([y()], v2.prototype, "view", void 0), v2 = e2([n("esri.widgets.Legend.LegendViewModel")], v2);
var I3 = v2;

// node_modules/@arcgis/core/widgets/Legend/styles/support/relationshipUtils.js
var u7 = "http://www.w3.org/2000/svg";
var b3 = { diamondContainer: "esri-relationship-ramp--diamond__container", diamondLeftCol: "esri-relationship-ramp--diamond__left-column", diamondRightCol: "esri-relationship-ramp--diamond__right-column", diamondMidCol: "esri-relationship-ramp--diamond__middle-column", diamondMidColLabel: "esri-relationship-ramp--diamond__middle-column--label", diamondMidColRamp: "esri-relationship-ramp--diamond__middle-column--ramp", squareTable: "esri-relationship-ramp--square__table", squareTableRow: "esri-relationship-ramp--square__table-row", squareTableCell: "esri-relationship-ramp--square__table-cell", squareTableLabel: "esri-relationship-ramp--square__table-label", squareTableLabelLeftBottom: "esri-relationship-ramp--square__table-label--left-bottom", squareTableLabelRightBottom: "esri-relationship-ramp--square__table-label--right-bottom", squareTableLabelLeftTop: "esri-relationship-ramp--square__table-label--left-top", squareTableLabelRightTop: "esri-relationship-ramp--square__table-label--right-top" };
function p4(e6, a7, r8, l8) {
  const { focus: t7, labels: s12 } = e6, i8 = !!t7, o4 = c4(e6, a7, r8, l8), u11 = { justifyContent: "center" }, p6 = f2();
  return i8 ? n2("div", { class: b3.diamondContainer, styles: u11 }, n2("div", { class: b3.diamondLeftCol }, p6 ? s12.right : s12.left), n2("div", { class: b3.diamondMidCol }, n2("div", { class: b3.diamondMidColLabel }, s12.top), o4, n2("div", { class: b3.diamondMidColLabel }, s12.bottom)), n2("div", { class: b3.diamondRightCol }, p6 ? s12.left : s12.right)) : n2("div", { class: b3.squareTable }, n2("div", { class: b3.squareTableRow }, n2("div", { class: p(b3.squareTableCell, b3.squareTableLabel, b3.squareTableLabelRightBottom) }, p6 ? s12.top : s12.left), n2("div", { class: b3.squareTableCell }), n2("div", { class: p(b3.squareTableCell, b3.squareTableLabel, b3.squareTableLabelLeftBottom) }, p6 ? s12.left : s12.top)), n2("div", { class: b3.squareTableRow }, n2("div", { class: b3.squareTableCell }), o4, n2("div", { class: b3.squareTableCell })), n2("div", { class: b3.squareTableRow }, n2("div", { class: p(b3.squareTableCell, b3.squareTableLabel, b3.squareTableLabelRightTop) }, p6 ? s12.right : s12.bottom), n2("div", { class: b3.squareTableCell }), n2("div", { class: p(b3.squareTableCell, b3.squareTableLabel, b3.squareTableLabelLeftTop) }, p6 ? s12.bottom : s12.right)));
}
function h5(e6, a7, r8) {
  const l8 = `${r8}_arrowStart`, t7 = `${r8}_arrowEnd`, s12 = "left" === e6, i8 = { markerStart: null, markerEnd: null };
  switch (a7) {
    case "HL":
      s12 ? i8.markerStart = `url(#${t7})` : i8.markerEnd = `url(#${l8})`;
      break;
    case "LL":
      i8.markerStart = `url(#${t7})`;
      break;
    case "LH":
      s12 ? i8.markerEnd = `url(#${l8})` : i8.markerStart = `url(#${t7})`;
      break;
    default:
      i8.markerEnd = `url(#${l8})`;
  }
  return i8;
}
function c4(n8, d4, p6, c6, f7 = 60) {
  const { focus: q3, numClasses: k3, colors: T4, rotation: _3 } = n8, g4 = !!q3, L5 = Math.sqrt(f7 ** 2 + f7 ** 2) + (g4 ? 0 : 5), C4 = [], v5 = [], w5 = [], y7 = (f7 || 75) / k3;
  for (let s12 = 0; s12 < k3; s12++) {
    const i8 = s12 * y7;
    for (let o4 = 0; o4 < k3; o4++) {
      const n9 = o4 * y7, d5 = A(T4[s12][o4]), m6 = S2(null), u11 = { type: "rect", x: n9, y: i8, width: y7, height: y7 };
      C4.push(N(d5)), v5.push(M2(u11, d5.fill, m6, null)), w5.push(E2(u11));
    }
  }
  const x3 = 10, R4 = 15, $2 = 15, E5 = 10;
  let M4 = null;
  g4 || (M4 = "margin: -15px -15px -18px -15px");
  const S5 = h5("left", q3, d4), j6 = h5("right", q3, d4), B3 = V(w5), H2 = C(B3, L5, L5, 0, false, _3, false), U3 = C(B3, L5, L5, 0, false, g4 ? -45 : null, false), W = { filter: q(c6), opacity: null == p6 ? null : `${p6}` };
  return n2("div", { styles: W, class: g4 ? b3.diamondMidColRamp : b3.squareTableCell }, n2("svg", { xmlns: u7, width: L5, height: L5, style: M4 }, n2("defs", null, n2("marker", { id: `${d4}_arrowStart`, markerWidth: "10", markerHeight: "10", refX: "5", refY: "5", markerUnits: "strokeWidth", orient: "auto" }, n2("polyline", { points: "0,0 5,5 0,10", fill: "none", stroke: "#555555", "stroke-width": "1" })), n2("marker", { id: `${d4}_arrowEnd`, markerWidth: "10", markerHeight: "10", refX: "0", refY: "5", markerUnits: "strokeWidth", orient: "auto" }, n2("polyline", { points: "5,0 0,5 5,10", fill: "none", stroke: "#555555", "stroke-width": "1" })), C4), n2("g", { transform: H2 }, v5), n2("g", { transform: U3 }, n2("line", { fill: "none", stroke: "#555555", "stroke-width": "1", "marker-start": S5.markerStart, "marker-end": S5.markerEnd, x1: -x3, y1: f7 - R4, x2: -x3, y2: R4 }), n2("line", { fill: "none", stroke: "#555555", "stroke-width": "1", "marker-start": j6.markerStart, "marker-end": j6.markerEnd, x1: $2, y1: f7 + E5, x2: f7 - $2, y2: f7 + E5 }))));
}

// node_modules/@arcgis/core/widgets/Legend/styles/support/univariateUtils.js
var n6 = i();
var l7 = 10;
var r6 = 20;
var s11 = 10;
var a6 = 20;
var c5 = { univariateAboveAndBelowSymbol: "esri-univariate-above-and-below-ramp__symbol", colorRamp: "esri-legend__color-ramp" };
function f5(e6 = "vertical") {
  const t7 = "stroke:rgb(200, 200, 200);stroke-width:1";
  return "vertical" === e6 ? n2("svg", { height: "4", width: "10" }, n2("line", { x1: "0", y1: "2", x2: "10", y2: "2", style: t7 })) : n2("svg", { height: "10", width: "10" }, n2("line", { x1: "5", y1: "0", x2: "5", y2: "10", style: t7 }));
}
function p5(e6, t7 = "vertical") {
  const o4 = document.createElement("div");
  return o4.style.height = `${r6}px`, o4.className = c5.univariateAboveAndBelowSymbol, null != e6 && (o4.style.opacity = e6.toString()), n6.append(o4, f5.bind(null, t7)), o4;
}
function m5(t7, o4, i8 = "vertical", n8) {
  t7.infos.forEach((t8, l8) => {
    if (n8 && 2 === l8)
      t8.preview = p5(o4, i8);
    else {
      const o5 = u(t8.size) + ("horizontal" === i8 ? a6 : s11), n9 = "div" === t8.preview.tagName.toLowerCase(), l9 = n9 ? t8.preview : document.createElement("div");
      l9.className = c5.univariateAboveAndBelowSymbol, "horizontal" === i8 ? l9.style.width = `${o5}px` : l9.style.height = `${o5}px`, n9 || l9.appendChild(t8.preview), t8.preview = l9;
    }
  });
}
function u8(t7, o4 = "classic") {
  const i8 = t7.infos;
  return "classic" === o4 ? (u(i8[0].size) + s11) / 2 : (u(i8[0].size) - u(i8[i8.length - 1].size)) / 2;
}
function v3(e6, t7) {
  if (!e6)
    return null;
  const i8 = e6.infos.map((e7) => e7.color), n8 = g("full" === t7.type ? i8 : "above" === t7.type ? i8.slice(0, 3) : i8.slice(2, 5), { width: t7.width, height: t7.height, align: t7.rampAlignment, effectList: t7.effectList });
  return n8.className = c5.colorRamp, null != t7.opacity && (n8.style.opacity = t7.opacity.toString()), n8;
}
function h6(t7, o4, i8, n8 = "vertical") {
  let c6 = 0;
  const f7 = t7.infos, p6 = Math.floor(f7.length / 2), m6 = "full" === o4 || "above" === o4 ? 0 : p6, u11 = "full" === o4 || "below" === o4 ? f7.length - 1 : p6;
  for (let v5 = m6; v5 <= u11; v5++)
    if (i8 && v5 === p6)
      c6 += "horizontal" === n8 ? l7 : r6;
    else {
      c6 += u(f7[v5].size) + ("horizontal" === n8 ? a6 : s11);
    }
  return Math.round(c6);
}
function y6(t7, o4, i8, n8 = "vertical") {
  const c6 = h6(t7, o4, i8, n8), f7 = t7.infos, p6 = Math.floor(f7.length / 2), m6 = "full" === o4 || "above" === o4 ? 0 : p6, u11 = "full" === o4 || "below" === o4 ? f7.length - 1 : p6, v5 = "full" === o4 ? f7[m6].size + f7[u11].size : "above" === o4 ? f7[m6].size : f7[u11].size, y7 = i8 ? "vertical" === n8 ? r6 : l7 : 0, d4 = "vertical" === n8 ? s11 * ("full" === o4 ? 2 : 1) : a6 * ("full" === o4 ? 2 : 1);
  return Math.round(c6 - (u(v5) / 2 + y7 / 2 + d4 / 2));
}
function d3(e6, t7, o4 = "vertical") {
  const i8 = e6.infos;
  let n8 = i8.find(({ type: e7 }) => "size-ramp" === e7), l8 = i8.find(({ type: e7 }) => "color-ramp" === e7);
  return n8 && (n8 = { ...n8 }, n8.infos = [...n8.infos], m5(n8, t7, o4, true)), l8 && (l8 = { ...l8 }, l8.infos = [...l8.infos]), "horizontal" === o4 && (n8 == null ? void 0 : n8.infos.reverse(), l8 == null ? void 0 : l8.infos.reverse()), { sizeRampElement: n8, colorRampElement: l8 };
}
function b4(e6, t7 = "vertical") {
  const o4 = e6.infos;
  let i8 = o4.find(({ type: e7 }) => "size-ramp" === e7), n8 = o4.find(({ type: e7 }) => "color-ramp" === e7);
  return i8 && (i8 = { ...i8 }, i8.infos = [...i8.infos], m5(i8, null, t7, false)), n8 && (n8 = { ...n8 }, n8.infos = [...n8.infos]), "horizontal" === t7 && (i8 == null ? void 0 : i8.infos.reverse(), n8 == null ? void 0 : n8.infos.reverse()), { sizeRampElement: i8, colorRampElement: n8 };
}

// node_modules/@arcgis/core/widgets/Legend/support/styleUtils.js
function n7(e6, n8) {
  return n8;
}
function t6(e6) {
  const n8 = this;
  e6.appendChild(n8);
}
function r7(t7, r8, i8) {
  if (!r8)
    return;
  if ("string" == typeof r8 || "number" == typeof r8)
    return r8;
  if ("value" in r8 || "unit" in r8)
    return s6(t7.dotValue, r8);
  if ("colorName" in r8 || "bandName" in r8)
    return t7[r8.colorName] + ": " + (t7[r8.bandName] || r8.bandName);
  if ("showCount" in r8)
    return r8.showCount ? t7.clusterCountTitle : null;
  let l8 = null;
  return n7(r8, i8) ? l8 = r8.ratioPercentTotal ? "showRatioPercentTotal" : r8.ratioPercent ? "showRatioPercent" : r8.ratio ? "showRatio" : r8.normField ? "showNormField" : r8.field ? "showField" : null : o3(r8, i8) && (l8 = r8.normField ? "showNormField" : r8.normByPct ? "showNormPct" : r8.field ? "showField" : null), l8 ? s6("showField" === l8 ? "{field}" : t7[l8], { field: r8.field, normField: r8.normField }) : null;
}
function o3(e6, n8) {
  return !n8;
}
function i7(e6, n8) {
  return !!(n8 && "Stretched" === n8 && e6.version >= 10.3 && "esri.layers.ImageryLayer" === e6.declaredClass);
}

// node_modules/@arcgis/core/widgets/Legend/styles/Card.js
var R2 = { activated: "esri-legend--card__carousel-indicator--activated", base: "esri-legend--card", stacked: "esri-legend--stacked", carouselTitle: "esri-legend--card__carousel-title", indicator: "esri-legend--card__carousel-indicator", intervalSeparator: "esri-legend--card__interval-separator", imageryLayerStretchedImage: "esri-legend--card__imagery-layer-image--stretched", imageLabel: "esri-legend--card__image-label", layerCaption: "esri-legend--card__layer-caption", labelElement: "esri-legend--card__label-element", layerRow: "esri-legend--card__layer-row", labelCell: "esri-legend--card__label-cell", message: "esri-legend--card__message", rampLabel: "esri-legend--card__ramp-label", section: "esri-legend--card__section", relationshipSection: "esri-legend--card__relationship-section", serviceCaptionText: "esri-legend--card__service-caption-text", serviceContent: "esri-legend--card__service-content", service: "esri-legend--card__service", groupLayer: "esri-legend--card__group-layer", groupLayerChild: "esri-legend--card__group-layer-child", symbol: "esri-legend--card__symbol", sizeRampRow: "esri-legend--card__size-ramp-row", symbolRow: "esri-legend--card__symbol-row", symbolCell: "esri-legend--card__symbol-cell", indicatorContainer: "esri-legend--card__carousel-indicator-container", intervalSeparatorsContainer: "esri-legend--card__interval-separators-container", relationshipLabelContainer: "esri-legend--card__relationship-label-container", labelContainer: "esri-legend--card__label-container", serviceCaptionContainer: "esri-legend--card__service-caption-container", symbolContainer: "esri-legend--card__symbol-container", sizeRampContainer: "esri-legend--card__size-ramp-container", sizeRampPreview: "esri-legend--card__size-ramp-preview", pieChartRampPreview: "esri-legend--card__pie-chart-ramp-preview", rampContainer: "esri-legend__ramps", sizeRampHorizontal: "esri-legend__size-ramp--horizontal", rampLabelsContainer: "esri-legend__ramp-labels", layerInfo: "esri-legend__layer-cell esri-legend__layer-cell--info", univariateAboveAndBelowColorRamp: "esri-univariate-above-and-below-ramp__color--card", hidden: "esri-hidden" };
var z2 = 25;
var $ = 25;
var I4 = 768;
var k2 = 100;
var A2;
!function(e6) {
  e6.Auto = "auto", e6.Stack = "stack", e6.SideBySide = "side-by-side";
}(A2 || (A2 = {}));
var N2 = "#ddd";
var j5 = window.devicePixelRatio;
function E4(e6) {
  if (e6) {
    if (e6.type.includes("3d")) {
      const t7 = e6.symbolLayers && e6.symbolLayers.length;
      if (!t7)
        return;
      const s12 = e6.symbolLayers.getItemAt(t7 - 1), i8 = s12.resource && s12.resource.primitive;
      return "circle" === i8 || "cross" === i8 || "kite" === i8 || "sphere" === i8 || "cube" === i8 || "diamond" === i8;
    }
    {
      const t7 = e6.style;
      return "circle" === t7 || "diamond" === t7 || "cross" === t7;
    }
  }
}
function F(e6) {
  if (e6) {
    if (e6.type.includes("3d")) {
      const t7 = e6.symbolLayers && e6.symbolLayers.length;
      if (!t7)
        return;
      const s12 = e6.symbolLayers.getItemAt(t7 - 1).get("resource.primitive");
      return "triangle" === s12 || "cone" === s12 || "tetrahedron" === s12;
    }
    return "triangle" === e6.style;
  }
}
var T3 = class extends M {
  constructor(e6, s12) {
    super(e6, s12), this._handles = new t(), this._hasIndicators = false, this._selectedSectionName = null, this._sectionNames = [], this._sectionMap = /* @__PURE__ */ new Map(), this.activeLayerInfos = null, this.headingLevel = 3, this.layout = A2.Stack, this.messages = null, this.messagesCommon = null, this.type = "card", this.view = null;
  }
  initialize() {
    this.addHandles(l2(() => this.activeLayerInfos, (e6) => {
      this._handles.removeAll(), this._watchForSectionChanges(e6);
    }));
  }
  destroy() {
    this._handles.destroy(), this._handles = null;
  }
  render() {
    this._hasIndicators = this.layout === A2.Auto && this.view.container.clientWidth <= I4 || this.layout === A2.Stack;
    const e6 = this.activeLayerInfos, t7 = e6 && e6.toArray().map((e7) => this._renderLegendForLayer(e7)).filter((e7) => !!e7);
    this._hasIndicators ? this._selectedSectionName && this._sectionNames.includes(this._selectedSectionName) || (this._selectedSectionName = this._sectionNames && this._sectionNames[0]) : this._selectedSectionName = null;
    const s12 = this._sectionNames.length, i8 = this._sectionNames.map((e7, t8) => {
      const i9 = s6(this.messagesCommon.pagination.pageText, { index: t8 + 1, total: s12 });
      return n2("div", { key: e7, role: "tab", id: e7, "aria-label": i9, "aria-controls": `${e7}-panel`, "aria-selected": (this._selectedSectionName === e7).toString(), tabIndex: this._selectedSectionName === e7 ? 0 : -1, title: i9, onclick: this._selectSection, onkeydown: this._focusSection, bind: this, class: this.classes(R2.indicator, { [R2.activated]: this._selectedSectionName === e7 }), "data-section-name": e7 });
    }), r8 = this._hasIndicators && s12 > 1 ? n2("div", { class: R2.indicatorContainer, key: "carousel-navigation", role: "tablist" }, i8) : null, a7 = this._hasIndicators ? this._sectionMap.get(this._selectedSectionName) : t7 && t7.length ? t7 : null, o4 = { [R2.stacked]: this._hasIndicators };
    return n2("div", { class: this.classes(R2.base, o4) }, a7 || n2("div", { class: R2.message }, this.messages.noLegend), r8);
  }
  _selectSection(e6) {
    const t7 = e6.target.getAttribute("data-section-name");
    t7 && (this._selectedSectionName = t7);
  }
  _focusSection(e6) {
    switch (e6.key) {
      case "ArrowLeft":
      case "ArrowRight":
        this._switchSectionOnArrowPress(e6);
        break;
      case "Enter":
      case " ":
        this._selectSection(e6);
    }
  }
  _switchSectionOnArrowPress(e6) {
    const t7 = e6.key, s12 = "ArrowLeft" === t7 ? -1 : 1, i8 = e6.target.getAttribute("data-section-name"), r8 = this._sectionNames.indexOf(i8), a7 = this._sectionNames;
    let o4 = null;
    -1 !== r8 && (a7[r8 + s12] ? o4 = document.getElementById(a7[r8 + s12]) : "ArrowLeft" === t7 ? o4 = document.getElementById(a7[a7.length - 1]) : "ArrowRight" === t7 && (o4 = document.getElementById(a7[0])), o4 && o4.focus());
  }
  _watchForSectionChanges(e6) {
    if (this._generateSectionNames(), e6) {
      e6.forEach((e7) => {
        const t8 = `activeLayerInfo-${e7.layer.uid}-version-change`;
        this._handles.remove(t8), this._watchForSectionChanges(e7.children), this._handles.add(l2(() => e7.version, () => this._generateSectionNames()), t8);
      });
      const t7 = "activeLayerInfos-collection-change";
      this._handles.remove(t7), this._handles.add(e6.on("change", () => this._watchForSectionChanges(e6)), t7);
    }
  }
  _generateSectionNames() {
    this._sectionNames.length = 0, this._selectedSectionName = null, this.activeLayerInfos && this.activeLayerInfos.forEach(this._generateSectionNamesForActiveLayerInfo, this);
  }
  _getSectionName(e6, t7, s12) {
    return `${this.id}${e6.uid}-type-${t7.type}-${s12}`;
  }
  _generateSectionNamesForActiveLayerInfo(e6) {
    e6.children.forEach(this._generateSectionNamesForActiveLayerInfo, this), e6.legendElements && e6.legendElements.forEach((t7, s12) => {
      this._sectionNames.push(this._getSectionName(e6.layer, t7, s12));
    });
  }
  _renderLegendForLayer(e6) {
    if (!e6.ready)
      return null;
    if (e6.children.length) {
      const t7 = e6.children.map((e7) => this._renderLegendForLayer(e7)).toArray();
      return n2("div", { key: e6.layer.uid, class: this.classes(R2.service, R2.groupLayer) }, n2("div", { class: R2.serviceCaptionContainer }, e6.title), t7);
    }
    {
      const t7 = e6.legendElements;
      if (t7 && !t7.length)
        return null;
      const s12 = t7.some((e7) => "relationship-ramp" === e7.type), i8 = t7.map((t8, i9) => this._renderLegendForElement(t8, e6, i9, s12)).filter((e7) => !!e7);
      if (!i8.length)
        return null;
      const r8 = { [R2.groupLayerChild]: !!e6.parent };
      return n2("div", { key: e6.layer.uid, class: this.classes(R2.service, r8) }, n2("div", { class: R2.serviceCaptionContainer }, n2("div", { class: R2.serviceCaptionText }, e6.title)), n2("div", { class: R2.serviceContent }, i8));
    }
  }
  _renderLegendForElement(e6, t7, s12, i8 = false, r8 = false) {
    const a7 = "color-ramp" === e6.type, o4 = "opacity-ramp" === e6.type, l8 = "size-ramp" === e6.type, n8 = t7.layer;
    let d4 = null;
    if ("string" == typeof e6.title)
      d4 = e6.title;
    else if (e6.title) {
      const t8 = e6.title, s13 = r7(this.messages, t8, a7 || o4);
      d4 = t8.title ? `${t8.title} (${s13})` : s13;
    }
    const p6 = this._getSectionName(n8, e6, s12), m6 = this._hasIndicators && !r8 ? n2("div", null, n2(n3, { level: this.headingLevel, class: R2.carouselTitle }, t7.title), n2(n3, { level: l3(this.headingLevel), class: R2.layerCaption }, d4)) : d4 ? n2(n3, { level: this.headingLevel, class: R2.layerCaption }, d4) : null, h7 = t7.effectList;
    let y7 = null;
    if ("symbol-table" === e6.type) {
      const s13 = e6.infos.map((s14, i9) => this._renderLegendForElementInfo(s14, t7, e6.legendType, i9)).filter((e7) => !!e7);
      if (s13.length) {
        const e7 = s13[0].properties.classes && s13[0].properties.classes[R2.symbolRow], t8 = { [R2.labelContainer]: !e7 && !i8, [R2.relationshipLabelContainer]: i8 };
        y7 = n2("div", { class: this.classes(t8) }, s13);
      }
    } else
      "color-ramp" === e6.type || "opacity-ramp" === e6.type || "heatmap-ramp" === e6.type ? y7 = this._renderLegendForRamp(e6, n8.opacity, h7) : l8 ? y7 = this._renderSizeRamp(e6, n8.opacity) : "pie-chart-ramp" === e6.type ? y7 = this._renderPieChartRamp(e6) : "relationship-ramp" === e6.type ? y7 = p4(e6, this.id, n8.opacity, h7) : "univariate-above-and-below-ramp" === e6.type ? y7 = this._renderUnivariateAboveAndBelowRamp(e6, n8.opacity, h7) : "univariate-color-size-ramp" === e6.type && (y7 = this._renderUnivariateColorSizeRamp(e6, n8.opacity, h7));
    if (!y7)
      return null;
    const g4 = n2("div", { key: p6, class: R2.section, id: `${p6}-panel`, role: "tabpanel", "aria-labelledby": p6, tabIndex: 0 }, [m6, y7]);
    return r8 || this._sectionMap.set(p6, g4), g4;
  }
  _renderPieChartRamp(e6) {
    return n2("div", { class: R2.pieChartRampPreview, bind: e6.preview, afterCreate: t6 });
  }
  _renderUnivariateAboveAndBelowRamp(e6, t7, s12) {
    const { sizeRampElement: i8, colorRampElement: r8 } = d3(e6, t7, "horizontal");
    if (!i8)
      return null;
    const a7 = h6(i8, "full", true, "horizontal"), o4 = y6(i8, "above", true, "horizontal"), l8 = y6(i8, "below", true, "horizontal"), n8 = 12, c6 = v3(r8, { width: o4, height: n8, rampAlignment: "horizontal", opacity: t7, type: "above", effectList: s12 }), g4 = v3(r8, { width: l8, height: n8, rampAlignment: "horizontal", opacity: t7, type: "below", effectList: s12 }), _3 = u8(i8, "card"), u11 = i8.infos.map((e7) => e7.label), f7 = u11.length - 1, b5 = u11.map((e7, t8) => 0 === t8 || t8 === f7 ? n2("div", { key: t8 }, e7) : null), w5 = { display: "flex", flexDirection: "column" }, L5 = { display: "flex", flexDirection: "row" }, S5 = { marginTop: "3px", display: "flex" };
    f2(this.container) ? S5.marginRight = `${_3}px` : S5.marginLeft = `${_3}px`;
    const z3 = { width: `${a7}px`, display: "flex", flexDirection: "row", justifyContent: "space-between" };
    return n2("div", { class: R2.layerRow, key: "size-ramp-preview", styles: w5 }, n2("div", { class: this.classes(R2.symbolContainer, R2.sizeRampHorizontal), styles: L5 }, i8.infos.map((e7, t8) => n2("div", { key: t8, class: R2.symbol, bind: e7.preview, afterCreate: t6 }))), c6 ? n2("div", { class: R2.univariateAboveAndBelowColorRamp, styles: S5, key: "color-ramp-preview" }, n2("div", { bind: c6, afterCreate: t6 }), n2("div", { bind: g4, afterCreate: t6 })) : null, n2("div", { class: R2.layerInfo }, n2("div", { class: R2.rampLabelsContainer, styles: z3 }, b5)));
  }
  _renderUnivariateColorSizeRamp(e6, t7, s12) {
    const { sizeRampElement: i8, colorRampElement: r8 } = b4(e6, "horizontal");
    if (!i8)
      return null;
    const a7 = h6(i8, "full", false, "horizontal"), o4 = y6(i8, "full", false, "horizontal"), l8 = v3(r8, { width: o4, height: 12, rampAlignment: "horizontal", opacity: t7, type: "full", effectList: s12 }), n8 = u8(i8, "card"), c6 = i8.infos.length - 1, d4 = i8.infos.map((e7, t8) => 0 === t8 || t8 === c6 ? n2("div", { key: t8 }, e7.label) : null), _3 = { display: "flex", flexDirection: "column" }, u11 = { display: "flex", flexDirection: "row" }, f7 = { marginTop: "3px", display: "flex" };
    f2(this.container) ? f7.marginRight = `${n8}px` : f7.marginLeft = `${n8}px`;
    const b5 = { width: `${a7}px`, display: "flex", flexDirection: "row", justifyContent: "space-between" };
    return n2("div", { class: R2.layerRow, key: "size-ramp-preview", styles: _3 }, n2("div", { class: this.classes(R2.symbolContainer, R2.sizeRampHorizontal), styles: u11 }, i8.infos.map((e7, t8) => n2("div", { key: t8, class: R2.symbol, bind: e7.preview, afterCreate: t6 }))), n2("div", { class: R2.univariateAboveAndBelowColorRamp, styles: f7, key: "color-ramp-preview" }, n2("div", { bind: l8, afterCreate: t6 })), n2("div", { class: R2.layerInfo }, n2("div", { class: R2.rampLabelsContainer, styles: b5 }, d4)));
  }
  _renderLegendForElementInfo(e6, t7, s12, i8) {
    var _a, _b;
    const r8 = t7.layer;
    if (e6.type)
      return this._renderLegendForElement(e6, t7, i8, false, true);
    const a7 = i7(r8, s12);
    if (e6.preview) {
      if (!e6.symbol || !e6.symbol.type.includes("simple-fill")) {
        if (!e6.label)
          return n2("div", { key: i8, bind: e6.preview, afterCreate: t6 });
        const t8 = { [R2.symbolCell]: this._hasIndicators };
        return n2("div", { key: i8, class: this.classes(R2.layerRow, { [R2.symbolRow]: this._hasIndicators }) }, n2("div", { class: this.classes(t8), bind: e6.preview, afterCreate: t6 }), n2("div", { class: this.classes(R2.imageLabel, { [R2.labelCell]: this._hasIndicators }) }, r7(this.messages, e6.label, false) || ""));
      }
      let s13 = 255, a8 = 255, o4 = 255, n8 = 0, c6 = 255, d4 = 255, p6 = 255, m6 = 0;
      const h7 = e6.symbol.color && e6.symbol.color.a, y7 = e6.symbol.outline && e6.symbol.outline.color && e6.symbol.outline.color.a;
      h7 && (s13 = e6.symbol.color.r, a8 = e6.symbol.color.g, o4 = e6.symbol.color.b, n8 = e6.symbol.color.a * r8.opacity), y7 && (c6 = e6.symbol.outline.color.r, d4 = e6.symbol.outline.color.g, p6 = e6.symbol.outline.color.b, m6 = e6.symbol.outline.color.a * r8.opacity);
      const g4 = (_b = (_a = e6.symbol.color) == null ? void 0 : _a.isBright) != null ? _b : true, u11 = g4 ? "rgba(255, 255, 255, .6)" : "rgba(0, 0, 0, .6)", f7 = { background: h7 ? `rgba(${s13}, ${a8}, ${o4}, ${n8})` : "none", color: g4 ? "black" : "white", textShadow: `-1px -1px 0 ${u11},
                                              1px -1px 0 ${u11},
                                              -1px 1px 0 ${u11},
                                              1px 1px 0 ${u11}`, border: y7 ? `1px solid rgba(${c6}, ${d4}, ${p6}, ${m6})` : "none", filter: q(t7.effectList) };
      return n2("div", { key: i8, class: R2.layerRow }, n2("div", { class: R2.labelElement, styles: f7 }, " ", e6.label, " "));
    }
    if (e6.src) {
      const t8 = this._renderImage(e6, r8, a7);
      return n2("div", { key: i8, class: R2.layerRow }, t8, n2("div", { class: R2.imageLabel }, e6.label || ""));
    }
  }
  _renderImage(e6, t7, s12) {
    const { label: i8, src: r8, opacity: a7 } = e6, o4 = { [R2.imageryLayerStretchedImage]: s12, [R2.symbol]: !s12 }, l8 = { opacity: `${null != a7 ? a7 : t7.opacity}` };
    return n2("img", { alt: r7(this.messages, i8, false), src: r8, border: 0, width: e6.width, height: e6.height, class: this.classes(o4), styles: l8 });
  }
  _renderSizeRampLines(e6) {
    const t7 = e6.infos, s12 = t7[0], r8 = t7[t7.length - 1], a7 = s12.symbol, o4 = this._hasIndicators, l8 = u(s12.size + s12.outlineSize) * j5, n8 = u(r8.size + r8.outlineSize) * j5, c6 = o4 ? l8 : l8 + 50 * j5, d4 = o4 ? l8 / 2 + 50 * j5 : l8, p6 = F(a7), m6 = E4(a7), h7 = document.createElement("canvas");
    h7.width = c6, h7.height = d4, h7.style.width = h7.width / j5 + "px", h7.style.height = h7.height / j5 + "px";
    const y7 = h7.getContext("2d");
    if (o4) {
      y7.beginPath();
      const e7 = 0, t8 = 0, s13 = c6 / 2 - n8 / 2, i8 = d4;
      y7.moveTo(e7, t8), y7.lineTo(s13, i8);
      const r9 = c6, a8 = 0, o5 = c6 / 2 + n8 / 2, l9 = d4;
      y7.moveTo(r9, a8), y7.lineTo(o5, l9);
    } else {
      y7.beginPath();
      const e7 = 0, t8 = d4 / 2 - n8 / 2, s13 = c6, i8 = 0;
      y7.moveTo(e7, t8), y7.lineTo(s13, i8);
      const r9 = 0, a8 = d4 / 2 + n8 / 2, o5 = c6, l9 = d4;
      y7.moveTo(r9, a8), y7.lineTo(o5, l9);
    }
    return y7.strokeStyle = N2, y7.stroke(), n2("div", { bind: h7, afterCreate: t6, styles: o4 ? { display: "flex", marginTop: `-${p6 ? 0 : m6 ? l8 / 2 : 0}px`, marginBottom: `-${p6 ? n8 : m6 ? n8 / 2 : 0}px` } : { display: "flex", marginRight: `-${p6 ? 0 : m6 ? l8 / 2 : 0}px`, marginLeft: `-${p6 ? 0 : m6 ? n8 / 2 : 0}px` } });
  }
  _renderSizeRamp(e6, t7) {
    const s12 = e6.infos, i8 = s12[0].label, r8 = s12[s12.length - 1].label;
    let a7 = s12[0].preview, o4 = s12[s12.length - 1].preview;
    const l8 = this._hasIndicators, n8 = { "flex-direction": l8 ? "column" : "row-reverse" };
    a7 && (a7 = a7.cloneNode(true), a7.style.display = "flex"), o4 && (o4 = o4.cloneNode(true), o4.style.display = "flex");
    const c6 = { opacity: null != t7 ? `${t7}` : "" };
    return n2("div", { class: this.classes(R2.layerRow, { [R2.sizeRampRow]: l8 }) }, n2("div", { class: R2.rampLabel }, l8 ? i8 : r8), n2("div", { class: R2.sizeRampContainer, styles: n8 }, n2("div", { bind: a7, afterCreate: t6, class: R2.sizeRampPreview, styles: c6 }), this._renderSizeRampLines(e6), n2("div", { bind: o4, afterCreate: t6, class: R2.sizeRampContainer, styles: c6 })), n2("div", { class: R2.rampLabel }, l8 ? r8 : i8));
  }
  _renderLegendForRamp(e6, t7, s12) {
    const i8 = e6.infos, r8 = "heatmap-ramp" === e6.type, a7 = i8.length - 1, n8 = $, c6 = a7 > 2 && !r8 ? z2 * a7 : k2, d4 = c6 + 20, p6 = 10, m6 = i8.slice(0).reverse();
    m6.forEach((e7, t8) => {
      e7.offset = r8 ? e7.ratio : t8 / a7;
    });
    const h7 = m6.length - 1, y7 = m6.length % 2 != 0 && m6[m6.length / 2 | 0], g4 = y7 && n2("div", { class: R2.intervalSeparatorsContainer }, n2("div", { class: R2.intervalSeparator }, "|"), n2("div", { class: R2.rampLabel }, y7.label)), _3 = i8[i8.length - 1].label, v5 = i8[0].label, u11 = [[{ shape: { type: "path", path: `M0 ${n8 / 2} L${p6} 0 L${p6} ${n8} Z` }, fill: m6[0].color, stroke: { width: 0 } }, { shape: { type: "rect", x: p6, y: 0, width: c6, height: n8 }, fill: { type: "linear", x1: p6, y1: 0, x2: c6 + p6, y2: 0, colors: m6 }, stroke: { width: 0 } }, { shape: { type: "path", path: `M${c6 + p6} 0 L${d4} ${n8 / 2} L${c6 + p6} ${n8} Z` }, fill: m6[h7].color, stroke: { width: 0 } }]], f7 = R(u11, d4, n8), { messages: b5 } = this, w5 = { filter: q(s12), opacity: null == t7 ? null : `${t7}` }, L5 = { justifyContent: "center" };
    return n2("div", { class: R2.layerRow, styles: L5 }, n2("div", { class: R2.rampLabel }, r8 ? b5[_3] : _3), n2("div", { class: R2.symbolContainer }, n2("div", { styles: w5 }, f7), g4), n2("div", { class: R2.rampLabel }, r8 ? b5[v5] : v5));
  }
};
e2([y()], T3.prototype, "activeLayerInfos", void 0), e2([y()], T3.prototype, "headingLevel", void 0), e2([y()], T3.prototype, "layout", void 0), e2([y(), e3("esri/widgets/Legend/t9n/Legend")], T3.prototype, "messages", void 0), e2([y(), e3("esri/t9n/common")], T3.prototype, "messagesCommon", void 0), e2([y({ readOnly: true })], T3.prototype, "type", void 0), e2([y()], T3.prototype, "view", void 0), e2([t2()], T3.prototype, "_selectSection", null), T3 = e2([n("esri.widgets.Legend.styles.Card")], T3);
var B2 = T3;

// node_modules/@arcgis/core/widgets/Legend/styles/Classic.js
var u9 = { service: "esri-legend__service", label: "esri-legend__service-label", layer: "esri-legend__layer", groupLayer: "esri-legend__group-layer", groupLayerChild: "esri-legend__group-layer-child", layerTable: "esri-legend__layer-table", layerTableSizeRamp: "esri-legend__layer-table--size-ramp", layerChildTable: "esri-legend__layer-child-table", layerCaption: "esri-legend__layer-caption", layerBody: "esri-legend__layer-body", layerRow: "esri-legend__layer-row", layerCell: "esri-legend__layer-cell", layerInfo: "esri-legend__layer-cell esri-legend__layer-cell--info", imageryLayerStretchedImage: "esri-legend__imagery-layer-image--stretched", imageryLayerCellStretched: "esri-legend__imagery-layer-cell--stretched", imageryLayerInfoStretched: "esri-legend__imagery-layer-info--stretched", symbolContainer: "esri-legend__layer-cell esri-legend__layer-cell--symbols", symbol: "esri-legend__symbol", rampContainer: "esri-legend__ramps", sizeRamp: "esri-legend__size-ramp", colorRamp: "esri-legend__color-ramp", opacityRamp: "esri-legend__opacity-ramp", borderlessRamp: "esri-legend__borderless-ramp", rampTick: "esri-legend__ramp-tick", rampFirstTick: "esri-legend__ramp-tick-first", rampLastTick: "esri-legend__ramp-tick-last", rampLabelsContainer: "esri-legend__ramp-labels", rampLabel: "esri-legend__ramp-label", univariateAboveAndBelowSymbol: "esri-univariate-above-and-below-ramp__symbol", univariateAboveAndBelowLabel: "esri-univariate-above-and-below-ramp__label", message: "esri-legend__message", header: "esri-widget__heading", hidden: "esri-hidden" };
var _2 = "esri-legend__";
var f6 = 24;
var L4 = { display: "flex", alignItems: "flex-start" };
var w3 = { marginLeft: "3px" };
var C3 = { display: "table-cell", verticalAlign: "middle" };
var R3 = class extends M {
  constructor(e6, r8) {
    super(e6, r8), this.activeLayerInfos = null, this.headingLevel = 3, this.messages = null, this.type = "classic";
  }
  render() {
    const e6 = this.activeLayerInfos, r8 = e6 && e6.toArray().map((e7) => this._renderLegendForLayer(e7)).filter((e7) => !!e7);
    return n2("div", null, r8 && r8.length ? r8 : n2("div", { class: u9.message }, this.messages.noLegend));
  }
  _renderLegendForLayer(e6) {
    if (!e6.ready)
      return null;
    const r8 = !!e6.children.length, l8 = `${_2}${e6.layer.uid}-version-${e6.version}`, a7 = e6.title ? n3({ level: this.headingLevel, class: this.classes(u9.header, u9.label) }, e6.title) : null;
    if (r8) {
      const r9 = e6.children.map((e7) => this._renderLegendForLayer(e7)).toArray();
      return n2("div", { key: l8, class: this.classes(u9.service, u9.groupLayer) }, a7, r9);
    }
    {
      const r9 = e6.legendElements;
      if (r9 && !r9.length)
        return null;
      const s12 = r9.map((r10) => this._renderLegendForElement(r10, e6.layer, e6.effectList)).filter((e7) => !!e7);
      if (!s12.length)
        return null;
      const t7 = { [u9.groupLayerChild]: !!e6.parent };
      return n2("div", { key: l8, class: this.classes(u9.service, t7), tabIndex: 0 }, a7, n2("div", { class: u9.layer }, s12));
    }
  }
  _renderLegendForElement(e6, r8, l8, a7) {
    const t7 = "color-ramp" === e6.type, i8 = "opacity-ramp" === e6.type, n8 = "size-ramp" === e6.type;
    let o4 = null;
    if ("symbol-table" === e6.type || n8) {
      const a8 = e6.infos.map((a9) => this._renderLegendForElementInfo(a9, r8, l8, n8, e6.legendType)).filter((e7) => !!e7);
      a8.length && (o4 = n2("div", { class: u9.layerBody }, a8));
    } else
      "color-ramp" === e6.type || "opacity-ramp" === e6.type || "heatmap-ramp" === e6.type || "stretch-ramp" === e6.type ? o4 = this._renderLegendForRamp(e6, r8.opacity) : "relationship-ramp" === e6.type ? o4 = p4(e6, this.id, r8.opacity, l8) : "pie-chart-ramp" === e6.type ? o4 = this._renderPieChartRamp(e6) : "univariate-above-and-below-ramp" === e6.type ? o4 = this._renderUnivariateAboveAndBelowRamp(e6, r8.opacity, l8) : "univariate-color-size-ramp" === e6.type && (o4 = this._renderUnivariateColorSizeRamp(e6, r8.opacity, l8));
    if (!o4)
      return null;
    const p6 = e6.title;
    let m6 = null;
    if ("string" == typeof p6)
      m6 = p6;
    else if (p6) {
      const e7 = r7(this.messages, p6, t7 || i8);
      m6 = o3(p6, t7 || i8) && p6.title ? `${p6.title} (${e7})` : e7;
    }
    const c6 = a7 ? u9.layerChildTable : u9.layerTable, g4 = m6 ? n2("div", { class: u9.layerCaption }, m6) : null, v5 = { [u9.layerTableSizeRamp]: n8 || !a7 };
    return n2("div", { class: this.classes(c6, v5) }, g4, o4);
  }
  _renderPieChartRamp(e6) {
    return n2("div", { bind: e6.preview, afterCreate: t6 });
  }
  _renderUnivariateAboveAndBelowRamp(e6, r8, l8) {
    const { sizeRampElement: a7, colorRampElement: s12 } = d3(e6, r8);
    if (!a7)
      return null;
    const p6 = y6(a7, "above", true), d4 = y6(a7, "below", true), y7 = 12, c6 = v3(s12, { width: y7, height: p6, rampAlignment: "vertical", opacity: r8, type: "above", effectList: l8 }), g4 = v3(s12, { width: y7, height: d4, rampAlignment: "vertical", opacity: r8, type: "below", effectList: l8 }), v5 = u8(a7), b5 = a7.infos.map((e7) => e7.label), _3 = b5.map((e7, r9) => {
      const l9 = 2 === r9;
      return 0 === r9 ? n2("div", { key: r9, class: e7 ? c6 ? u9.univariateAboveAndBelowLabel : u9.rampLabel : null }, e7) : l9 ? n2("div", null) : null;
    }), f7 = b5.length - 1, R4 = Math.floor(b5.length / 2), A4 = b5.map((e7, r9) => r9 === R4 || r9 === f7 ? n2("div", { key: r9, class: e7 ? c6 ? u9.univariateAboveAndBelowLabel : u9.rampLabel : null }, e7) : null), S5 = { display: "table-cell", verticalAlign: "middle" }, I5 = { marginTop: `${v5}px` }, j6 = { height: `${p6}px` }, k3 = { height: `${d4}px` };
    return n2("div", { key: "univariate-above-and-below-ramp-preview", styles: L4 }, n2("div", { class: u9.layerBody }, a7.infos.map((e7, r9) => n2("div", { class: this.classes(u9.layerRow, u9.sizeRamp) }, n2("div", { class: u9.symbol, styles: S5, bind: e7.preview, afterCreate: t6 }), c6 || r9 % 2 != 0 ? null : n2("div", { class: u9.layerInfo }, b5[r9])))), c6 ? n2("div", { styles: I5, key: "color-ramp-preview" }, n2("div", { styles: w3 }, n2("div", { styles: C3 }, n2("div", { class: u9.rampContainer, bind: c6, afterCreate: t6 })), n2("div", { styles: C3 }, n2("div", { class: u9.rampLabelsContainer, styles: j6 }, _3))), n2("div", { styles: w3 }, n2("div", { styles: C3 }, n2("div", { class: u9.rampContainer, bind: g4, afterCreate: t6 })), n2("div", { styles: C3 }, n2("div", { class: u9.rampLabelsContainer, styles: k3 }, A4)))) : null);
  }
  _renderUnivariateColorSizeRamp(e6, r8, l8) {
    const { sizeRampElement: a7, colorRampElement: s12 } = b4(e6);
    if (!a7)
      return null;
    const t7 = u8(a7), d4 = 12, y7 = y6(a7, "full", false), c6 = v3(s12, { width: d4, height: y7, rampAlignment: "vertical", opacity: r8, type: "full", effectList: l8 }), g4 = a7.infos.length - 1, v5 = a7.infos.map((e7, r9) => 0 === r9 || r9 === g4 ? n2("div", { key: r9, class: e7.label ? s12 ? u9.univariateAboveAndBelowLabel : u9.rampLabel : null }, e7.label) : null), b5 = { display: "table-cell", verticalAlign: "middle" }, _3 = { marginTop: `${t7}px` }, f7 = { height: `${y7}px` };
    return n2("div", { key: "univariate-above-and-below-ramp-preview", styles: L4 }, n2("div", { class: u9.layerBody }, a7.infos.map((e7) => n2("div", { class: this.classes(u9.layerRow, u9.sizeRamp) }, n2("div", { class: u9.symbol, styles: b5, bind: e7.preview, afterCreate: t6 })))), n2("div", { styles: _3, key: "color-ramp-preview" }, n2("div", { styles: w3 }, n2("div", { styles: C3 }, n2("div", { class: u9.rampContainer, bind: c6, afterCreate: t6 })), n2("div", { styles: C3 }, n2("div", { class: u9.rampLabelsContainer, styles: f7 }, v5)))));
  }
  _renderLegendForRamp(e6, r8) {
    const l8 = e6.infos, a7 = "opacity-ramp" === e6.type, s12 = "heatmap-ramp" === e6.type, t7 = "stretch-ramp" === e6.type, i8 = e6.preview, n8 = a7 ? u9.opacityRamp : "";
    i8.className = `${u9.colorRamp} ${n8}`, null != r8 && (i8.style.opacity = r8.toString());
    const o4 = l8.map((e7) => n2("div", { class: e7.label ? u9.rampLabel : null }, s12 ? this.messages[e7.label] || e7.label : t7 ? this._getStretchStopLabel(e7) : e7.label)), p6 = { width: `${f6}px` }, d4 = { height: i8.style.height };
    return n2("div", { class: u9.layerRow }, n2("div", { class: u9.symbolContainer, styles: p6 }, n2("div", { class: u9.rampContainer, bind: i8, afterCreate: t6 })), n2("div", { class: u9.layerInfo }, n2("div", { class: u9.rampLabelsContainer, styles: d4 }, o4)));
  }
  _getStretchStopLabel(e6) {
    return e6.label ? this.messages[e6.label] + ": " + ("string" == typeof e6.value ? e6.value : m2(e6.value, { style: "decimal", notation: e6.value.toString().includes("e") ? "scientific" : "standard" })) : "";
  }
  _renderLegendForElementInfo(e6, r8, l8, a7, s12) {
    if (e6.type)
      return this._renderLegendForElement(e6, r8, l8, true);
    let t7 = null;
    const i8 = i7(r8, s12);
    if (e6.preview ? t7 = n2("div", { class: u9.symbol, bind: e6.preview, afterCreate: t6 }) : e6.src && (t7 = this._renderImage(e6, r8, i8)), !t7)
      return null;
    const n8 = { [u9.imageryLayerInfoStretched]: i8 }, o4 = { [u9.imageryLayerInfoStretched]: i8, [u9.sizeRamp]: !i8 && a7 };
    return n2("div", { class: u9.layerRow }, n2("div", { class: this.classes(u9.symbolContainer, o4) }, t7), n2("div", { class: this.classes(u9.layerInfo, n8) }, r7(this.messages, e6.label, false) || ""));
  }
  _renderImage(e6, r8, l8) {
    const { label: a7, src: s12, opacity: t7 } = e6, i8 = { [u9.imageryLayerStretchedImage]: l8, [u9.symbol]: !l8 }, n8 = { opacity: `${null != t7 ? t7 : r8.opacity}` };
    return n2("img", { alt: r7(this.messages, a7, false), src: s12, border: 0, width: e6.width, height: e6.height, class: this.classes(i8), styles: n8 });
  }
};
e2([y()], R3.prototype, "activeLayerInfos", void 0), e2([y()], R3.prototype, "headingLevel", void 0), e2([y(), e3("esri/widgets/Legend/t9n/Legend")], R3.prototype, "messages", void 0), e2([y({ readOnly: true })], R3.prototype, "type", void 0), R3 = e2([n("esri.widgets.Legend.styles.Classic")], R3);
var A3 = R3;

// node_modules/@arcgis/core/widgets/Legend.js
var v4 = { base: "esri-legend", widget: "esri-widget", panel: "esri-widget--panel", widgetIcon: "esri-icon-layer-list" };
var u10 = class extends M {
  constructor(e6, s12) {
    super(e6, s12), this._handles = new t(), this.headingLevel = 3, this.iconClass = v4.widgetIcon, this.messages = null, this.style = new A3(), this.viewModel = new I3();
  }
  initialize() {
    this.addHandles([a(() => this.view, "resize", () => this.scheduleRender()), a(() => this.activeLayerInfos, "change", () => this._refreshActiveLayerInfos(this.activeLayerInfos)), l2(() => this.headingLevel, (e6) => {
      const { style: t7 } = this;
      t7 && (t7.headingLevel = e6);
    }), l2(() => this.style, (e6, t7) => {
      t7 && e6 !== t7 && t7.destroy(), e6 && (e6.activeLayerInfos = this.activeLayerInfos, "card" === e6.type && (e6.view = this.view), e6.headingLevel = this.headingLevel);
    }, h)]);
  }
  destroy() {
    this._handles = s(this._handles);
  }
  get activeLayerInfos() {
    return this.viewModel.activeLayerInfos;
  }
  set activeLayerInfos(e6) {
    this.viewModel.activeLayerInfos = e6;
  }
  get basemapLegendVisible() {
    return this.viewModel.basemapLegendVisible;
  }
  set basemapLegendVisible(e6) {
    this.viewModel.basemapLegendVisible = e6;
  }
  get groundLegendVisible() {
    return this.viewModel.groundLegendVisible;
  }
  set groundLegendVisible(e6) {
    this.viewModel.groundLegendVisible = e6;
  }
  get hideLayersNotInCurrentView() {
    return this.viewModel.hideLayersNotInCurrentView;
  }
  set hideLayersNotInCurrentView(e6) {
    this.viewModel.hideLayersNotInCurrentView = e6;
  }
  get keepCacheOnDestroy() {
    return this.viewModel.keepCacheOnDestroy;
  }
  set keepCacheOnDestroy(e6) {
    this.viewModel.keepCacheOnDestroy = e6;
  }
  get respectLayerVisibility() {
    return this.viewModel.respectLayerVisibility;
  }
  set respectLayerVisibility(e6) {
    this.viewModel.respectLayerVisibility = e6;
  }
  get label() {
    var _a, _b;
    return (_b = (_a = this.messages) == null ? void 0 : _a.widgetLabel) != null ? _b : "";
  }
  set label(e6) {
    this._overrideIfSome("label", e6);
  }
  get layerInfos() {
    return this.viewModel.layerInfos;
  }
  set layerInfos(e6) {
    this.viewModel.layerInfos = e6;
  }
  castStyle(e6) {
    if (e6 instanceof B2 || e6 instanceof A3)
      return e6;
    if ("string" == typeof e6)
      return "card" === e6 ? new B2() : new A3();
    if (e6 && "string" == typeof e6.type) {
      const t7 = { ...e6 };
      delete t7.type;
      return new ("card" === e6.type ? B2 : A3)(t7);
    }
    return new A3();
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e6) {
    this.viewModel.view = e6;
  }
  render() {
    return n2("div", { class: this.classes(v4.base, v4.widget, this.style instanceof A3 ? v4.panel : null) }, this.style.render());
  }
  _refreshActiveLayerInfos(e6) {
    this._handles.removeAll(), e6.forEach((e7) => this._renderOnActiveLayerInfoChange(e7)), this.scheduleRender();
  }
  _renderOnActiveLayerInfoChange(e6) {
    const t7 = l2(() => e6.version, () => this.scheduleRender());
    this._handles.add(t7, `version_${e6.layer.uid}`);
    const s12 = a(() => e6.children, "change", () => e6.children.forEach((e7) => this._renderOnActiveLayerInfoChange(e7)), h);
    this._handles.add(s12, `children_${e6.layer.uid}`), e6.children.forEach((e7) => this._renderOnActiveLayerInfoChange(e7));
  }
};
e2([y()], u10.prototype, "activeLayerInfos", null), e2([y()], u10.prototype, "basemapLegendVisible", null), e2([y()], u10.prototype, "groundLegendVisible", null), e2([y()], u10.prototype, "headingLevel", void 0), e2([y()], u10.prototype, "hideLayersNotInCurrentView", null), e2([y()], u10.prototype, "keepCacheOnDestroy", null), e2([y()], u10.prototype, "respectLayerVisibility", null), e2([y()], u10.prototype, "iconClass", void 0), e2([y()], u10.prototype, "label", null), e2([y()], u10.prototype, "layerInfos", null), e2([y(), e3("esri/widgets/Legend/t9n/Legend")], u10.prototype, "messages", void 0), e2([y()], u10.prototype, "style", void 0), e2([s3("style")], u10.prototype, "castStyle", null), e2([y()], u10.prototype, "view", null), e2([y()], u10.prototype, "viewModel", void 0), u10 = e2([n("esri.widgets.Legend")], u10);
var w4 = u10;

export {
  w4 as w
};
//# sourceMappingURL=chunk-6IUY3TBO.js.map
