{
  "version": 3,
  "sources": ["../../@arcgis/core/rest/networks/support/ValidateNetworkTopologyResult.js", "../../@arcgis/core/rest/networks/validateNetworkTopology.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nimport{_ as e}from\"../../../chunks/tslib.es6.js\";import{JSONSupport as t}from\"../../../core/JSONSupport.js\";import{property as o}from\"../../../core/accessorSupport/decorators/property.js\";import\"../../../core/arrayUtils.js\";import\"../../../core/accessorSupport/ensureType.js\";import{subclass as r}from\"../../../core/accessorSupport/decorators/subclass.js\";let s=class extends t{constructor(e){super(e),this.moment=null,this.fullUpdate=!1,this.validateErrorsCreated=!1,this.dirtyAreaCount=null,this.exceededTransferLimit=null,this.serviceEdits=null}};e([o({type:Date,json:{type:Number,write:{writer:(e,t)=>{t.moment=e?e.getTime():null}}}})],s.prototype,\"moment\",void 0),e([o({type:Boolean,json:{write:!0}})],s.prototype,\"fullUpdate\",void 0),e([o({type:Boolean,json:{write:!0}})],s.prototype,\"validateErrorsCreated\",void 0),e([o({type:Number,json:{write:!0}})],s.prototype,\"dirtyAreaCount\",void 0),e([o({type:Boolean,json:{write:!0}})],s.prototype,\"exceededTransferLimit\",void 0),e([o({type:[Object],json:{write:!0}})],s.prototype,\"serviceEdits\",void 0),s=e([r(\"esri.rest.networks.support.ValidateNetworkTopologyResult\")],s);const p=s;export{p as default};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nimport t from\"../../request.js\";import{parseUrl as e,encode as o,asValidOptions as i}from\"../utils.js\";import r from\"./support/ValidateNetworkTopologyResult.js\";async function a(a,s,d){const n=e(a),l=s.toJSON();s.validationSet&&(l.validationSet=JSON.stringify(s.validationSet));const p={...l,f:\"json\"},u=o({...n.query,...p}),m=i(u,{...d,method:\"post\"}),f=`${n.path}/validateNetworkTopology`,{data:c}=await t(f,m);if(!c)return null;const v=r.fromJSON(c);return v.serviceEdits=v.serviceEdits.map((t=>({layerId:t.id,editedFeatures:t.editedFeatures}))),v}export{a as validateNetworkTopology};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIoW,IAAIA,KAAE,cAAc,EAAC;AAAA,EAAC,YAAYC,IAAE;AAAC,UAAMA,EAAC,GAAE,KAAK,SAAO,MAAK,KAAK,aAAW,OAAG,KAAK,wBAAsB,OAAG,KAAK,iBAAe,MAAK,KAAK,wBAAsB,MAAK,KAAK,eAAa;AAAA,EAAI;AAAC;AAAE,EAAE,CAAC,EAAE,EAAC,MAAK,MAAK,MAAK,EAAC,MAAK,QAAO,OAAM,EAAC,QAAO,CAACA,IAAE,MAAI;AAAC,IAAE,SAAOA,KAAEA,GAAE,QAAQ,IAAE;AAAI,EAAC,EAAC,EAAC,CAAC,CAAC,GAAED,GAAE,WAAU,UAAS,MAAM,GAAE,EAAE,CAAC,EAAE,EAAC,MAAK,SAAQ,MAAK,EAAC,OAAM,KAAE,EAAC,CAAC,CAAC,GAAEA,GAAE,WAAU,cAAa,MAAM,GAAE,EAAE,CAAC,EAAE,EAAC,MAAK,SAAQ,MAAK,EAAC,OAAM,KAAE,EAAC,CAAC,CAAC,GAAEA,GAAE,WAAU,yBAAwB,MAAM,GAAE,EAAE,CAAC,EAAE,EAAC,MAAK,QAAO,MAAK,EAAC,OAAM,KAAE,EAAC,CAAC,CAAC,GAAEA,GAAE,WAAU,kBAAiB,MAAM,GAAE,EAAE,CAAC,EAAE,EAAC,MAAK,SAAQ,MAAK,EAAC,OAAM,KAAE,EAAC,CAAC,CAAC,GAAEA,GAAE,WAAU,yBAAwB,MAAM,GAAE,EAAE,CAAC,EAAE,EAAC,MAAK,CAAC,MAAM,GAAE,MAAK,EAAC,OAAM,KAAE,EAAC,CAAC,CAAC,GAAEA,GAAE,WAAU,gBAAe,MAAM,GAAEA,KAAE,EAAE,CAAC,EAAE,0DAA0D,CAAC,GAAEA,EAAC;AAAE,IAAM,IAAEA;;;ACA18B,eAAe,EAAEE,IAAEC,IAAE,GAAE;AAAC,QAAMC,KAAE,EAAEF,EAAC,GAAEG,KAAEF,GAAE,OAAO;AAAE,EAAAA,GAAE,kBAAgBE,GAAE,gBAAc,KAAK,UAAUF,GAAE,aAAa;AAAG,QAAMG,KAAE,EAAC,GAAGD,IAAE,GAAE,OAAM,GAAE,IAAE,EAAE,EAAC,GAAGD,GAAE,OAAM,GAAGE,GAAC,CAAC,GAAE,IAAE,EAAE,GAAE,EAAC,GAAG,GAAE,QAAO,OAAM,CAAC,GAAEC,KAAE,GAAGH,GAAE,gCAA+B,EAAC,MAAK,EAAC,IAAE,MAAM,EAAEG,IAAE,CAAC;AAAE,MAAG,CAAC;AAAE,WAAO;AAAK,QAAM,IAAE,EAAE,SAAS,CAAC;AAAE,SAAO,EAAE,eAAa,EAAE,aAAa,IAAK,QAAI,EAAC,SAAQ,EAAE,IAAG,gBAAe,EAAE,eAAc,EAAG,GAAE;AAAC;",
  "names": ["s", "e", "a", "s", "n", "l", "p", "f"]
}
