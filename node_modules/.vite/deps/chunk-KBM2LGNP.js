import {
  F,
  W,
  c2 as c,
  o2 as o
} from "./chunk-AMNM3DGI.js";
import {
  e as e2
} from "./chunk-SBPLVEUA.js";
import {
  n as n2
} from "./chunk-ZLTZ3KAT.js";
import {
  O
} from "./chunk-RUM3DXFX.js";
import {
  e
} from "./chunk-GHN7C53L.js";
import {
  n
} from "./chunk-NDQ5FHGV.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/DecodeNormal.glsl.js
function o2(o4) {
  const f2 = n2`vec3 decodeNormal(vec2 f) {
float z = 1.0 - abs(f.x) - abs(f.y);
return vec3(f + sign(f) * min(z, 0.0), z);
}`;
  o4.vertex.code.add(f2);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js
function o3(o4, d) {
  d.normalType === i.Attribute && (o4.attributes.add(O.NORMAL, "vec3"), o4.vertex.code.add(n2`vec3 normalModel() {
return normal;
}`)), d.normalType === i.CompressedAttribute && (o4.include(o2), o4.attributes.add(O.NORMALCOMPRESSED, "vec2"), o4.vertex.code.add(n2`vec3 normalModel() {
return decodeNormal(normalCompressed);
}`)), d.normalType === i.ScreenDerivative && (o4.extensions.add("GL_OES_standard_derivatives"), o4.fragment.code.add(n2`vec3 screenDerivativeNormal(vec3 positionView) {
return normalize(cross(dFdx(positionView), dFdy(positionView)));
}`));
}
var i;
!function(e3) {
  e3[e3.Attribute = 0] = "Attribute", e3[e3.CompressedAttribute = 1] = "CompressedAttribute", e3[e3.Ground = 2] = "Ground", e3[e3.ScreenDerivative = 3] = "ScreenDerivative", e3[e3.COUNT = 4] = "COUNT";
}(i || (i = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js
function n3(r, o4) {
  o4.normalType === i.Attribute || o4.normalType === i.CompressedAttribute ? (r.include(o3, o4), r.varyings.add("vNormalWorld", "vec3"), r.varyings.add("vNormalView", "vec3"), r.vertex.uniforms.add([new o("transformNormalGlobalFromModel", (r2) => r2.transformNormalGlobalFromModel), new e2("transformNormalViewFromGlobal", (r2) => r2.transformNormalViewFromGlobal)]), r.vertex.code.add(n2`void forwardNormal() {
vNormalWorld = transformNormalGlobalFromModel * normalModel();
vNormalView = transformNormalViewFromGlobal * vNormalWorld;
}`)) : o4.normalType === i.Ground ? (r.include(F, o4), r.varyings.add("vNormalWorld", "vec3"), r.vertex.code.add(n2`
    void forwardNormal() {
      vNormalWorld = ${o4.spherical ? n2`normalize(vPositionWorldCameraRelative);` : n2`vec3(0.0, 0.0, 1.0);`}
    }
    `)) : r.vertex.code.add(n2`void forwardNormal() {}`);
}
var f = class extends c {
  constructor() {
    super(...arguments), this.transformNormalViewFromGlobal = e();
  }
};
var c2 = class extends W {
  constructor() {
    super(...arguments), this.transformNormalGlobalFromModel = e(), this.toMapSpace = n();
  }
};

export {
  o3 as o,
  i,
  n3 as n,
  f,
  c2 as c
};
//# sourceMappingURL=chunk-KBM2LGNP.js.map
