import {
  e as e8
} from "./chunk-7ZIYPBIN.js";
import {
  E as E3,
  P as P2,
  i as i2,
  l as l4,
  l2 as l6,
  u as u5
} from "./chunk-DYOXDMFD.js";
import {
  e as e7
} from "./chunk-GLZIV37N.js";
import {
  E as E6,
  F,
  G,
  P as P3,
  e as e9,
  n as n9,
  t as t3,
  v as v2
} from "./chunk-VRX4W75V.js";
import {
  c as c2
} from "./chunk-OFXOSNPT.js";
import {
  o as o3,
  r as r5,
  s as s7
} from "./chunk-IMBIE27L.js";
import {
  p as p4
} from "./chunk-2NKIENHY.js";
import {
  E as E4,
  E2 as E5,
  L as L3,
  N,
  R,
  a as a4,
  b as b2,
  l as l5,
  m2 as m4,
  p as p5,
  s as s6,
  u as u4
} from "./chunk-2J2YGTXG.js";
import {
  q as q3
} from "./chunk-O5HVKKEP.js";
import "./chunk-IPJF6OUC.js";
import "./chunk-NWERINOI.js";
import "./chunk-OEFH2SLX.js";
import "./chunk-K3WMIXIE.js";
import "./chunk-I4YZGF7W.js";
import "./chunk-65ZBTSJX.js";
import {
  E as E2,
  c,
  g,
  h as h3,
  l as l2
} from "./chunk-C6BDJNUQ.js";
import "./chunk-FZSI6IGI.js";
import "./chunk-36RXM3AP.js";
import {
  L as L2,
  l as l3,
  u as u3,
  v
} from "./chunk-6MUVDDLI.js";
import {
  n as n8
} from "./chunk-HSH7J5EL.js";
import {
  P
} from "./chunk-757322TP.js";
import "./chunk-P3W4YLFD.js";
import {
  A,
  b,
  d as d2,
  j as j4,
  k,
  m as m3,
  o as o2,
  p as p3
} from "./chunk-75RMBUYZ.js";
import "./chunk-TJ2I6XQT.js";
import "./chunk-EDHROVWI.js";
import "./chunk-34YPGGJT.js";
import "./chunk-TWJNUVV2.js";
import "./chunk-NCXAKZRR.js";
import "./chunk-DUCSW4OU.js";
import "./chunk-WVDA5Z37.js";
import "./chunk-RW4M3CI3.js";
import {
  n as n7
} from "./chunk-ZEEU5HOK.js";
import {
  An,
  _n,
  en,
  rn,
  tn
} from "./chunk-FFVIDMFN.js";
import "./chunk-QXHTRQEZ.js";
import "./chunk-KYSY3ZPW.js";
import "./chunk-RDNOEC45.js";
import {
  e as e6
} from "./chunk-QRBRKBU3.js";
import {
  M,
  e2 as e5
} from "./chunk-NWBHRPMR.js";
import {
  f as f3,
  n2 as n5
} from "./chunk-IIUWTGWW.js";
import "./chunk-K6AYGXUT.js";
import "./chunk-BHXTNOEK.js";
import "./chunk-IS4TIT4N.js";
import "./chunk-I4RYNNL6.js";
import "./chunk-W62B63EU.js";
import "./chunk-N43PI2UO.js";
import {
  n as n6
} from "./chunk-O6VYMEIX.js";
import "./chunk-ZWUEORSX.js";
import "./chunk-QWNKYSI4.js";
import {
  s as s5
} from "./chunk-FMJZBZWF.js";
import "./chunk-GOYVJTGW.js";
import "./chunk-ZPYDYUP5.js";
import {
  h as h4
} from "./chunk-36I5ESAQ.js";
import "./chunk-CYI2FLSH.js";
import "./chunk-TDV3ZXCQ.js";
import "./chunk-XJCUKRCO.js";
import "./chunk-SOEQPPQP.js";
import "./chunk-22F6X66Z.js";
import "./chunk-AIDV7EKX.js";
import "./chunk-FZQZIM7U.js";
import "./chunk-YM6PUX7G.js";
import "./chunk-QEYOWTXD.js";
import "./chunk-CZBRZ6SU.js";
import "./chunk-KDO6J2FO.js";
import "./chunk-RT3T2K4S.js";
import {
  u as u2
} from "./chunk-WJCI2CGX.js";
import {
  a as a3,
  d
} from "./chunk-REIQNAQW.js";
import "./chunk-J6LQZWZI.js";
import {
  j3,
  y as y4
} from "./chunk-OD3FDQCI.js";
import "./chunk-J2PJNRU7.js";
import "./chunk-56SPM3WK.js";
import "./chunk-XMZAPOBR.js";
import "./chunk-BLJKKR5D.js";
import "./chunk-ZGNCYHMZ.js";
import "./chunk-X2S4RQJ4.js";
import "./chunk-FUPLN7UM.js";
import "./chunk-376OPXM4.js";
import "./chunk-DER356EU.js";
import "./chunk-MZIWIEIR.js";
import {
  S
} from "./chunk-TQEOEDAZ.js";
import {
  m as m2
} from "./chunk-SHFHZMHO.js";
import "./chunk-NRP45AHD.js";
import "./chunk-IWQ7452U.js";
import "./chunk-NAN5J6QS.js";
import "./chunk-B4DKBAM3.js";
import "./chunk-6M2AHKYV.js";
import "./chunk-SZIJNKCV.js";
import "./chunk-6O43OEU5.js";
import "./chunk-J2K7ZDSV.js";
import "./chunk-2UML3WQZ.js";
import "./chunk-KXVMEIWT.js";
import {
  j as j2
} from "./chunk-UDND2Z3V.js";
import "./chunk-23Y3DIC6.js";
import "./chunk-JUVQV3R3.js";
import "./chunk-RAX2HD42.js";
import "./chunk-ZYRIJWLX.js";
import "./chunk-C5H57NTD.js";
import {
  e as e2,
  o,
  q as q2,
  r as r2,
  u
} from "./chunk-3LR5O4WA.js";
import "./chunk-GDVNKPJ7.js";
import {
  n
} from "./chunk-D4V6J5BT.js";
import "./chunk-OSHI574D.js";
import "./chunk-YWAQYJRC.js";
import "./chunk-B356PXLT.js";
import "./chunk-EHPBHJYZ.js";
import {
  r as r4
} from "./chunk-3MNMDUQZ.js";
import "./chunk-UWG37XSU.js";
import {
  E
} from "./chunk-LNZAOBFW.js";
import "./chunk-PF5I4XZQ.js";
import "./chunk-HLM6QCL2.js";
import "./chunk-RXYULINL.js";
import {
  U,
  a as a2,
  f as f2,
  h as h2,
  j,
  l,
  w
} from "./chunk-5NXILPDI.js";
import {
  n as n4
} from "./chunk-THVR7IAM.js";
import "./chunk-ZWJJTUFL.js";
import "./chunk-XQN7F674.js";
import "./chunk-DMI7A7TC.js";
import "./chunk-ZHAW7FZS.js";
import "./chunk-KAN4HXCG.js";
import "./chunk-4FEGON7M.js";
import {
  s as s4
} from "./chunk-VWYWOOPX.js";
import "./chunk-M5VHU5LK.js";
import "./chunk-CXFRNDG4.js";
import "./chunk-7QMMKGW4.js";
import {
  e as e3,
  e4,
  m,
  n2 as n3,
  r as r3,
  t5 as t2,
  y as y2
} from "./chunk-OOLCFNXJ.js";
import "./chunk-6KZ2LTDA.js";
import "./chunk-U2XHEJM7.js";
import {
  L,
  a,
  f,
  p as p2,
  y as y3
} from "./chunk-MJXQTGI2.js";
import {
  s as s3
} from "./chunk-LIZHLHNA.js";
import {
  n as n2
} from "./chunk-BTUHYGXO.js";
import {
  s2
} from "./chunk-UA3YPL2R.js";
import {
  y
} from "./chunk-HVKDYDPP.js";
import "./chunk-6QC7MLLS.js";
import {
  e,
  h,
  i,
  p,
  q,
  r,
  s,
  t
} from "./chunk-MIHB3CIK.js";
import "./chunk-OL3AADLO.js";

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transformGraphic/isSupportedGraphic.js
function i3(i7) {
  var _a;
  if ("graphics" !== ((_a = i7.layer) == null ? void 0 : _a.type))
    return P2.GRAPHICS_LAYER_MISSING;
  if (t(i7.geometry))
    return P2.GEOMETRY_MISSING;
  switch (i7.geometry.type) {
    case "point":
      break;
    case "polygon":
    case "polyline":
    case "multipoint":
    case "extent":
    case "mesh":
      return P2.SUPPORTED;
    default:
      return P2.GEOMETRY_TYPE_UNSUPPORTED;
  }
  const n16 = r(i7.symbol) && "point-3d" === i7.symbol.type && i7.symbol.symbolLayers;
  if (!(n16 && n16.length > 0 && n16.some((e11) => "object" === e11.type)))
    return P2.SYMBOL_TYPE_UNSUPPORTED;
  return "on-the-ground" !== l2(i7) && c(i7) ? P2.ELEVATION_MODE_UNSUPPORTED : P2.SUPPORTED;
}

// node_modules/@arcgis/core/views/interactive/snapping/candidates/RightAngleSnappingCandidate.js
var n10 = class extends t3 {
  constructor({ coordinateHelper: e11, targetPoint: i7, constraint: r9, previousVertex: o5, otherVertex: n16, otherVertexType: s11, objectId: h10, elevationInfo: p12 }) {
    super(e11, i7, r9, p12, E4.SELF), this.previousVertex = o5, this.otherVertex = n16, this.otherVertexType = s11, this.objectId = h10;
  }
  get hints() {
    const t6 = this.previousVertex, i7 = this.otherVertexType === s8.CENTER ? this.otherVertex : this.targetPoint, n16 = this.otherVertexType === s8.CENTER ? this.targetPoint : this.otherVertex, h10 = this.elevationInfo;
    return [new s6(l5.TARGET, i7, n16, h10, this.domain), new s6(l5.REFERENCE, t6, i7, h10, this.domain), new s7(this.previousVertex, i7, n16, h10, this.domain)];
  }
};
var s8;
!function(t6) {
  t6[t6.NEXT = 0] = "NEXT", t6[t6.CENTER = 1] = "CENTER";
}(s8 || (s8 = {}));

// node_modules/@arcgis/core/views/interactive/snapping/FeatureSnappingEngine.js
var M2 = class extends d {
  constructor(e11) {
    super(e11), this.options = null, this._domain = E4.FEATURE, this._sourceModules = { featureService: { module: null, loader: null }, featureCollection: { module: null, loader: null }, graphics: { module: null, loader: null }, notes: { module: null, loader: null }, scene: { module: null, loader: null } };
  }
  get updating() {
    return n2(this.snappingSources, ({ snappingSource: e11 }) => e11.updating) || this.updatingHandles.updating;
  }
  get snappingSources() {
    const e11 = this._get("snappingSources") || /* @__PURE__ */ new Map(), t6 = /* @__PURE__ */ new Map();
    if (r(this.options) && r(this.options.featureSources))
      for (const r9 of this.options.featureSources.items) {
        const o5 = r9.layer.uid, s11 = e11.get(o5);
        if (s11) {
          e11.delete(o5), t6.set(o5, s11);
          continue;
        }
        if (!r9.layer.loaded) {
          this.updatingHandles.addPromise(r9.layer.load());
          continue;
        }
        const a9 = this._createSourceInfo(r9);
        r(a9) && t6.set(o5, a9);
      }
    for (const [, r9] of e11)
      r9.destroy();
    return t6;
  }
  initialize() {
    this.updatingHandles.add(() => this.snappingSources, () => this.notifyChange("updating"), U), r(this.view) && this.handles.add([this.view.on("layerview-create", (e11) => this._updateLayerView(e11.layer, e11.layerView)), this.view.on("layerview-destroy", (e11) => this._updateLayerView(e11.layer, null))]);
  }
  _updateLayerView(e11, t6) {
    for (const [, r9] of this.snappingSources)
      r9.snappingSource.layerSource.layer === e11 && (r9.layerView = t6);
  }
  destroy() {
    this._set("options", null);
    for (const [, e11] of this.snappingSources)
      e11.destroy();
  }
  async fetchCandidates(e11, t6, r9, o5) {
    if (!(t6 & this._domain) || t(this.options) || !this.options.effectiveFeatureEnabled)
      return [];
    const a9 = [], u9 = this._computeScreeenSizeDistanceParameters(e11, r9), l8 = { distance: u9, point: e11, coordinateHelper: r9.coordinateHelper, types: this._types };
    for (const [, { snappingSource: s11, layerView: i7 }] of this.snappingSources)
      !s11.layerSource.enabled || r(i7) && i7.suspended || a9.push(s11.fetchCandidates(l8, o5).then((e12) => e12.filter((e13) => !this._candidateIsExcluded(s11, e13, r9.excludeFeature))));
    const p12 = (await L(a9)).flat();
    return this._addRightAngleCandidates(p12, e11, u9, r9), f(o5), a4(e11, p12, r9.coordinateHelper), p12;
  }
  _addRightAngleCandidates(e11, t6, r9, o5) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const s11 = r(o5.vertexHandle) ? (_b = (_a = o5.vertexHandle.rightEdge) == null ? void 0 : _a.rightVertex) == null ? void 0 : _b.pos : r(o5.editGeometryOperations) && "polygon" === o5.editGeometryOperations.data.type ? (_d = e((_c = o5.editGeometryOperations.data.components[0]) == null ? void 0 : _c.getFirstVertex())) == null ? void 0 : _d.pos : null, i7 = r(o5.vertexHandle) ? (_f = (_e = o5.vertexHandle.leftEdge) == null ? void 0 : _e.leftVertex) == null ? void 0 : _f.pos : r(o5.editGeometryOperations) ? (_h = e((_g = o5.editGeometryOperations.data.components[0]) == null ? void 0 : _g.getLastVertex())) == null ? void 0 : _h.pos : null, { view: c6 } = this, u9 = R(s11, c6, o5), l8 = R(i7, c6, o5), p12 = e11.length;
    for (let n16 = 0; n16 < p12; n16++)
      this._addRightAngleCandidate(e11[n16], l8, t6, r9, o5, e11), this._addRightAngleCandidate(e11[n16], u9, t6, r9, o5, e11);
  }
  _addRightAngleCandidate(e11, t6, r9, o5, n16, a9) {
    const i7 = e11 instanceof e9, c6 = i7 && k(e11.constraint.start, e11.constraint.end);
    if (t(t6) || !i7 || c6)
      return;
    const u9 = e11.constraint.closestTo(t6), l8 = (u9[0] - r9[0]) / o5.x, p12 = (u9[1] - r9[1]) / o5.y;
    if (l8 * l8 + p12 * p12 <= 1) {
      const r10 = n16.coordinateHelper, o6 = new n10({ coordinateHelper: r10, targetPoint: u9, otherVertex: t6, otherVertexType: s8.NEXT, previousVertex: e11.constraint.start, constraint: new v2(r10, t6, u9), objectId: e11.objectId, elevationInfo: e11.elevationInfo });
      a9.push(o6);
    }
  }
  _computeScreeenSizeDistanceParameters(e11, t6) {
    let r9 = r(this.options) ? this.options.distance * ("touch" === t6.pointer ? this.options.touchSensitivityMultiplier : 1) : 0;
    return t(this.view) ? { x: r9, y: r9, z: r9, distance: r9 } : "2d" === this.view.type ? (r9 *= this.view.resolution, { x: r9, y: r9, z: r9, distance: r9 }) : this._computeScreenSizeDistanceParameters3D(e11, r9, this.view, t6);
  }
  _computeScreenSizeDistanceParameters3D(e11, t6, r9, o5) {
    const { coordinateHelper: n16, elevationInfo: s11 } = o5, { spatialReference: a9 } = n16, i7 = n16.hasZ() ? E2 : s11, c6 = n16.toXYZ(e11, E7);
    c6[2] = h3(r9, c6, a9, i7, E2), r9.renderCoordsHelper.toRenderCoords(c6, a9, G2);
    const u9 = r9.state.camera.computeScreenPixelSizeAt(G2), l8 = u9 * r9.renderCoordsHelper.unitInMeters / r9.mapCoordsHelper.unitInMeters, p12 = t6 * l8, d7 = u5(c6, a9, E2, r9), h10 = V(d7, c6, l8, 0, 0, r9, o5), g7 = V(d7, c6, 0, l8, 0, r9, o5), y7 = V(d7, c6, 0, 0, l8, r9, o5);
    return { x: 0 === h10 ? 0 : p12 / h10, y: 0 === g7 ? 0 : p12 / g7, z: 0 === y7 ? 0 : p12 / y7, distance: u9 * t6 };
  }
  get _types() {
    return q3.EDGE | q3.VERTEX;
  }
  _candidateIsExcluded(e11, t6, r9) {
    if (t(r9))
      return false;
    const o5 = this._getCandidateObjectId(t6);
    if (t(o5))
      return false;
    const n16 = e11.layerSource.layer;
    return "graphics" === n16.type ? r9.uid === o5 : r9.sourceLayer === n16 && (!(!r9.attributes || !("objectIdField" in n16)) && r9.attributes[n16.objectIdField] === o5);
  }
  _getCandidateObjectId(e11) {
    return e11 instanceof n9 ? e11.objectId : null;
  }
  _createSourceInfo(e11) {
    const t6 = this._createFeatureSnappingSourceType(e11);
    if (t(t6))
      return null;
    if ("loading" in t6)
      return this.updatingHandles.addPromise(t6.loading.then(() => {
        this.destroyed || this.notifyChange("snappingSources");
      })), null;
    const r9 = r(this.view) ? this.view.allLayerViews.find((t7) => t7.layer === e11.layer) : null;
    return new I(t6.source, r9);
  }
  _createFeatureSnappingSourceType(e11) {
    switch (e11.layer.type) {
      case "feature":
      case "geojson":
      case "csv":
      case "oriented-imagery":
      case "subtype-group":
      case "wfs":
        return this._createFeatureSnappingSourceFeatureLayer(e11);
      case "graphics":
        return this._createFeatureSnappingSourceGraphicsLayer(e11);
      case "map-notes":
        return this._createFeatureSnappingSourceMapNotesLayer(e11);
      case "scene":
      case "building-scene":
        return this._createFeatureSnappingSourceSceneLayer(e11);
    }
    return null;
  }
  _createFeatureSnappingSourceSceneLayer(e11) {
    const { view: t6 } = this;
    if (t(t6) || "3d" !== t6.type)
      return null;
    const r9 = this._getSourceModule("scene");
    return r(r9.module) ? { source: new r9.module.SceneLayerSnappingSource({ layerSource: e11, view: t6 }) } : { loading: r9.loader };
  }
  _createFeatureSnappingSourceFeatureLayer(e11) {
    switch (e11.layer.source.type) {
      case "feature-layer":
      case "oriented-imagery": {
        const t6 = this._getSourceModule("featureService");
        return r(t6.module) ? { source: new t6.module.FeatureServiceSnappingSource({ spatialReference: this.spatialReference, view: this.view, layerSource: e11 }) } : { loading: t6.loader };
      }
      case "memory":
      case "csv":
      case "geojson":
      case "wfs": {
        if ("mesh" === e11.layer.geometryType)
          return null;
        const t6 = this._getSourceModule("featureCollection");
        return r(t6.module) ? { source: new t6.module.FeatureCollectionSnappingSource({ layerSource: e11, view: this.view }) } : { loading: t6.loader };
      }
    }
    return null;
  }
  _createFeatureSnappingSourceGraphicsLayer(e11) {
    const t6 = this._getSourceModule("graphics");
    return r(t6.module) ? { source: new t6.module.GraphicsSnappingSource({ getGraphicsLayers: () => [e11.layer], spatialReference: this.spatialReference, view: this.view, layerSource: e11 }) } : { loading: t6.loader };
  }
  _createFeatureSnappingSourceMapNotesLayer(e11) {
    const t6 = this._getSourceModule("notes");
    return r(t6.module) ? { source: new t6.module.GraphicsSnappingSource({ getGraphicsLayers: () => r(e11.layer.sublayers) ? e11.layer.sublayers.toArray() : [], spatialReference: this.spatialReference, view: this.view, layerSource: e11 }) } : { loading: t6.loader };
  }
  _getSourceModule(e11) {
    const t6 = this._sourceModules[e11];
    if (t(t6.loader)) {
      const r9 = this._loadSourceModule(e11).then((e12) => {
        t6.module = e12;
      });
      return t6.loader = r9, { module: t6.module, loader: r9 };
    }
    return { module: t6.module, loader: t6.loader };
  }
  _loadSourceModule(e11) {
    const t6 = this.updatingHandles;
    switch (e11) {
      case "featureService":
        return t6.addPromise(import("./FeatureServiceSnappingSource-UCJFVNDY.js"));
      case "featureCollection":
        return t6.addPromise(import("./FeatureCollectionSnappingSource-YEZFOP3R.js"));
      case "graphics":
      case "notes":
        return t6.addPromise(import("./GraphicsSnappingSource-4YE5TGVD.js"));
      case "scene":
        return t6.addPromise(import("./SceneLayerSnappingSource-YJMSXW6X.js"));
    }
    return null;
  }
};
e3([y2({ constructOnly: true })], M2.prototype, "spatialReference", void 0), e3([y2({ constructOnly: true })], M2.prototype, "view", void 0), e3([y2()], M2.prototype, "options", void 0), e3([y2({ readOnly: true })], M2.prototype, "updating", null), e3([y2({ readOnly: true })], M2.prototype, "snappingSources", null), M2 = e3([n3("esri.views.interactive.snapping.FeatureSnappingEngine")], M2);
var I = class {
  constructor(e11, t6) {
    this.snappingSource = e11, this.layerView = t6, this.handles = new t2();
    const o5 = this.snappingSource.layerSource.layer;
    if ("refresh" in o5) {
      const t7 = o5;
      this.handles.add(t7.on("refresh", () => e11.refresh()));
    }
    this.handles.add([l(() => e11.updating, (t7) => e11.layerSource.updating = t7, w), l(() => e11.availability, (t7) => e11.layerSource.availability = t7, w)]);
  }
  destroy() {
    this.snappingSource.destroy(), this.handles.destroy();
  }
};
function V(e11, t6, r9, o5, n16, s11, { coordinateHelper: a9 }) {
  const i7 = r2(O, t6);
  i7[0] += r9, i7[1] += o5, i7[2] += n16;
  const c6 = u5(i7, a9.spatialReference, E2, s11);
  return E5(c6, e11);
}
var E7 = n();
var G2 = n();
var O = n();

// node_modules/@arcgis/core/views/interactive/snapping/SnappingAlgorithm.js
var i4 = class {
  constructor(e11, r9) {
    this.view = e11, this.options = r9, this.squaredShortLineThreshold = p5.shortLineThreshold * p5.shortLineThreshold;
  }
  snap(t6, r9) {
    return r(r9.vertexHandle) ? "vertex" !== r9.vertexHandle.type ? [] : this.snapExistingVertex(t6, r9) : this.snapNewVertex(t6, r9);
  }
  edgeExceedsShortLineThreshold(e11, t6) {
    return this.exceedsShortLineThreshold(e11.leftVertex.pos, e11.rightVertex.pos, t6);
  }
  exceedsShortLineThreshold(e11, t6, { elevationInfo: i7, editGeometryOperations: o5 }) {
    const h10 = o5.data.coordinateHelper;
    return 0 === this.squaredShortLineThreshold || u4(l6(t6, h10, i7, this.view), l6(e11, h10, i7, this.view)) > this.squaredShortLineThreshold;
  }
  squaredProximityThreshold(e11) {
    return "touch" === e11 ? this._squaredTouchProximityThreshold : this._squaredMouseProximityTreshold;
  }
  get _squaredMouseProximityTreshold() {
    return this.options.distance * this.options.distance;
  }
  get _squaredTouchProximityThreshold() {
    const { distance: e11, touchSensitivityMultiplier: t6 } = this.options, r9 = e11 * t6;
    return r9 * r9;
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/candidates/LineSnappingCandidate.js
var r6 = class extends t3 {
  constructor({ coordinateHelper: e11, lineStart: r9, lineEnd: s11, targetPoint: a9, elevationInfo: p12 }) {
    super(e11, a9, new G(e11, r9, s11), p12, E4.SELF), this._referenceLineHint = new s6(l5.REFERENCE_EXTENSION, r9, s11, p12, this.domain);
  }
  get hints() {
    return [this._referenceLineHint, new s6(l5.TARGET, this._lineEndClosestToTarget(), this.targetPoint, this.elevationInfo, this.domain)];
  }
  _lineEndClosestToTarget() {
    return this.constraint.closestEndTo(this.targetPoint);
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/LineSnapper.js
var a5 = class extends i4 {
  snapNewVertex(e11, t6) {
    const r9 = t6.editGeometryOperations.data.components[0], i7 = r9.edges.length, n16 = [];
    if (i7 < 1)
      return n16;
    const d7 = t6.coordinateHelper, h10 = l6(e11, d7, E2, this.view), { view: l8 } = this, a9 = r9.edges[i7 - 1];
    let g7 = a9;
    do {
      if (this.edgeExceedsShortLineThreshold(g7, t6)) {
        const o5 = N(g7, l8, t6);
        this._processCandidateProposal(o5.left, o5.right, e11, h10, t6, n16);
      }
      g7 = g7.leftVertex.leftEdge;
    } while (g7 && g7 !== a9);
    return n16;
  }
  snapExistingVertex(t6, r9) {
    const n16 = [], d7 = e(r9.vertexHandle), h10 = d7.component;
    if (h10.edges.length < 2)
      return n16;
    const { view: l8 } = this, { coordinateHelper: a9 } = r9, g7 = l6(t6, a9, E2, l8), c6 = d7.leftEdge, m11 = d7.rightEdge;
    c6 && m11 && this.edgeExceedsShortLineThreshold(c6, r9) && this.edgeExceedsShortLineThreshold(m11, r9) && this._processCandidateProposal(R(c6.leftVertex.pos, l8, r9), R(m11.rightVertex.pos, l8, r9), t6, g7, r9, n16);
    const f7 = h10.edges[0];
    let x = f7;
    do {
      if (x !== d7.leftEdge && x !== d7.rightEdge && this.edgeExceedsShortLineThreshold(x, r9)) {
        const e11 = N(x, l8, r9);
        this._processCandidateProposal(e11.left, e11.right, t6, g7, r9, n16);
      }
      x = x.rightVertex.rightEdge;
    } while (x && x !== f7);
    return n16;
  }
  _processCandidateProposal(e11, t6, r9, s11, i7, l8) {
    const { coordinateHelper: a9, pointer: x } = i7;
    a9.toXYZ(e11, g2), a9.toXYZ(t6, c3);
    const E9 = a9.toXYZ(r9, f4), u9 = F(E9, m5), j6 = a9.fromXYZ(u9);
    u4(s11, l6(j6, a9, E2, this.view)) < this.squaredProximityThreshold(x) && l8.push(new r6({ coordinateHelper: a9, lineStart: e11, lineEnd: t6, targetPoint: j6, elevationInfo: a9.hasZ() ? E2 : null }));
  }
};
var g2 = n();
var c3 = n();
var m5 = { start: g2, end: c3, type: b2.LINE };
var f4 = n();

// node_modules/@arcgis/core/views/interactive/snapping/candidates/ParallelLineSnappingCandidate.js
var h5 = class extends t3 {
  constructor({ coordinateHelper: i7, referenceLine: s11, lineStart: a9, targetPoint: f7, elevationInfo: o5 }) {
    const h10 = i7.toXYZ(a9, d3), c6 = i7.toXYZ(s11.left, g3), m11 = i7.toXYZ(s11.right, p6);
    e2(h10, u(h10, h10, m11), c6), super(i7, f7, new G(i7, a9, i7.fromXYZ(h10)), o5, E4.SELF), this._referenceLines = [{ edge: s11, fadeLeft: true, fadeRight: true }];
  }
  get hints() {
    const e11 = this.elevationInfo;
    return [new s6(l5.TARGET, this.constraint.start, this.targetPoint, e11, this.domain), new r5(this.constraint.start, this.targetPoint, e11, this.domain), ...this._referenceLines.map((t6) => new s6(l5.REFERENCE, t6.edge.left, t6.edge.right, e11, this.domain, t6.fadeLeft, t6.fadeRight))];
  }
  addReferenceLine(e11) {
    const t6 = { edge: e11, fadeLeft: true, fadeRight: true }, { coordinateHelper: i7 } = this;
    this._referenceLines.forEach((n16) => {
      i7.equals(e11.right, n16.edge.left) && (n16.fadeLeft = false, t6.fadeRight = false), i7.equals(e11.right, n16.edge.right) && (n16.fadeRight = false, t6.fadeRight = false), i7.equals(e11.left, n16.edge.right) && (n16.fadeRight = false, t6.fadeLeft = false), i7.equals(e11.left, n16.edge.left) && (n16.fadeLeft = false, t6.fadeLeft = false);
    }), this._referenceLines.push(t6);
  }
};
var d3 = n();
var g3 = n();
var p6 = n();

// node_modules/@arcgis/core/views/interactive/snapping/ParallelLineSnapper.js
var p7 = class extends i4 {
  snapNewVertex(e11, t6) {
    const r9 = t6.editGeometryOperations.data.components[0], s11 = r9.edges.length, o5 = r9.vertices.length, a9 = [];
    if (s11 < 2)
      return a9;
    const { view: c6 } = this, d7 = l6(e11, t6.coordinateHelper, E2, c6), p12 = R(r9.vertices[o5 - 1].pos, c6, t6), g7 = R(r9.vertices[0].pos, c6, t6), f7 = r9.edges[s11 - 1];
    let m11 = f7;
    do {
      if (this.edgeExceedsShortLineThreshold(m11, t6)) {
        const r10 = N(m11, c6, t6);
        this._checkEdgeForParalleLines(r10, p12, e11, d7, t6, a9), this._checkEdgeForParalleLines(r10, g7, e11, d7, t6, a9);
      }
      m11 = m11.leftVertex.leftEdge;
    } while (m11 && m11 !== f7);
    return a9;
  }
  snapExistingVertex(t6, r9) {
    const s11 = [], o5 = e(r9.vertexHandle), a9 = o5.component;
    if (a9.edges.length < 3)
      return s11;
    const { view: c6 } = this, d7 = l6(t6, r9.coordinateHelper, E2, c6), p12 = o5.leftEdge, g7 = o5.rightEdge, f7 = a9.vertices[0], m11 = R(f7.pos, c6, r9), u9 = a9.vertices.length, v5 = a9.vertices[u9 - 1], E9 = R(v5.pos, c6, r9), L4 = a9.edges[0];
    let x = L4;
    do {
      if (x !== p12 && x !== g7 && this.edgeExceedsShortLineThreshold(x, r9)) {
        const e11 = N(x, c6, r9);
        p12 && this._checkEdgeForParalleLines(e11, R(p12.leftVertex.pos, c6, r9), t6, d7, r9, s11), g7 && this._checkEdgeForParalleLines(e11, R(g7.rightVertex.pos, c6, r9), t6, d7, r9, s11), o5 === f7 ? this._checkEdgeForParalleLines(e11, E9, t6, d7, r9, s11) : o5 === v5 && this._checkEdgeForParalleLines(e11, m11, t6, d7, r9, s11);
      }
      x = x.rightVertex.rightEdge;
    } while (x && x !== L4);
    return s11;
  }
  _checkEdgeForParalleLines(e11, r9, o5, n16, l8, p12) {
    const f7 = e11.left, m11 = e11.right;
    if (L3(g4, r9, f7, m11), b(g4, r9) < p5.parallelLineThreshold)
      return;
    L3(g4, o5, f7, m11, r9);
    const { coordinateHelper: u9, pointer: v5 } = l8, E9 = u9.fromXYZ(g4, u9.getZ(o5, 0));
    if (u4(n16, l6(E9, u9, E2, this.view)) < this.squaredProximityThreshold(v5)) {
      if (this._parallelToPreviousCandidate(e11, p12))
        return;
      p12.push(new h5({ coordinateHelper: u9, referenceLine: e11, lineStart: r9, targetPoint: E9, elevationInfo: u9.hasZ() ? E2 : null }));
    }
  }
  _parallelToPreviousCandidate(e11, r9) {
    const i7 = e11.left, o5 = e11.right;
    for (const n16 of r9)
      if (L3(g4, o5, n16.constraint.start, n16.constraint.end, i7), b(g4, o5) < p5.parallelLineThreshold)
        return n16.addReferenceLine(e11), true;
    return false;
  }
};
var g4 = n7();

// node_modules/@arcgis/core/views/interactive/snapping/RightAngleSnapper.js
var v3 = class extends i4 {
  snapNewVertex(e11, t6) {
    const r9 = t6.editGeometryOperations.data.components[0], i7 = r9.vertices.length, s11 = [];
    if (i7 < 2)
      return s11;
    const { view: o5 } = this, n16 = l6(e11, t6.coordinateHelper, E2, o5), h10 = r9.vertices[i7 - 1];
    if (this.edgeExceedsShortLineThreshold(h10.leftEdge, t6)) {
      const r10 = R(h10.pos, o5, t6), i8 = N(h10.leftEdge, o5, t6);
      this._checkForSnappingCandidate(s11, i8, r10, e11, i8.left, r10, t6, e11, n16);
    }
    const c6 = r9.vertices[0];
    if (this.edgeExceedsShortLineThreshold(c6.rightEdge, t6)) {
      const r10 = R(c6.pos, o5, t6), i8 = N(c6.rightEdge, o5, t6);
      this._checkForSnappingCandidate(s11, i8, r10, e11, i8.right, r10, t6, e11, n16);
    }
    return s11;
  }
  snapExistingVertex(t6, r9) {
    const i7 = [], s11 = e(r9.vertexHandle), o5 = s11.component, n16 = o5.vertices.length;
    if (n16 < 3)
      return i7;
    const { view: h10 } = this, c6 = l6(t6, r9.coordinateHelper, E2, h10), a9 = s11.leftEdge, g7 = s11.rightEdge, l8 = o5.vertices[0], m11 = o5.vertices[n16 - 1];
    if (!a9) {
      const e11 = l8.rightEdge.rightVertex.rightEdge;
      if (this.edgeExceedsShortLineThreshold(e11, r9)) {
        const s12 = N(e11, h10, r9), o6 = R(l8.rightEdge.rightVertex.pos, h10, r9);
        this._checkForSnappingCandidate(i7, s12, o6, t6, s12.right, o6, r9, t6, c6);
      }
      return i7;
    }
    if (!g7) {
      const e11 = m11.leftEdge.leftVertex.leftEdge;
      if (this.edgeExceedsShortLineThreshold(e11, r9)) {
        const s12 = N(e11, h10, r9), o6 = R(m11.leftEdge.leftVertex.pos, h10, r9);
        this._checkForSnappingCandidate(i7, s12, o6, t6, s12.left, o6, r9, t6, c6);
      }
      return i7;
    }
    if (a9 && a9.leftVertex.leftEdge) {
      const e11 = a9.leftVertex.leftEdge;
      if (this.edgeExceedsShortLineThreshold(e11, r9)) {
        const s12 = N(e11, h10, r9), o6 = R(a9.leftVertex.pos, h10, r9);
        this._checkForSnappingCandidate(i7, s12, o6, t6, s12.left, o6, r9, t6, c6);
      }
    }
    if (g7 && g7.rightVertex.rightEdge) {
      const e11 = g7.rightVertex.rightEdge;
      if (this.edgeExceedsShortLineThreshold(e11, r9)) {
        const s12 = N(e11, h10, r9), o6 = R(g7.rightVertex.pos, h10, r9);
        this._checkForSnappingCandidate(i7, s12, o6, t6, s12.right, o6, r9, t6, c6);
      }
    }
    return i7;
  }
  _checkForSnappingCandidate(e11, o5, c6, a9, p12, f7, v5, k2, C2) {
    const { coordinateHelper: T3, pointer: w3 } = v5;
    o2(u6, o5.right, o5.left);
    const F2 = o(j5, u6[1], -u6[0], 0), _ = j4(F2, o2(u6, a9, c6)) / p3(F2), L4 = T3.fromXYZ(d2(u6, f7, F2, _), T3.getZ(k2, 0));
    if (u4(C2, l6(L4, T3, E2, this.view)) < this.squaredProximityThreshold(w3)) {
      const t6 = T3.toXYZ(f7, S2), r9 = q2(V2, t6, F2, Math.sign(_)), i7 = T3.fromXYZ(r9);
      e11.push(new n10({ coordinateHelper: T3, targetPoint: L4, constraint: new v2(T3, f7, i7), previousVertex: p12, otherVertex: f7, otherVertexType: s8.CENTER, elevationInfo: T3.hasZ() ? E2 : null }));
    }
  }
};
var u6 = n7();
var S2 = n();
var V2 = n();
var j5 = n();

// node_modules/@arcgis/core/views/interactive/snapping/candidates/RightAngleTriangleSnappingCandidate.js
var m6 = class extends t3 {
  constructor({ coordinateHelper: n16, targetPoint: r9, point1: p12, point2: a9, elevationInfo: e11 }) {
    super(n16, r9, new P3(n16, n16.arrayToVector(A(h6, p12, a9, 0.5)), 0.5 * m3(p12, a9)), e11, E4.SELF), this._p1 = p12, this._p2 = a9;
  }
  get hints() {
    const t6 = this.elevationInfo;
    return [new s6(l5.REFERENCE, this.targetPoint, this._p1, t6, this.domain), new s6(l5.REFERENCE, this.targetPoint, this._p2, t6, this.domain), new s7(this._p1, this.targetPoint, this._p2, t6, this.domain)];
  }
};
var h6 = n7();

// node_modules/@arcgis/core/views/interactive/snapping/RightAngleTriangleSnapper.js
var m7 = class extends i4 {
  snapNewVertex(e11, t6) {
    const o5 = t6.editGeometryOperations.data.components[0], r9 = [], s11 = o5.vertices.length;
    if ("polygon" !== t6.editGeometryOperations.data.type || s11 < 2)
      return r9;
    const { view: i7 } = this, p12 = o5.vertices[0], a9 = o5.vertices[s11 - 1], d7 = R(p12.pos, i7, t6), l8 = R(a9.pos, i7, t6);
    return this._processCandidateProposal(d7, l8, e11, t6, r9), r9;
  }
  snapExistingVertex(t6, o5) {
    const r9 = [], s11 = e(o5.vertexHandle), i7 = s11.component;
    if (i7.edges.length < 2)
      return r9;
    if ("polyline" === o5.editGeometryOperations.data.type && (0 === s11.index || s11.index === i7.vertices.length - 1))
      return r9;
    const { view: p12 } = this, a9 = R(s11.leftEdge.leftVertex.pos, p12, o5), d7 = R(s11.rightEdge.rightVertex.pos, p12, o5);
    return this._processCandidateProposal(a9, d7, t6, o5, r9), r9;
  }
  _processCandidateProposal(e11, r9, i7, n16, m11) {
    if (!this.exceedsShortLineThreshold(e11, r9, n16))
      return;
    const g7 = A(c4, e11, r9, 0.5), f7 = 0.5 * m3(e11, r9), u9 = m4(h7, i7, g7, f7), { coordinateHelper: v5, pointer: x } = n16, y7 = v5.fromXYZ(u9, v5.getZ(i7, 0)), j6 = l6(i7, v5, E2, this.view);
    u4(j6, l6(y7, v5, E2, this.view)) < this.squaredProximityThreshold(x) && m11.push(new m6({ coordinateHelper: v5, targetPoint: y7, point1: e11, point2: r9, elevationInfo: v5.hasZ() ? E2 : null }));
  }
};
var c4 = n7();
var h7 = n7();

// node_modules/@arcgis/core/views/interactive/snapping/SelfSnappingEngine.js
var f5 = class extends m {
  constructor(o5) {
    super(o5), this.updating = false, this._snappers = new j2(), this._domain = E4.SELF;
  }
  initialize() {
    this._snappers.push(new p7(this.view, this.options), new a5(this.view, this.options), new v3(this.view, this.options), new m7(this.view, this.options));
  }
  set options(o5) {
    this._set("options", o5);
    for (const s11 of this._snappers)
      s11.options = o5;
  }
  async fetchCandidates(o5, s11, t6) {
    if (!(s11 & this._domain && this.options.effectiveSelfEnabled))
      return [];
    const i7 = [];
    for (const r9 of this._snappers.items)
      for (const s12 of r9.snap(o5, t6))
        i7.push(s12);
    return a4(o5, i7, t6.coordinateHelper), i7;
  }
};
e3([y2({ readOnly: true })], f5.prototype, "updating", void 0), e3([y2({ constructOnly: true })], f5.prototype, "view", void 0), e3([y2()], f5.prototype, "options", null), f5 = e3([n3("esri.views.interactive.snapping.SelfSnappingEngine")], f5);

// node_modules/@arcgis/core/views/interactive/snapping/snappingFactory.js
function i5(i7, p12) {
  return [new f5({ view: i7, options: p12 }), new M2({ view: i7, options: p12, spatialReference: i7.spatialReference })];
}

// node_modules/@arcgis/core/views/interactive/snapping/FeatureSnappingLayerSource.js
var s9 = class extends m {
  constructor(r9) {
    super(r9), this.layer = null, this.enabled = true, this.updating = false, this.availability = 1;
  }
};
e3([y2({ constructOnly: true })], s9.prototype, "layer", void 0), e3([y2()], s9.prototype, "enabled", void 0), e3([y2()], s9.prototype, "updating", void 0), e3([y2()], s9.prototype, "availability", void 0), s9 = e3([n3("esri.views.interactive.snapping.FeatureSnappingLayerSource")], s9);
var p8 = s9;

// node_modules/@arcgis/core/views/interactive/snapping/SnappingOptions.js
var l7 = class extends m {
  constructor(e11) {
    super(e11), this.enabled = false, this.enabledToggled = false, this.selfEnabled = true, this.featureEnabled = true, this.featureSources = new j2(), this.distance = p5.distance, this.touchSensitivityMultiplier = p5.touchSensitivityMultiplier;
  }
  get effectiveEnabled() {
    return this.enabledToggled ? !this.enabled : this.enabled;
  }
  get effectiveSelfEnabled() {
    return this.effectiveEnabled && this.selfEnabled;
  }
  get effectiveFeatureEnabled() {
    return this.effectiveEnabled && this.featureEnabled;
  }
};
e3([y2()], l7.prototype, "enabled", void 0), e3([y2()], l7.prototype, "enabledToggled", void 0), e3([y2()], l7.prototype, "selfEnabled", void 0), e3([y2()], l7.prototype, "featureEnabled", void 0), e3([y2({ type: j2.ofType(p8) })], l7.prototype, "featureSources", void 0), e3([y2()], l7.prototype, "distance", void 0), e3([y2()], l7.prototype, "touchSensitivityMultiplier", void 0), e3([y2({ readOnly: true })], l7.prototype, "effectiveEnabled", null), e3([y2({ readOnly: true })], l7.prototype, "effectiveSelfEnabled", null), e3([y2({ readOnly: true })], l7.prototype, "effectiveFeatureEnabled", null), l7 = e3([n3("esri.views.interactive.snapping.SnappingOptions")], l7);
var n11 = l7;

// node_modules/@arcgis/core/views/interactive/snapping/candidates/IntersectionSnappingCandidate.js
var o4 = class extends t3 {
  constructor(n16, s11, o5, r9, e11) {
    super(n16, s11, new E6(n16, s11, o5.constraint, r9.constraint), e11, E4.ALL), this.first = o5, this.second = r9;
  }
  get hints() {
    return this.first.targetPoint = this.targetPoint, this.second.targetPoint = this.targetPoint, [...this.first.hints, ...this.second.hints, new o3(this.targetPoint, this.elevationInfo, this.domain)];
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/SnappingManager.js
var E8 = class extends n4.EventedMixin(d) {
  constructor(t6) {
    super(t6), this.options = new n11(), this.snappingEnginesFactory = i5, this._engines = [], this._currentMainCandidate = null, this._currentOtherActiveCandidates = [], this._currentSnappedType = T.MAIN;
  }
  initialize() {
    this.handles.add([l(() => {
      const { effectiveFeatureEnabled: t6, effectiveSelfEnabled: e11, touchSensitivityMultiplier: n16, distance: i7 } = this.options;
      return { effectiveFeatureEnabled: t6, effectiveSelfEnabled: e11, touchSensitivityMultiplier: n16, distance: i7 };
    }, () => {
      this.doneSnapping(), this.emit("changed");
    }, U), l(() => this.options, (t6) => {
      for (const e11 of this._engines)
        e11.options = t6;
    }, U), l(() => ({ viewReady: this.view.ready, viewSpatialReference: this.view.spatialReference, snappingEnginesFactory: this.snappingEnginesFactory }), ({ viewReady: t6, snappingEnginesFactory: e11 }) => this._recreateEngines(t6, e11), w)]);
  }
  destroy() {
    this._destroyEngines();
  }
  get updating() {
    return this._engines.some((t6) => t6.updating);
  }
  _recreateEngines(t6, e11) {
    if (this._destroyEngines(), !t6)
      return;
    const { view: n16, options: i7 } = this;
    this._engines = e11(n16, i7);
  }
  _destroyEngines() {
    for (const t6 of this._engines)
      t6.destroy();
    this._engines = [];
  }
  get _squaredMouseProximityTreshold() {
    return this.options.distance * this.options.distance;
  }
  get _squaredTouchProximityThreshold() {
    const { distance: t6, touchSensitivityMultiplier: e11 } = this.options, n16 = t6 * e11;
    return n16 * n16;
  }
  async snap(t6) {
    return I2(t6) ? this._snapMultiPoint(t6) : this._snapSinglePoint(t6);
  }
  update(t6) {
    const { point: e11, context: n16 } = t6;
    this._removeVisualization();
    const i7 = this._currentMainCandidate;
    if (t(i7))
      return e11;
    const o5 = this._selectUpdateInput(t6);
    if (t(o5))
      return e11;
    const { coordinateHelper: { spatialReference: a9 } } = n16, c6 = rn(this._convertPointElevation(o5, n16), a9);
    if (t(c6))
      return e11;
    const { view: p12 } = this, { coordinateHelper: d7, elevationInfo: h10, visualizer: u9 } = n16, _ = [], g7 = d7.pointToVector(c6), v5 = i7.constraint.closestTo(g7);
    if (!this._arePointsWithinScreenThreshold(g7, v5, n16))
      return this._resetSnappingState(), e11;
    i7.targetPoint = v5, _.push(...i7.hints);
    for (const s11 of this._currentOtherActiveCandidates)
      s11.targetPoint = v5, _.push(...s11.hints);
    r(u9) && this.handles.add(u9.draw(_, { coordinateHelper: d7, elevationInfo: M3(n16), view: p12, selfSnappingZ: n16.selfSnappingZ }), w2);
    const S3 = d7.vectorToDehydratedPoint(v5);
    return this._convertPointElevation(S3, n16, E2, h10);
  }
  doneSnapping() {
    this._removeVisualization(), this._resetSnappingState();
  }
  _selectUpdateInput({ point: t6, scenePoint: e11 }) {
    switch (this._currentSnappedType) {
      case T.MAIN:
        return t6;
      case T.SCENE:
        return e11;
    }
  }
  _resetSnappingState() {
    this._currentMainCandidate = null, this._currentOtherActiveCandidates = [], this._currentSnappedType = T.MAIN;
  }
  _removeVisualization() {
    this.handles.remove(w2);
  }
  async _snapSinglePoint({ point: t6, context: e11, signal: n16 }) {
    const { coordinateHelper: i7 } = e11, { view: s11 } = this, r9 = this._convertPointElevation(t6, e11), o5 = i7.pointToVector(r9), a9 = await this._fetchCandidates(o5, E4.ALL, e11, n16);
    return this._createSnapResult(o5, T.MAIN, a9, s11, e11, n16);
  }
  async _snapMultiPoint({ point: t6, scenePoint: e11, context: n16, signal: i7 }) {
    const { view: s11 } = this, { coordinateHelper: r9 } = n16, { spatialReference: o5 } = r9;
    await _n(e11.spatialReference, o5);
    const a9 = rn(this._convertPointElevation(e11, n16), o5), c6 = r9.pointToVector(a9), p12 = await this._fetchCandidates(c6, E4.FEATURE, n16, i7);
    if (p12.length > 0) {
      const t7 = await this._fetchCandidates(c6, E4.SELF, n16, i7);
      return this._createSnapResult(c6, T.SCENE, [...p12, ...t7], s11, n16, i7);
    }
    const d7 = this._convertPointElevation(t6, n16), h10 = r9.pointToVector(d7), f7 = await this._fetchCandidates(h10, E4.SELF, n16, i7);
    return this._createSnapResult(h10, T.MAIN, f7, s11, n16, i7);
  }
  async _fetchCandidates(t6, e11, n16, i7) {
    return (await Promise.all(this._engines.map((s11) => s11.fetchCandidates(t6, e11, n16, i7)))).flat();
  }
  _createSnapResult(t6, e11, n16, i7, s11, a9) {
    return { get valid() {
      return !p2(a9);
    }, apply: () => {
      const { elevationInfo: o5, coordinateHelper: a10 } = s11, { snappedPoint: c6, hints: p12 } = this._processCandidates(t6, e11, n16, s11);
      return this._removeVisualization(), r(s11.visualizer) && this.handles.add(s11.visualizer.draw(p12, { coordinateHelper: a10, elevationInfo: M3(s11), view: i7, selfSnappingZ: s11.selfSnappingZ }), w2), this._convertPointElevation(c6, s11, E2, o5);
    } };
  }
  _processCandidates(t6, e11, n16, i7) {
    const { coordinateHelper: s11 } = i7;
    if (n16.length < 1)
      return this.doneSnapping(), { snappedPoint: s11.vectorToDehydratedPoint(t6), hints: [] };
    this._currentSnappedType !== e11 && this._resetSnappingState(), a4(t6, n16, s11);
    const o5 = this._currentMainCandidate;
    if (r(o5)) {
      const s12 = this._findOldConstraintInNewCandidates(o5, n16);
      if (s12 >= 0) {
        if (!(n16[s12] instanceof o4))
          return this._intersectWithOtherCandidates(s12, n16, t6, e11, i7);
        if (this._arePointsWithinScreenThreshold(t6, o5.targetPoint, i7))
          return this._updateSnappingCandidate(o5, e11, n16, i7);
      }
    }
    return this._intersectWithOtherCandidates(0, n16, t6, e11, i7);
  }
  _findOldConstraintInNewCandidates(t6, e11) {
    return t6 instanceof o4 ? this._findOldCandidateIndex(e11, t6.first) >= 0 && this._findOldCandidateIndex(e11, t6.second) >= 0 ? 0 : -1 : this._findOldCandidateIndex(e11, t6);
  }
  _intersectWithOtherCandidates(t6, e11, n16, i7, s11) {
    const { coordinateHelper: r9 } = s11, o5 = e11[t6], a9 = [];
    for (let c6 = 0; c6 < e11.length; ++c6) {
      if (c6 === t6)
        continue;
      const i8 = e11[c6];
      for (const t7 of o5.constraint.intersect(i8.constraint)) {
        const e12 = r9.fromXYZ(t7.closestTo(o5.targetPoint), o5.targetPoint[2]);
        a9.push([new o4(r9, e12, o5, i8, i8.elevationInfo), this._squaredScreenDistance(n16, e12, r9)]);
      }
    }
    return a9.length > 0 && (a9.sort((t7, e12) => t7[1] - e12[1]), a9[0][1] < this._squaredPointProximityThreshold(s11.pointer)) ? this._updateSnappingCandidate(a9[0][0], i7, e11, s11) : this._updateSnappingCandidate(o5, i7, e11, s11);
  }
  _updateSnappingCandidate(t6, e11, n16, i7) {
    this.doneSnapping(), this._currentMainCandidate = t6, this._currentSnappedType = e11;
    const s11 = this._currentMainCandidate.targetPoint, r9 = [];
    r9.push(...t6.hints);
    for (const o5 of n16) {
      if (t6 instanceof o4) {
        if (o5.constraint.equals(t6.first.constraint) || o5.constraint.equals(t6.second.constraint))
          continue;
      } else if (o5.constraint.equals(t6.constraint))
        continue;
      o5.constraint.check(s11) && (o5.targetPoint = s11, this._currentOtherActiveCandidates.push(o5), r9.push(...o5.hints));
    }
    return { snappedPoint: i7.coordinateHelper.vectorToDehydratedPoint(s11), hints: r9 };
  }
  _squaredPointProximityThreshold(t6) {
    return "touch" === t6 ? this._squaredTouchProximityThreshold : this._squaredMouseProximityTreshold;
  }
  _arePointsWithinScreenThreshold(t6, e11, n16) {
    return this._squaredScreenDistance(t6, e11, n16.coordinateHelper) < this._squaredPointProximityThreshold(n16.pointer);
  }
  _squaredScreenDistance(t6, e11, n16) {
    return u4(this._toScreen(t6, n16), this._toScreen(e11, n16));
  }
  _toScreen(t6, e11) {
    return l6(t6, e11, E2, this.view);
  }
  _findOldCandidateIndex(t6, e11) {
    let n16 = -1;
    for (let i7 = 0; i7 < t6.length; ++i7)
      if (e11.constraint.equals(t6[i7].constraint)) {
        n16 = i7;
        break;
      }
    return n16;
  }
  _convertPointElevation(t6, e11, n16 = e11.elevationInfo, s11 = E2) {
    const { view: o5 } = this;
    if (!(r(t6) && e11.coordinateHelper.hasZ() && r(o5) && "3d" === o5.type))
      return t6;
    const a9 = y(t6);
    return a9.z = g(o5, a9, n16, s11), a9;
  }
  get test() {
    return { visualizationsActive: this.handles.has(w2), engines: this._engines };
  }
};
var T;
e3([y2({ constructOnly: true })], E8.prototype, "view", void 0), e3([y2()], E8.prototype, "options", void 0), e3([y2({ readOnly: true })], E8.prototype, "updating", null), e3([y2()], E8.prototype, "snappingEnginesFactory", void 0), e3([y2()], E8.prototype, "_engines", void 0), e3([y2()], E8.prototype, "_squaredMouseProximityTreshold", null), e3([y2()], E8.prototype, "_squaredTouchProximityThreshold", null), E8 = e3([n3("esri.views.interactive.snapping.SnappingManager")], E8), function(t6) {
  t6[t6.MAIN = 0] = "MAIN", t6[t6.SCENE = 1] = "SCENE";
}(T || (T = {}));
var w2 = "visualization-handle";
function I2(t6) {
  return r(t6.scenePoint);
}
function M3({ coordinateHelper: t6, elevationInfo: e11 }) {
  return t6.hasZ() ? E2 : e11;
}

// node_modules/@arcgis/core/views/support/hitTestSelectUtils.js
function r7(n16) {
  return r(n16) && "graphic" === n16.type;
}
function s10(t6) {
  var _a;
  return (_a = t6.find(r7)) != null ? _a : null;
}

// node_modules/@arcgis/core/widgets/Sketch/support/OperationHandle.js
var p9 = class extends n4.EventedAccessor {
  constructor(e11) {
    super(e11), this.cancelled = false, this.history = { undo: [], redo: [] }, this.type = null;
  }
  get tool() {
    if (!this.activeComponent)
      return null;
    switch (this.activeComponent.type) {
      case "graphic-mover":
      case "move-3d":
        return "move";
      case "box":
      case "transform-3d":
        return "transform";
      case "reshape":
      case "reshape-3d":
        return "reshape";
      case "draw-2d":
      case "draw-3d":
        return this.activeComponent.geometryType;
      default:
        n6(this.activeComponent);
    }
    return null;
  }
  addToHistory(e11) {
    this.history.redo = [], this.history.undo.push(e11);
  }
  resetHistory() {
    this.history.redo = [], this.history.undo = [];
  }
  canUndo() {
    return this.history.undo.length > 0;
  }
  canRedo() {
    return this.history.redo.length > 0;
  }
  complete() {
    this._reset(), this.onEnd(), this.emit("complete");
  }
  cancel() {
    this.cancelled = true, this.complete();
  }
  _reset() {
    this.activeComponent.reset();
  }
  refreshComponent() {
    const e11 = this.activeComponent;
    e11 && ("box" !== e11.type && "reshape" !== e11.type && "graphic-mover" !== e11.type || e11.refresh());
  }
  set undo(e11) {
    this._set("undo", () => {
      this.canUndo() && e11();
    });
  }
  set redo(e11) {
    this._set("redo", () => {
      this.canRedo() && e11();
    });
  }
};
e3([y2()], p9.prototype, "activeComponent", void 0), e3([y2()], p9.prototype, "cancelled", void 0), e3([y2()], p9.prototype, "history", void 0), e3([y2()], p9.prototype, "tool", null), e3([y2()], p9.prototype, "type", void 0), e3([y2()], p9.prototype, "canUndo", null), e3([y2()], p9.prototype, "canRedo", null), e3([y2()], p9.prototype, "onEnd", void 0), e3([y2()], p9.prototype, "undo", null), e3([y2()], p9.prototype, "redo", null), e3([y2()], p9.prototype, "toggleTool", void 0), e3([y2()], p9.prototype, "addToSelection", void 0), e3([y2()], p9.prototype, "removeFromSelection", void 0), p9 = e3([n3("esri.widgets.Sketch.support.OperationHandle")], p9);
var n12 = class extends p9 {
};
e3([y2()], n12.prototype, "activeComponent", void 0), n12 = e3([n3("esri.widgets.Sketch.support.CreateOperationHandle")], n12);
var i6 = class extends p9 {
};
e3([y2()], i6.prototype, "activeComponent", void 0), i6 = e3([n3("esri.widgets.Sketch.support.UpdateOperationHandle")], i6);

// node_modules/@arcgis/core/widgets/Sketch/SketchViewModel.js
var Y = { defaultZ: 0 };
var J = { reshapeOptions: { edgeOperation: "split", shapeOperation: "move", vertexOperation: "move" }, enableMoveAllGraphics: true, enableRotation: true, enableScaling: true, multipleSelectionEnabled: true, preserveAspectRatio: false, toggleToolOnClick: true, enableZ: true, tool: "transform" };
var Q = class extends n4.EventedAccessor {
  constructor(e11) {
    super(e11), this._numUpdating = 0, this._handles = new t2(), this._internalGraphicsLayer = new h4({ listMode: "hide", internal: true, title: "SVM Internal" }), this._operationHandle = null, this._viewHandles = new t2(), this.activeFillSymbol = null, this.activeLineSymbol = null, this.activeVertexSymbol = null, this.allowDeleteKey = true, this.labelOptions = new c2(), this.layer = null, this.pointSymbol = new y4({ style: "circle", size: 6, color: [255, 255, 255], outline: { color: [50, 50, 50], width: 1 } }), this.polygonSymbol = new S({ color: [150, 150, 150, 0.2], outline: { color: [50, 50, 50], width: 2 } }), this.polylineSymbol = new m2({ color: [130, 130, 130, 1], width: 2 }), this._snappingManager = null, this.tooltipOptions = new p4(), this.updateGraphics = new j2(), this.updateOnGraphicClick = true, this.updatePointSymbol = new y4({ size: 10, color: [0, 200, 255, 0.5], outline: { color: "black", width: 1 } }), this.updatePolygonSymbol = new S({ color: [12, 207, 255, 0.2], outline: { join: "round", color: [12, 207, 255], width: 2 } }), this.updatePolylineSymbol = new m2({ color: [12, 207, 255], width: 2 }), this.vertexSymbol = new y4({ style: "circle", size: 6, color: [255, 255, 255], outline: { color: [50, 50, 50], width: 1 } }), this._moduleLoaderAbortController = null, this._viewReadyAbortController = null, this._originalAutoOpenEnabled = null, this.defaultCreateOptions = Y, this.defaultUpdateOptions = J, this.snappingOptions = new n11();
  }
  initialize() {
    this._handles.add([a2(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.layers;
    }, "change", (e11) => {
      e11.removed.includes(this.layer) && this.cancel();
    }), a2(() => {
      var _a;
      return (_a = this.layer) == null ? void 0 : _a.graphics;
    }, "change", (e11) => {
      if (r(this._operationHandle))
        for (const t6 of e11.removed)
          this.updateGraphics.includes(t6) && (this.updateGraphics.length > 1 ? this._operationHandle.removeFromSelection(t6) : this._operationHandle.cancel());
    }), l(() => {
      var _a, _b;
      return (_b = (_a = this.layer) == null ? void 0 : _a.elevationInfo) != null ? _b : null;
    }, (e11) => {
      e11 !== this._internalGraphicsLayer.elevationInfo && (this.cancel(), this._internalGraphicsLayer.elevationInfo = e11);
    }, w), l(() => this.view, (e11) => {
      s(this._snappingManager), e11 && (this._snappingManager = new E8({ view: e11, options: this.snappingOptions }), "2d" === e11.type ? import("./editingTools-XAY5ZOQU.js") : "3d" === e11.type && (import("./editingTools-3KE6RLLL.js"), import("./GraphicsLayerView3D-6GNN4PQ4.js")));
    }, w), l(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.spatialReference;
    }, (e11, t6) => {
      e11 && t6 && !e11.equals(t6) && this.cancel();
    })]);
  }
  destroy() {
    this.cancel(), this._handles = s(this._handles), this._viewHandles = s(this._viewHandles), this._removeDefaultLayer(), this._snappingManager = s(this._snappingManager), this._set("view", null), this.emit("destroy");
  }
  get _defaultUpdateTool() {
    return "3d" === this.view.type ? "move" : "transform";
  }
  get updating() {
    return this._numUpdating > 0;
  }
  get activeTool() {
    return this._operationHandle && this._operationHandle.tool ? this._operationHandle.tool : null;
  }
  get activeComponent() {
    return this._operationHandle ? this._operationHandle.activeComponent : null;
  }
  get createGraphic() {
    return !r(this.activeComponent) || "draw-3d" !== this.activeComponent.type && "draw-2d" !== this.activeComponent.type ? this._get("createGraphic") : e(this.activeComponent.graphic);
  }
  get defaultCreateOptions() {
    return this._get("defaultCreateOptions");
  }
  set defaultCreateOptions(e11) {
    this._set("defaultCreateOptions", { ...Y, ...e11 });
  }
  get defaultUpdateOptions() {
    return this._get("defaultUpdateOptions");
  }
  set defaultUpdateOptions(e11) {
    this._set("defaultUpdateOptions", { ...J, ...e11, reshapeOptions: { ...J.reshapeOptions, ...e11 == null ? void 0 : e11.reshapeOptions } });
  }
  set snappingOptions(e11) {
    r(this._snappingManager) && (this._snappingManager.options = e11), this._set("snappingOptions", e11);
  }
  get state() {
    var _a;
    const e11 = !(!((_a = this.view) == null ? void 0 : _a.ready) || !this.layer), t6 = this._operationHandle;
    return e11 && t6 ? "active" : e11 ? "ready" : "disabled";
  }
  get view() {
    return this._get("view");
  }
  set view(e11) {
    const t6 = this._get("view");
    if (t6) {
      const { container: e12, map: o6 } = t6;
      e12 && (t6.cursor = null), o6 && o6.remove(this._internalGraphicsLayer), this._viewHandles.removeAll(), this.cancel();
    }
    const o5 = "view-ready";
    this._handles.remove(o5), e11 && this._handles.add(f2(() => e11.ready, (t7) => {
      this._viewHandles.removeAll(), t7 && this._viewHandles.add(this._generateViewHandles(e11));
    }, w), o5), this._set("view", e11);
  }
  cancel() {
    this._moduleLoaderAbortController = p(this._moduleLoaderAbortController), this._viewReadyAbortController = p(this._viewReadyAbortController), this._operationHandle && this._operationHandle.cancel();
  }
  complete() {
    this._operationHandle && this._operationHandle.complete();
  }
  delete() {
    const { state: e11, updateGraphics: t6 } = this;
    if ("active" === e11 && t6.length) {
      const { activeTool: e12, layer: o5 } = this, i7 = t6.toArray();
      o5.removeMany(i7), this.cancel(), this._emitDeleteEvent({ graphics: i7, tool: e12 });
    }
  }
  async create(e11, t6) {
    if (this.cancel(), await this._waitViewReady(), "disabled" === this.state)
      throw this.layer || this._logError("sketch:missing-property", "Property 'layer' is missing on SketchViewModel."), this.view || this._logError("sketch:missing-property", "Property 'view' is missing on SketchViewModel."), a();
    if (r(this.view.activeTool) && (this.view.activeTool = null), !e11)
      return void this._logError("sketch:missing-parameter", "Missing parameter 'tool'.");
    e7(this.view, this._internalGraphicsLayer);
    const o5 = await this._setupCreateOperation(e11, t6);
    if (t(o5) || this.destroyed)
      return void this.view.map.remove(this._internalGraphicsLayer);
    const i7 = () => {
      if (o5 === this._operationHandle) {
        const t7 = this.createGraphic, i8 = this._operationHandle.cancelled;
        this._operationHandle.destroy(), this._operationHandle = null, this._set("createGraphic", null), this.view && this.view.map && this.view.map.remove(this._internalGraphicsLayer), o5.cancelled || null == t7 || this.layer.add(t7), this.emit("create", { graphic: t7, state: i8 ? "cancel" : "complete", tool: e11, toolEventInfo: null, type: "create" });
      }
    };
    o5.on("complete", i7), this._operationHandle = o5, this.view.ready && this.view.focus();
  }
  async update(e11, t6) {
    this.cancel(), await this._waitViewReady();
    const { layer: o5, view: i7, state: a9 } = this;
    if ("disabled" === a9)
      throw i7 || this._logError("sketch:missing-property", "Property 'view' is missing on SketchViewModel."), o5 || this._logError("sketch:missing-property", "Property 'layer' is missing on SketchViewModel."), a();
    r(this.view.activeTool) && (this.view.activeTool = null);
    const r9 = Array.isArray(e11) ? e11 : [e11];
    if (null == e11 || !r9 || !r9.length)
      return void this._logError("sketch:missing-parameter", "Missing parameter 'graphics'.");
    if (r9.some((e12) => e12.layer !== o5 ? (this._logError("sketch:invalid-parameter", "Parameter 'graphics' contains one or more graphics missing from the supplied GraphicsLayer."), true) : !!t(e12.geometry) && (this._logError("sketch:invalid-parameter", "Parameter 'graphics' contains one or more graphics with an unsupported geometry."), true)))
      return;
    const s11 = await this._setupUpdateOperation(r9, t6);
    this.destroyed || t(s11) || ae(s11) || (e7(this.view, this._internalGraphicsLayer), this._setUpdateOperationHandle(s11, t6), this.emit("update", { graphics: r9, state: "start", aborted: false, tool: s11.tool, toolEventInfo: null, type: "update" }));
  }
  async _updateSpatialReference(e11) {
    this._beginAsyncOperation(), e11 = Array.isArray(e11) ? e11 : [e11];
    for (const t6 of e11)
      r(t6.geometry) && "mesh" !== t6.geometry.type && !E(t6.geometry.spatialReference, this.view.spatialReference) && (An(t6.geometry.spatialReference, this.view.spatialReference) || en() || await tn(), t6.geometry = rn(t6.geometry, this.view.spatialReference));
    this._endAsyncOperation();
  }
  undo() {
    this.canUndo() && this._operationHandle.undo();
  }
  redo() {
    this.canRedo() && this._operationHandle.redo();
  }
  canUndo() {
    return !(!this._operationHandle || !this._operationHandle.canUndo());
  }
  canRedo() {
    return !(!this._operationHandle || !this._operationHandle.canRedo());
  }
  toggleUpdateTool() {
    this._operationHandle && this._operationHandle.toggleTool && this._operationHandle.toggleTool();
  }
  async _getFirstHit(e11) {
    const t6 = this.view;
    if ("2d" === t6.type) {
      const t7 = [];
      this.view.map.allLayers.forEach((e12) => {
        "vector-tile" !== e12.type && "imagery" !== e12.type || t7.push(e12);
      });
      const o6 = await this.view.hitTest(e11, { exclude: t7 });
      return s10(o6.results);
    }
    const o5 = [this.view.map.ground];
    t6.map.allLayers.forEach((e12) => {
      "integrated-mesh" === e12.type && o5.push(e12);
    });
    const i7 = await t6.hitTest(e11, { exclude: o5 });
    if (i7.results.length > 0) {
      const e12 = i7.results[0];
      if (r(e12) && "graphic" === e12.type && e12.graphic && (!i7.ground.mapPoint || t6.map.ground.opacity < 1 || i7.ground.distance - i(e12.distance, 0) > -Math.min(3 * i7.ground.distance, "global" === t6.viewingMode ? u2(t6.renderCoordsHelper.spatialReference).radius / t6.renderCoordsHelper.unitInMeters : Number.POSITIVE_INFINITY)))
        return e12;
    }
    return null;
  }
  _generateViewHandles(e11) {
    return [e11.on("immediate-click", async (t6) => {
      const o5 = "active" === this.state && "create" === this._operationHandle.type;
      if ("disabled" === this.state || o5 || !this.updateOnGraphicClick)
        return;
      this._beginAsyncOperation();
      const i7 = await t6.async(() => this._getFirstHit(n8(t6)));
      let a9 = null;
      if (r(i7)) {
        const o6 = i7.graphic;
        this.updateGraphics.includes(o6) || o6.layer === this.layer ? (t6.stopPropagation(), a9 = o6) : "2d" !== e11.type || this._isComponentGraphic(o6) || "active" !== this.state || this.cancel();
      } else
        "active" === this.state && this.cancel();
      r(a9) && !this.updateGraphics.includes(a9) && await this.update([a9], { ...this.defaultUpdateOptions, reshapeOptions: { ...this.defaultUpdateOptions.reshapeOptions } }), this._endAsyncOperation();
    }, P.WIDGET)];
  }
  async _setupCreateOperation(e11, t6) {
    const o5 = { hasZ: "3d" === this.view.type, ...this.defaultCreateOptions, ...t6 }, i7 = await this._setupDrawGraphicTool(e11, this.view, o5);
    return t(i7) ? null : (this.view.tools.add(i7), this.view.activeTool = i7, this._setupCreateOperationHandle(i7));
  }
  async _setupDrawGraphicTool(e11, t6, o5) {
    if ("multipoint" === e11 && "3d" === t6.type)
      return this._logError("sketch:create", "Multipoint geometries are not supported in SceneView."), null;
    const i7 = "rectangle" !== e11, a9 = "rectangle" !== e11;
    this.snappingOptions.enabledToggled = false;
    const r9 = { view: t6, mode: "rectangle" === e11 || "circle" === e11 ? "hybrid" : "click", ...o5, snapToScene: false, geometryType: e11, graphicSymbol: this._getGraphicSymbolFromTool(e11), snappingManager: this._snappingManager, forceUniformSize: a9, centered: i7 };
    return "2d" === this.view.type ? this._makeDrawGraphicTool2D(r9) : this._makeDrawGraphicTool3D(r9);
  }
  async _makeDrawGraphicTool2D(e11) {
    const t6 = await this._requireModule(import("./editingTools-XAY5ZOQU.js"));
    return ae(t6) || this.destroyed ? null : new t6.module.DrawGraphicTool2D({ ...e11, activeVertexSymbol: this.activeVertexSymbol, regularVerticesSymbol: this.vertexSymbol, activeLineSymbol: this.activeLineSymbol, activeFillSymbol: X(e11.geometryType) ? this.activeFillSymbol : null, tooltipOptions: this.tooltipOptions });
  }
  async _makeDrawGraphicTool3D(e11) {
    const t6 = await this._requireModule(import("./editingTools-3KE6RLLL.js"));
    if (ae(t6) || this.destroyed)
      return null;
    const { elevationInfo: o5 } = this.layer;
    return new t6.module.DrawGraphicTool3D({ ...e11, elevationInfo: o5, snapToScene: !r(o5) || "absolute-height" === o5.mode, labelOptions: this.labelOptions, tooltipOptions: this.tooltipOptions });
  }
  _setupCreateOperationHandle(e11) {
    let t6 = null;
    const o5 = e11.forceUniformSize, i7 = e11.centered, a9 = [this.view.on("key-down", (t7) => {
      if (t7.key === e8.pan)
        t7.stopPropagation(), t7.repeat || (e11.enabled = false);
      else if (t7.key === e8.complete)
        t7.stopPropagation(), e11.completeCreateOperation();
      else if (t7.key !== e8.vertexAdd || t7.repeat)
        t7.key === e8.undo ? (t7.stopPropagation(), r9.undo()) : t7.key === e8.redo ? (t7.stopPropagation(), r9.redo()) : t7.key !== e8.snappingToggle || "rectangle" === e11.geometryType || "circle" === e11.geometryType || t7.repeat ? t7.key !== e8.constraint || "rectangle" !== e11.geometryType && "circle" !== e11.geometryType || t7.repeat ? t7.key === e8.center && (t7.repeat || (e11.centered = !i7, t7.stopPropagation())) : (e11.forceUniformSize = !o5, t7.stopPropagation()) : (this.snappingOptions.enabledToggled = true, t7.stopPropagation());
      else {
        const o6 = e11.drawOperation.geometryType;
        "polyline" !== o6 && "polygon" !== o6 && "multipoint" !== o6 || (t7.stopPropagation(), e11.drawOperation.commitStagedVertex());
      }
    }, P.WIDGET), this.view.on("key-up", (t7) => {
      t7.key === e8.pan ? e11.enabled = true : t7.key === e8.snappingToggle && "rectangle" !== e11.geometryType && "circle" !== e11.geometryType ? (this.snappingOptions.enabledToggled = false, t7.stopPropagation()) : t7.key !== e8.constraint || "rectangle" !== e11.geometryType && "circle" !== e11.geometryType ? t7.key === e8.center && (e11.centered = i7, t7.stopPropagation()) : (e11.forceUniformSize = o5, t7.stopPropagation());
    }, P.WIDGET), e11.on("vertex-add", (o6) => {
      switch (t6 = t(t6) ? "start" : "active", o6.operation) {
        case "apply":
          this.emit("create", { graphic: e(e11.graphic), state: t6, tool: this.activeTool, toolEventInfo: o6, type: "create" });
          break;
        case "undo":
          this._emitUndoEvent({ graphics: [e(e11.graphic)], tool: e11.geometryType });
          break;
        case "redo":
          this._emitRedoEvent({ graphics: [e(e11.graphic)], tool: e11.geometryType });
      }
    }), e11.on("cursor-update", (t7) => {
      e11.drawOperation.numCommittedVertices > 0 && this.emit("create", { graphic: e(e11.graphic), state: "active", tool: this.activeTool, toolEventInfo: { coordinates: t7.vertices[0].coordinates, type: "cursor-update" }, type: "create" });
    }), e11.on("vertex-remove", (t7) => {
      switch (t7.operation) {
        case "apply":
          this.emit("create", { graphic: e(e11.graphic), state: "active", tool: this.activeTool, toolEventInfo: t7, type: "create" });
          break;
        case "undo":
          this._emitUndoEvent({ graphics: [e(e11.graphic)], tool: e11.geometryType });
          break;
        case "redo":
          this._emitRedoEvent({ graphics: [e(e11.graphic)], tool: e11.geometryType });
      }
    }), e11.on("complete", (e12) => {
      this._set("createGraphic", e(e12.graphic)), t6 = "complete", e12.aborted ? r9 && r9.cancel() : r9 && r9.complete();
    }), l(() => this._getGraphicSymbolFromTool(e11.geometryType), (t7) => {
      e11.graphicSymbol = t7;
    })], r9 = new n12({ activeComponent: e11, tool: e11.geometryType, type: "create", onEnd: () => {
      var _a;
      a9.forEach((e12) => e12.remove()), a9.length = 0, (_a = this.view.tools) == null ? void 0 : _a.remove(e11);
    }, undo: () => {
      e11.canUndo && e11.undo();
    }, redo: () => {
      e11.canRedo && e11.redo();
    }, canUndo: () => e11.canUndo, canRedo: () => e11.canRedo });
    return r9;
  }
  _getGraphicSymbolFromTool(e11) {
    switch (e11) {
      case "point":
      case "multipoint":
        return this.pointSymbol;
      case "polyline":
        return this.polylineSymbol;
      case "circle":
      case "rectangle":
      case "polygon":
        return this.polygonSymbol;
      default:
        return null;
    }
  }
  async _setupUpdateOperation(e11, t6) {
    const { layer: o5, view: i7 } = this, a9 = { tool: this._defaultUpdateTool, ...this.defaultUpdateOptions, ...t6, reshapeOptions: { ...this.defaultUpdateOptions.reshapeOptions, ...t6 == null ? void 0 : t6.reshapeOptions } };
    let r9 = a9.tool;
    for (const s11 of e11)
      o5.remove(s11), o5.add(s11);
    if ("3d" === i7.type) {
      if (0 === e11.length)
        return null;
      switch (r9) {
        case "move":
          return this._setupMove3DOperation(e11, a9, i7, r9);
        case "reshape": {
          if (e11.length > 1)
            return this._logError("sketch:reshape-multiple", "Reshape operation does not support multiple graphics."), null;
          const t7 = l4(e11[0]);
          return t7 === P2.SUPPORTED ? this._setupReshape3DOperation(e11[0], a9, i7) : (this._logError("sketch:reshape", `Reshape operation not supported for provided graphic(s) (${E3(t7)}).`), null);
        }
        case "transform":
          return this._setupGraphicTransform3DOperation(e11, a9, i7);
      }
    }
    switch (r9) {
      case "move":
        return this._setupMove2DOperation(e11, a9, i7);
      case "reshape": {
        if (e11.length > 1)
          return this._logError("sketch:reshape-multiple", "Reshape operation does not support multiple graphics."), null;
        const t7 = l4(e11[0]);
        return t7 === P2.SUPPORTED ? this._setupTransformOrReshape2DOperation(e11, r9, a9, i7) : (this._logError("sketch:reshape", `Reshape operation not supported for provided graphic(s) (${E3(t7)}).`), null);
      }
      case "transform":
        if (1 === e11.length) {
          const t7 = q(e11[0].geometry, "type");
          "point" !== t7 && "multipoint" !== t7 || (r9 = "reshape");
        }
        return this._setupTransformOrReshape2DOperation(e11, r9, a9, i7);
    }
  }
  async _setupMove3DOperation(e11, t6, o5, i7, a9 = false) {
    for (const l8 of e11) {
      const e12 = i2(l8);
      if (e12 !== P2.SUPPORTED)
        return this._logError("sketch:move", `Move operation not supported for provided graphic(s) (${E3(e12)}).`), null;
    }
    const r9 = await this._requireModule(import("./editingTools-3KE6RLLL.js"));
    if (ae(r9))
      return r9;
    const s11 = new r9.module.GraphicMoveTool({ view: o5, enableZ: t6.enableZ, snappingManager: this._snappingManager, tooltipOptions: this.tooltipOptions });
    this.view.tools.add(s11), s11.graphics.addMany(e11), a9 || this.updateGraphics.addMany(e11);
    const n16 = [], p12 = new i6({ activeComponent: s11, tool: i7, type: "update", onEnd: () => {
      var _a;
      n16.forEach((e12) => e12.remove()), n16.length = 0, (_a = this.view.tools) == null ? void 0 : _a.remove(s11), s11.destroyed || s11.destroy();
    }, undo: () => {
      ee(p12, this.updateGraphics.toArray()), this._emitUndoEvent({ graphics: this.updateGraphics.toArray(), tool: i7 });
    }, redo: () => {
      te(p12, this.updateGraphics.toArray()), this._emitRedoEvent({ graphics: this.updateGraphics.toArray(), tool: i7 });
    }, addToSelection: (e12) => {
      this.updateGraphics.push(e12), s11.graphics.push(e12), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [e12], removed: [], type: "selection-change" }, type: "update" });
    }, removeFromSelection: (e12) => {
      const t7 = this.updateGraphics.indexOf(e12);
      p12.history.undo.forEach((e13) => e13.updates.splice(t7, 1)), p12.history.redo.forEach((e13) => e13.updates.splice(t7, 1)), this.updateGraphics.remove(e12), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [], removed: [e12], type: "selection-change" }, type: "update" }), 0 !== this.updateGraphics.length ? s11.graphics.remove(e12) : p12.complete();
    }, toggleTool: async () => {
      if (1 !== this.updateGraphics.length || false === t6.toggleToolOnClick)
        return;
      if ("transform" !== i7)
        return;
      const e12 = this.updateGraphics.getItemAt(0);
      if (l4(e12) !== P2.SUPPORTED)
        return;
      const a10 = await this._setupReshape3DOperation(e12, t6, o5, true);
      ae(a10) || (p12.onEnd(), p12.destroy(), this._setUpdateOperationHandle(a10, t6));
    } });
    return n16.push(...this._getHandlesForComponent(p12, t6), this.view.on("immediate-click", (e12) => this._getCommonUpdateOperationClickHandlers(p12, e12, t6), P.WIDGET), o5.on("key-down", (e12) => {
      this._getCommonUpdateOperationKeyDownHandlers(p12, e12), e12.key === e8.snappingToggle && (this.snappingOptions.enabledToggled = true, e12.stopPropagation());
    }, P.WIDGET), o5.on("key-up", (e12) => {
      e12.key === e8.snappingToggle && (this.snappingOptions.enabledToggled = false, e12.stopPropagation());
    }, P.WIDGET)), p12;
  }
  _setupGraphicTransform3DOperation(e11, t6, o5, i7 = false) {
    if (1 === e11.length && i3(e11[0]) === P2.SUPPORTED) {
      const a9 = e11[0], r9 = a9.geometry;
      if (r(r9) && ("point" === r9.type || "mesh" === r9.type))
        return this._setupPointTransform3DOperation(a9, t6, o5);
      if (r(r9) && ("polygon" === r9.type || "polyline" === r9.type))
        return this._setupPolyTransform3DOperation(a9, t6, o5, i7);
    }
    return this._setupMove3DOperation(e11, t6, o5, "transform", i7);
  }
  async _setupPointTransform3DOperation(e11, t6, o5) {
    const i7 = "transform", { enableRotation: a9, enableScaling: r9, enableZ: s11 } = t6, n16 = await this._requireModule(import("./editingTools-3KE6RLLL.js"));
    if (ae(n16))
      return n16;
    const p12 = new n16.module.GraphicTransformTool({ graphic: e11, view: o5, enableRotation: a9, enableScaling: r9, enableZ: s11, snappingManager: this._snappingManager, tooltipOptions: this.tooltipOptions });
    this.view.tools.add(p12), this.updateGraphics.add(e11);
    const l8 = [], h10 = new i6({ activeComponent: p12, tool: i7, type: "update", onEnd: () => {
      var _a;
      l8.forEach((e12) => e12.remove()), l8.length = 0, (_a = this.view.tools) == null ? void 0 : _a.remove(p12), p12.destroyed || p12.destroy();
    }, undo: () => {
      ee(h10, this.updateGraphics.toArray()), this._emitUndoEvent({ graphics: this.updateGraphics.toArray(), tool: i7 });
    }, redo: () => {
      te(h10, this.updateGraphics.toArray()), this._emitRedoEvent({ graphics: this.updateGraphics.toArray(), tool: i7 });
    }, addToSelection: async (e12) => {
      this.updateGraphics.add(e12), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [e12], removed: [], type: "selection-change" }, type: "update" });
      const i8 = await this._setupMove3DOperation(this.updateGraphics.toArray(), t6, o5, "transform", true);
      ae(i8) || (h10.onEnd(), h10.destroy(), this._setUpdateOperationHandle(i8, t6));
    }, removeFromSelection: (e12) => {
      this.updateGraphics.remove(e12), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [], removed: [e12], type: "selection-change" }, type: "update" }), h10.complete();
    }, toggleTool: () => {
    } });
    return l8.push(...this._getHandlesForComponent(h10, t6), this.view.on("immediate-click", (e12) => this._getCommonUpdateOperationClickHandlers(h10, e12, t6), P.WIDGET), o5.on("key-down", (e12) => {
      this._getCommonUpdateOperationKeyDownHandlers(h10, e12), e12.key === e8.snappingToggle && (this.snappingOptions.enabledToggled = true, e12.stopPropagation());
    }, P.WIDGET), o5.on("key-up", (e12) => {
      e12.key === e8.snappingToggle && (this.snappingOptions.enabledToggled = false, e12.stopPropagation());
    }, P.WIDGET)), h10;
  }
  async _setupPolyTransform3DOperation(e11, t6, o5, i7 = false) {
    const a9 = "transform", { enableRotation: r9, enableScaling: s11, enableZ: n16, preserveAspectRatio: p12 } = t6, l8 = await this._requireModule(import("./editingTools-3KE6RLLL.js"));
    if (ae(l8))
      return l8;
    const h10 = new l8.module.ExtentTransformTool({ graphic: e11, view: o5, enableRotation: r9, enableScaling: s11, enableZ: n16, preserveAspectRatio: p12, tooltipOptions: this.tooltipOptions });
    this.view.tools.add(h10), i7 || this.updateGraphics.add(e11);
    const c6 = [], d7 = new i6({ activeComponent: h10, tool: a9, type: "update", onEnd: () => {
      var _a;
      c6.forEach((e12) => e12.remove()), c6.length = 0, (_a = this.view.tools) == null ? void 0 : _a.remove(h10), h10.destroyed || h10.destroy();
    }, canUndo: () => h10.canUndo, undo: () => {
      h10.undo(), this._emitUndoEvent({ graphics: this.updateGraphics.toArray(), tool: a9 });
    }, canRedo: () => h10.canRedo, redo: () => {
      h10.redo(), this._emitRedoEvent({ graphics: this.updateGraphics.toArray(), tool: a9 });
    }, addToSelection: async (e12) => {
      this.updateGraphics.add(e12), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [e12], removed: [], type: "selection-change" }, type: "update" });
      const i8 = await this._setupMove3DOperation(this.updateGraphics.toArray(), t6, o5, "transform", true);
      ae(i8) || (d7.onEnd(), d7.destroy(), this._setUpdateOperationHandle(i8, t6));
    }, removeFromSelection: (e12) => {
      this.updateGraphics.remove(e12), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [], removed: [e12], type: "selection-change" }, type: "update" }), d7.complete();
    }, toggleTool: async () => {
      if (1 !== this.updateGraphics.length || false === t6.toggleToolOnClick)
        return;
      const e12 = this.updateGraphics.getItemAt(0);
      if (l4(e12) !== P2.SUPPORTED)
        return;
      const i8 = await this._setupReshape3DOperation(e12, t6, o5, true);
      ae(i8) || (d7.onEnd(), d7.destroy(), this._setUpdateOperationHandle(i8, t6));
    } });
    return c6.push(...this._getHandlesForComponent(d7, t6), this.view.on("immediate-click", (e12) => this._getCommonUpdateOperationClickHandlers(d7, e12, t6), P.WIDGET), this.view.on("key-down", (e12) => this._getCommonUpdateOperationKeyDownHandlers(d7, e12), P.WIDGET), this.view.on("key-down", (e12) => {
      e12.key !== e8.constraint || e12.repeat || (h10.preserveAspectRatio = !h10.preserveAspectRatio, e12.stopPropagation());
    }, P.WIDGET), this.view.on("key-up", (e12) => {
      e12.key === e8.constraint && (h10.preserveAspectRatio = !h10.preserveAspectRatio, e12.stopPropagation());
    }, P.WIDGET)), d7;
  }
  async _setupMove2DOperation(e11, t6, o5) {
    const i7 = "move";
    this.updateGraphics.addMany(e11), await this._updateSpatialReference(e11);
    const a9 = await this._getGraphicMover(e11, t6, o5);
    if (ae(a9))
      return a9;
    const r9 = new i6({ activeComponent: a9, tool: i7, type: "update", onEnd: () => {
      var _a;
      this._displayDefaultCursor(), p12.forEach((e12) => e12.remove()), n16.forEach((e12) => e12.remove()), p12 = [], n16 = [], a9.destroy(), (_a = this._internalGraphicsLayer) == null ? void 0 : _a.removeMany([...this.updateGraphics.toArray()]);
    }, undo: () => {
      const e12 = this.updateGraphics.toArray();
      ee(r9, e12), r9.refreshComponent(), this._emitUndoEvent({ graphics: e12, tool: i7 });
    }, redo: () => {
      const e12 = this.updateGraphics.toArray();
      te(r9, e12), r9.refreshComponent(), this._emitRedoEvent({ graphics: e12, tool: i7 });
    }, addToSelection: async (e12) => {
      await this._updateSpatialReference(e12), this.updateGraphics.push(e12), a9.graphics = this.updateGraphics.toArray(), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [e12], removed: [], type: "selection-change" }, type: "update" });
    }, removeFromSelection: (e12) => {
      const t7 = this.updateGraphics.indexOf(e12);
      r9.history.undo.forEach((e13) => e13.updates.splice(t7, 1)), r9.history.redo.forEach((e13) => e13.updates.splice(t7, 1)), this.updateGraphics.remove(e12);
      const o6 = this.updateGraphics.toArray();
      this.emit("update", { graphics: o6, state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [], removed: [e12], type: "selection-change" }, type: "update" }), 0 !== this.updateGraphics.length ? a9.graphics = o6 : r9.complete();
    } });
    let s11 = false, n16 = [o5.on("immediate-click", (e12) => this._getCommonUpdateOperationClickHandlers(r9, e12, t6), P.WIDGET), o5.on("key-down", (e12) => {
      this._getCommonUpdateOperationKeyDownHandlers(r9, e12), e12.key !== e8.constraint || e12.repeat || (s11 = true, a9.enableMoveAllGraphics = !a9.enableMoveAllGraphics);
    }, P.WIDGET), o5.on("key-up", (e12) => {
      e12.key === e8.constraint && s11 && (s11 = false, a9.enableMoveAllGraphics = !a9.enableMoveAllGraphics);
    }, P.WIDGET)], p12 = this._getHandlesForComponent(r9, t6);
    return r9;
  }
  async _setupReshape3DOperation(e11, t6, o5, i7 = false) {
    const a9 = "reshape", r9 = await this._requireModule(import("./editingTools-3KE6RLLL.js"));
    if (ae(r9))
      return r9;
    this.snappingOptions.enabledToggled = false;
    const s11 = new r9.module.GraphicReshapeTool({ view: o5, graphic: e11, enableZVertex: t6.enableZ && "move" === t6.reshapeOptions.vertexOperation, enableZShape: t6.enableZ && "move" === t6.reshapeOptions.shapeOperation, enableMoveGraphic: "move" === t6.reshapeOptions.shapeOperation || "move-xy" === t6.reshapeOptions.shapeOperation, enableMidpoints: "split" === t6.reshapeOptions.edgeOperation, enableEdgeOffset: "offset" === t6.reshapeOptions.edgeOperation, snappingManager: this._snappingManager, labelOptions: this.labelOptions, tooltipOptions: this.tooltipOptions });
    o5.tools.add(s11), i7 || this.updateGraphics.add(e11);
    const n16 = [], p12 = new i6({ activeComponent: s11, tool: a9, type: "update", onEnd: () => {
      var _a;
      n16.forEach((e12) => e12.remove()), n16.length = 0, (_a = this.view.tools) == null ? void 0 : _a.remove(s11), s11.destroyed || s11.destroy();
    }, canUndo: () => s11.canUndo, undo: () => {
      s11.undo(), this._emitUndoEvent({ graphics: this.updateGraphics.toArray(), tool: a9 });
    }, canRedo: () => s11.canRedo, redo: () => {
      s11.redo(), this._emitRedoEvent({ graphics: this.updateGraphics.toArray(), tool: a9 });
    }, addToSelection: async (e12) => {
      this.updateGraphics.add(e12), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [e12], removed: [], type: "selection-change" }, type: "update" });
      const i8 = await this._setupMove3DOperation(this.updateGraphics.toArray(), t6, o5, "transform", true);
      ae(i8) || (p12.onEnd(), p12.destroy(), this._setUpdateOperationHandle(i8, t6));
    }, removeFromSelection: (e12) => {
      this.updateGraphics.remove(e12), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [], removed: [e12], type: "selection-change" }, type: "update" }), p12.complete();
    }, toggleTool: async () => {
      if (false === t6.toggleToolOnClick)
        return;
      const e12 = await this._setupGraphicTransform3DOperation(this.updateGraphics.toArray(), t6, o5, true);
      ae(e12) || (p12.onEnd(), p12.destroy(), this._setUpdateOperationHandle(e12, t6));
    } });
    return n16.push(...this._getHandlesForComponent(p12, t6), o5.on("immediate-click", (e12) => this._getCommonUpdateOperationClickHandlers(p12, e12, t6), P.WIDGET), o5.on("key-down", (e12) => {
      this._getCommonUpdateOperationKeyDownHandlers(p12, e12), e12.key === e8.snappingToggle && (this.snappingOptions.enabledToggled = true, e12.stopPropagation());
    }, P.WIDGET), o5.on("key-up", (e12) => {
      e12.key === e8.snappingToggle && (this.snappingOptions.enabledToggled = false, e12.stopPropagation());
    }, P.WIDGET)), p12;
  }
  async _setupTransformOrReshape2DOperation(e11, t6, o5, i7) {
    this.updateGraphics.addMany(e11), await this._updateSpatialReference(e11);
    const a9 = "transform" === t6 ? await this._getBox(e11, o5, i7) : await this._getReshape(e11, o5, i7);
    if (ae(a9))
      return a9;
    const r9 = new i6({ activeComponent: a9, type: "update", onEnd: () => {
      n16.forEach((e12) => e12.remove()), s11.forEach((e12) => e12.remove()), n16 = [], s11 = [], r9.activeComponent && !r9.activeComponent.destroyed && r9.activeComponent.destroy(), this._internalGraphicsLayer.removeMany(this.updateGraphics.toArray());
    }, undo: () => {
      ee(r9, this.updateGraphics.toArray()), r9.refreshComponent(), this._emitUndoEvent({ graphics: this.updateGraphics.toArray(), tool: r9.tool });
    }, redo: () => {
      te(r9, this.updateGraphics.toArray()), r9.refreshComponent(), this._emitRedoEvent({ graphics: this.updateGraphics.toArray(), tool: r9.tool });
    }, addToSelection: async (e12) => {
      let t7 = r9.activeComponent;
      if ("reshape" === t7.type) {
        const t8 = [...this.updateGraphics, e12];
        this.updateGraphics.removeAll();
        const a10 = await this._setupMove2DOperation(t8, o5, i7);
        if (ae(a10))
          return;
        r9.onEnd(), r9.destroy(), this._setUpdateOperationHandle(a10, o5);
      } else
        this.updateGraphics.add(e12), t7.graphics = this.updateGraphics.toArray(), t7.refresh(), r9.resetHistory();
      this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [e12], removed: [], type: "selection-change" }, type: "update" });
    }, removeFromSelection: async (e12) => {
      const t7 = this.updateGraphics.indexOf(e12);
      r9.history.undo.forEach((e13) => e13.updates.splice(t7, 1)), r9.history.redo.forEach((e13) => e13.updates.splice(t7, 1)), this.updateGraphics.remove(e12);
      const o6 = this.updateGraphics.toArray();
      if (0 === o6.length)
        r9.complete();
      else {
        const e13 = o6[0].geometry;
        1 !== o6.length || !r(e13) || "point" !== e13.type && "multipoint" !== e13.type ? r9.activeComponent.graphics = o6 : r9.toggleTool();
      }
      this.emit("update", { graphics: o6, state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [], removed: [e12], type: "selection-change" }, type: "update" });
    }, toggleTool: async () => {
      if (this.updateGraphics.length > 1)
        return;
      const e12 = this.updateGraphics.getItemAt(0), t7 = e12.geometry;
      if (r(t7) && ("reshape" === r9.tool && ("point" === t7.type || "multipoint" === t7.type) || "transform" === r9.tool && "extent" === t7.type))
        return;
      let a10 = null;
      "transform" === r9.tool ? a10 = await this._getReshape([e12], o5, i7) : "reshape" === r9.tool && (a10 = await this._getBox([e12], o5, i7)), ae(a10) || (r9.activeComponent.destroy(), r9.activeComponent = a10, r9.activeComponent && (n16.forEach((e13) => e13.remove()), n16 = this._getHandlesForComponent(r9, o5)));
    } });
    let s11 = [i7.on("immediate-click", (e12) => this._getCommonUpdateOperationClickHandlers(r9, e12, o5), P.WIDGET), i7.on("key-down", (e12) => {
      if (this._getCommonUpdateOperationKeyDownHandlers(r9, e12), e12.key !== e8.snappingToggle || e12.repeat || (this.snappingOptions.enabledToggled = true, e12.stopPropagation()), e12.key === e8.constraint && !e12.repeat && r9) {
        const e13 = r9.activeComponent;
        e13 && "box" === e13.type && (e13.preserveAspectRatio = !e13.preserveAspectRatio);
      }
    }, P.WIDGET), i7.on("key-up", (e12) => {
      var _a;
      if (e12.key === e8.snappingToggle && "reshape" === ((_a = r9 == null ? void 0 : r9.activeComponent) == null ? void 0 : _a.type) && (this.snappingOptions.enabledToggled = false, e12.stopPropagation()), e12.key === e8.constraint && r9) {
        const e13 = r9.activeComponent;
        e13 && "box" === e13.type && (e13.preserveAspectRatio = !e13.preserveAspectRatio);
      }
    }, P.WIDGET)], n16 = this._getHandlesForComponent(r9, o5);
    return r9;
  }
  async _getGraphicMover(e11, t6, o5) {
    const { enableMoveAllGraphics: i7 } = t6, a9 = await this._requireModule(import("./GraphicMover-ZBW2A324.js"));
    return ae(a9) ? a9 : new a9.module.default({ enableMoveAllGraphics: i7, highlightsEnabled: true, indicatorsEnabled: false, graphics: e11, view: o5, callbacks: { onGraphicMoveStart: ({ dx: e12, dy: t7, graphic: o6 }) => {
      this._displayGrabbingCursor(), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e12, dy: t7, mover: o6, type: "move-start" }, type: "update" });
    }, onGraphicMove: ({ dx: e12, dy: t7, graphic: o6 }) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e12, dy: t7, mover: o6, type: "move" }, type: "update" }), onGraphicMoveStop: ({ dx: e12, dy: t7, graphic: o6 }) => {
      this._displayPointerCursor(), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e12, dy: t7, mover: o6, type: "move-stop" }, type: "update" });
    }, onGraphicPointerOver: () => this._displayPointerCursor(), onGraphicPointerOut: () => this._displayDefaultCursor() } });
  }
  async _getBox(e11, t6, o5) {
    const { enableRotation: i7, enableScaling: a9, preserveAspectRatio: r9 } = t6, s11 = await this._requireModule(import("./Box-N32QQGD3.js"));
    return ae(s11) ? s11 : new s11.module.default({ graphics: e11, enableRotation: i7, enableScaling: a9, preserveAspectRatio: r9, layer: this._internalGraphicsLayer, view: o5, tooltipOptions: this.tooltipOptions, callbacks: { onMoveStart: (e12) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e12 }, type: "update" }), onMove: (e12) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e12 }, type: "update" }), onMoveStop: (e12) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e12 }, type: "update" }), onScaleStart: (e12) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e12 }, type: "update" }), onScale: (e12) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e12 }, type: "update" }), onScaleStop: (e12) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e12 }, type: "update" }), onRotateStart: (e12) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e12 }, type: "update" }), onRotate: (e12) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e12 }, type: "update" }), onRotateStop: (e12) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e12 }, type: "update" }) } });
  }
  async _getReshape(e11, t6, o5) {
    var _a, _b;
    const i7 = "split" === ((_a = t6.reshapeOptions) == null ? void 0 : _a.edgeOperation), a9 = "move" === ((_b = t6.reshapeOptions) == null ? void 0 : _b.shapeOperation), r9 = await this._requireModule(import("./Reshape-6KPL2XJN.js"));
    return ae(r9) ? r9 : new r9.module.default({ enableMidpoints: i7, enableMovement: a9, graphic: e11[0], layer: this._internalGraphicsLayer, snappingManager: this._snappingManager, tooltipOptions: this.tooltipOptions, view: o5, callbacks: { onReshapeStart: (e12) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e12 }, type: "update" }), onReshape: (e12) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e12 }, type: "update" }), onReshapeStop: ({ mover: e12, type: t7 }) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e12, type: t7 }, type: "update" }), onMoveStart: ({ dx: e12, dy: t7, mover: o6, type: i8 }) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e12, dy: t7, mover: o6, type: i8 }, type: "update" }), onMove: ({ dx: e12, dy: t7, mover: o6, type: i8 }) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e12, dy: t7, mover: o6, type: i8 }, type: "update" }), onMoveStop: ({ dx: e12, dy: t7, mover: o6, type: i8 }) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e12, dy: t7, mover: o6, type: i8 }, type: "update" }), onVertexAdd: ({ added: e12, type: t7, vertices: o6 }) => {
      const i8 = e12.map((e13) => r4(e13.geometry));
      this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: i8, vertices: o6, type: t7 }, type: "update" });
    }, onVertexRemove: ({ removed: e12, type: t7, vertices: o6 }) => {
      const i8 = e12.map((e13) => r4(e13.geometry));
      this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { removed: i8, vertices: o6, type: t7 }, type: "update" });
    } } });
  }
  _getHandlesForComponent(e11, t6) {
    const o5 = e11.activeComponent;
    switch (o5.type) {
      case "graphic-mover":
        return [o5.on("graphic-click", ({ graphic: t7, viewEvent: o6 }) => {
          var _a;
          ((_a = o6.native) == null ? void 0 : _a.shiftKey) && (o6.stopPropagation(), e11.removeFromSelection(t7));
        }), o5.on("graphic-move-start", (t7) => e11.addToHistory(ie(t7.allGraphics)))];
      case "box":
        return [o5.on("graphic-click", (o6) => this._onTransformOrReshape2DGraphicClick(e11, t6, o6)), o5.on("move-start", (t7) => e11.addToHistory(ie(t7.graphics))), o5.on("rotate-start", (t7) => e11.addToHistory(ie(t7.graphics))), o5.on("scale-start", (t7) => e11.addToHistory(ie(t7.graphics)))];
      case "reshape":
        return [o5.on("graphic-click", (o6) => this._onTransformOrReshape2DGraphicClick(e11, t6, o6)), o5.on("move-start", (t7) => e11.addToHistory(ie([t7.mover]))), o5.on("reshape-start", (t7) => e11.addToHistory(ie([t7.graphic]))), o5.on("vertex-add", (t7) => e11.addToHistory(ie([t7.oldGraphic]))), o5.on("vertex-remove", (t7) => e11.addToHistory(ie([t7.oldGraphic])))];
      case "move-3d":
        return [o5.on("graphic-move-start", (t7) => {
          e11.addToHistory(ie(t7.allGraphics)), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: 0, dy: 0, mover: t7.allGraphics.length > 0 ? t7.allGraphics[0] : null, type: "move-start" }, type: "update" });
        }), o5.on("graphic-move", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e12.dx, dy: e12.dy, mover: e12.allGraphics.length > 0 ? e12.allGraphics[0] : null, type: "move" }, type: "update" });
        }), o5.on("graphic-move-stop", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: 0, dy: 0, mover: e12.allGraphics.length > 0 ? e12.allGraphics[0] : null, type: "move-stop" }, type: "update" });
        }), o5.on("immediate-click", (o6) => {
          o6.shiftKey ? this._toggleSelection([o6.graphic], e11, t6) : e11.toggleTool();
        })];
      case "transform-3d":
        return [o5.on("record-undo", ({ record: t7 }) => {
          e11.addToHistory({ updates: [t7] });
        }), o5.on("graphic-translate-start", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e12.graphic, dx: e12.dxScreen, dy: e12.dyScreen, type: "move-start" }, type: "update" });
        }), o5.on("graphic-translate-stop", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e12.graphic, dx: e12.dxScreen, dy: e12.dyScreen, type: "move-stop" }, type: "update" });
        }), o5.on("graphic-rotate-start", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e12.graphic, angle: e12.angle, type: "rotate-start" }, type: "update" });
        }), o5.on("graphic-rotate-stop", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e12.graphic, angle: e12.angle, type: "rotate-stop" }, type: "update" });
        }), o5.on("graphic-scale-start", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e12.graphic, xScale: e12.xScale, yScale: e12.yScale, type: "scale-start" }, type: "update" });
        }), o5.on("graphic-scale-stop", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e12.graphic, xScale: e12.xScale, yScale: e12.yScale, type: "scale-stop" }, type: "update" });
        }), o5.on("graphic-translate", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e12.graphic, dx: e12.dxScreen, dy: e12.dyScreen, type: "move" }, type: "update" });
        }), o5.on("graphic-rotate", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e12.graphic, angle: e12.angle, type: "rotate" }, type: "update" });
        }), o5.on("graphic-scale", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e12.graphic, xScale: e12.xScale, yScale: e12.yScale, type: "scale" }, type: "update" });
        }), o5.on("immediate-click", (o6) => {
          o6.shiftKey ? this._toggleSelection([o6.graphic], e11, t6) : e11.toggleTool();
        })];
      case "reshape-3d":
        return [o5.on("reshape", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: e12, type: "update" });
        }), o5.on("move", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: e12, type: "update" });
        }), o5.on("vertex-add", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: e12, type: "update" });
        }), o5.on("vertex-remove", (e12) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: e12, type: "update" });
        }), o5.on("immediate-click", (o6) => {
          o6.shiftKey ? this._toggleSelection([o6.graphic], e11, t6) : e11.toggleTool();
        })];
      default:
        return;
    }
  }
  _onTransformOrReshape2DGraphicClick(e11, t6, o5) {
    var _a;
    const { graphic: i7, viewEvent: a9 } = o5;
    return ((_a = a9.native) == null ? void 0 : _a.shiftKey) && i7.layer === this.layer ? (a9.stopPropagation(), e11.removeFromSelection(i7)) : t6.toggleToolOnClick ? (a9.stopPropagation(), e11.toggleTool()) : void 0;
  }
  _setUpdateOperationHandle(e11, t6) {
    this._operationHandle = e11;
    const o5 = this.view.map;
    this._disablePopup(t6);
    const i7 = () => {
      if (e11 === this._operationHandle) {
        const i8 = this.updateGraphics.toArray(), a9 = this._operationHandle.tool;
        this._operationHandle.destroy(), this._operationHandle = null, this._internalGraphicsLayer.removeMany(this.updateGraphics.toArray()), this.updateGraphics.removeAll(), o5 && o5.remove(this._internalGraphicsLayer), this._restorePopup(t6), this.emit("update", { graphics: i8, state: "complete", aborted: e11.cancelled, tool: a9, toolEventInfo: null, type: "update" });
      }
    };
    e11.on("complete", i7);
  }
  async _getCommonUpdateOperationClickHandlers(e11, t6, o5) {
    const i7 = n8(t6), a9 = await t6.async(() => this._getFirstHit(i7));
    if (t(a9))
      return void e11.complete();
    if (t6.native.shiftKey && this._toggleSelection([a9.graphic], e11, o5))
      return void t6.stopPropagation();
    this.updateGraphics.includes(a9.graphic) ? t6.stopPropagation() : e11.complete();
  }
  _toggleSelection(e11, t6, o5) {
    const i7 = !!o5.multipleSelectionEnabled;
    return e11.some((e12) => null != e12 && (!(!i7 || e12.layer !== this.layer) && (this.updateGraphics.includes(e12) ? t6.removeFromSelection(e12) : t6.addToSelection(e12), true)));
  }
  _getCommonUpdateOperationKeyDownHandlers(e11, t6) {
    if (!e11)
      return;
    const o5 = t6.key;
    o5 === e8.undo && e11.canUndo() ? (t6.stopPropagation(), e11.undo()) : o5 === e8.redo && e11.canRedo() ? (t6.stopPropagation(), e11.redo()) : o5 === e8.cancel ? (t6.stopPropagation(), e11.cancel()) : this.allowDeleteKey && e8.delete.includes(o5) && this._onDeleteKey(t6);
  }
  _onDeleteKey(e11) {
    if (!this._operationHandle || "update" !== this._operationHandle.type)
      return;
    const t6 = this.activeComponent, o5 = this.updateGraphics.toArray();
    t(t6) || "reshape-3d" === t6.type || ("reshape" !== t6.type || 1 === o5.length && "point" === q(o5[0].geometry, "type")) && (e11.stopPropagation(), this.delete());
  }
  _removeDefaultLayer() {
    this._internalGraphicsLayer && (this.view && this.view.map && this.view.map.remove(this._internalGraphicsLayer), this._internalGraphicsLayer = s(this._internalGraphicsLayer));
  }
  _isComponentGraphic(e11) {
    const { activeComponent: t6 } = this;
    return !(!e11 || t(t6)) && (e11.attributes && e11.attributes.esriSketchTool || "draw-2d" === t6.type && t6.graphic === e11 || ("box" === t6.type || "reshape" === t6.type) && t6.isUIGraphic(e11));
  }
  _displayPointerCursor() {
    this.view && this.view.container && "pointer" !== this.view.cursor && (this.view.cursor = "pointer");
  }
  _displayGrabbingCursor() {
    this.view && this.view.container && "grabbing" !== this.view.cursor && (this.view.cursor = "grabbing");
  }
  _displayDefaultCursor() {
    this.view && this.view.container && null !== this.view.cursor && (this.view.cursor = null);
  }
  _logError(e11, t6, o5) {
    s2.getLogger(this.declaredClass).error(new s3(e11, t6, o5));
  }
  async _requireModule(e11) {
    const t6 = new AbortController();
    this._moduleLoaderAbortController = t6;
    const o5 = await e11;
    return this._moduleLoaderAbortController !== t6 || t6.signal.aborted ? { requireError: "aborted" } : { module: o5 };
  }
  _emitUndoEvent(e11) {
    this.emit("undo", { ...e11, type: "undo" });
  }
  _emitRedoEvent(e11) {
    this.emit("redo", { ...e11, type: "redo" });
  }
  _emitDeleteEvent(e11) {
    this.emit("delete", { ...e11, type: "delete" });
  }
  get test() {
    return { operationHandle: this._operationHandle, defaultUpdateOptions: J };
  }
  wait() {
    return j(() => !this.updating);
  }
  _beginAsyncOperation() {
    this._numUpdating += 1, this.notifyChange("updating");
  }
  _endAsyncOperation() {
    this._numUpdating -= 1, this.notifyChange("updating");
  }
  _disablePopupEnabled(e11) {
    var _a;
    return "3d" !== ((_a = this.view) == null ? void 0 : _a.type) || this.updateOnGraphicClick || r(e11) && e11.toggleToolOnClick;
  }
  _disablePopup(e11) {
    if (!this._disablePopupEnabled(e11))
      return;
    const t6 = this.view.popup;
    t6 && t(this._originalAutoOpenEnabled) && (this._originalAutoOpenEnabled = t6.autoOpenEnabled, t6.autoOpenEnabled = false);
  }
  _restorePopup(e11) {
    if (!this._disablePopupEnabled(e11))
      return;
    const t6 = this.view.popup;
    t6 && r(this._originalAutoOpenEnabled) && (t6.autoOpenEnabled = this._originalAutoOpenEnabled, this._originalAutoOpenEnabled = null);
  }
  async _waitViewReady() {
    const e11 = this.view;
    e11 && (p(this._viewReadyAbortController), this._viewReadyAbortController = new AbortController(), await y3(j(() => e11 == null ? void 0 : e11.ready), this._viewReadyAbortController.signal));
  }
};
function X(e11) {
  return "polygon" === e11 || "rectangle" === e11 || "circle" === e11;
}
function ee(e11, t6) {
  oe("undo", e11.history.undo, e11.history.redo, t6);
}
function te(e11, t6) {
  oe("redo", e11.history.redo, e11.history.undo, t6);
}
function oe(e11, t6, o5, i7) {
  const a9 = t6.pop().updates, r9 = [];
  i7.forEach((t7, o6) => {
    const i8 = a9[o6];
    null != i8 && ("geometry" in i8 && r(i8.geometry) && (r9.push({ geometry: t7.geometry }), t7.geometry = i8.geometry), "symbol" in i8 && r(i8.symbol) && (r9.push({ symbol: t7.symbol }), t7.symbol = i8.symbol), "undo" in i8 && (r9.push(i8), i8[e11](t7)));
  }), o5.push({ updates: r9 });
}
function ie(e11) {
  return { updates: e11.map((e12) => ({ geometry: e12.geometry })) };
}
function ae(e11) {
  return "requireError" in e11 && "aborted" === e11.requireError;
}
e3([y2()], Q.prototype, "updating", null), e3([y2()], Q.prototype, "_operationHandle", void 0), e3([y2({ readOnly: true })], Q.prototype, "activeTool", null), e3([y2()], Q.prototype, "activeFillSymbol", void 0), e3([y2()], Q.prototype, "activeLineSymbol", void 0), e3([y2()], Q.prototype, "activeVertexSymbol", void 0), e3([y2()], Q.prototype, "allowDeleteKey", void 0), e3([y2({ readOnly: true })], Q.prototype, "createGraphic", null), e3([y2()], Q.prototype, "defaultCreateOptions", null), e3([y2()], Q.prototype, "defaultUpdateOptions", null), e3([y2({ type: c2, nonNullable: true })], Q.prototype, "labelOptions", void 0), e3([y2()], Q.prototype, "layer", void 0), e3([y2({ types: j3 })], Q.prototype, "pointSymbol", void 0), e3([y2({ types: j3 })], Q.prototype, "polygonSymbol", void 0), e3([y2({ types: j3 })], Q.prototype, "polylineSymbol", void 0), e3([y2({ type: n11, nonNullable: true })], Q.prototype, "snappingOptions", null), e3([y2()], Q.prototype, "_snappingManager", void 0), e3([y2({ readOnly: true })], Q.prototype, "state", null), e3([y2({ type: p4, nonNullable: true })], Q.prototype, "tooltipOptions", void 0), e3([y2({ readOnly: true })], Q.prototype, "updateGraphics", void 0), e3([y2()], Q.prototype, "updateOnGraphicClick", void 0), e3([y2({ types: j3 })], Q.prototype, "updatePointSymbol", void 0), e3([y2({ types: j3 })], Q.prototype, "updatePolygonSymbol", void 0), e3([y2({ types: j3 })], Q.prototype, "updatePolylineSymbol", void 0), e3([y2({ types: j3 })], Q.prototype, "vertexSymbol", void 0), e3([y2({ value: null })], Q.prototype, "view", null), Q = e3([n3("esri.widgets.Sketch.SketchViewModel")], Q);
var re = Q;

// node_modules/@arcgis/core/widgets/support/Selector2D/selectorUtils.js
async function e10() {
  return import("./geometryEngineJSON-ABWJ235Y.js");
}
async function n13() {
  return e10().then(({ contains: e11, intersects: n16, overlaps: t6, simplify: r9 }) => ({ contains: e11, intersects: n16, overlaps: t6, simplify: r9 }));
}
async function t4(e11) {
  const { selector: t6, candidates: r9, currentSelection: s11, options: o5, view: i7 } = e11;
  if (!(r9 && r9.length && s11 && i7))
    return { added: [], removed: [] };
  const { overlaps: c6, intersects: a9, contains: d7 } = o5, { spatialReference: l8 } = i7;
  if (!t6) {
    return { added: [], removed: s11.removeAll() };
  }
  const p12 = t6, u9 = await n13(), m11 = [], v5 = [];
  return r9.forEach((e12) => {
    const n16 = e12.geometry, t7 = c6 && !!u9.overlaps(l8, p12, n16), r10 = a9 && !!u9.intersects(l8, p12, n16), o6 = d7 && !!u9.contains(l8, p12, n16), i8 = s11.includes(e12);
    t7 || r10 || o6 ? !i8 && m11.push(e12) : i8 && v5.push(e12);
  }), s11.removeMany(v5), s11.addMany(m11), { added: m11, removed: v5 };
}

// node_modules/@arcgis/core/widgets/support/Selector2D/SelectionOperation2D.js
var d4 = class extends n4.EventedAccessor {
  constructor({ candidates: e11, options: o5, view: i7 }) {
    super(), this._activeOptions = null, this._dashedFillSymbol = new S({ color: [0, 0, 0, 0], outline: { style: "dash", color: [12, 207, 255], width: 2 } }), this._dashedLineSymbol = new m2({ style: "dash", color: [12, 207, 255], width: 2 }), this._defaultOptions = { createTool: "rectangle", createOptions: null, selectionOptions: { overlaps: true, intersects: true, contains: false } }, this._completed = false, this._handles = new t2(), this._sketchViewModel = new re(), this._sketchGraphicsLayer = new h4({ listMode: "hide", internal: true }), this._transparentPointSymbol = new y4({ color: [0, 0, 0, 0], outline: { style: "none", width: 0 } }), this.candidates = null, this.geometry = null, this.options = null, this.selection = new j2(), this.view = null, this.candidates = e11, this.options = o5, this.view = i7;
    const { _dashedFillSymbol: l8, _dashedLineSymbol: c6, _sketchViewModel: d7, _sketchGraphicsLayer: m11, _transparentPointSymbol: y7 } = this;
    d7.set({ layer: m11, view: this.view, activePointSymbol: y7, activeLineSymbol: c6, activeVertexSymbol: y7, activeFillSymbol: l8, pointSymbol: y7, polygonSymbol: l8, polylineSymbol: c6, vertexSymbol: y7 }), this._handles.add([d7.on("create", (e12) => this._onSketchEvent(e12)), d7.on(["undo", "redo"], (e12) => this._onSketchEvent(e12))]);
  }
  initialize() {
    this._load();
  }
  destroy() {
    this._handles.destroy(), this._handles = null;
  }
  get state() {
    const { _completed: e11, _sketchViewModel: { state: t6 } } = this;
    return e11 ? "complete" : "active" === t6 ? "active" : "disabled";
  }
  cancel() {
    return this._sketchViewModel.cancel();
  }
  async _load() {
    await this.view.whenReady();
    const { options: e11 } = this, { createTool: t6, createOptions: o5 } = this._activeOptions = { ...this._defaultOptions, ...e11 };
    this._sketchViewModel.create(t6, o5);
  }
  _onSketchEvent(e11) {
    var _a;
    const t6 = ((_a = "create" === e11.type ? e11.graphic : e11.graphics[0]) == null ? void 0 : _a.geometry) || null, o5 = "create" === e11.type && "cancel" === e11.state, s11 = "create" === e11.type && "complete" === e11.state;
    this._processSelectionGeometry(t6, s11, o5);
  }
  _processSelectionGeometry(e11, t6, o5) {
    if (this._set("geometry", e11), (t6 || o5) && (this._completed = true), o5)
      return void this._onComplete([], true);
    const { _activeOptions: s11, candidates: i7, selection: l8, view: r9 } = this;
    t4({ selector: e11, candidates: i7, currentSelection: l8, options: s11.selectionOptions, view: r9 }).then(({ added: e12, removed: o6 }) => {
      t6 ? this._onComplete(this.selection.toArray(), false) : (e12.length || o6.length) && this.emit("selection-change", { added: e12, removed: o6, type: "selection-change" });
    });
  }
  _onComplete(e11, t6) {
    this._handles.removeAll(), this.notifyChange("state"), this.emit("complete", { aborted: t6, selection: e11, type: "complete" });
  }
};
e3([y2()], d4.prototype, "_completed", void 0), e3([y2()], d4.prototype, "candidates", void 0), e3([y2({ readOnly: true })], d4.prototype, "geometry", void 0), e3([y2()], d4.prototype, "options", void 0), e3([y2({ readOnly: true })], d4.prototype, "selection", void 0), e3([y2({ readOnly: true })], d4.prototype, "state", null), e3([y2({ value: null })], d4.prototype, "view", void 0), d4 = e3([n3("esri.widgets.support.Selector2D.SelectionOperation2D")], d4);
var m8 = d4;

// node_modules/@arcgis/core/widgets/support/Selector2D.js
var p10 = class extends a3(m) {
  constructor(o5) {
    super(o5), this._defaultSelectionOptions = { intersects: true, overlaps: true, contains: true }, this.candidates = null, this.options = null, this.view = null;
  }
  draw(o5) {
    const { _defaultSelectionOptions: t6, candidates: e11, options: s11, view: r9 } = this, i7 = { ...t6, ...s11, ...o5 == null ? void 0 : o5.selectionOptions };
    return new m8({ candidates: e11, options: { ...o5, selectionOptions: i7 }, view: r9 });
  }
  async selectionFrom(o5, t6) {
    const { _defaultSelectionOptions: s11, candidates: r9, options: i7, view: c6 } = this, p12 = new j2(), a9 = { ...s11, ...i7, ...t6 };
    return await t4({ selector: o5, candidates: r9, currentSelection: p12, options: a9, view: c6 }), p12.toArray();
  }
};
e3([y2()], p10.prototype, "candidates", void 0), e3([y2()], p10.prototype, "options", void 0), e3([y2({ value: null })], p10.prototype, "view", void 0), p10 = e3([n3("esri.widgets.support.Selector2D")], p10);
var a6 = p10;

// node_modules/@arcgis/core/widgets/support/SelectionToolbar/SelectionToolbarViewModel.js
var n14 = class extends n4.EventedAccessor {
  constructor(e11) {
    super(e11), this._operationHandlesGroup = null, this.activeOperation = null, this.layers = null, this.selector = new a6();
  }
  destroy() {
    this._operationHandlesGroup = h(this._operationHandlesGroup), this.selector.destroy();
  }
  get state() {
    var _a, _b;
    return this.activeOperation ? "active" : ((_a = this.view) == null ? void 0 : _a.ready) && ((_b = this.layers) == null ? void 0 : _b.length) ? "ready" : "disabled";
  }
  set view(e11) {
    this.selector.view = e11, this._set("view", e11);
  }
  cancel() {
    "active" === this.state && (this.activeOperation.cancel(), this.activeOperation = null), this.selector.candidates = null;
  }
  activate(e11) {
    const { state: t6 } = this;
    if ("disabled" === t6)
      return;
    "active" === t6 && this.cancel(), this.selector.candidates = this._getCandidates();
    const r9 = this.selector.draw(e11);
    return this._operationHandlesGroup = r3([r9.once("complete", (e12) => this._onOperationComplete(e12)), r9.on("selection-change", (e12) => this._onOperationSelectionChange(e12))]), this.activeOperation = r9, r9;
  }
  _getCandidates() {
    let e11 = [];
    return this.layers.forEach((t6) => {
      e11 = e11.concat(...t6.graphics.toArray());
    }), e11;
  }
  _onOperationSelectionChange(e11) {
    this.emit("selection-change", e11);
  }
  _onOperationComplete(e11) {
    this._operationHandlesGroup = h(this._operationHandlesGroup), this.activeOperation = null, this.emit("complete", e11);
  }
};
e3([y2()], n14.prototype, "activeOperation", void 0), e3([y2()], n14.prototype, "layers", void 0), e3([y2({ readOnly: true })], n14.prototype, "selector", void 0), e3([y2({ readOnly: true })], n14.prototype, "state", null), e3([y2()], n14.prototype, "view", null), n14 = e3([n3("esri.widgets.support.SelectionToolbar.SelectionToolbarViewModel")], n14);
var c5 = n14;

// node_modules/@arcgis/core/widgets/support/SelectionToolbar.js
var d5 = { lassoTool: true, rectangleTool: true };
var p11 = { createTool: "polygon", createOptions: { mode: "freehand" } };
var m9 = { createTool: "rectangle" };
var h8 = { base: "esri-selection-toolbar", container: "esri-selection-toolbar__container", toolButton: "esri-selection-toolbar__tool-button", disabled: "esri-disabled", esriWidget: "esri-widget", widgetIcon: "esri-icon-vertex-gps" };
var g5 = class extends M {
  constructor(e11, t6) {
    super(e11, t6), this._viewModelHandlesGroup = null, this.activeToolInfo = null, this.messages = null, this.toolConfigs = [], this.viewModel = new c5(), this.visibleElements = { ...d5 }, this._viewModelHandlesGroup = r3([this.viewModel.on("selection-change", (e12) => this.emit("selection-change", e12)), this.viewModel.on("complete", (e12) => {
      this._set("activeToolInfo", null), this.emit("complete", e12);
    })]);
  }
  destroy() {
    this._viewModelHandlesGroup = h(this._viewModelHandlesGroup);
  }
  loadDependencies() {
    return Promise.all([import("./calcite-action-V4YAO42G.js"), import("./calcite-icon-D7JSDQFP.js")]);
  }
  get label() {
    var _a, _b;
    return (_b = (_a = this.messages) == null ? void 0 : _a.widgetLabel) != null ? _b : "";
  }
  set label(e11) {
    this._overrideIfSome("label", e11);
  }
  get layers() {
    return this.viewModel.layers;
  }
  set layers(e11) {
    this.viewModel.layers = e11;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e11) {
    this.viewModel.view = e11;
  }
  castVisibleElements(e11) {
    return { ...d5, ...e11 };
  }
  activate(e11) {
    switch (this.cancel(), e11) {
      case "lasso":
        this._activateTool("lasso");
      case "rectangle":
        this._activateTool("rectangle");
      default:
        this._activateTool(e11);
    }
  }
  cancel() {
    this.viewModel.cancel(), this._set("activeToolInfo", null);
  }
  render() {
    return n5("div", { "aria-label": this.label, class: this.classes(h8.base, h8.esriWidget) }, n5("div", { class: h8.container }, this.renderDefaultTools(), this.renderCustomTools()));
  }
  renderDefaultTools() {
    var _a;
    if ("2d" === ((_a = this.view) == null ? void 0 : _a.type))
      return [this.renderRectangleTool(), this.renderLassoTool()];
  }
  renderCustomTools() {
    if (this.toolConfigs && this.toolConfigs.length)
      return this.toolConfigs.map((e11) => {
        var _a;
        return n5("calcite-action", { active: ((_a = this.activeToolInfo) == null ? void 0 : _a.toolName) === e11.toolName, bind: this, class: h8.toolButton, label: e11.toolName, onclick: () => this._onCustomToolClick(e11.toolName), scale: "s", text: e11.toolName, title: e11.toolName }, n5("calcite-icon", { scale: "s", icon: e11.icon || "selection" }));
      });
  }
  renderLassoTool() {
    const { activeToolInfo: e11, messages: o5, visibleElements: t6 } = this;
    if (t6.lassoTool)
      return n5("calcite-action", { active: "lasso" === (e11 == null ? void 0 : e11.toolName), bind: this, label: o5.selectByLasso, onclick: this._onLassoToolClick, scale: "s", text: o5.selectByLasso, title: o5.selectByLasso }, n5("calcite-icon", { scale: "s", icon: "lasso" }));
  }
  renderRectangleTool() {
    const { activeToolInfo: e11, messages: o5, visibleElements: t6 } = this;
    if (t6.rectangleTool)
      return n5("calcite-action", { active: "rectangle" === (e11 == null ? void 0 : e11.toolName), bind: this, label: o5.selectByRectangle, onclick: this._onRectangleToolClick, scale: "s", text: o5.selectByRectangle, title: o5.selectByRectangle }, n5("calcite-icon", { scale: "s", icon: "cursor-marquee" }));
  }
  _onCustomToolClick(e11) {
    this._toggleTool(e11);
  }
  _onLassoToolClick() {
    this._toggleTool("lasso");
  }
  _onRectangleToolClick() {
    this._toggleTool("rectangle");
  }
  _activateTool(e11) {
    const o5 = this._getToolOptions(e11);
    if (!o5)
      return;
    const t6 = this.viewModel.activate(o5);
    this._set("activeToolInfo", { toolName: e11, operation: t6 });
  }
  _toggleTool(e11) {
    if (this.activeToolInfo) {
      const o5 = this.activeToolInfo.toolName;
      if (this.cancel(), o5 === e11)
        return;
    }
    this._activateTool(e11);
  }
  _getToolOptions(e11) {
    if ("lasso" === e11)
      return p11;
    if ("rectangle" === e11)
      return m9;
    const o5 = this.toolConfigs.find((o6) => o6.toolName === e11);
    if (!o5)
      return;
    const { createTool: t6, createOptions: s11, selectionOptions: l8 } = o5;
    return { createTool: t6, createOptions: s11, selectionOptions: l8 };
  }
};
e3([y2({ readOnly: true })], g5.prototype, "activeToolInfo", void 0), e3([y2()], g5.prototype, "label", null), e3([y2()], g5.prototype, "layers", null), e3([y2(), e5("esri/widgets/support/SelectionToolbar/t9n/SelectionToolbar")], g5.prototype, "messages", void 0), e3([y2()], g5.prototype, "toolConfigs", void 0), e3([y2()], g5.prototype, "view", null), e3([y2()], g5.prototype, "viewModel", void 0), e3([y2()], g5.prototype, "visibleElements", void 0), e3([s4("visibleElements")], g5.prototype, "castVisibleElements", null), g5 = e3([n3("esri.widgets.support.SelectionToolbar")], g5);
var v4 = g5;

// node_modules/@arcgis/core/widgets/support/SnappingControls/snappingLayerListUtils.js
var r8 = (e11) => t5(e11) || a7(e11);
var t5 = (e11) => {
  if (!("type" in e11))
    return false;
  switch (e11.type) {
    case "feature":
    case "geojson":
    case "csv":
    case "graphics":
    case "wfs":
    case "map-notes":
    case "oriented-imagery":
    case "scene":
    case "building-scene":
      return true;
    default:
      return false;
  }
};
var a7 = (t6) => {
  const a9 = u3(t6);
  if (t6.hasOwnProperty(a9) && r(t6[a9])) {
    for (const e11 of t6[a9])
      if (r8(e11))
        return true;
  }
  return false;
};

// node_modules/@arcgis/core/widgets/support/SnappingControls/SnappingListItem.js
var n15;
var u7 = n15 = class extends L2 {
  constructor(e11) {
    super(e11), this.children = new j2();
  }
  get enabled() {
    return !!r(this.featureSource) && this.featureSource.enabled;
  }
  get featureSource() {
    const { layer: e11, getFeatureSnappingSources: r9 } = this;
    return r9().find((r10) => r10.layer === e11);
  }
  _initializeChildLayers(e11) {
    if (!e11)
      return;
    const r9 = e11.filter(r8);
    super._initializeChildLayers(r9);
  }
  _makeChildren(e11) {
    return e11.map((e12) => l3(e12) ? new n15({ layer: e12, parent: this, view: this.view, getFeatureSnappingSources: this.getFeatureSnappingSources }) : null).reverse();
  }
};
e3([y2()], u7.prototype, "children", void 0), e3([y2()], u7.prototype, "enabled", null), e3([y2({ constructOnly: true })], u7.prototype, "getFeatureSnappingSources", void 0), e3([y2()], u7.prototype, "featureSource", null), e3([y2()], u7.prototype, "parent", void 0), u7 = n15 = e3([n3("esri.widgets.support.SnappingControls.SnappingListItem")], u7);

// node_modules/@arcgis/core/widgets/support/SnappingControls/SnappingLayerListViewModel.js
var a8 = class extends v {
  constructor() {
    super(...arguments), this.featureSnappingSources = new j2();
  }
  get operationalItemsFlat() {
    return this.operationalItems.flatten((e11) => e11.children);
  }
  _compileList() {
    const e11 = this.get("view.map.layers");
    if (!e11)
      return;
    const t6 = e11.filter(r8);
    this._watchLayersListMode(t6);
    const r9 = this._getViewableLayers(t6);
    r9 && r9.length ? (this._createNewItems(r9), this._removeItems(r9), this._sortItems(r9)) : this._removeAllItems();
  }
  _createListItem(e11) {
    return new u7({ layer: e11, view: this.view, getFeatureSnappingSources: () => this.featureSnappingSources });
  }
};
e3([y2()], a8.prototype, "featureSnappingSources", void 0), e3([y2()], a8.prototype, "operationalItems", void 0), a8 = e3([n3("esri.widgets.support.SnappingControls.SnappingLayerListViewModel")], a8);

// node_modules/@arcgis/core/widgets/support/SnappingControls/SnappingControlsViewModel.js
var u8 = "esri.widgets.support.SnappingControls.SnappingControlsViewModel";
var d6 = class extends a3(m) {
  constructor(e11) {
    super(e11), this.layerListViewModel = new a8(), this.snappingOptions = null, this.view = null;
  }
  initialize() {
    this.handles.add([l(() => ({ viewModel: this.layerListViewModel, view: this.view }), ({ viewModel: e11, view: r9 }) => {
      e11.view = r9;
    }, h2), l(() => {
      var _a;
      return { viewModel: this.layerListViewModel, sources: (_a = this.snappingOptions) == null ? void 0 : _a.featureSources };
    }, ({ viewModel: e11, sources: r9 }) => {
      e11.featureSnappingSources = r9;
    }, h2)]);
  }
  get state() {
    return this.get("snappingOptions") ? "ready" : "disabled";
  }
  enableSnappingForLayer(e11) {
    var _a;
    ((_a = this._findSnappingSourceForLayer(e11)) != null ? _a : this._makeSnappingSourceForLayer(e11)).enabled = true;
  }
  disableSnappingForLayer(e11) {
    const r9 = this._findSnappingSourceForLayer(e11);
    r9 && (r9.enabled = false);
  }
  updateEnabledFeatureSources(e11) {
    for (const r9 of this.snappingOptions.featureSources)
      l3(r9.layer) && (r9.enabled = e11.includes(r9.layer.id));
  }
  _findSnappingSourceForLayer(e11) {
    return this.snappingOptions.featureSources.find((r9) => r9.layer.id === e11);
  }
  _makeSnappingSourceForLayer(e11) {
    const { layer: r9 } = this.layerListViewModel.operationalItemsFlat.find((r10) => r10.layer.id === e11);
    if (!r9)
      throw new s3("snapping-controls:layer-not-found", `cannot enable snapping for layer with id ${e11} because no such layer was found in the view`);
    const s11 = new p8({ layer: r9 });
    return this.snappingOptions.featureSources.add(s11), s11;
  }
};
e3([y2({ constructOnly: true })], d6.prototype, "layerListViewModel", void 0), e3([y2({ constructOnly: true })], d6.prototype, "snappingOptions", void 0), e3([y2()], d6.prototype, "state", null), e3([y2({ constructOnly: true })], d6.prototype, "view", void 0), d6 = e3([n3(u8)], d6);
var y5 = d6;

// node_modules/@arcgis/core/widgets/support/SnappingControls.js
var g6 = { header: true, enabledToggle: true, selfEnabledToggle: true, featureEnabledToggle: true, layerList: true };
var h9 = { base: "esri-snapping-controls", container: "esri-snapping-controls__container", panel: "esri-snapping-controls__panel", item: "esri-snapping-controls__item", toggleBlock: "esri-snapping-controls__toggle-block", layerListBlock: "esri-snapping-controls__layer-list-block", layerList: "esri-snapping-controls__layer-list", layerListFilter: "esri-snapping-controls__layer-list__filter", layerListItem: "esri-snapping-controls__layer-list__item", layerListItemCheckbox: "esri-snapping-controls__layer-list__item__checkbox", layerListItemLabel: "esri-snapping-controls__layer-list__item__label", nestedContainer: "esri-snapping-controls__nested-container", disabled: "esri-disabled", esriWidget: "esri-widget", widgetIcon: "esri-icon-vertex-gps" };
var m10 = class extends M {
  constructor(e11, t6) {
    super((() => {
      const { view: t7, viewModel: i7, snappingOptions: s11, ...l8 } = e11;
      return l8;
    })(), t6), this._layerListFilter = null, this.messages = null, this.messagesCommon = null, this.visibleElements = { ...g6 }, this._defaultViewModel = null, (e11 == null ? void 0 : e11.viewModel) ? this.viewModel = e11.viewModel : (this._defaultViewModel = new y5({ snappingOptions: e11.snappingOptions, view: e11.view }), this.viewModel = this._defaultViewModel);
  }
  destroy() {
    this._defaultViewModel = s(this._defaultViewModel);
  }
  loadDependencies() {
    return Promise.all([import("./calcite-accordion-3PXTTUM2.js"), import("./calcite-accordion-item-FBEUT4IE.js"), import("./calcite-block-WYSEHVGP.js"), import("./calcite-checkbox-NXZRSI5G.js"), import("./calcite-input-OJZBERSV.js"), import("./calcite-label-EYZS5ETV.js"), import("./calcite-list-WZR2NPTM.js"), import("./calcite-list-item-MGY3L256.js"), import("./calcite-panel-7JHLUTPJ.js"), import("./calcite-switch-CVJ3NCOM.js")]);
  }
  get label() {
    var _a, _b;
    return (_b = (_a = this.messages) == null ? void 0 : _a.widgetLabel) != null ? _b : "";
  }
  set label(e11) {
    this._overrideIfSome("label", e11);
  }
  get snappingOptions() {
    return this.viewModel.snappingOptions;
  }
  set snappingOptions(e11) {
    this.viewModel.snappingOptions = e11;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e11) {
    this.viewModel.view = e11;
  }
  set viewModel(e11) {
    e11 !== this._get("viewModel") && ((t(this._defaultViewModel) || this._defaultViewModel !== e11) && (this._defaultViewModel = s(this._defaultViewModel)), this._set("viewModel", e11));
  }
  castVisibleElements(e11) {
    return { ...g6, ...e11 };
  }
  render() {
    const { label: e11, visibleElements: { header: t6 } } = this;
    return n5("div", { "aria-label": e11, class: this.classes(h9.base, h9.esriWidget) }, n5("div", { class: h9.container }, t6 ? this.renderHeaderView() : this.renderContent()));
  }
  renderHeaderView() {
    return n5("calcite-panel", { heading: this.label, class: h9.panel }, this.renderContent());
  }
  renderContent() {
    return [this.renderToggles(), this.renderLayerList()];
  }
  renderToggles() {
    const { visibleElements: { enabledToggle: e11, selfEnabledToggle: t6, featureEnabledToggle: i7 } } = this;
    if (e11 || t6 || i7)
      return n5("calcite-block", { class: h9.toggleBlock, key: "toggle-block", heading: "", open: true }, this.renderEnabledToggle(), n5("div", { class: h9.nestedContainer }, this.renderSelfEnabledToggle(), this.renderFeatureEnabledToggle()));
  }
  renderEnabledToggle() {
    if (!this.visibleElements.enabledToggle)
      return;
    const { messages: { enableSnapping: e11 }, viewModel: { snappingOptions: { enabled: t6, enabledToggled: i7 } } } = this;
    return n5("calcite-label", { layout: "inline-space-between" }, e11, n5("calcite-switch", { checked: t6, disabled: i7, bind: this, onCalciteSwitchChange: this._enableSnappingSwitchChange }));
  }
  renderSelfEnabledToggle() {
    if (!this.visibleElements.selfEnabledToggle)
      return;
    const { messages: { geometryGuides: e11 }, viewModel: { snappingOptions: { enabled: t6, selfEnabled: i7, enabledToggled: s11 } } } = this;
    return n5("calcite-label", { layout: "inline-space-between", key: "self-enabled-toggle" }, e11, n5("calcite-switch", { checked: i7, disabled: s11 || !t6, bind: this, onCalciteSwitchChange: this._selfEnabledSwitchChange }));
  }
  renderFeatureEnabledToggle() {
    if (!this.visibleElements.featureEnabledToggle)
      return;
    const { messages: { featureToFeature: e11 }, viewModel: { snappingOptions: { enabled: t6, featureEnabled: i7, enabledToggled: s11 } } } = this;
    return n5("calcite-label", { layout: "inline-space-between", key: "feature-enabled-toggle" }, e11, n5("calcite-switch", { checked: i7, disabled: s11 || !t6, bind: this, onCalciteSwitchChange: this._featureEnabledSwitchChange }));
  }
  renderLayerList() {
    if (!this.visibleElements.layerList)
      return;
    const { messages: e11, messagesCommon: t6 } = this, i7 = ({ target: { value: e12 } }) => this._layerListFilter = "" === e12 ? null : new RegExp(e12, "i"), l8 = this.viewModel.layerListViewModel.operationalItems.length > 9 ? n5("calcite-input", { class: h9.layerListFilter, clearable: true, placeholder: e11 == null ? void 0 : e11.searchLayers, onCalciteInputInput: i7 }) : null;
    return n5("calcite-block", { key: "list-block", "intl-collapse": t6 == null ? void 0 : t6.collapse, "intl-expand": t6 == null ? void 0 : t6.expand, heading: e11.snappingLayers, class: h9.layerListBlock, open: true, collapsible: true }, l8, n5("calcite-list", { class: h9.layerList }, this.renderLayerListItemCollection(this.viewModel.layerListViewModel.operationalItems, e(this._layerListFilter))));
  }
  renderLayerListItemCollection(e11, t6) {
    return e11.map((e12) => {
      if (!t6 || this._itemTitleMatchesFilter(e12, t6))
        return e12.children.length > 0 ? this.renderLayerListItemGroup(e12) : this.renderLayerListItem(e12);
      const i7 = e12.children.filter((e13) => this._itemTitleMatchesFilter(e13, t6));
      return i7.length > 0 ? this.renderLayerListItemGroup(e12, i7) : null;
    }).toArray();
  }
  renderLayerListItem(e11) {
    const { messages: { untitledLayer: t6 } } = this, i7 = e11.title || t6, s11 = e11.enabled, l8 = n5("calcite-checkbox", { value: e11.layer.id, checked: s11, bind: this, onCalciteCheckboxChange: (e12) => this._handleLayerListItemChange(e12.target) }), n16 = () => {
      const e12 = !l8.properties.checked;
      this._handleLayerListItemChange({ checked: e12, value: l8.properties.value });
    };
    return n5("calcite-list-item", { key: `${this.id}-list-item-${e11.uid}`, onclick: n16 }, n5("calcite-label", { class: h9.layerListItem, slot: "content-start", tabIndex: -1, layout: "inline", "disable-spacing": "true" }, n5("div", { class: h9.layerListItemCheckbox }, l8), n5("div", { class: h9.layerListItemLabel }, i7)));
  }
  renderLayerListItemGroup(e11, t6) {
    const i7 = e11.title || this.messages.untitledLayer, s11 = e11.title && "" !== e11.title ? e11.title : e4(), n16 = !!t6, a9 = t6 != null ? t6 : e11.children;
    return n5("calcite-list-item", { key: s11 }, n5("calcite-accordion", { "icon-position": "start", appearance: "transparent", afterCreate: (e12) => {
      e12.append(...Array.from(e12.children).map((e13) => (e13.remove(), e13)));
    } }, n5("calcite-accordion-item", { active: n16, "item-title": i7, key: e11.uid }, n5("calcite-list", null, [...this.renderLayerListItemCollection(a9)]))));
  }
  _enableSnappingSwitchChange(e11) {
    this.snappingOptions.enabled = e11.target.checked;
  }
  _featureEnabledSwitchChange(e11) {
    this.snappingOptions.featureEnabled = e11.target.checked;
  }
  _itemTitleMatchesFilter(e11, t6) {
    return t6.test(e11.title);
  }
  _selfEnabledSwitchChange(e11) {
    this.snappingOptions.selfEnabled = e11.target.checked;
  }
  async _handleLayerListItemChange(e11) {
    e11.checked ? this.viewModel.enableSnappingForLayer(e11.value) : this.viewModel.disableSnappingForLayer(e11.value);
  }
};
e3([y2()], m10.prototype, "_layerListFilter", void 0), e3([y2()], m10.prototype, "label", null), e3([y2(), e5("esri/widgets/support/SnappingControls/t9n/SnappingControls")], m10.prototype, "messages", void 0), e3([y2(), e5("esri/t9n/common")], m10.prototype, "messagesCommon", void 0), e3([y2()], m10.prototype, "snappingOptions", null), e3([y2()], m10.prototype, "view", null), e3([y2()], m10.prototype, "viewModel", null), e3([y2()], m10.prototype, "visibleElements", void 0), e3([s4("visibleElements")], m10.prototype, "castVisibleElements", null), m10 = e3([n3("esri.widgets.support.SnappingControls")], m10);
var b3 = m10;

// node_modules/@arcgis/core/widgets/Sketch.js
var f6 = { base: "esri-sketch", verticalLayout: "esri-sketch--vertical", panel: "esri-sketch__panel", infoPanel: "esri-sketch__info-panel", section: "esri-sketch__section", toolSection: "esri-sketch__tool-section", infoSection: "esri-sketch__info-section", infoCountSection: "esri-sketch__info-count-section", menuContainer: "esri-sketch__menu-container", menuHeader: "esri-sketch__menu-header", menuTitle: "esri-sketch__menu-title", featureCountBadge: "esri-sketch__feature-count-badge", featureCountText: "esri-sketch__feature-count-text", featureCountNumber: "esri-sketch__feature-count-number", actionToggle: "esri-sketch__action-toggle", actionToggleOn: "esri-sketch__action-toggle--on", actionTitle: "esri-sketch__item-action-title", actionIcon: "esri-sketch__item-action-icon", disabled: "esri-disabled", esriWidget: "esri-widget", rotating: "esri-rotating", widgetIcon: "esri-icon-edit" };
var y6 = { createTools: { point: true, polyline: true, polygon: true, rectangle: true, circle: true }, selectionTools: { "rectangle-selection": true, "lasso-selection": true }, undoRedoMenu: true, settingsMenu: true, snappingControls: true, snappingControlsElements: { header: false, enabledToggle: true, selfEnabledToggle: true, featureEnabledToggle: true, layerList: true } };
var C = class extends M {
  constructor(e11, t6) {
    super(e11, t6), this._activeCreateOptions = null, this._menuOpen = false, this._selectionToolbar = null, this._snappingControls = null, this._viewModelHandlesGroup = null, this.availableCreateTools = ["point", "polyline", "polygon", "rectangle", "circle"], this.creationMode = "continuous", this.iconClass = f6.widgetIcon, this.layout = "horizontal", this.messages = null, this.visibleElements = { ...y6 }, this._activateCreateTool = this._activateCreateTool.bind(this), this.viewModel = (e11 == null ? void 0 : e11.viewModel) || new re();
  }
  initialize() {
    const { layer: e11, view: i7 } = this, s11 = new v4({ view: "2d" === (i7 == null ? void 0 : i7.type) ? i7 : null, layers: e11 ? [e11] : null });
    this.addHandles([l(() => this.viewModel, (e12) => {
      this._viewModelHandlesGroup = h(this._viewModelHandlesGroup), e12 && (this._viewModelHandlesGroup = r3([e12.on("create", (e13) => {
        this.scheduleRender(), this._onCreateOperation(e13);
      }), e12.on("update", () => this.scheduleRender()), e12.on("delete", (e13) => this.emit("delete", e13)), e12.on("undo", () => this.scheduleRender()), e12.on("redo", () => this.scheduleRender()), l(() => e12.layer, (e13) => {
        this._selectionToolbar.layers = e13 ? [e13] : null;
      }), l(() => e12.view, (e13) => {
        this._selectionToolbar.view = "2d" === (e13 == null ? void 0 : e13.type) ? e13 : null, this._setUpSnappingControls();
      }), l(() => e12.state, () => this.notifyChange("state"))]));
    }, w), f2(() => s11.activeToolInfo, () => this.viewModel.cancel()), s11.on("complete", (e12) => this._onSelectionOperationComplete(e12))]), this._selectionToolbar = s11, this._setUpSnappingControls();
  }
  loadDependencies() {
    return Promise.all([import("./calcite-action-V4YAO42G.js"), import("./calcite-icon-D7JSDQFP.js")]);
  }
  destroy() {
    this._selectionToolbar.destroy(), this._viewModelHandlesGroup = h(this._viewModelHandlesGroup), this._snappingControls = s(this._snappingControls);
  }
  get activeTool() {
    const e11 = this._selectionToolbar.activeToolInfo;
    if (e11)
      switch (e11.toolName) {
        case "lasso":
          return "lasso-selection";
        case "rectangle":
          return "rectangle-selection";
        case "default":
          return "custom-selection";
      }
    return this.viewModel.activeTool;
  }
  get createGraphic() {
    return this.viewModel.createGraphic;
  }
  get defaultCreateOptions() {
    return this.viewModel.defaultCreateOptions;
  }
  set defaultCreateOptions(e11) {
    this.viewModel.defaultCreateOptions = e11;
  }
  get defaultUpdateOptions() {
    return this.viewModel.defaultUpdateOptions;
  }
  set defaultUpdateOptions(e11) {
    this.viewModel.defaultUpdateOptions = e11;
  }
  get label() {
    var _a, _b;
    return (_b = (_a = this.messages) == null ? void 0 : _a.widgetLabel) != null ? _b : "";
  }
  set label(e11) {
    this._overrideIfSome("label", e11);
  }
  get labelOptions() {
    return this.viewModel.labelOptions;
  }
  set labelOptions(e11) {
    this.viewModel.labelOptions = e11;
  }
  get layer() {
    return this.viewModel.layer;
  }
  set layer(e11) {
    this.viewModel.layer = e11;
  }
  get snappingOptions() {
    return this.viewModel.snappingOptions;
  }
  set snappingOptions(e11) {
    this.viewModel.snappingOptions = e11;
  }
  get state() {
    return this._selectionToolbar.activeToolInfo ? "active" : this.viewModel.state;
  }
  get tooltipOptions() {
    return this.viewModel.tooltipOptions;
  }
  set tooltipOptions(e11) {
    this.viewModel.tooltipOptions = e11;
  }
  get updateGraphics() {
    return this.viewModel.updateGraphics;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e11) {
    this.viewModel.view = e11;
  }
  set viewModel(e11) {
    const t6 = this._get("viewModel");
    e11 !== t6 && (t6 && s(t6), this._set("viewModel", e11));
  }
  castVisibleElements(e11) {
    const t6 = { ...y6, ...e11, createTools: { ...y6.createTools, ...e11 == null ? void 0 : e11.createTools }, selectionTools: { ...y6.selectionTools, ...e11 == null ? void 0 : e11.selectionTools }, snappingControlsElements: { ...y6.snappingControlsElements, ...e11 == null ? void 0 : e11.snappingControlsElements } };
    return r(this._snappingControls) && (this._snappingControls.visibleElements = t6.snappingControlsElements), t6;
  }
  create(e11, t6) {
    this._activeCreateOptions = t6 || null, this.viewModel.create(e11, t6);
  }
  update(e11, t6) {
    return this.viewModel.update(e11, t6);
  }
  complete() {
    this.viewModel.complete();
  }
  cancel() {
    this._selectionToolbar.cancel(), this.viewModel.cancel();
  }
  undo() {
    var _a;
    this.viewModel.undo(), (_a = this.view) == null ? void 0 : _a.focus();
  }
  redo() {
    var _a;
    this.viewModel.redo(), (_a = this.view) == null ? void 0 : _a.focus();
  }
  delete() {
    this.viewModel.delete();
  }
  render() {
    const { label: e11, layout: t6, viewModel: { state: o5 } } = this;
    return n5("div", { "aria-label": e11, class: this.classes(f6.base, f6.esriWidget, { [f6.disabled]: "disabled" === o5, [f6.verticalLayout]: "vertical" === t6 }) }, n5("div", { role: "toolbar", class: f6.panel }, this.renderTopPanelContents()), n5("div", { class: this.classes(f6.panel, f6.infoPanel) }, this.renderInfoPanelContents()));
  }
  renderTopPanelContents() {
    const e11 = this.classes(f6.section, f6.toolSection), { availableCreateTools: t6, visibleElements: o5 } = this;
    return [n5("div", { role: "menu", key: "selection-button-container", class: e11 }, this.renderDefaultSelectionButton(), this.renderSelectionToolbar()), t6 && t6.length ? n5("div", { role: "menu", class: e11 }, this.renderDrawButtons()) : null, o5.undoRedoMenu ? n5("div", { role: "menu", key: "undo-redo-menu-button-container", class: e11 }, this.renderUndoRedoMenuButtons()) : null, o5.settingsMenu ? n5("div", { key: "settings-menu-button-container", class: f6.section }, this.renderSettingsMenuButton()) : null];
  }
  renderInfoPanelContents() {
    return this._menuOpen ? this.renderSettingsMenu() : this.updateGraphics.length ? [n5("div", { class: this.classes(f6.section, f6.infoSection, f6.infoCountSection), key: "feature-count-container" }, this.renderFeatureCount()), n5("div", { class: this.classes(f6.section, f6.infoSection), key: "delete-button-container" }, this.renderDeleteButton())] : void 0;
  }
  renderSettingsMenu() {
    const { settings: e11 } = this.messages;
    return [n5("div", { role: "menu", class: f6.menuContainer, key: "settings-menu-container" }, n5("header", { class: f6.menuHeader, key: "settings-menu-header" }, n5("span", { class: f6.menuTitle }, e11)), this.renderSnappingControls())];
  }
  renderSnappingControls() {
    const { snappingControls: e11 } = this.visibleElements;
    if (r(this._snappingControls) && e11)
      return this._snappingControls.render();
  }
  renderFeatureCount() {
    const { layout: e11, messages: t6, updateGraphics: { length: o5 } } = this, i7 = s5(1 === o5 ? t6.featureCount : t6.featuresCount, { count: o5 });
    return n5("div", { class: f6.featureCountBadge, "aria-label": i7 }, n5("span", { class: f6.featureCountNumber }, "vertical" === e11 ? o5 : i7));
  }
  renderDeleteButton() {
    const e11 = this.messages.deleteFeature;
    return n5("calcite-action", { bind: this, label: e11, onclick: this.delete, scale: "s", text: e11, title: e11 }, n5("calcite-icon", { scale: "s", icon: "trash" }));
  }
  renderDefaultSelectionButton() {
    if (!this.viewModel.updateOnGraphicClick)
      return;
    const e11 = this.messages.selectFeature;
    return n5("calcite-action", { active: "ready" === this.state, bind: this, label: e11, onclick: this._activateDefaultSelectTool, scale: "s", text: e11, title: e11 }, n5("calcite-icon", { scale: "s", icon: "cursor" }));
  }
  renderSelectionToolbar() {
    var _a;
    if ("2d" !== ((_a = this.view) == null ? void 0 : _a.type))
      return;
    const e11 = this.visibleElements.selectionTools;
    return this._selectionToolbar.visibleElements = { lassoTool: !!e11["lasso-selection"], rectangleTool: !!e11["rectangle-selection"] }, this._selectionToolbar.render();
  }
  renderDrawButtons() {
    const e11 = this.visibleElements.createTools;
    return this.availableCreateTools.map((t6) => "point" === t6 && e11.point ? this.renderPointButton() : "polyline" === t6 && e11.polyline ? this.renderPolylineButton() : "polygon" === t6 && e11.polygon ? this.renderPolygonButton() : "rectangle" === t6 && e11.rectangle ? this.renderRectangleButton() : "circle" === t6 && e11.circle ? this.renderCircleButton() : void 0);
  }
  renderPointButton() {
    const e11 = "point", t6 = this.messages.drawPoint;
    return n5("calcite-action", { active: this.activeTool === e11, bind: this, label: t6, onclick: () => this._activateCreateTool(e11), scale: "s", text: t6, title: t6 }, n5("calcite-icon", { scale: "s", icon: "pin" }));
  }
  renderPolygonButton() {
    const e11 = "polygon", t6 = this.messages.drawPolygon;
    return n5("calcite-action", { active: this.activeTool === e11, bind: this, label: t6, onclick: () => this._activateCreateTool(e11), scale: "s", text: t6, title: t6 }, n5("calcite-icon", { scale: "s", icon: "polygon" }));
  }
  renderPolylineButton() {
    const e11 = "polyline", t6 = this.messages.drawPolyline;
    return n5("calcite-action", { active: this.activeTool === e11, bind: this, label: t6, onclick: () => this._activateCreateTool(e11), scale: "s", text: t6, title: t6 }, n5("calcite-icon", { scale: "s", icon: "line" }));
  }
  renderCircleButton() {
    const e11 = "circle", t6 = this.messages.drawCircle;
    return n5("calcite-action", { active: this.activeTool === e11, bind: this, label: t6, onclick: () => this._activateCreateTool(e11), scale: "s", text: t6, title: t6 }, n5("calcite-icon", { scale: "s", icon: "circle" }));
  }
  renderRectangleButton() {
    const e11 = "rectangle", t6 = this.messages.drawRectangle;
    return n5("calcite-action", { active: this.activeTool === e11, bind: this, label: t6, onclick: () => this._activateCreateTool(e11), scale: "s", text: t6, title: t6 }, n5("calcite-icon", { scale: "s", icon: "rectangle" }));
  }
  renderUndoRedoMenuButtons() {
    return [this.renderUndoButton(), this.renderRedoButton()];
  }
  renderUndoButton() {
    const e11 = this.messages.undo;
    return n5("calcite-action", { disabled: !this.viewModel.canUndo(), bind: this, label: e11, onclick: this.undo, scale: "s", text: e11, title: e11 }, n5("calcite-icon", { scale: "s", icon: f3(this.container) ? "redo" : "undo" }));
  }
  renderRedoButton() {
    const e11 = this.messages.redo;
    return n5("calcite-action", { disabled: !this.viewModel.canRedo(), bind: this, label: e11, onclick: this.redo, scale: "s", text: e11, title: e11 }, n5("calcite-icon", { scale: "s", icon: f3(this.container) ? "undo" : "redo" }));
  }
  renderSettingsMenuButton() {
    const e11 = this.messages.settings;
    return n5("calcite-action", { active: this._menuOpen, bind: this, label: e11, onclick: this._toggleMenu, scale: "s", text: e11, title: e11 }, n5("calcite-icon", { scale: "s", icon: "gear" }));
  }
  _activateCreateTool(e11) {
    this.activeTool !== e11 ? (this._selectionToolbar.cancel(), this.create(e11)) : this.cancel();
  }
  _onCreateOperation(e11) {
    if ("complete" !== e11.state)
      return;
    const { creationMode: t6 } = this, { type: o5 } = e11;
    if ("create" === o5) {
      const { tool: o6, graphic: i7 } = e11, s11 = this._activeCreateOptions;
      this._activeCreateOptions = null, "continuous" === t6 ? this.create(o6, s11) : "update" === t6 && this.update([i7]);
    }
  }
  _toggleMenu() {
    this._menuOpen = !this._menuOpen, this.scheduleRender();
  }
  _onSelectionOperationComplete(e11) {
    const { viewModel: { defaultUpdateOptions: t6 } } = this, { selection: o5 } = e11;
    if (!e11.aborted && o5.length) {
      const e12 = t6.tool, i7 = o5.length > 1 && "reshape" === e12 ? "transform" : e12;
      this.update(o5, { ...t6, tool: i7 });
    }
    this.notifyChange("state");
  }
  _activateDefaultSelectTool() {
    var _a;
    this.cancel(), (_a = this.view) == null ? void 0 : _a.focus();
  }
  _setUpSnappingControls() {
    const { snappingOptions: e11, view: t6 } = this;
    if (this._snappingControls = s(this._snappingControls), !e11 || !t6)
      return;
    const o5 = new b3({ snappingOptions: e11, view: t6, visibleElements: this.visibleElements.snappingControlsElements });
    this._snappingControls = o5;
  }
};
e3([y2()], C.prototype, "activeTool", null), e3([y2({ cast: (e11) => {
  if (!e11 || !e11.length)
    return null;
  const t6 = /* @__PURE__ */ new Set(["point", "polyline", "polygon", "rectangle", "circle"]);
  return e11.filter((e12) => t6.has(e12));
} })], C.prototype, "availableCreateTools", void 0), e3([y2({ readOnly: true })], C.prototype, "createGraphic", null), e3([y2()], C.prototype, "creationMode", void 0), e3([y2()], C.prototype, "defaultCreateOptions", null), e3([y2()], C.prototype, "defaultUpdateOptions", null), e3([y2()], C.prototype, "iconClass", void 0), e3([y2()], C.prototype, "label", null), e3([y2()], C.prototype, "labelOptions", null), e3([y2()], C.prototype, "layer", null), e3([y2({ type: ["horizontal", "vertical"] })], C.prototype, "layout", void 0), e3([y2(), e5("esri/widgets/Sketch/t9n/Sketch")], C.prototype, "messages", void 0), e3([y2()], C.prototype, "snappingOptions", null), e3([y2()], C.prototype, "state", null), e3([y2()], C.prototype, "tooltipOptions", null), e3([y2({ readOnly: true })], C.prototype, "updateGraphics", null), e3([y2()], C.prototype, "view", null), e3([y2(), e6(["create", "update", "undo", "redo"])], C.prototype, "viewModel", null), e3([y2()], C.prototype, "visibleElements", void 0), e3([s4("visibleElements")], C.prototype, "castVisibleElements", null), C = e3([n3("esri.widgets.Sketch")], C);
var T2 = C;

// dep:@arcgis_core_widgets_Sketch
var arcgis_core_widgets_Sketch_default = T2;
export {
  arcgis_core_widgets_Sketch_default as default
};
//# sourceMappingURL=@arcgis_core_widgets_Sketch.js.map
