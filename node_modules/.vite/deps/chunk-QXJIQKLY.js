import {
  h,
  o,
  x
} from "./chunk-GRWIJKD6.js";
import {
  r
} from "./chunk-7N2Z7KNR.js";
import {
  I
} from "./chunk-EQNT4A7P.js";
import {
  e
} from "./chunk-TFHLTN6F.js";
import {
  i,
  s
} from "./chunk-ZNRXLY4R.js";
import {
  has
} from "./chunk-HVKDYDPP.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/TiledDisplayObject.js
var r2 = class extends r {
  constructor(t, s2, i3, r3, h2, o2, n2 = h2, a = o2) {
    super(), this.triangleCountReportedInDebug = 0, this.triangleCount = 0, this.texture = null, this.key = new e(t), this.resolution = s2, this.x = i3, this.y = r3, this.width = h2, this.height = o2, this.rangeX = n2, this.rangeY = a;
  }
  destroy() {
    this.texture && (this.texture.dispose(), this.texture = null);
  }
  setTransform(i3) {
    const e2 = this.resolution / (i3.resolution * i3.pixelRatio), r3 = this.transforms.tileMat3, [h2, o2] = i3.toScreenNoRotation([0, 0], [this.x, this.y]), n2 = this.width / this.rangeX * e2, a = this.height / this.rangeY * e2;
    s(r3, n2, 0, 0, 0, a, 0, h2, o2, 1), i(this.transforms.dvs, i3.displayViewMat3, r3);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/TileContainer.js
var n = (e2, r3) => e2.key.level - r3.key.level != 0 ? e2.key.level - r3.key.level : e2.key.row - r3.key.row != 0 ? e2.key.row - r3.key.row : e2.key.col - r3.key.col;
var i2 = class extends o {
  constructor(e2) {
    super(), this._tileInfoView = e2;
  }
  get requiresDedicatedFBO() {
    return false;
  }
  renderChildren(e2) {
    this.sortChildren(n), this.setStencilReference(e2), super.renderChildren(e2);
  }
  createRenderParams(e2) {
    const { state: r3 } = e2, s2 = super.createRenderParams(e2);
    return s2.requiredLevel = this._tileInfoView.getClosestInfoForScale(r3.scale).level, s2.displayLevel = this._tileInfoView.tileInfo.scaleToZoom(r3.scale), s2;
  }
  prepareRenderPasses(r3) {
    const n2 = super.prepareRenderPasses(r3);
    return n2.push(r3.registerRenderPass({ name: "stencil", brushes: [h], drawPhase: I.DEBUG | I.MAP | I.HIGHLIGHT, target: () => this.getStencilTarget() })), has("esri-tiles-debug") && n2.push(r3.registerRenderPass({ name: "tileInfo", brushes: [x], drawPhase: I.DEBUG, target: () => this.children })), n2;
  }
  getStencilTarget() {
    return this.children;
  }
  setStencilReference(e2) {
    let r3 = 1;
    for (const s2 of this.children)
      s2.stencilRef = r3++;
  }
};

export {
  r2 as r,
  i2 as i
};
//# sourceMappingURL=chunk-QXJIQKLY.js.map
