import {
  a
} from "./chunk-ZPYDYUP5.js";
import {
  j
} from "./chunk-SZIJNKCV.js";
import {
  m as m2
} from "./chunk-6O43OEU5.js";
import {
  w2 as w
} from "./chunk-UWG37XSU.js";
import {
  o
} from "./chunk-RXYULINL.js";
import {
  K,
  Q,
  X,
  _
} from "./chunk-KAN4HXCG.js";
import {
  s as s3
} from "./chunk-VWYWOOPX.js";
import {
  u2 as u
} from "./chunk-7QMMKGW4.js";
import {
  e,
  m,
  n2 as n,
  y as y2
} from "./chunk-OOLCFNXJ.js";
import {
  s as s2
} from "./chunk-LIZHLHNA.js";
import {
  v
} from "./chunk-BTUHYGXO.js";
import {
  s2 as s
} from "./chunk-UA3YPL2R.js";
import {
  p,
  y
} from "./chunk-HVKDYDPP.js";
import {
  f,
  q,
  r,
  t
} from "./chunk-MIHB3CIK.js";

// node_modules/@arcgis/core/portal/PortalItemResource.js
var h = class extends m {
  constructor(t2) {
    super(t2), this.portalItem = null;
  }
  normalizeCtorArgs(t2) {
    return t2 && t2.portalItem && t2.path ? { ...t2, path: this._normalizePath(t2.path, t2.portalItem) } : t2;
  }
  set path(t2) {
    r(t2) && K(t2) ? s.getLogger(this.declaredClass).error("portalitemresource:invalid-path", "A portal item resource path must be relative") : this._set("path", t2);
  }
  _castPath(t2) {
    return this._normalizePath(t2, this.portalItem);
  }
  get url() {
    return this.portalItem && this.path ? `${this.portalItem.itemUrl}/resources/${this.path}` : null;
  }
  get itemRelativeUrl() {
    return this.portalItem && this.path ? `./resources/${this.path}` : null;
  }
  fetch(t2 = "json", r2) {
    const o2 = this.url;
    if (t(o2))
      throw new s2("portal-item-resource:fetch", "Portal item resource does not refer to a valid item or path");
    return this.portalItem.portal._request(o2, { responseType: t2, query: { token: this.portalItem.apiKey }, signal: q(r2, "signal") });
  }
  async update(t2, r2) {
    return (await import("./resourceUtils-XVK7VMTV.js")).addOrUpdateResource(this, "update", t2, r2);
  }
  hasPath() {
    return r(this.path);
  }
  _normalizePath(t2, r2) {
    return t(t2) ? t2 : (t2 = t2.replace(/^\/+/, ""), r(r2) && K(t2) && (t2 = _(t2, r2.itemUrl)), t2.replace(/^\/+/, "").replace(/^(\.\/)?resources\//, ""));
  }
};
e([y2()], h.prototype, "portalItem", void 0), e([y2({ type: String, value: null })], h.prototype, "path", null), e([s3("path")], h.prototype, "_castPath", null), e([y2({ type: String, readOnly: true })], h.prototype, "url", null), e([y2({ type: String, readOnly: true })], h.prototype, "itemRelativeUrl", null), h = e([n("esri.portal.PortalItemResource")], h);
var n2 = h;

// node_modules/@arcgis/core/portal/PortalRating.js
var e2 = class extends m {
  constructor(r2) {
    super(r2), this.created = null, this.rating = null;
  }
};
e([y2()], e2.prototype, "created", void 0), e([y2()], e2.prototype, "rating", void 0), e2 = e([n("esri.portal.PortalRating")], e2);
var c = e2;

// node_modules/@arcgis/core/portal/PortalItem.js
var f2;
var b = /* @__PURE__ */ new Set(["Map Service", "Feature Service", "Feature Collection", "Scene Service", "Image Service", "Stream Service", "Vector Tile Service", "GeoJson", "CSV", "KML", "WFS", "WMTS", "WMS", "Feed"]);
var k = /* @__PURE__ */ new Set(["KML", "GeoJson", "CSV"]);
var S = f2 = class extends u(m2) {
  constructor(e3) {
    super(e3), this.access = null, this.accessInformation = null, this.apiKey = null, this.applicationProxies = null, this.avgRating = null, this.categories = null, this.created = null, this.culture = null, this.description = null, this.extent = null, this.groupCategories = null, this.id = null, this.itemControl = null, this.licenseInfo = null, this.modified = null, this.name = null, this.numComments = null, this.numRatings = null, this.numViews = null, this.owner = null, this.ownerFolder = null, this.portal = null, this.screenshots = null, this.size = null, this.snippet = null, this.sourceJSON = null, this.spatialReference = null, this.tags = null, this.title = null, this.type = null, this.typeKeywords = null, this.url = null;
  }
  static from(e3) {
    return v(f2, e3);
  }
  destroy() {
    this.portal = null;
  }
  get displayName() {
    const e3 = this.type, t2 = this.typeKeywords || [];
    let i = e3;
    return "Feature Service" === e3 || "Feature Collection" === e3 ? i = t2.includes("Table") ? "Table" : t2.includes("Route Layer") ? "Route Layer" : t2.includes("Markup") ? "Markup" : "Feature Layer" : "Image Service" === e3 ? i = t2.includes("Elevation 3D Layer") ? "Elevation Layer" : t2.includes("Tiled Imagery") ? "Tiled Imagery Layer" : "Imagery Layer" : "Scene Service" === e3 ? i = "Scene Layer" : "Video Service" === e3 ? i = "Video Layer" : "Scene Package" === e3 ? i = "Scene Layer Package" : "Stream Service" === e3 ? i = "Feature Layer" : "Geoprocessing Service" === e3 && this.portal && this.portal.isPortal ? i = t2.includes("Web Tool") ? "Tool" : "Geoprocessing Service" : "Geocoding Service" === e3 ? i = "Locator" : "Geoenrichment Service" === e3 ? i = "GeoEnrichment Service" : "Microsoft Powerpoint" === e3 ? i = "Microsoft PowerPoint" : "GeoJson" === e3 ? i = "GeoJSON" : "Globe Service" === e3 ? i = "Globe Layer" : "Vector Tile Service" === e3 ? i = "Tile Layer" : "netCDF" === e3 ? i = "NetCDF" : "Map Service" === e3 ? i = t2.includes("Spatiotemporal") || !t2.includes("Hosted Service") && !t2.includes("Tiled") || t2.includes("Relational") ? "Map Image Layer" : "Tile Layer" : e3 && e3.toLowerCase().includes("add in") ? i = e3.replace(/(add in)/gi, "Add-In") : "datastore catalog service" === e3 ? i = "Big Data File Share" : "Compact Tile Package" === e3 ? i = "Tile Package (tpkx)" : "OGCFeatureServer" === e3 ? i = "OGC Feature Layer" : "web mapping application" === e3 && t2.includes("configurableApp") && (i = "Instant App"), i;
  }
  readExtent(e3) {
    return e3 && e3.length ? new w(e3[0][0], e3[0][1], e3[1][0], e3[1][1]) : null;
  }
  get iconUrl() {
    const e3 = this.type && this.type.toLowerCase() || "", i = this.typeKeywords || [], r2 = "esri/images/portal/", o2 = "16";
    let s4, a2 = false, n3 = false, l = false, p2 = false, c2 = false, d = false;
    return e3.indexOf("service") > 0 || "feature collection" === e3 || "kml" === e3 || "wms" === e3 || "wmts" === e3 || "wfs" === e3 ? (a2 = i.includes("Hosted Service"), "feature service" === e3 || "feature collection" === e3 || "kml" === e3 || "wfs" === e3 ? (n3 = i.includes("Table"), l = i.includes("Route Layer"), p2 = i.includes("Markup"), c2 = i.includes("Spatiotemporal"), d = i.includes("UtilityNetwork"), s4 = c2 && n3 ? "spatiotemporaltable" : n3 ? "table" : l ? "routelayer" : p2 ? "markup" : c2 ? "spatiotemporal" : a2 ? "featureshosted" : d ? "utilitynetwork" : "features") : s4 = "map service" === e3 || "wms" === e3 || "wmts" === e3 ? a2 || i.includes("Tiled") || "wmts" === e3 ? "maptiles" : "mapimages" : "scene service" === e3 ? i.includes("Line") ? "sceneweblayerline" : i.includes("3DObject") ? "sceneweblayermultipatch" : i.includes("Point") ? "sceneweblayerpoint" : i.includes("IntegratedMesh") ? "sceneweblayermesh" : i.includes("PointCloud") ? "sceneweblayerpointcloud" : i.includes("Polygon") ? "sceneweblayerpolygon" : i.includes("Building") ? "sceneweblayerbuilding" : i.includes("Voxel") ? "sceneweblayervoxel" : "sceneweblayer" : "image service" === e3 ? i.includes("Elevation 3D Layer") ? "elevationlayer" : i.includes("Tiled Imagery") ? "tiledimagerylayer" : "imagery" : "stream service" === e3 ? "streamlayer" : "video service" === e3 ? "mediaservice" : "vector tile service" === e3 ? "vectortile" : "datastore catalog service" === e3 ? "datastorecollection" : "geocoding service" === e3 ? "geocodeservice" : "geoprocessing service" === e3 ? i.includes("Web Tool") && this.portal && this.portal.isPortal ? "tool" : "layers" : "geodata service" === e3 ? "geodataservice" : "layers") : s4 = "web map" === e3 || "cityengine web scene" === e3 ? "maps" : "web scene" === e3 ? i.includes("ViewingMode-Local") ? "webscenelocal" : "websceneglobal" : "web mapping application" === e3 && i.includes("configurableApp") ? "instantapps" : "web mapping application" === e3 || "mobile application" === e3 || "application" === e3 || "operation view" === e3 || "desktop application" === e3 ? "apps" : "map document" === e3 || "map package" === e3 || "published map" === e3 || "scene document" === e3 || "globe document" === e3 || "basemap package" === e3 || "mobile basemap package" === e3 || "mobile map package" === e3 || "project package" === e3 || "project template" === e3 || "pro map" === e3 || "layout" === e3 || "layer" === e3 && i.includes("ArcGIS Pro") || "explorer map" === e3 && i.indexOf("Explorer Document") ? "mapsgray" : "service definition" === e3 || "csv" === e3 || "shapefile" === e3 || "cad drawing" === e3 || "geojson" === e3 || "360 vr experience" === e3 || "netcdf" === e3 || "administrative report" === e3 ? "datafiles" : "explorer add in" === e3 || "desktop add in" === e3 || "windows viewer add in" === e3 || "windows viewer configuration" === e3 ? "appsgray" : "arcgis pro add in" === e3 || "arcgis pro configuration" === e3 ? "addindesktop" : "rule package" === e3 || "file geodatabase" === e3 || "sqlite geodatabase" === e3 || "csv collection" === e3 || "kml collection" === e3 || "windows mobile package" === e3 || "map template" === e3 || "desktop application template" === e3 || "gml" === e3 || "arcpad package" === e3 || "code sample" === e3 || "form" === e3 || "document link" === e3 || "earth configuration" === e3 || "operations dashboard add in" === e3 || "rules package" === e3 || "image" === e3 || "workflow manager package" === e3 || "explorer map" === e3 && i.includes("Explorer Mapping Application") || i.includes("Document") ? "datafilesgray" : "network analysis service" === e3 || "geoprocessing service" === e3 || "geodata service" === e3 || "geometry service" === e3 || "geoprocessing package" === e3 || "locator package" === e3 || "geoprocessing sample" === e3 || "workflow manager service" === e3 ? "toolsgray" : "layer" === e3 || "layer package" === e3 || "explorer layer" === e3 ? "layersgray" : "scene package" === e3 ? "scenepackage" : "mobile scene package" === e3 ? "mobilescenepackage" : "tile package" === e3 || "compact tile package" === e3 ? "tilepackage" : "task file" === e3 ? "taskfile" : "report template" === e3 ? "report-template" : "statistical data collection" === e3 ? "statisticaldatacollection" : "insights workbook" === e3 ? "workbook" : "insights model" === e3 ? "insightsmodel" : "insights page" === e3 ? "insightspage" : "insights theme" === e3 ? "insightstheme" : "hub initiative" === e3 ? "hubinitiative" : "hubpage" === e3 ? "hubpage" : "hub event" === e3 ? "hubevent" : "hub site application" === e3 ? "hubsite" : "hub project" === e3 ? "hubproject" : "relational database connection" === e3 ? "relationaldatabaseconnection" : "big data file share" === e3 ? "datastorecollection" : "image collection" === e3 ? "imagecollection" : "style" === e3 ? "style" : "desktop style" === e3 ? "desktopstyle" : "dashboard" === e3 ? "dashboard" : "raster function template" === e3 ? "rasterprocessingtemplate" : "vector tile package" === e3 ? "vectortilepackage" : "ortho mapping project" === e3 ? "orthomappingproject" : "ortho mapping template" === e3 ? "orthomappingtemplate" : "solution" === e3 ? "solutions" : "geopackage" === e3 ? "geopackage" : "deep learning package" === e3 ? "deeplearningpackage" : "real time analytic" === e3 ? "realtimeanalytics" : "big data analytic" === e3 ? "bigdataanalytics" : "feed" === e3 ? "feed" : "excalibur imagery project" === e3 ? "excaliburimageryproject" : "notebook" === e3 ? "notebook" : "storymap" === e3 ? "storymap" : "survey123 add in" === e3 ? "survey123addin" : "mission" === e3 ? "mission" : "mission report" === e3 ? "missionreport" : "quickcapture project" === e3 ? "quickcaptureproject" : "pro report" === e3 ? "proreport" : "pro report template" === e3 ? "proreporttemplate" : "urban model" === e3 ? "urbanmodel" : "web experience" === e3 ? "experiencebuilder" : "web experience template" === e3 ? "webexperiencetemplate" : "experience builder widget" === e3 ? "experiencebuilderwidget" : "experience builder widget package" === e3 ? "experiencebuilderwidgetpackage" : "workflow" === e3 ? "workflow" : "insights script" === e3 ? "insightsscript" : "kernel gateway connection" === e3 ? "kernelgatewayconnection" : "hub initiative template" === e3 ? "hubinitiativetemplate" : "storymap theme" === e3 ? "storymaptheme" : "knowledge graph" === e3 ? "knowledgegraph" : "native application" === e3 ? "nativeapp" : "native application installer" === e3 ? "nativeappinstaller" : "link chart" === e3 ? "linkchart" : "investigation" === e3 ? "investigation" : "ogcfeatureserver" === e3 ? "features" : "pro project" === e3 ? "proproject" : "insights workbook package" === e3 ? "insightsworkbookpackage" : "apache parquet" === e3 ? "apacheparquet" : "notebook code snippets" === e3 || "notebook code snippet library" === e3 ? "notebookcodesnippets" : "suitability model" === e3 ? "suitabilitymodel" : "esri classifier definition" === e3 ? "classifierdefinition" : "esri classification schema" === e3 ? "classificationschema" : "insights data engineering workbook" === e3 ? "dataengineeringworkbook" : "insights data engineering model" === e3 ? "dataengineeringmodel" : "deep learning studio project" === e3 ? "deeplearningproject" : "discussion" === e3 ? "discussion" : "maps", s4 ? a(r2 + s4 + o2 + ".png") : null;
  }
  get isLayer() {
    return null != this.type && b.has(this.type);
  }
  get itemPageUrl() {
    var _a;
    const e3 = (_a = this.portal) == null ? void 0 : _a.itemPageUrl;
    return e3 && this.id ? `${e3}?id=${this.id}` : null;
  }
  get itemUrl() {
    var _a;
    const e3 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    return e3 && this.id ? `${e3}/content/items/${this.id}` : null;
  }
  get thumbnailUrl() {
    var _a, _b;
    const e3 = this.itemUrl, t2 = this.thumbnail;
    return e3 && t2 ? (_b = (_a = this.portal) == null ? void 0 : _a._normalizeUrl(`${e3}/info/${t2}?f=json`)) != null ? _b : null : null;
  }
  get userItemUrl() {
    const e3 = this.get("portal.restUrl");
    if (!e3)
      return null;
    const t2 = this.owner || this.get("portal.user.username");
    if (!t2)
      return null;
    return `${e3}/content/users/${this.ownerFolder ? `${t2}/${this.ownerFolder}` : t2}/items/${this.id}`;
  }
  load(e3) {
    var _a;
    const t2 = (_a = this.portal) != null ? _a : this.portal = j.getDefault(), i = t2.load(e3).then(() => this.sourceJSON ? this.sourceJSON : this.id && this.itemUrl ? t2._request(this.itemUrl, { signal: r(e3) ? e3.signal : null, query: { token: this.apiKey } }) : {}).then((e4) => {
      this.sourceJSON = e4, this.read(e4);
    });
    return this.addResolvingPromise(i), Promise.resolve(this);
  }
  async addRating(e3) {
    const t2 = { method: "post", query: {} };
    return e3 instanceof c && (e3 = e3.rating), null == e3 || isNaN(e3) || "number" != typeof e3 || (t2.query.rating = e3), this.portal ? (await this.portal._request(this.itemUrl + "/addRating", t2), new c({ rating: e3, created: new Date() })) : null;
  }
  clone() {
    const e3 = { access: this.access, accessInformation: this.accessInformation, applicationProxies: y(this.applicationProxies), avgRating: this.avgRating, categories: y(this.categories), created: y(this.created), culture: this.culture, description: this.description, extent: y(this.extent), groupCategories: y(this.groupCategories), id: this.id, itemControl: this.itemControl, licenseInfo: this.licenseInfo, modified: y(this.modified), name: this.name, numComments: this.numComments, numRatings: this.numRatings, numViews: this.numViews, owner: this.owner, ownerFolder: this.ownerFolder, portal: this.portal, screenshots: y(this.screenshots), size: this.size, snippet: this.snippet, spatialReference: this.spatialReference, tags: y(this.tags), thumbnail: this.thumbnail, title: this.title, type: this.type, typeKeywords: y(this.typeKeywords), url: this.url };
    return this.loaded && (e3.loadStatus = "loaded"), new f2({ sourceJSON: this.sourceJSON }).set(e3);
  }
  createPostQuery() {
    const e3 = this.toJSON();
    for (const i of ["tags", "typeKeywords", "categories"])
      e3[i] && (e3[i] = e3[i].join(", "));
    const { extent: t2 } = e3;
    return t2 && (e3.extent = JSON.stringify(t2)), e3;
  }
  async deleteRating() {
    await f(this.portal)._request(this.itemUrl + "/deleteRating", { method: "post" });
  }
  fetchData(e3 = "json", t2) {
    return f(this.portal)._request(this.itemUrl + "/data", { responseType: e3, ...t2, query: { token: this.apiKey } });
  }
  async fetchRating(e3) {
    const t2 = await f(this.portal)._request(this.itemUrl + "/rating", { query: { token: this.apiKey }, ...e3 });
    return null != t2.rating ? (t2.created = new Date(t2.created), new c(t2)) : null;
  }
  fetchRelatedItems(e3, t2) {
    return f(this.portal)._requestToTypedArray(this.itemUrl + "/relatedItems", { query: { ...e3, token: this.apiKey }, ...t2 }, f2);
  }
  getThumbnailUrl(e3) {
    let t2 = this.thumbnailUrl;
    return t2 && e3 && (t2 += `&w=${e3}`), t2;
  }
  reload() {
    var _a;
    return f(this.portal)._request((_a = this.itemUrl) != null ? _a : "", { cacheBust: true, query: { token: this.apiKey } }).then((e3) => (this.sourceJSON = e3, this.read(e3), this));
  }
  update(e3) {
    return this.id ? this.load().then(() => f(this.portal)._signIn()).then(() => {
      const t2 = e3 && e3.data, i = { method: "post" };
      i.query = this.createPostQuery();
      for (const e4 in i.query)
        null === i.query[e4] && (i.query[e4] = "");
      return i.query.clearEmptyFields = true, null != t2 && ("string" == typeof t2 ? i.query.text = t2 : "object" == typeof t2 && (i.query.text = JSON.stringify(t2))), this.portal._request(`${this.userItemUrl}/update`, i).then(() => this.reload());
    }) : Promise.reject(new s2("portal:item-does-not-exist", "The item does not exist yet and cannot be updated"));
  }
  updateThumbnail(e3) {
    return this.id ? this.load().then(() => this.portal._signIn()).then(() => {
      const t2 = e3.thumbnail, i = e3.filename, r2 = { method: "post" };
      if ("string" == typeof t2)
        X(t2) ? r2.query = { data: t2 } : r2.query = { url: Q(t2) }, r(i) && (r2.query.filename = i);
      else {
        const e4 = new FormData();
        r(i) ? e4.append("file", t2, i) : e4.append("file", t2), r2.body = e4;
      }
      return this.portal._request(`${this.userItemUrl}/updateThumbnail`, r2).then(() => this.reload());
    }) : Promise.reject(new s2("portal:item-does-not-exist", "The item does not exist yet and cannot be updated"));
  }
  async fetchResources(e3 = {}, t2) {
    return (await import("./resourceUtils-XVK7VMTV.js")).fetchResources(this, e3, t2);
  }
  async addResource(e3, t2, i) {
    const r2 = await import("./resourceUtils-XVK7VMTV.js");
    return e3.portalItem = this, r2.addOrUpdateResource(e3, "add", t2, i);
  }
  async removeResource(e3, t2) {
    const r2 = await import("./resourceUtils-XVK7VMTV.js");
    if (e3.portalItem && e3.portalItem.itemUrl !== this.itemUrl)
      throw new s2("removeresource:portal-item-mismatch", "The portal item associated with the provided resource does not match the item");
    return r2.removeResource(this, e3, t2);
  }
  async removeAllResources(e3) {
    return (await import("./resourceUtils-XVK7VMTV.js")).removeAllResources(this, e3);
  }
  resourceFromPath(e3) {
    return new n2({ portalItem: this, path: e3 });
  }
  toJSON() {
    const e3 = this.extent, t2 = { accessInformation: this.accessInformation, categories: y(this.categories), created: this.created && this.created.getTime(), description: this.description, extent: e3 && [[e3.xmin, e3.ymin], [e3.xmax, e3.ymax]], id: this.id, licenseInfo: this.licenseInfo, modified: this.modified && this.modified.getTime(), name: this.name, owner: this.owner, ownerFolder: this.ownerFolder, snippet: this.snippet, spatialReference: this.spatialReference, tags: y(this.tags), thumbnail: this.thumbnail, title: this.title, type: this.type, typeKeywords: y(this.typeKeywords), url: this.url };
    return p(t2);
  }
  static fromJSON(e3) {
    if (!e3)
      return null;
    if (e3.declaredClass)
      throw new Error("JSON object is already hydrated");
    return new f2({ sourceJSON: e3 });
  }
  _getPostQuery() {
    const e3 = this.toJSON();
    for (const t2 in e3)
      "tags" === t2 && null !== e3[t2] && (e3[t2] = e3[t2].join(", ")), "typeKeywords" === t2 && null !== e3[t2] && (e3[t2] = e3[t2].join(", ")), "extent" === t2 && e3[t2] && (e3[t2] = JSON.stringify(e3[t2]));
    return e3;
  }
};
e([y2({ type: ["private", "shared", "org", "public"] })], S.prototype, "access", void 0), e([y2()], S.prototype, "accessInformation", void 0), e([y2({ type: String })], S.prototype, "apiKey", void 0), e([y2({ json: { read: { source: "appProxies" } } })], S.prototype, "applicationProxies", void 0), e([y2()], S.prototype, "avgRating", void 0), e([y2()], S.prototype, "categories", void 0), e([y2({ type: Date })], S.prototype, "created", void 0), e([y2()], S.prototype, "culture", void 0), e([y2()], S.prototype, "description", void 0), e([y2({ readOnly: true })], S.prototype, "displayName", null), e([y2({ type: w })], S.prototype, "extent", void 0), e([o("extent")], S.prototype, "readExtent", null), e([y2()], S.prototype, "groupCategories", void 0), e([y2({ readOnly: true })], S.prototype, "iconUrl", null), e([y2()], S.prototype, "id", void 0), e([y2({ readOnly: true })], S.prototype, "isLayer", null), e([y2()], S.prototype, "itemControl", void 0), e([y2({ readOnly: true })], S.prototype, "itemPageUrl", null), e([y2({ readOnly: true })], S.prototype, "itemUrl", null), e([y2()], S.prototype, "licenseInfo", void 0), e([y2({ type: Date })], S.prototype, "modified", void 0), e([y2()], S.prototype, "name", void 0), e([y2()], S.prototype, "numComments", void 0), e([y2()], S.prototype, "numRatings", void 0), e([y2()], S.prototype, "numViews", void 0), e([y2()], S.prototype, "owner", void 0), e([y2()], S.prototype, "ownerFolder", void 0), e([y2({ type: j })], S.prototype, "portal", void 0), e([y2()], S.prototype, "screenshots", void 0), e([y2()], S.prototype, "size", void 0), e([y2()], S.prototype, "snippet", void 0), e([y2()], S.prototype, "sourceJSON", void 0), e([y2({ type: String })], S.prototype, "spatialReference", void 0), e([y2()], S.prototype, "tags", void 0), e([y2()], S.prototype, "thumbnail", void 0), e([y2({ readOnly: true })], S.prototype, "thumbnailUrl", null), e([y2()], S.prototype, "title", void 0), e([y2()], S.prototype, "type", void 0), e([y2()], S.prototype, "typeKeywords", void 0), e([y2({ type: String, json: { read(e3, t2) {
  var _a;
  if (k.has(t2.type)) {
    const t3 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    e3 || (e3 = t3 && this.id ? `${t3}/content/items/${this.id}/data` : null);
  }
  return e3;
} } })], S.prototype, "url", void 0), e([y2({ readOnly: true })], S.prototype, "userItemUrl", null), S = f2 = e([n("esri.portal.PortalItem")], S);
var x = S;

export {
  x
};
//# sourceMappingURL=chunk-BYSA56OH.js.map
