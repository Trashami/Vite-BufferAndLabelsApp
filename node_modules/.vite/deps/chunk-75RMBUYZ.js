import {
  a,
  n
} from "./chunk-OSHI574D.js";

// node_modules/@arcgis/core/chunks/vec2.js
function a2(t, n2) {
  return t[0] = n2[0], t[1] = n2[1], t;
}
function r(t, n2, a3) {
  return t[0] = n2, t[1] = a3, t;
}
function s(t, n2, a3) {
  return t[0] = n2[0] + a3[0], t[1] = n2[1] + a3[1], t;
}
function o(t, n2, a3) {
  return t[0] = n2[0] - a3[0], t[1] = n2[1] - a3[1], t;
}
function u(t, n2, a3) {
  return t[0] = n2[0] * a3[0], t[1] = n2[1] * a3[1], t;
}
function e(t, n2, a3) {
  return t[0] = n2[0] / a3[0], t[1] = n2[1] / a3[1], t;
}
function c(t, n2) {
  return t[0] = Math.ceil(n2[0]), t[1] = Math.ceil(n2[1]), t;
}
function i(t, n2) {
  return t[0] = Math.floor(n2[0]), t[1] = Math.floor(n2[1]), t;
}
function f(t, n2, a3) {
  return t[0] = Math.min(n2[0], a3[0]), t[1] = Math.min(n2[1], a3[1]), t;
}
function M(t, n2, a3) {
  return t[0] = Math.max(n2[0], a3[0]), t[1] = Math.max(n2[1], a3[1]), t;
}
function h(t, n2) {
  return t[0] = Math.round(n2[0]), t[1] = Math.round(n2[1]), t;
}
function l(t, n2, a3) {
  return t[0] = n2[0] * a3, t[1] = n2[1] * a3, t;
}
function d(t, n2, a3, r2) {
  return t[0] = n2[0] + a3[0] * r2, t[1] = n2[1] + a3[1] * r2, t;
}
function m(t, n2) {
  const a3 = n2[0] - t[0], r2 = n2[1] - t[1];
  return Math.sqrt(a3 * a3 + r2 * r2);
}
function b(t, n2) {
  const a3 = n2[0] - t[0], r2 = n2[1] - t[1];
  return a3 * a3 + r2 * r2;
}
function q(t) {
  const n2 = t[0], a3 = t[1];
  return Math.sqrt(n2 * n2 + a3 * a3);
}
function p(t) {
  const n2 = t[0], a3 = t[1];
  return n2 * n2 + a3 * a3;
}
function g(t, n2) {
  return t[0] = -n2[0], t[1] = -n2[1], t;
}
function x(t, n2) {
  return t[0] = 1 / n2[0], t[1] = 1 / n2[1], t;
}
function v(t, n2) {
  const a3 = n2[0], r2 = n2[1];
  let s2 = a3 * a3 + r2 * r2;
  return s2 > 0 && (s2 = 1 / Math.sqrt(s2), t[0] = n2[0] * s2, t[1] = n2[1] * s2), t;
}
function j(t, n2) {
  return t[0] * n2[0] + t[1] * n2[1];
}
function y(t, n2, a3) {
  const r2 = n2[0] * a3[1] - n2[1] * a3[0];
  return t[0] = t[1] = 0, t[2] = r2, t;
}
function A(t, n2, a3, r2) {
  const s2 = n2[0], o2 = n2[1];
  return t[0] = s2 + r2 * (a3[0] - s2), t[1] = o2 + r2 * (a3[1] - o2), t;
}
function P(n2, a3) {
  a3 = a3 || 1;
  const r2 = 2 * n() * Math.PI;
  return n2[0] = Math.cos(r2) * a3, n2[1] = Math.sin(r2) * a3, n2;
}
function _(t, n2, a3) {
  const r2 = n2[0], s2 = n2[1];
  return t[0] = a3[0] * r2 + a3[2] * s2, t[1] = a3[1] * r2 + a3[3] * s2, t;
}
function z(t, n2, a3) {
  const r2 = n2[0], s2 = n2[1];
  return t[0] = a3[0] * r2 + a3[2] * s2 + a3[4], t[1] = a3[1] * r2 + a3[3] * s2 + a3[5], t;
}
function D(t, n2, a3) {
  const r2 = n2[0], s2 = n2[1];
  return t[0] = a3[0] * r2 + a3[3] * s2 + a3[6], t[1] = a3[1] * r2 + a3[4] * s2 + a3[7], t;
}
function I(t, n2, a3) {
  const r2 = n2[0], s2 = n2[1];
  return t[0] = a3[0] * r2 + a3[4] * s2 + a3[12], t[1] = a3[1] * r2 + a3[5] * s2 + a3[13], t;
}
function L(t, n2, a3, r2) {
  const s2 = n2[0] - a3[0], o2 = n2[1] - a3[1], u2 = Math.sin(r2), e2 = Math.cos(r2);
  return t[0] = s2 * e2 - o2 * u2 + a3[0], t[1] = s2 * u2 + o2 * e2 + a3[1], t;
}
function O(t, n2) {
  const a3 = t[0], r2 = t[1], s2 = n2[0], o2 = n2[1];
  let u2 = a3 * a3 + r2 * r2;
  u2 > 0 && (u2 = 1 / Math.sqrt(u2));
  let e2 = s2 * s2 + o2 * o2;
  e2 > 0 && (e2 = 1 / Math.sqrt(e2));
  const c2 = (a3 * s2 + r2 * o2) * u2 * e2;
  return c2 > 1 ? 0 : c2 < -1 ? Math.PI : Math.acos(c2);
}
function S(t) {
  return "vec2(" + t[0] + ", " + t[1] + ")";
}
function E(t, n2) {
  return t[0] === n2[0] && t[1] === n2[1];
}
function k(t, a3) {
  const r2 = t[0], s2 = t[1], o2 = a3[0], u2 = a3[1], e2 = a();
  return Math.abs(r2 - o2) <= e2 * Math.max(1, Math.abs(r2), Math.abs(o2)) && Math.abs(s2 - u2) <= e2 * Math.max(1, Math.abs(s2), Math.abs(u2));
}
function w(t, n2, a3, r2, s2) {
  let o2 = n2[0] - a3[0], u2 = n2[1] - a3[1];
  const e2 = (r2[0] * o2 + r2[1] * u2) * (s2 - 1);
  return o2 = r2[0] * e2, u2 = r2[1] * e2, t[0] = n2[0] + o2, t[1] = n2[1] + u2, t;
}
var B = q;
var C = o;
var F = u;
var G = e;
var H = m;
var J = b;
var K = p;
var N = Object.freeze(Object.defineProperty({ __proto__: null, copy: a2, set: r, add: s, subtract: o, multiply: u, divide: e, ceil: c, floor: i, min: f, max: M, round: h, scale: l, scaleAndAdd: d, distance: m, squaredDistance: b, length: q, squaredLength: p, negate: g, inverse: x, normalize: v, dot: j, cross: y, lerp: A, random: P, transformMat2: _, transformMat2d: z, transformMat3: D, transformMat4: I, rotate: L, angle: O, str: S, exactEquals: E, equals: k, projectAndScale: w, len: B, sub: C, mul: F, div: G, dist: H, sqrDist: J, sqrLen: K }, Symbol.toStringTag, { value: "Module" }));

export {
  a2 as a,
  r,
  s,
  o,
  f,
  M,
  l,
  d,
  m,
  b,
  q,
  p,
  g,
  v,
  j,
  y,
  A,
  _,
  z,
  L,
  E,
  k,
  w,
  C,
  H
};
//# sourceMappingURL=chunk-75RMBUYZ.js.map
