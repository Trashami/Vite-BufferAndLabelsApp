/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{isSome as t}from"../../../../../../core/maybe.js";import{pt2px as e}from"../../../../../../core/screenUtils.js";import{premultiplyAlphaRGBA as s}from"../../color.js";import{BITSET_GENERIC_LOCK_COLOR as i,BITSET_FILL_RANDOM_PATTERN_OFFSET as o,BITSET_GENERIC_CONSIDER_ALPHA_ONLY as r,SPRITE_PADDING as a,MIN_MAX_ZOOM_PRECISION_FACTOR as l}from"../../definitions.js";import{degToByte as n}from"../../GeometryUtils.js";import{i1616to32 as c,i8888to32 as h}from"../../number.js";import{FillMaterialKey as f}from"../../materialKey/MaterialKey.js";import{isFunction as m,getMinMaxZoom as p}from"./util.js";import _ from"./WGLBaseFillTemplate.js";import y from"./WGLDynamicMeshTemplate.js";import{ok as d}from"../../util/Result.js";const u=128;class M extends(_(y)){constructor(a,h,f){if(super(a),this._minMaxZoom=c(Math.round(h*l),Math.round(f*l)),m(a.color)){const t=(t,e,i)=>{const o=a.color(t,e,i);return o&&s(o)||0};this._dynamicPropertyMap.set("fillColor",t)}else{const t=a.color;this.fillColor=t&&s(t)||0}const p="CIMMarkerPlacementInsidePolygon"===a.cim.placement?.type&&a.cim.placement.shiftOddRows?2:1,_=a.height;if(m(_)){const t=(t,e,s)=>_(t,e,s)*p;this._dynamicPropertyMap.set("_height",t)}else this._height=(_||0)*p;const y=a.offsetX;if(m(y)){const t=(t,s,i)=>e(y(t,s,i));this._dynamicPropertyMap.set("_offsetX",t)}else this._offsetX=e(y||0);const d=a.offsetY;if(m(d)){const t=(t,s,i)=>e(-d(t,s,i));this._dynamicPropertyMap.set("_offsetY",t)}else this._offsetY=e(-d||0);const u=a.scaleX;m(u)?this._dynamicPropertyMap.set("_scaleX",u):this._scaleX=u||1;const M=a.angle;if(m(M)){const t=(t,e,s)=>n(M(t,e,s));this._dynamicPropertyMap.set("_angle",t)}else this._angle=n(M)||0;if(t(a.effects)){const t=a.effects;m(t)?this._dynamicPropertyMap.set("_effects",t):this._effects=t}this._cimFillLayer=a,this._bitset=(a.colorLocked?i:0)|(a.applyRandomOffset?o:0)|(a.sampleAlphaOnly?r:0),this._fillMaterialKey=a.materialKey}static fromCIMFill(t,e){const[s,i]=p(t.scaleInfo,e);return new M(t,s,i)}bindFeature(t,s,i){const o=t.readLegacyFeature();this._dynamicPropertyMap.forEach(((t,e)=>{this[e]=t(o,s,i)}));const r=f.load(this._fillMaterialKey),l=this._materialCache,n=(0,this._cimFillLayer.materialHash)(o,s,i),m=l.get(n);let p=null;if(m&&d(m.spriteMosaicItem)&&(p=m.spriteMosaicItem),p){const{rect:t,width:s,height:i}=p,o=t.x+a,l=t.y+a,n=o+s,f=l+i;let m=Math.round(e(this._height));m<=0&&(m=f-l);let _=Math.round(e(this._height/i*s||0));_<=0&&(_=n-o);const y=this._scaleX,d=1;this.tl=c(o,l),this.br=c(n,f),this.aux21=c(_,m),this.aux22=c(this._offsetX,this._offsetY),this.aux3=h(y*u,d*u,this._angle,0),r.sdf=p.sdf,r.pattern=!0,r.textureBinding=p.textureBinding}else this.tl=0,this.br=0,this.aux21=0,this.aux22=0,this.aux3=0,r.sdf=!1,r.pattern=!1,r.textureBinding=0;this._materialKey=r.data}}export{M as default};
