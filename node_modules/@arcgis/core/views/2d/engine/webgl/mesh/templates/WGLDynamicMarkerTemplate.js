/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import t from"../../../../../../core/Error.js";import e from"../../../../../../core/Logger.js";import{isSome as i,unwrapOr as s}from"../../../../../../core/maybe.js";import{pt2px as r}from"../../../../../../core/screenUtils.js";import{c as o}from"../../../../../../chunks/mat2df32.js";import{c as a}from"../../../../../../chunks/vec2f32.js";import{Alignment as h}from"../../../../../../symbols/cim/enums.js";import{premultiplyAlphaRGBA as c}from"../../color.js";import{SPRITE_PADDING as n,MIN_MAX_ZOOM_PRECISION_FACTOR as m}from"../../definitions.js";import{i1616to32 as l,i8888to32 as f}from"../../number.js";import{MarkerMaterialKey as _}from"../../materialKey/MaterialKey.js";import{isFunction as p,getMinMaxZoom as y}from"./util.js";import d from"./WGLBaseMarkerTemplate.js";import M from"./WGLDynamicMeshTemplate.js";import{ok as u}from"../../util/Result.js";const g=a(),k=o();class P extends(d(M)){constructor(t,e,o){super(t),this._cimMarkerLayer=t,this._minMaxZoom=l(Math.round(e*m),Math.round(o*m));const a=t.color;if(p(a)){const t=(t,e,i)=>c(a(t,e,i));this._dynamicPropertyMap.set("_fillColor",t)}else this._fillColor=c(a);const n=t.outlineColor;if(p(n)){const t=(t,e,i)=>c(n(t,e,i));this._dynamicPropertyMap.set("_outlineColor",t)}else this._outlineColor=c(n);const f=t.size;if(p(f)){const t=(t,e,i)=>r(f(t,e,i));this._dynamicPropertyMap.set("_size",t)}else this._size=r(f)||0;const _=t.scaleX;p(_)?this._dynamicPropertyMap.set("_scaleX",_):this._scaleX=_;const y=t.offsetX;if(p(y)){const t=(t,e,i)=>r(y(t,e,i));this._dynamicPropertyMap.set("xOffset",t)}else this.xOffset=r(y)||0;const d=t.offsetY;if(p(d)){const t=(t,e,i)=>r(d(t,e,i));this._dynamicPropertyMap.set("yOffset",t)}else this.yOffset=r(d)||0;const M=t.outlineWidth;if(p(M)){const t=(t,e,i)=>r(M(t,e,i));this._dynamicPropertyMap.set("_outlineWidth",t)}else this._outlineWidth=r(M)||0;const u=t.rotation;if(p(u)?this._dynamicPropertyMap.set("_angle",u):this._angle=u||0,i(t.effects)){const e=t.effects;p(e)?this._dynamicPropertyMap.set("_effects",e):this._effects=e}if(i(t.markerPlacement)){const e=t.markerPlacement;p(e)?this._dynamicPropertyMap.set("_markerPlacement",e):this._markerPlacement=e}this._scaleFactor=s(t.scaleFactor,1),this._bitSet=(t.alignment===h.MAP?1:0)|(t.colorLocked?1:0)<<1|(t.scaleSymbolsProportionally?1:0)<<3,this._materialKey=t.materialKey}static fromCIMMarker(t,e){const[i,s]=y(t.scaleInfo,e);return new P(t,i,s)}bindFeature(i,s,o){const a=i.readLegacyFeature(),h=i.getObjectId();this._dynamicPropertyMap.forEach(((t,e)=>{this[e]=t(a,s,o)}));const c=this._cimMarkerLayer.materialHash,m="function"==typeof c?c(a,s,o,h):c,p=this._materialCache.get(m);if(!p||!u(p.spriteMosaicItem)||!p.spriteMosaicItem)return void e.getLogger("esri.views.2d.engine.webgl.WGLDynamicMarkerTemplate").error(new t("mapview-cim","Encountered an error when binding feature"));const y=p.spriteMosaicItem,d=this._cimMarkerLayer.sizeRatio,M=y.width/y.height*this._scaleX,P=this._cimMarkerLayer.rotateClockwise?this._angle:-this._angle;let L=this._size,x=L*M;const j=this.xOffset,b=this.yOffset;this.xOffset*=this._scaleFactor,this.yOffset*=this._scaleFactor;const O=this._cimMarkerLayer.scaleSymbolsProportionally&&this._cimMarkerLayer.frameHeight?this._size/r(this._cimMarkerLayer.frameHeight):1,w=this._outlineWidth*O,z=r(this._cimMarkerLayer.referenceSize);let W=0,C=0;const F=this._cimMarkerLayer.anchorPoint;F&&(this._cimMarkerLayer.isAbsoluteAnchorPoint?this._size&&(W=r(F.x)/(this._size*M),C=r(F.y)/this._size):(W=F.x,C=F.y)),this._anchorX=W,this._anchorY=C,this._sizeOutlineWidth=f(Math.round(Math.min(Math.sqrt(128*x),255)),Math.round(Math.min(Math.sqrt(128*L),255)),Math.round(Math.min(Math.sqrt(128*w),255)),Math.round(Math.min(Math.sqrt(128*z),255))),this.angle=P;const I=Math.round(64*d);this._bitestAndDistRatio=l(this._bitSet,I);const K=y.rect.x+n,X=y.rect.y+n,B=K+y.width,R=X+y.height;this._texUpperLeft=l(K,X),this._texUpperRight=l(B,X),this._texBottomLeft=l(K,R),this._texBottomRight=l(B,R);const S=_.load(this._materialKey);S.sdf=y.sdf,S.pattern=!0,S.textureBinding=y.textureBinding,this._materialKey=S.data,x*=d,L*=d,x*=this._scaleFactor,L*=this._scaleFactor,x*=y.rect.width/y.width,L*=y.rect.height/y.height,this._computedWidth=x,this._computedHeight=L,this._applyTransformation(k,g),this.xOffset=j,this.yOffset=b}}export{P as default};
