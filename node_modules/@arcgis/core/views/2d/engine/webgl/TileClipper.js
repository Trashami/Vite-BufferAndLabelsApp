/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{TILE_SIZE as i}from"./definitions.js";import{Point as t,GeometryType as s}from"./Geometry.js";import{between as h}from"./GeometryUtils.js";class e{constructor(i,t,s){this.ratio=i,this.x=t,this.y=s}}class n{constructor(t,s,h,e=8,n=8){this._lines=[],this._starts=[],this.validateTessellation=!0,this._pixelRatio=e,this._pixelMargin=n,this._tileSize=i*e,this._dz=t,this._yPos=s,this._xPos=h}setPixelMargin(i){i!==this._pixelMargin&&(this._pixelMargin=i,this.setExtent(this._extent))}setExtent(i){this._extent=i,this._finalRatio=this._tileSize/i*(1<<this._dz);let t=this._pixelRatio*this._pixelMargin;t/=this._finalRatio;const s=i>>this._dz;t>s&&(t=s),this._margin=t,this._xmin=s*this._xPos-t,this._ymin=s*this._yPos-t,this._xmax=this._xmin+s+2*t,this._ymax=this._ymin+s+2*t}reset(i){this._type=i,this._lines=[],this._starts=[],this._line=null,this._start=0}moveTo(i,s){this._pushLine(),this._prevIsIn=this._isIn(i,s),this._moveTo(i,s,this._prevIsIn),this._prevPt=new t(i,s),this._firstPt=new t(i,s),this._dist=0}lineTo(i,s){const h=this._isIn(i,s),n=new t(i,s),_=t.distance(this._prevPt,n);let l,x,a,y,o,r,m,p;if(h)this._prevIsIn?this._lineTo(i,s,!0):(l=this._prevPt,x=n,a=this._intersect(x,l),this._start=this._dist+_*(1-this._r),this._lineTo(a.x,a.y,!0),this._lineTo(x.x,x.y,!0));else if(this._prevIsIn)x=this._prevPt,l=n,a=this._intersect(x,l),this._lineTo(a.x,a.y,!0),this._lineTo(l.x,l.y,!1);else{const i=this._prevPt,t=n;if(i.x<=this._xmin&&t.x<=this._xmin||i.x>=this._xmax&&t.x>=this._xmax||i.y<=this._ymin&&t.y<=this._ymin||i.y>=this._ymax&&t.y>=this._ymax)this._lineTo(t.x,t.y,!1);else{const s=[];if((i.x<this._xmin&&t.x>this._xmin||i.x>this._xmin&&t.x<this._xmin)&&(y=(this._xmin-i.x)/(t.x-i.x),p=i.y+y*(t.y-i.y),p<=this._ymin?r=!1:p>=this._ymax?r=!0:s.push(new e(y,this._xmin,p))),(i.x<this._xmax&&t.x>this._xmax||i.x>this._xmax&&t.x<this._xmax)&&(y=(this._xmax-i.x)/(t.x-i.x),p=i.y+y*(t.y-i.y),p<=this._ymin?r=!1:p>=this._ymax?r=!0:s.push(new e(y,this._xmax,p))),(i.y<this._ymin&&t.y>this._ymin||i.y>this._ymin&&t.y<this._ymin)&&(y=(this._ymin-i.y)/(t.y-i.y),m=i.x+y*(t.x-i.x),m<=this._xmin?o=!1:m>=this._xmax?o=!0:s.push(new e(y,m,this._ymin))),(i.y<this._ymax&&t.y>this._ymax||i.y>this._ymax&&t.y<this._ymax)&&(y=(this._ymax-i.y)/(t.y-i.y),m=i.x+y*(t.x-i.x),m<=this._xmin?o=!1:m>=this._xmax?o=!0:s.push(new e(y,m,this._ymax))),0===s.length)o?r?this._lineTo(this._xmax,this._ymax,!0):this._lineTo(this._xmax,this._ymin,!0):r?this._lineTo(this._xmin,this._ymax,!0):this._lineTo(this._xmin,this._ymin,!0);else if(s.length>1&&s[0].ratio>s[1].ratio)this._start=this._dist+_*s[1].ratio,this._lineTo(s[1].x,s[1].y,!0),this._lineTo(s[0].x,s[0].y,!0);else{this._start=this._dist+_*s[0].ratio;for(let i=0;i<s.length;i++)this._lineTo(s[i].x,s[i].y,!0)}this._lineTo(t.x,t.y,!1)}}this._dist+=_,this._prevIsIn=h,this._prevPt=n}close(){if(this._line.length>2){const i=this._firstPt,t=this._prevPt;i.x===t.x&&i.y===t.y||this.lineTo(i.x,i.y);const s=this._line;let h=s.length;for(;h>=4&&(s[0].x===s[1].x&&s[0].x===s[h-2].x||s[0].y===s[1].y&&s[0].y===s[h-2].y);)s.pop(),s[0].x=s[h-2].x,s[0].y=s[h-2].y,--h}}result(i=!0){return this._pushLine(),0===this._lines.length?null:(this._type===s.Polygon&&i&&x.simplify(this._tileSize,this._margin*this._finalRatio,this._lines),this._lines)}resultWithStarts(){if(this._type!==s.LineString)throw new Error("Only valid for lines");this._pushLine();const i=this._lines,t=i.length;if(0===t)return null;const h=[];for(let s=0;s<t;s++)h.push({line:i[s],start:this._starts[s]||0});return h}_isIn(i,t){return i>=this._xmin&&i<=this._xmax&&t>=this._ymin&&t<=this._ymax}_intersect(i,s){let h,e,n;if(s.x>=this._xmin&&s.x<=this._xmax)e=s.y<=this._ymin?this._ymin:this._ymax,n=(e-i.y)/(s.y-i.y),h=i.x+n*(s.x-i.x);else if(s.y>=this._ymin&&s.y<=this._ymax)h=s.x<=this._xmin?this._xmin:this._xmax,n=(h-i.x)/(s.x-i.x),e=i.y+n*(s.y-i.y);else{e=s.y<=this._ymin?this._ymin:this._ymax,h=s.x<=this._xmin?this._xmin:this._xmax;const t=(h-i.x)/(s.x-i.x),_=(e-i.y)/(s.y-i.y);t<_?(n=t,e=i.y+t*(s.y-i.y)):(n=_,h=i.x+_*(s.x-i.x))}return this._r=n,new t(h,e)}_pushLine(){this._line&&(this._type===s.Point?this._line.length>0&&(this._lines.push(this._line),this._starts.push(this._start)):this._type===s.LineString?this._line.length>1&&(this._lines.push(this._line),this._starts.push(this._start)):this._type===s.Polygon&&this._line.length>3&&(this._lines.push(this._line),this._starts.push(this._start))),this._line=[],this._start=0}_moveTo(i,h,e){this._type!==s.Polygon?e&&(i=Math.round((i-(this._xmin+this._margin))*this._finalRatio),h=Math.round((h-(this._ymin+this._margin))*this._finalRatio),this._line.push(new t(i,h))):(e||(i<this._xmin&&(i=this._xmin),i>this._xmax&&(i=this._xmax),h<this._ymin&&(h=this._ymin),h>this._ymax&&(h=this._ymax)),i=Math.round((i-(this._xmin+this._margin))*this._finalRatio),h=Math.round((h-(this._ymin+this._margin))*this._finalRatio),this._line.push(new t(i,h)),this._isH=!1,this._isV=!1)}_lineTo(i,h,e){let n,_;if(this._type!==s.Polygon)if(e){if(i=Math.round((i-(this._xmin+this._margin))*this._finalRatio),h=Math.round((h-(this._ymin+this._margin))*this._finalRatio),this._line.length>0&&(n=this._line[this._line.length-1],n.equals(i,h)))return;this._line.push(new t(i,h))}else this._line&&this._line.length>0&&this._pushLine();else if(e||(i<this._xmin&&(i=this._xmin),i>this._xmax&&(i=this._xmax),h<this._ymin&&(h=this._ymin),h>this._ymax&&(h=this._ymax)),i=Math.round((i-(this._xmin+this._margin))*this._finalRatio),h=Math.round((h-(this._ymin+this._margin))*this._finalRatio),this._line&&this._line.length>0){n=this._line[this._line.length-1];const s=n.x===i,e=n.y===h;if(s&&e)return;this._isH&&s||this._isV&&e?(n.x=i,n.y=h,_=this._line[this._line.length-2],_.x===i&&_.y===h?(this._line.pop(),this._line.length<=1?(this._isH=!1,this._isV=!1):(_=this._line[this._line.length-2],this._isH=_.x===i,this._isV=_.y===h)):(this._isH=_.x===i,this._isV=_.y===h)):(this._line.push(new t(i,h)),this._isH=s,this._isV=e)}else this._line.push(new t(i,h))}}class _{setExtent(i){this._ratio=4096===i?1:4096/i}get validateTessellation(){return this._ratio<1}reset(i){this._lines=[],this._line=null}moveTo(i,s){this._line&&this._lines.push(this._line),this._line=[];const h=this._ratio;this._line.push(new t(i*h,s*h))}lineTo(i,s){const h=this._ratio;this._line.push(new t(i*h,s*h))}close(){const i=this._line;i&&!i[0].isEqual(i[i.length-1])&&i.push(i[0])}result(){return this._line&&this._lines.push(this._line),0===this._lines.length?null:this._lines}}var l;!function(i){i[i.sideLeft=0]="sideLeft",i[i.sideRight=1]="sideRight",i[i.sideTop=2]="sideTop",i[i.sideBottom=3]="sideBottom"}(l||(l={}));class x{static simplify(i,t,s){if(!s)return;const h=-t,e=i+t,n=-t,_=i+t,a=[],y=[],o=s.length;for(let x=0;x<o;++x){const i=s[x];if(!i||i.length<2)continue;let t,o=i[0];const r=i.length;for(let s=1;s<r;++s)t=i[s],o.x===t.x&&(o.x<=h&&(o.y>t.y?(a.push(x),a.push(s),a.push(l.sideLeft),a.push(-1)):(y.push(x),y.push(s),y.push(l.sideLeft),y.push(-1))),o.x>=e&&(o.y<t.y?(a.push(x),a.push(s),a.push(l.sideRight),a.push(-1)):(y.push(x),y.push(s),y.push(l.sideRight),y.push(-1)))),o.y===t.y&&(o.y<=n&&(o.x<t.x?(a.push(x),a.push(s),a.push(l.sideTop),a.push(-1)):(y.push(x),y.push(s),y.push(l.sideTop),y.push(-1))),o.y>=_&&(o.x>t.x?(a.push(x),a.push(s),a.push(l.sideBottom),a.push(-1)):(y.push(x),y.push(s),y.push(l.sideBottom),y.push(-1)))),o=t}if(0===a.length||0===y.length)return;x.fillParent(s,y,a),x.fillParent(s,a,y);const r=[];x.calcDeltas(r,y,a),x.calcDeltas(r,a,y),x.addDeltas(r,s)}static fillParent(i,t,s){const e=s.length,n=t.length;for(let _=0;_<n;_+=4){const n=t[_],x=t[_+1],a=t[_+2],y=i[n][x-1],o=i[n][x];let r=8092,m=-1;for(let t=0;t<e;t+=4){if(s[t+2]!==a)continue;const e=s[t],n=s[t+1],_=i[e][n-1],x=i[e][n];switch(a){case l.sideLeft:case l.sideRight:if(h(y.y,_.y,x.y)&&h(o.y,_.y,x.y)){const i=Math.abs(x.y-_.y);i<r&&(r=i,m=t)}break;case l.sideTop:case l.sideBottom:if(h(y.x,_.x,x.x)&&h(o.x,_.x,x.x)){const i=Math.abs(x.x-_.x);i<r&&(r=i,m=t)}}}t[_+3]=m}}static calcDeltas(i,t,s){const h=t.length;for(let e=0;e<h;e+=4){const h=[],n=x.calcDelta(e,t,s,h);i.push(t[e]),i.push(t[e+1]),i.push(t[e+2]),i.push(n)}}static calcDelta(i,t,s,h){const e=t[i+3];if(-1===e)return 0;const n=h.length;return n>1&&h[n-2]===e?0:(h.push(e),x.calcDelta(e,s,t,h)+1)}static addDeltas(i,t){const s=i.length;let h=0;for(let e=0;e<s;e+=4){const t=i[e+3];t>h&&(h=t)}for(let e=0;e<s;e+=4){const s=t[i[e]],n=i[e+1],_=h-i[e+3];switch(i[e+2]){case l.sideLeft:s[n-1].x-=_,s[n].x-=_,1===n&&(s[s.length-1].x-=_),n===s.length-1&&(s[0].x-=_);break;case l.sideRight:s[n-1].x+=_,s[n].x+=_,1===n&&(s[s.length-1].x+=_),n===s.length-1&&(s[0].x+=_);break;case l.sideTop:s[n-1].y-=_,s[n].y-=_,1===n&&(s[s.length-1].y-=_),n===s.length-1&&(s[0].y-=_);break;case l.sideBottom:s[n-1].y+=_,s[n].y+=_,1===n&&(s[s.length-1].y+=_),n===s.length-1&&(s[0].y+=_)}}}}export{_ as SimpleBuilder,n as TileClipper};
