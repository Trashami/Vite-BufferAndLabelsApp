/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import s from"../../../core/Handles.js";import{isSome as r}from"../../../core/maybe.js";import{property as o}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as a}from"../../../core/accessorSupport/decorators/subclass.js";import{eyeWithinExtent as i}from"../camera/intersectionUtils.js";import{applySurfaceCollisionConstraint as n,Mode as c}from"../camera/constraintUtils/surfaceCollision.js";let l=class extends t{constructor(e){super(e),this._handles=new s}initialize(){this._handles.add(this.view.basemapTerrain.on("elevation-change",(e=>this._handleElevationChangeEvent(e))))}destroy(){this._handles&&(this._handles.destroy(),this._handles=null)}_handleElevationChangeEvent(e){if(this.view.state.cameraController)return;const t=this.view.state.camera;r(e.spatialReference)&&i(this.view,t,e.extent,e.spatialReference)&&this._applyToCurrentCamera()}_applyToCurrentCamera(){this.view.state.updateCamera((e=>n(this.view,e,c.EYE_AND_CENTER)))}};e([o({constructOnly:!0})],l.prototype,"view",void 0),l=e([a("esri.views.3d.state.ElevationCollisionConstraint")],l);export{l as SurfaceCollisionConstraint};
