/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../../chunks/tslib.es6.js";import{clamp as i}from"../../../../../core/mathUtils.js";import{unwrapOr as r,isSome as e}from"../../../../../core/maybe.js";import{createScreenPointArray as s}from"../../../../../core/screenUtils.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/arrayUtils.js";import"../../../../../core/Error.js";import"../../../../../core/has.js";import{subclass as a}from"../../../../../core/accessorSupport/decorators/subclass.js";import{c as n,d as o}from"../../../../../chunks/vec2.js";import{a as c}from"../../../../../chunks/vec2f64.js";import{n as h,b as m,l as p,g as l,a as _}from"../../../../../chunks/vec3.js";import{c as u}from"../../../../../chunks/vec3f64.js";import{getReferenceEllipsoid as P}from"../../../../../geometry/projectionEllipsoid.js";import{create as y,fromPoints as C}from"../../../../../geometry/support/axisAngle.js";import{c as f}from"../../../../../chunks/sphere.js";import{pixelDistanceToInteractionFactor as d,applyAll as g}from"../../../camera/constraintUtils.js";import{ConstraintTypes as j}from"../../../camera/constraintUtils/ConstraintTypes.js";import{InteractionType as v}from"../../../camera/constraintUtils/InteractionType.js";import{applySurfaceCollisionConstraint as k}from"../../../camera/constraintUtils/surfaceCollision.js";import{TiltMode as R}from"../../../camera/constraintUtils/TiltMode.js";import{InteractiveController as D}from"../InteractiveController.js";import{normalizeCoordinate as w,pickPointAndInitSphere as A,SpherePickPointFallback as M,decideNavigationMode as O,NavigationMode as U,DISTANCE_CLAMP_VALUES as b,PIVOT_DISTANCE_MODIFIER as S,SCREEN_PIXEL_AREA as x,sphereOrPlanePointFromScreenPoint as z,applyRotation as T}from"../../utils/navigationUtils.js";import{fromScreenAtEye as E}from"../../../support/geometryUtils/ray.js";import{TERRAIN_ID as I}from"../../../webgl-engine/lib/verticalOffsetUtils.js";let L=class extends D{constructor(){super(...arguments),this._pickPoint=u(),this._tmpP0=c(),this._panAxisAngle=y(),this._tmpRayDir=u(),this._tmpRayDirPick=u(),this._targetOnSphere=u(),this._tmpRay={origin:u(),direction:u()},this.dragBeginPoint=s(),this._normalizedAnchorPoint=c(),this._constraintOptions={selection:j.ALL_EXCEPT_COLLISION,interactionType:v.ZOOM,interactionFactor:0,interactionStartCamera:null,interactionDirection:null,tiltMode:R.TUMBLE},this._sphere=f(),this._hasPickPoint=!1}get _intersectionHelper(){return this.view.sceneIntersectionHelper}begin(t){if(!this.active)return;n(this.dragBeginPoint,t),w(this.startCamera,t,this._normalizedAnchorPoint);const s=P(this.view.spatialReference),a=A(this._intersectionHelper,this.startCamera,t,s,M.Ellipsoid,0===this.view.map.ground.opacity?H:{});if(this._navMode=O(this.startCamera,t,a.hasGeometryIntersection,s),this._navMode===U.Horizontal)this._hasPickPoint=!!a.scenePickPoint,this._pickPoint=r(a.scenePickPoint,this._pickPoint),this._sphere=a.sphere;else{let r,s;E(this.startCamera,t,this._tmpRay),h(this._tmpRay.direction,this._tmpRay.direction),e(a.scenePickPoint)&&(m(this._tmpRayDirPick,this.startCamera.eye,a.scenePickPoint),s=p(this._tmpRayDirPick)),this.view.camera.position.hasZ&&(r=Math.abs(this.view.camera.position.z));let n=i(S*r,b[0],b[1]);const o=this.view._stage.renderView.getMinimalDepthForArea(null,t[0],t[1],this.view.state.camera,x);n=e(o)?Math.min(n,o):n,n=a.scenePickPoint?Math.min(n,s):n,this._hasPickPoint=!0,l(this._tmpRay.direction,this._tmpRay.direction,n),_(this._pickPoint,this._tmpRay.origin,this._tmpRay.direction)}this._constraintOptions.interactionStartCamera=this.startCamera}update(t){if(this.active){if(this.currentCamera.eye=this.startCamera.eye,this.currentCamera.center=this.startCamera.center,this.currentCamera.up=this.startCamera.up,this._navMode===U.Horizontal){m(this._tmpRayDir,this.currentCamera.center,this.currentCamera.eye);const i=p(this._tmpRayDir);w(this.currentCamera,t,this._tmpP0);const r=12*(this._normalizedAnchorPoint[1]-this._tmpP0[1]);let e=i*2**r;const s=this.view.state.constraints.minimumPoiDistance;if(r<0&&e<s&&(e=s),Math.abs(i-e)<1e-6)return;if(this._hasPickPoint&&e<i){const t=1-(1-e/i)*(1-this._sphere[3]/p(this.currentCamera.center));this.currentCamera.center=l(B,this.currentCamera.center,t)}l(this._tmpRayDir,this._tmpRayDir,-e/i),this.currentCamera.eye=_(B,this.currentCamera.center,this._tmpRayDir),this._constraintOptions.interactionFactor=d(o(this.dragBeginPoint,t)),g(this.view,this.currentCamera,this._constraintOptions),this._hasPickPoint&&(z(this._sphere,this.currentCamera,this.dragBeginPoint,this._targetOnSphere),C(this._pickPoint,this._targetOnSphere,this._panAxisAngle),T(this.currentCamera,this._sphere,this._panAxisAngle))}else{const i=p(this._tmpRay.direction);w(this.currentCamera,t,this._tmpP0);const r=12*(this._normalizedAnchorPoint[1]-this._tmpP0[1]);let e=i*2**r;const s=this.view.state.constraints.minimumPoiDistance;if(r<0&&e<s&&(e=s),Math.abs(i-e)<1e-6)return;l(this._tmpRayDir,this._tmpRay.direction,1-e/i),this.currentCamera.eye=_(B,this.currentCamera.eye,this._tmpRayDir),this.currentCamera.center=_(B,this.currentCamera.center,this._tmpRayDir)}k(this.view,this.currentCamera),this.commitCamera()}}end(){this.active&&this.finishController()}};L=t([a("esri.views.3d.state.controllers.global.ZoomController")],L);const B=u(),H={exclude:new Set([I])};export{L as ZoomController};
