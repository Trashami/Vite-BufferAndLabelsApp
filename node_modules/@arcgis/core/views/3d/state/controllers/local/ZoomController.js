/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../../chunks/tslib.es6.js";import{clamp as i}from"../../../../../core/mathUtils.js";import{isSome as r}from"../../../../../core/maybe.js";import{createScreenPointArray as s}from"../../../../../core/screenUtils.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/arrayUtils.js";import"../../../../../core/Error.js";import"../../../../../core/has.js";import{subclass as e}from"../../../../../core/accessorSupport/decorators/subclass.js";import{c as a,d as o}from"../../../../../chunks/vec2.js";import{a as n}from"../../../../../chunks/vec2f64.js";import{b as m,l as c,n as h,g as p,a as _,o as l,c as u,h as C}from"../../../../../chunks/vec3.js";import{c as P}from"../../../../../chunks/vec3f64.js";import{create as f,fromPositionAndNormal as j}from"../../../../../geometry/support/plane.js";import{pixelDistanceToInteractionFactor as g,applyAll as v}from"../../../camera/constraintUtils.js";import{ConstraintTypes as y}from"../../../camera/constraintUtils/ConstraintTypes.js";import{InteractionType as D}from"../../../camera/constraintUtils/InteractionType.js";import{TiltMode as d}from"../../../camera/constraintUtils/TiltMode.js";import{InteractiveController as w}from"../InteractiveController.js";import{normalizeCoordinate as M,DISTANCE_CLAMP_VALUES as b,PIVOT_DISTANCE_MODIFIER as O,SCREEN_PIXEL_AREA as U,intersectPlaneFromScreenPoint as N}from"../../utils/navigationUtils.js";import{TERRAIN_ID as R}from"../../../webgl-engine/lib/verticalOffsetUtils.js";let k=class extends w{constructor(){super(...arguments),this._tmpP=P(),this._tmpDir=P(),this._tmpN=P(),this._tmpP0=n(),this._tmpPoi=P(),this._tmpRayDir=P(),this.dragBeginPoint=s(),this._normalizedAnchorPoint=n(),this._constraintOptions={selection:y.ALL,interactionType:D.ZOOM,interactionFactor:0,interactionStartCamera:null,interactionDirection:P(),tiltMode:d.TUMBLE},this._plane=f()}get _intersectionHelper(){return this.view.sceneIntersectionHelper}begin(t){if(!this.active)return;a(this.dragBeginPoint,t),M(this.startCamera,t,this._normalizedAnchorPoint);const s=this._intersectionHelper.intersectScreenFreePointFallback(t,this._tmpP,0===this.view.map.ground.opacity?S:{});m(this._tmpDir,this._tmpP,this.startCamera.eye);const e=c(this._tmpDir);let o;h(this._tmpDir,this._tmpDir),this.view.camera.position.hasZ&&(o=Math.abs(this.view.camera.position.z));let n=i(O*o,b[0],b[1]);const u=this.view._stage.renderView.getMinimalDepthForArea(this.view.voxelWasm,t[0],t[1],this.view.state.camera,U);n=r(u)?Math.min(n,u):n,n=s?Math.min(n,e):n,p(this._tmpDir,this._tmpDir,n),_(this._tmpP,this.startCamera.eye,this._tmpDir),m(this._tmpN,this.startCamera.eye,this.startCamera.center),h(this._tmpN,this._tmpN),this._tmpN[1]<0&&l(this._tmpN,this._tmpN),j(this._tmpP,this._tmpN,this._plane),this._constraintOptions.interactionStartCamera=this.startCamera}update(t){if(!this.active)return;N(this._plane,this.currentCamera,this.dragBeginPoint,this._tmpPoi)||u(this._tmpPoi,this.currentCamera.center),M(this.currentCamera,t,this._tmpP0);let i=4*(this._tmpP0[1]-this._normalizedAnchorPoint[1]);a(this._normalizedAnchorPoint,this._tmpP0),m(this._tmpRayDir,this._tmpPoi,this.currentCamera.eye);const r=c(this._tmpRayDir);let s=r*(1-i);u(this._constraintOptions.interactionDirection,this._tmpRayDir),p(this._constraintOptions.interactionDirection,this._constraintOptions.interactionDirection,Math.sign(i)/r);const e=this.view.state.constraints.minimumPoiDistance;i>=0&&s<e&&(s=e,i=-(s-r)/r),Math.abs(r-s)<1e-6||(p(this._tmpRayDir,this._tmpRayDir,i),this.currentCamera.eye=_(A,this.currentCamera.eye,this._tmpRayDir),C(A,this.currentCamera.center,this._tmpPoi,i),this._tmpPoi[2]>this.startCamera.center[2]?A[2]=Math.max(this.startCamera.center[2],A[2]):A[2]=Math.min(this.startCamera.center[2],A[2]),this.currentCamera.center=A,this._constraintOptions.interactionFactor=g(o(this.dragBeginPoint,t)),v(this.view,this.currentCamera,this._constraintOptions),this.commitCamera())}end(){this.active&&this.finishController()}};k=t([e("esri.views.3d.state.controllers.local.ZoomController")],k);const A=P(),S={exclude:new Set([R])};export{k as ZoomController};
