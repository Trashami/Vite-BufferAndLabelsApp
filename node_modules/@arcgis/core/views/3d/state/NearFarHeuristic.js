/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{lerp as e,clamp as t}from"../../../core/mathUtils.js";import{isSome as i}from"../../../core/maybe.js";import{getMetersPerUnitForSR as r}from"../../../core/unitUtils.js";import{b as n,n as s,e as a,l as m}from"../../../chunks/vec3.js";import{c as o}from"../../../chunks/vec3f64.js";import h from"../../../geometry/Extent.js";import{getReferenceEllipsoid as x}from"../../../geometry/projectionEllipsoid.js";import{ViewingMode as c}from"../../ViewingMode.js";function l(e,t,i){return e===c.Global?new M(i):new u(t,i)}class u{constructor(e,t){this._elevationProvider=e,this._referenceEllipsoid=x(t),this._unitInMeters=r(t,this._referenceEllipsoid.metersPerDegree)}compute(r,m,o,x,c){c||(c={near:0,far:0});let l=r[2]*this._unitInMeters;const u=l,M=l-x,_=this._elevationProvider?.visibleElevationBounds;_&&(l=M>=0?u-this._unitInMeters*_.min:this._unitInMeters*_.max-u);const I={x:(o=i(o)?o:new h({xmin:0,ymin:0,zmin:0,xmax:0,ymax:0,zmax:0})).xmax-o.xmin,y:o.ymax-o.ymin,z:4*Math.max(o.xmax-o.xmin,o.ymax-o.ymin)},v=Math.max(I.x,I.y,I.z);n(E,m,r),j[0]=E[0]>0?o.xmax:o.xmin,j[1]=E[1]>0?o.ymax:o.ymin,j[2]=E[2]>0?v/2:-v/2,n(j,j,r),s(E,E);const b=1.1*a(j,E)*this._unitInMeters,g=Math.sqrt(l*(l+2*this._referenceEllipsoid.radius)),w=Math.max(o.xmax-o.xmin,o.ymax-o.ymin),z=w*y*this._unitInMeters,P=w*d*this._unitInMeters;let k=t((l-P)/(z-P),0,1);k*=k*k;let q=Math.min(e(g,b,k),g);return q*=Math.max(Math.log(Math.abs(M)),1),q=Math.min(q,Math.max(34064e4,v)),q/=this._unitInMeters,f(q,p,this._unitInMeters,c)}}class M{constructor(e){this._referenceEllipsoid=x(e)}compute(e,i,r,n,s){s||(s={near:0,far:0});const a=m(e)-this._referenceEllipsoid.radius,o=this._referenceEllipsoid.radius+Math.min(0,n),h=Math.abs(a-n),x=Math.max(h,Math.abs(a));return f(1.2*Math.sqrt(x*(x+2*o)),t(2e4-(Math.log(x)-7.983)/9.011*19e3,1e3,2e4),1,s)}}function f(e,t,i,r){const n=_/i;return e/t>n?(r.far=e,r.near=r.far/t):(r.near=n,r.far=r.near*t),r}const p=2e4,_=2,y=.001,d=1e-4,j=o(),E=o();export{l as createNearFarHeuristic};
