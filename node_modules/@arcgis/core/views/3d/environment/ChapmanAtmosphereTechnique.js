/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{a as e}from"../../../chunks/vec2f64.js";import{c as r}from"../../../chunks/vec4f64.js";import{C as i}from"../../../chunks/ChapmanAtmosphere.glsl.js";import{NoParameters as t}from"../webgl-engine/core/shaderModules/interfaces.js";import{ReloadableShaderModule as s}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as n}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{Default3D as o}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as a}from"../webgl-engine/lib/Program.js";import{BlendFactor as h,CompareFunction as l}from"../../webgl/enums.js";import{makePipelineState as m,separateBlendingParams as c,defaultColorWriteParams as g}from"../../webgl/renderState.js";class d extends t{constructor(){super(...arguments),this.heightParameters=r(),this.radii=e(),this.innerFadeDistance=0,this.altitudeFade=0,this.hazeStrength=1}}class u extends n{initializeProgram(e){return new a(e.rctx,u.shader.get().build(this.configuration),o)}initializePipeline(){return this.configuration.haze?m({blending:c(h.ONE,h.ZERO,h.ONE_MINUS_SRC_COLOR,h.ONE),colorWrite:g}):m({blending:c(h.SRC_ALPHA,h.ONE,h.ONE_MINUS_SRC_ALPHA,h.ONE_MINUS_SRC_ALPHA),depthTest:{func:l.LEQUAL},colorWrite:g})}}u.shader=new s(i,(()=>import("./ChapmanAtmosphere.glsl.js")));export{d as ChapmanAtmospherePassParameters,u as ChapmanAtmosphereTechnique};
