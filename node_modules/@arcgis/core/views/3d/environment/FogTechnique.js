/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{H as r}from"../../../chunks/FogHaze.glsl.js";import{ReloadableShaderModule as i}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as o}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{ShaderTechniqueConfiguration as n,parameter as t}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as s}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as a}from"../webgl-engine/lib/Program.js";import{BlendFactor as l}from"../../webgl/enums.js";import{makePipelineState as g,separateBlendingParams as m,defaultColorWriteParams as h}from"../../webgl/renderState.js";class c extends o{initializeProgram(e){return new a(e.rctx,c.shader.get().build(this.configuration),s)}initializePipeline(){return this.configuration.haze?g({blending:m(l.ONE,l.ZERO,l.ONE_MINUS_SRC_COLOR,l.ONE),colorWrite:h}):g({blending:m(l.SRC_ALPHA,l.ZERO,l.ONE_MINUS_SRC_ALPHA,l.ONE),colorWrite:h})}}c.shader=new i(r,(()=>import("./FogHaze.glsl.js")));class u extends n{constructor(){super(...arguments),this.haze=!1}}e([t()],u.prototype,"haze",void 0);export{u as FogHazeTechniqueConfiguration,c as FogTechnique};
