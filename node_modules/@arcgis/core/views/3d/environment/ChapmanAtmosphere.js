/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import e from"../../../core/Handles.js";import{lerp as t,smoothstep as s}from"../../../core/mathUtils.js";import{releaseMaybe as i,disposeMaybe as r,destroyMaybe as a,isNone as o}from"../../../core/maybe.js";import{watch as n}from"../../../core/reactiveUtils.js";import{s as h}from"../../../chunks/vec2.js";import{l as d}from"../../../chunks/vec3.js";import{s as u}from"../../../chunks/vec4.js";import{earth as m}from"../../../geometry/support/Ellipsoid.js";import{AtmosphereType as p}from"./AtmosphereType.js";import{atmosphereHeight as _,innerAtmosphereDepth as l,computeInnerAltitudeFade as c}from"./atmosphereUtils.js";import{ChapmanAtmospherePassParameters as T,ChapmanAtmosphereTechnique as f}from"./ChapmanAtmosphereTechnique.js";import{ChapmanAtmosphereTechniqueConfiguration as v}from"./ChapmanAtmosphereTechniqueConfiguration.js";import{Pos2Tex as b}from"../webgl-engine/lib/DefaultVertexBufferLayouts.js";import{createQuadVAO as R}from"../webgl-engine/lib/glUtil3D.js";import{PrimitiveType as E}from"../../webgl/enums.js";class j{constructor(e){this._view=e,this.type=p.Realistic,this._passParameters=new T,this._rootTileElevationMin=NaN,this._lowerBoundEarthRadius=m.radius,this._fadeHaze=0,this._updateRadius(m.radius)}destroy(){this._atmosphereTechnique=i(this._atmosphereTechnique),this._atmosphereHazeTechnique=i(this._atmosphereHazeTechnique),this._vao=r(this._vao),this._handles=a(this._handles)}initializeRenderContext(t){const s=t.renderContext.rctx,i=this._handles=new e;this._updateRootTileElevationBounds(),i.add(n((()=>this._view.basemapTerrain.rootTileElevationBounds),(()=>this._updateRootTileElevationBounds()))),i.add(n((()=>this._view.basemapTerrain.visibleElevationBounds),(()=>this._updateVisibleElevationBounds())));const r=new v;r.haze=!1,this._atmosphereTechnique=t.shaderTechniqueRepository.acquire(f,r),r.haze=!0,this._atmosphereHazeTechnique=t.shaderTechniqueRepository.acquire(f,r),this._vao=R(s,b)}render(e){this._render(e,this._atmosphereTechnique,e.offscreenRenderingHelper.depthTexture)}renderHaze(e,t){this._fadeHaze=t,this._render(e,this._atmosphereHazeTechnique,e.offscreenRenderingHelper.linearDepthTexture)}_render(e,t,s){if(o(s))return;this._update(e.bindParameters.camera),this._passParameters.depthTex=s;const i=e.rctx.bindTechnique(t,this._passParameters,e.bindParameters);e.offscreenRenderingHelper.renderDepthDetached((()=>{this._renderCommon(i,e)}))}_renderCommon(e,t){o(this._vao)||(t.rctx.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),t.rctx.drawArrays(E.TRIANGLE_STRIP,0,4))}_adjustRadiusForTesselation(e){return e*Math.cos(Math.PI/16/16)}_updateRootTileElevationBounds(){const e=this._view.basemapTerrain.rootTileElevationBounds.min;e!==this._rootTileElevationMin&&(this._rootTileElevationMin=e,this._lowerBoundEarthRadius=m.radius,this._updateVisibleElevationBounds())}_updateVisibleElevationBounds(){const e=this._adjustRadiusForTesselation(m.radius+this._view.basemapTerrain.visibleElevationBounds.min);e<this._lowerBoundEarthRadius&&this._updateRadius(e)}_updateRadius(e){this._lowerBoundEarthRadius=e,h(this._passParameters.radii,e,e+_),this._passParameters.innerFadeDistance=2*Math.sqrt((2*e-l)*l)}_update(e){if(o(e))return;const i=d(e.eye),r=i*i,a=r-this._passParameters.radii[1]*this._passParameters.radii[1],n=Math.min(1,Math.max(0,(i-this._passParameters.radii[0])/_));u(this._passParameters.heightParameters,i,r,a,n),this._passParameters.altitudeFade=c(i-this._lowerBoundEarthRadius),this._passParameters.hazeStrength=t(t(.6,1,s(9500,10500,i-m.radius)),1,this._fadeHaze)}static isSupported(e){return e.renderContext.rctx.capabilities.depthTexture}}export{j as ChapmanAtmosphere};
