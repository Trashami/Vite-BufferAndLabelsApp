/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{disposeMaybe as e,isNone as t}from"../../../core/maybe.js";import{c as r}from"../../../chunks/mat4.js";import{c as i}from"../../../chunks/mat4f64.js";import{AtmosphereType as s}from"./AtmosphereType.js";import{S as o}from"../../../chunks/SimpleAtmosphere.glsl.js";import{SimpleAtmosphereTechnique as a}from"./SimpleAtmosphereTechnique.js";import{SimpleAtmosphereTechniqueConfiguration as n,SimpleAtmosphereGeometry as m}from"./SimpleAtmosphereTechniqueConfiguration.js";import{earthAtmosphereTextureSimple as p}from"./resources/SimpleAtmosphereTexture.js";import{glLayout as c}from"../support/buffer/glUtil.js";import{newLayout as h}from"../support/buffer/InterleavedLayout.js";import{Default3D as u}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{createPolySphereGeometry as f}from"../webgl-engine/lib/GeometryUtil.js";import{VertexArrayObject as l}from"../webgl-engine/lib/VertexArrayObject.js";import{VertexAttribute as b}from"../webgl-engine/lib/VertexAttribute.js";import{BufferObject as g}from"../../webgl/BufferObject.js";import{PixelFormat as _,PixelType as j,TextureWrapMode as x,TextureSamplingMode as d,PrimitiveType as A,Usage as w}from"../../webgl/enums.js";import{Texture as y}from"../../webgl/Texture.js";import{vertexCount as T}from"../../webgl/Util.js";class v{constructor(){this.type=s.Panoramic,this._configuration=new n,this._passParameters=new o}destroy(){this._passParameters.texture=e(this._passParameters.texture),this._vao=e(this._vao)}initializeRenderContext(e){this._configuration.geometry=m.Cylinder,this._technique=e.shaderTechniqueRepository.acquire(a,this._configuration);const t=e.renderContext.rctx;this._vao=this._createVertexArrayObject(t),this._vaoCount=T(this._vao,"geometry"),this._passParameters.texture=new y(t,{pixelFormat:_.RGBA,dataType:j.UNSIGNED_BYTE,wrapMode:x.CLAMP_TO_EDGE,samplingMode:d.LINEAR,flipped:!0,width:1,height:512},p),e.requestRender()}render(e){if(t(this._vao)||t(this._passParameters.texture))return;const r=e.rctx,i=r.bindTechnique(this._technique,this._passParameters,e.bindParameters);P(O,e.bindParameters.camera.viewMatrix),i.setUniformMatrix4fv("view",O),r.bindVAO(this._vao),i.assertCompatibleVertexAttributeLocations(this._vao),r.drawArrays(A.TRIANGLES,0,this._vaoCount)}renderHaze(){return!1}_createVertexArrayObject(e){const t=f(1,2,!1),r=t.indices.get(b.POSITION);for(let a=0;a<r.length;a+=3){const e=r[a];r[a]=r[a+2],r[a+2]=e}const i=t.vertexAttributes.get(b.POSITION).data,s=I.createBuffer(r.length),o=s.position;for(let a=0;a<r.length;++a){const e=3*r[a];o.set(a,0,i[e]),o.set(a,1,i[e+1]),o.set(a,2,i[e+2])}return new l(e,u,{geometry:c(I)},{geometry:g.createVertex(e,w.STATIC_DRAW,s.buffer)})}}function P(e,t){r(e,t),e[12]=0,e[13]=0,e[14]=0,e[15]=1}const O=i(),I=h().vec3f(b.POSITION);export{v as PanoramicAtmosphere};
