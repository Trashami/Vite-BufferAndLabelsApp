/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import{smoothstep as s}from"../../../core/mathUtils.js";import{releaseMaybe as r,disposeMaybe as o,isNone as i}from"../../../core/maybe.js";import{property as a}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as n}from"../../../core/accessorSupport/decorators/subclass.js";import{n as c,e as h,g as p,h as m,l as u}from"../../../chunks/vec3.js";import{c as d}from"../../../chunks/vec3f64.js";import{getReferenceEllipsoid as g}from"../../../geometry/projectionEllipsoid.js";import{atmosphereHeight as _}from"./atmosphereUtils.js";import{F as l}from"../../../chunks/FogHaze.glsl.js";import{FogHazeTechniqueConfiguration as f,FogTechnique as j}from"./FogTechnique.js";import{weatherHeightLimit as T}from"./weather.js";import{Pos2Tex as b}from"../webgl-engine/lib/DefaultVertexBufferLayouts.js";import{createQuadVAO as y}from"../webgl-engine/lib/glUtil3D.js";import{PrimitiveType as x}from"../../webgl/enums.js";const v=.95,q=1;let P=class extends t{constructor(e){super(e),this._passParameters=new l;const t=e.context.renderContext.rctx;this._vao=y(t,b);const s=g(e.view.spatialReference);this._planetRadius=s.radius,this._atmosphereRadius=s.radius+_}destroy(){this._thickFogTechniqueCached=r(this._thickFogTechniqueCached),this._vao=o(this._vao)}get _shaderTechniqueRepository(){return this.context.shaderTechniqueRepository}set strength(e){this._passParameters.fogStrength=e}get strength(){return this._passParameters.fogStrength}get _thickFogTechnique(){if(i(this._thickFogTechniqueCached)){const e=new f;e.haze=!1,this._thickFogTechniqueCached=this._shaderTechniqueRepository.acquire(j,e)}return this._thickFogTechniqueCached}render(e,t){if(this._update(e,t),this._passParameters.fogAmount<=0)return;const s=this._thickFogTechnique;if(!s.compiled)return void this.context.requestRender();const r=e.offscreenRenderingHelper;r.renderDepthDetached((()=>{this._passParameters.depthTexture=r.depthTexture;const t=e.rctx.bindTechnique(s,this._passParameters,e.bindParameters);this._renderFog(t,e)}))}_renderFog(e,t){if(i(this._vao))return;const s=t.rctx;s.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),s.drawArrays(x.TRIANGLE_STRIP,0,4)}_update(e,t){const r=e.bindParameters.camera;c(R,r.eye);const o=Math.max(0,h(R,e.bindParameters.lighting.mainLight.direction)),i=t.color;p(k,i,.1),m(this._passParameters.fogColor,k,i,o);const a=u(r.eye),n=a*a;this._passParameters.atmosphereC=n-this._atmosphereRadius*this._atmosphereRadius,this._passParameters.fogAmount=(1-s(v*T,q*T,Math.abs(a-this._planetRadius)))*t.amount,this._passParameters.fogStrength=t.strength}static isSupported(e){return e.capabilities.depthTexture}};e([a({constructOnly:!0})],P.prototype,"context",void 0),e([a({constructOnly:!0})],P.prototype,"view",void 0),P=e([n("esri.views.3d.environment.Fog")],P);class F{constructor(){this.color=d(),this.strength=0,this.amount=0}}const R=d(),k=d();export{P as Fog,F as FogParameters};
