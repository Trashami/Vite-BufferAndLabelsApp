/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import{smoothstep as s}from"../../../core/mathUtils.js";import{releaseMaybe as r,disposeMaybe as a,isNone as i}from"../../../core/maybe.js";import{property as o}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as h}from"../../../core/accessorSupport/decorators/subclass.js";import{n,e as c,g as p,h as m,l as u}from"../../../chunks/vec3.js";import{c as d,f as l}from"../../../chunks/vec3f64.js";import{getReferenceEllipsoid as _}from"../../../geometry/projectionEllipsoid.js";import{atmosphereHeight as f}from"./atmosphereUtils.js";import{F as g}from"../../../chunks/FogHaze.glsl.js";import{FogHazeTechniqueConfiguration as j}from"./FogTechnique.js";import{SimpleHazeTechnique as T}from"./SimpleHazeTechnique.js";import{weatherHeightLimit as b}from"./weather.js";import{Pos2Tex as y}from"../webgl-engine/lib/DefaultVertexBufferLayouts.js";import{createQuadVAO as z}from"../webgl-engine/lib/glUtil3D.js";import{PrimitiveType as v}from"../../webgl/enums.js";const x=.7,q=1;let P=class extends t{constructor(e){super(e),this._passParameters=new g;const t=e.context.renderContext.rctx;this._vao=z(t,y);const s=_(e.view.spatialReference);this._planetRadius=s.radius,this._atmosphereRadius=s.radius+f}destroy(){this._hazeTechniqueCached=r(this._hazeTechniqueCached),this._vao=a(this._vao)}get _shaderTechniqueRepository(){return this.context.shaderTechniqueRepository}set strength(e){this._passParameters.hazeStrength=e}get strength(){return this._passParameters.hazeStrength}get _hazeTechnique(){if(i(this._hazeTechniqueCached)){const e=new j;e.haze=!0,this._hazeTechniqueCached=this._shaderTechniqueRepository.acquire(T,e)}return this._hazeTechniqueCached}render(e,t){if(0===this.view.basemapTerrain.baseOpacity)return;if(this._update(e,t),this._passParameters.hazeAmount<=0)return;const s=this._hazeTechnique;if(!s.compiled)return void this.context.requestRender();const r=e.offscreenRenderingHelper;r.renderDepthDetached((()=>{this._passParameters.depthTexture=r.depthTexture;const t=e.rctx.bindTechnique(s,this._passParameters,e.bindParameters);this._renderSimpleHaze(t,e)}))}_renderSimpleHaze(e,t){if(i(this._vao))return;const s=t.rctx;s.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),s.drawArrays(v.TRIANGLE_STRIP,0,4)}_update(e,t){const r=e.bindParameters.camera;n(w,r.eye);const a=Math.max(0,c(w,e.bindParameters.lighting.mainLight.direction)),i=S;p(C,i,0),m(this._passParameters.hazeColor,C,i,a);const o=u(r.eye),h=o*o;this._passParameters.atmosphereC=h-this._atmosphereRadius*this._atmosphereRadius,this._passParameters.hazeAmount=(1-s(x*b,q*b,Math.abs(o-this._planetRadius)))*t.amount,this._passParameters.fogStrength=t.strength}static isSupported(e){return e.capabilities.depthTexture}};e([o({constructOnly:!0})],P.prototype,"context",void 0),e([o({constructOnly:!0})],P.prototype,"view",void 0),P=e([h("esri.views.3d.environment.SimpleHaze")],P);class R{constructor(){this.strength=0,this.amount=0}}const S=l(.24,.44,.8),w=d(),C=d();export{R as HazeParameters,P as SimpleHaze};
