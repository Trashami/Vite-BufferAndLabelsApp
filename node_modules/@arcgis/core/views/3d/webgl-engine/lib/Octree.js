/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../core/maybe.js";import t from"../../../../core/ObjectPool.js";import n from"../../../../core/PooledArray.js";import{g as o,a as r,d as s,c as i,h}from"../../../../chunks/vec3.js";import{c as a,f as d}from"../../../../chunks/vec3f64.js";import{intersectsSphere as l}from"../../../../geometry/support/frustum.js";import{wrap as c}from"../../../../geometry/support/ray.js";import{h as u,a as f,g as _,j as m,c as p}from"../../../../chunks/sphere.js";import{rayBoxTest as b}from"./Util.js";class g{constructor(e,t){this._objectToBoundingSphere=e,this._maximumObjectsPerNode=10,this._maximumDepth=20,this._degenerateObjects=new Set,this._root=new O,this._objectCount=0,t&&(void 0!==t.maximumObjectsPerNode&&(this._maximumObjectsPerNode=t.maximumObjectsPerNode),void 0!==t.maximumDepth&&(this._maximumDepth=t.maximumDepth))}get bounds(){return this._root.bounds}get halfSize(){return this._root.halfSize}get root(){return this._root.node}get maximumObjectsPerNode(){return this._maximumObjectsPerNode}get maximumDepth(){return this._maximumDepth}get objectCount(){return this._objectCount}destroy(){this._degenerateObjects.clear(),O.clearPool(),B[0]=null,w.prune(),W.prune()}add(e,t=e.length){this._objectCount+=t,this._grow(e,t);const n=O.acquire();for(let o=0;o<t;o++){const t=e[o];this._isDegenerate(t)?this._degenerateObjects.add(t):(n.init(this._root),this._add(t,n))}O.release(n)}remove(t,n=null){this._objectCount-=t.length;const o=O.acquire();for(const r of t){const t=e(n)?n:u(this._objectToBoundingSphere(r),C);z(t[3])?(o.init(this._root),this._remove(r,t,o)):this._degenerateObjects.delete(r)}O.release(o),this._shrink()}update(e,t){if(!z(t[3])&&this._isDegenerate(e))return;const n=R(e);this.remove(n,t),this.add(n)}forEachAlongRay(e,t,n){const o=c(e,t);this._forEachNode(this._root,(e=>{if(!this._intersectsNode(o,e))return!1;const t=e.node;return t.terminals.forAll((e=>{this._intersectsObject(o,e)&&n(e)})),null!==t.residents&&t.residents.forAll((e=>{this._intersectsObject(o,e)&&n(e)})),!0}))}forEachAlongRayWithVerticalOffset(e,t,n,o){const r=c(e,t);this._forEachNode(this._root,(e=>{if(!this._intersectsNodeWithOffset(r,e,o))return!1;const t=e.node;return t.terminals.forAll((e=>{this._intersectsObjectWithOffset(r,e,o)&&n(e)})),null!==t.residents&&t.residents.forAll((e=>{this._intersectsObjectWithOffset(r,e,o)&&n(e)})),!0}))}forEach(e){this._forEachNode(this._root,(t=>{const n=t.node;return n.terminals.forAll(e),null!==n.residents&&n.residents.forAll(e),!0})),this._degenerateObjects.forEach(e)}forEachDegenerateObject(e){this._degenerateObjects.forEach(e)}findClosest(e,t,n,s=(()=>!0),i=1/0){let h=1/0,a=1/0,d=null;const c=E(e,t),u=o=>{if(--i,!s(o))return;const r=this._objectToBoundingSphere(o);if(!l(n,r))return;const c=M(e,t,_(r)),u=c-r[3],f=c+r[3];u<h&&(h=u,a=f,d=o)};return this._forEachNodeDepthOrdered(this._root,(s=>{if(i<=0||!l(n,s.bounds))return!1;o(F,c,s.halfSize),r(F,F,s.bounds);if(M(e,t,F)>a)return!1;const h=s.node;return h.terminals.forAll((e=>u(e))),null!==h.residents&&h.residents.forAll((e=>u(e))),!0}),e,t),d}forEachInDepthRange(e,t,n,s,i,h,a){let d=-1/0,c=1/0;const u={setRange:e=>{n===g.DepthOrder.FRONT_TO_BACK?(d=Math.max(d,e.near),c=Math.min(c,e.far)):(d=Math.max(d,-e.far),c=Math.min(c,-e.near))}};u.setRange(s);const f=M(t,n,e),m=E(t,n),p=E(t,-n),b=e=>{if(!a(e))return;const o=this._objectToBoundingSphere(e),r=_(o),s=M(t,n,r)-f,m=s-o[3],p=s+o[3];m>c||p<d||!l(h,o)||i(e,u)};this._forEachNodeDepthOrdered(this._root,(e=>{if(!l(h,e.bounds))return!1;o(F,m,e.halfSize),r(F,F,e.bounds);if(M(t,n,F)-f>c)return!1;o(F,p,e.halfSize),r(F,F,e.bounds);if(M(t,n,F)-f<d)return!1;const s=e.node;return s.terminals.forAll((e=>b(e))),null!==s.residents&&s.residents.forAll((e=>b(e))),!0}),t,n)}forEachNode(e){this._forEachNode(this._root,(t=>e(t.node,t.bounds,t.halfSize)))}forEachNeighbor(e,t){const n=f(t),o=_(t),r=t=>{const r=this._objectToBoundingSphere(t),i=f(r),h=n+i;return!(s(_(r),o)-h*h<=0)||e(t)};let i=!0;const h=e=>{i&&(i=r(e))};this._forEachNode(this._root,(e=>{const t=f(e.bounds),r=n+t;if(s(_(e.bounds),o)-r*r>0)return!1;const a=e.node;return a.terminals.forAll(h),i&&null!==a.residents&&a.residents.forAll(h),i})),i&&this.forEachDegenerateObject(h)}_intersectsNode(e,t){return x(t.bounds,2*-t.halfSize,k),x(t.bounds,2*t.halfSize,q),b(e.origin,e.direction,k,q)}_intersectsNodeWithOffset(e,t,n){return x(t.bounds,2*-t.halfSize,k),x(t.bounds,2*t.halfSize,q),n.applyToMinMax(k,q),b(e.origin,e.direction,k,q)}_intersectsObject(e,t){const n=this._objectToBoundingSphere(t);return!(n[3]>0)||m(n,e)}_intersectsObjectWithOffset(e,t,n){const o=this._objectToBoundingSphere(t);return!(o[3]>0)||m(n.applyToBoundingSphere(o),e)}_forEachNode(e,t){let n=O.acquire().init(e);const o=[n];for(;0!==o.length;){if(n=o.pop(),t(n)&&!n.isLeaf())for(let e=0;e<n.node.children.length;e++){n.node.children[e]&&o.push(O.acquire().init(n).advance(e))}O.release(n)}}_forEachNodeDepthOrdered(e,t,n,o=g.DepthOrder.FRONT_TO_BACK){let r=O.acquire().init(e);const s=[r];for(T(n,o,V);0!==s.length;){if(r=s.pop(),t(r)&&!r.isLeaf())for(let e=7;e>=0;--e){const t=V[e];r.node.children[t]&&s.push(O.acquire().init(r).advance(t))}O.release(r)}}_remove(e,t,n){w.clear();const o=n.advanceTo(t,((e,t)=>{w.push(e.node),w.push(t)}))?n.node.terminals:n.node.residents;if(o.removeUnordered(e),0===o.length)for(let r=w.length-2;r>=0;r-=2){const e=w.data[r],t=w.data[r+1];if(!this._purge(e,t))break}}_nodeIsEmpty(e){if(0!==e.terminals.length)return!1;if(null!==e.residents)return 0===e.residents.length;for(let t=0;t<e.children.length;t++)if(e.children[t])return!1;return!0}_purge(e,t){return t>=0&&(e.children[t]=null),!!this._nodeIsEmpty(e)&&(null===e.residents&&(e.residents=new n({shrink:!0})),!0)}_add(e,t){t.advanceTo(this._objectToBoundingSphere(e))?t.node.terminals.push(e):(t.node.residents.push(e),t.node.residents.length>this._maximumObjectsPerNode&&t.depth<this._maximumDepth&&this._split(t))}_split(e){const t=e.node.residents;e.node.residents=null;for(let n=0;n<t.length;n++){const o=O.acquire().init(e);this._add(t.getItemAt(n),o),O.release(o)}}_grow(e,t){if(0!==t&&(N(e,t,(e=>this._objectToBoundingSphere(e)),I),z(I[3])&&!this._fitsInsideTree(I)))if(this._nodeIsEmpty(this._root.node))u(I,this._root.bounds),this._root.halfSize=1.25*I[3];else{const e=this._rootBoundsForRootAsSubNode(I);this._placingRootViolatesMaxDepth(e)?this._rebuildTree(I,e):this._growRootAsSubNode(e),O.release(e)}}_rebuildTree(e,t){i(P,t.bounds),P[3]=t.halfSize,N([e,P],2,(e=>e),L);const n=O.acquire().init(this._root);this._root.initFrom(null,L,1.25*L[3]),this._forEachNode(n,(e=>(this.add(e.node.terminals.data,e.node.terminals.length),null!==e.node.residents&&this.add(e.node.residents.data,e.node.residents.length),!0))),O.release(n)}_placingRootViolatesMaxDepth(e){const t=Math.log(e.halfSize/this._root.halfSize)*Math.LOG2E;let n=0;return this._forEachNode(this._root,(e=>(n=Math.max(n,e.depth),n+t<=this._maximumDepth))),n+t>this._maximumDepth}_rootBoundsForRootAsSubNode(e){const t=e[3],n=e;let o=-1/0;const r=this._root.bounds,s=this._root.halfSize;for(let i=0;i<3;i++){const e=r[i]-s-(n[i]-t),h=n[i]+t-(r[i]+s),a=Math.max(0,Math.ceil(e/(2*s))),d=Math.max(0,Math.ceil(h/(2*s)))+1,l=2**Math.ceil(Math.log(a+d)*Math.LOG2E);o=Math.max(o,l),K[i].min=a,K[i].max=d}for(let i=0;i<3;i++){let e=K[i].min,t=K[i].max;const n=(o-(e+t))/2;e+=Math.ceil(n),t+=Math.floor(n);const h=r[i]-s-e*s*2;y[i]=h+(t+e)*s}return y[3]=o*s*v,O.acquire().initFrom(null,y,o*s,0)}_growRootAsSubNode(e){const t=this._root.node;i(I,this._root.bounds),I[3]=this._root.halfSize,this._root.init(e),e.advanceTo(I,null,!0),e.node.children=t.children,e.node.residents=t.residents,e.node.terminals=t.terminals}_shrink(){for(;;){const e=this._findShrinkIndex();if(-1===e)break;this._root.advance(e),this._root.depth=0}}_findShrinkIndex(){if(0!==this._root.node.terminals.length||this._root.isLeaf())return-1;let e=null;const t=this._root.node.children;let n=0,o=0;for(;o<t.length&&null==e;)n=o++,e=t[n];for(;o<t.length;)if(t[o++])return-1;return n}_isDegenerate(e){return!z(this._objectToBoundingSphere(e)[3])}_fitsInsideTree(e){const t=this._root.bounds,n=this._root.halfSize;return e[3]<=n&&e[0]>=t[0]-n&&e[0]<=t[0]+n&&e[1]>=t[1]-n&&e[1]<=t[1]+n&&e[2]>=t[2]-n&&e[2]<=t[2]+n}}class O{constructor(){this.bounds=p(),this.halfSize=0,this.initFrom(null,null,0,0)}init(e){return this.initFrom(e.node,e.bounds,e.halfSize,e.depth)}initFrom(t,n,o,r=this.depth){return this.node=e(t)?t:O.createEmptyNode(),e(n)&&u(n,this.bounds),this.halfSize=o,this.depth=r,this}advance(e){let t=this.node.children[e];t||(t=O.createEmptyNode(),this.node.children[e]=t),this.node=t,this.halfSize/=2,this.depth++;const n=A[e];return this.bounds[0]+=n[0]*this.halfSize,this.bounds[1]+=n[1]*this.halfSize,this.bounds[2]+=n[2]*this.halfSize,this.bounds[3]=this.halfSize*v,this}advanceTo(e,t,n=!1){for(;;){if(this.isTerminalFor(e))return t&&t(this,-1),!0;if(this.isLeaf()){if(!n)return t&&t(this,-1),!1;this.node.residents=null}const o=this._childIndex(e);t&&t(this,o),this.advance(o)}}isLeaf(){return null!=this.node.residents}isTerminalFor(e){return e[3]>this.halfSize/2}_childIndex(e){const t=this.bounds;return(t[0]<e[0]?1:0)+(t[1]<e[1]?2:0)+(t[2]<e[2]?4:0)}static createEmptyNode(){return{children:[null,null,null,null,null,null,null,null],terminals:new n({shrink:!0}),residents:new n({shrink:!0})}}static acquire(){return O._pool.acquire()}static release(e){O._pool.release(e)}static clearPool(){O._pool.prune()}}function j(e,t){e[0]=Math.min(e[0],t[0]-t[3]),e[1]=Math.min(e[1],t[1]-t[3]),e[2]=Math.min(e[2],t[2]-t[3])}function S(e,t){e[0]=Math.max(e[0],t[0]+t[3]),e[1]=Math.max(e[1],t[1]+t[3]),e[2]=Math.max(e[2],t[2]+t[3])}function x(e,t,n){n[0]=e[0]+t,n[1]=e[1]+t,n[2]=e[2]+t}function N(e,t,n,o){if(1===t){const t=n(e[0]);u(t,o)}else{k[0]=1/0,k[1]=1/0,k[2]=1/0,q[0]=-1/0,q[1]=-1/0,q[2]=-1/0;for(let o=0;o<t;o++){const t=n(e[o]);z(t[3])&&(j(k,t),S(q,t))}h(o,k,q,.5),o[3]=Math.max(q[0]-k[0],q[1]-k[1],q[2]-k[2])/2}}function T(e,t,n){if(!W.length)for(let o=0;o<8;++o)W.push({index:0,distance:0});for(let o=0;o<8;++o){const n=A[o];W.data[o].index=o,W.data[o].distance=M(e,t,n)}W.sort(((e,t)=>e.distance-t.distance));for(let o=0;o<8;++o)n[o]=W.data[o].index}function E(e,t){let n,o=1/0;for(let r=0;r<8;++r){const s=M(e,t,D[r]);s<o&&(o=s,n=D[r])}return n}function M(e,t,n){return t*(e[0]*n[0]+e[1]*n[1]+e[2]*n[2])}function z(e){return!isNaN(e)&&e!==-1/0&&e!==1/0&&e>0}O._pool=new t(O),function(e){var t;(t=e.DepthOrder||(e.DepthOrder={}))[t.FRONT_TO_BACK=1]="FRONT_TO_BACK",t[t.BACK_TO_FRONT=-1]="BACK_TO_FRONT"}(g||(g={}));const A=[d(-1,-1,-1),d(1,-1,-1),d(-1,1,-1),d(1,1,-1),d(-1,-1,1),d(1,-1,1),d(-1,1,1),d(1,1,1)],D=[d(-1,-1,-1),d(-1,-1,1),d(-1,1,-1),d(-1,1,1),d(1,-1,-1),d(1,-1,1),d(1,1,-1),d(1,1,1)],v=Math.sqrt(3),B=[null];function R(e){return B[0]=e,B}const y=p(),F=a(),k=a(),q=a(),w=new n,C=p(),I=p(),P=p(),L=p(),K=[{min:0,max:0},{min:0,max:0},{min:0,max:0}],W=new n,V=[0,0,0,0,0,0,0,0],G=g;export{G as default};
