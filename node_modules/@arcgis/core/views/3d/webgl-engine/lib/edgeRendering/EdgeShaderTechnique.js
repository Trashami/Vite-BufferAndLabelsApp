/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{ReloadableShaderModule as e}from"../../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as r}from"../../core/shaderTechnique/ShaderTechnique.js";import{Program as i}from"../Program.js";import{EdgeShaderAttributeLocations as t}from"./bufferLayouts.js";import{E as o}from"../../../../../chunks/EdgeShader.glsl.js";import{ContextType as n}from"../../../../webgl/context-util.js";import{BlendOperation as s,BlendFactor as a,CompareFunction as d}from"../../../../webgl/enums.js";import{makePipelineState as l,separateBlendingParams as m,defaultColorWriteParams as h,defaultDepthWriteParams as u}from"../../../../webgl/renderState.js";class c extends r{initializeConfiguration(e,r){r.hasWebGL2Context=e.rctx.type===n.WEBGL2}initializeProgram(e){return new i(e.rctx,c.shader.get().build(this.configuration),t)}initializePipeline(e){return e.blendMinMax?l({blending:m(a.ONE,a.ONE,a.ZERO,a.ONE,s.ADD,e.blendMinMax.MAX),depthTest:{func:d.LEQUAL},colorWrite:h}):l({depthTest:{func:d.LEQUAL},depthWrite:u,colorWrite:h})}}c.shader=new e(o,(()=>import("../../shaders/sources/edgeRenderer/EdgeShader.glsl.js")));export{c as EdgeShaderTechnique};
