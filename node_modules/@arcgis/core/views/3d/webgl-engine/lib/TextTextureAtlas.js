/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import t from"../../../../core/Accessor.js";import s from"../../../../core/Evented.js";import{someMap as i}from"../../../../core/MapUtils.js";import{nextHighestPowerOfTwo as r}from"../../../../core/mathUtils.js";import{disposeMaybe as a,isSome as n,removeMaybe as h}from"../../../../core/maybe.js";import{generateUID as o}from"../../../../core/uid.js";import{property as l}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as d}from"../../../../core/accessorSupport/decorators/subclass.js";import{ContentObjectType as c}from"./ContentObjectType.js";import{textTextureAtlas as m}from"./testUtils.js";import{VertexAttribute as _}from"./VertexAttribute.js";import{TaskPriority as p,noBudget as g}from"../../../support/Scheduler.js";import{TextureType as u,PixelFormat as x,PixelType as T,TextureWrapMode as A,TextureSamplingMode as f}from"../../../webgl/enums.js";import{Texture as y}from"../../../webgl/Texture.js";const v=512,z=4096,R=.85,w=.95;let b=class extends t{constructor(e){super(e),this.type=c.Texture,this.id=o(),this.events=new s,this._glTexture=null,this._needsClear=!1,this._elementsToAddOrUpdate=new Map,this._elementsToRemove=new Map,this._elementsToRender=new Map,this._elements=new Map,this._stageObjects=new Map,this.updating=!1}initialize(){this._stage=this.view._stage,this._canvas=this._create2DCanvas(),this._ctx=this._canvas.getContext("2d"),this._stage.add(this);const e=this._computeAtlasResolution(this.view.width,this.view.height);this._createAtlasRegion(e),this._update2DCanvasSize(),this._resetAtlasCursor()}unload(){this._glTexture=a(this._glTexture),this.updating=!1,this.events.emit("unloaded")}get width(){return this._atlas.size.width}get height(){return this._atlas.size.height}get requiresFrameUpdates(){return!1}_createDescriptor(e){return{target:u.TEXTURE_2D,pixelFormat:x.RGBA,dataType:T.UNSIGNED_BYTE,wrapMode:A.CLAMP_TO_EDGE,flipped:!0,samplingMode:f.LINEAR_MIPMAP_LINEAR,hasMipmap:!0,preMultiplyAlpha:!0,maxAnisotropy:e.parameters.maxMaxAnisotropy}}get glTexture(){return this._glTexture}load(e){return n(this._glTexture)||(this._glTexture=new y(e,this._createDescriptor(e),this._canvas),this._frameWorker=this.view.resourceController.scheduler.registerTask(p.TEXT_TEXTURE_ATLAS,this),this.setDirty()),this._glTexture}dispose(){this._elements=null,this._elementsToAddOrUpdate=null,this._elementsToRemove=null,this._elementsToRender=null,this._frameWorker=h(this._frameWorker),this._glTexture&&(this._stage.remove(this),this._glTexture=a(this._glTexture)),this._canvas.width=0,this._canvas.height=0,this._canvas=null,this._ctx=null}_create2DCanvas(){const e=document.createElement("canvas");return e.setAttribute("id","canvas2d"),e.setAttribute("style","display:none"),e.setAttribute("width",v.toString()),e.setAttribute("height",v.toString()),e}_update2DCanvasSize(){this._canvas.setAttribute("width",this._atlas.size.width.toString()),this._canvas.setAttribute("height",this._atlas.size.height.toString())}_createAtlasRegion(e=v){this._atlas={size:{width:e,height:e},cursor:{x:0,y:0},lineHeight:0}}_computeAtlasResolution(e,t){let s=Math.max(e,t);return s+=256,s=r(s),s=Math.min(s,z),s}_resizeAtlas(e,t){t=t||e;const s=this._atlas;s.size.width=e,s.size.height=t,n(this._glTexture)&&this._glTexture.resize(e,t),this._update2DCanvasSize()}_resetAtlasCursor(){const e=this._atlas;e.cursor.x=O,e.cursor.y=O+j,e.lineHeight=0,this._needsClear=!0}_getAtlasUsage(){const e=this._atlas;return(e.cursor.x+e.cursor.y*e.size.width)/(e.size.width*e.size.height)}_getExpectedAtlasUsage(){const e=this._elementsToRemove.size,t=this._elementsToAddOrUpdate.size,s=this._elements.size;return this._getAtlasUsage()/s*(s+t-e)}_addAtlasElement(e,t,s,i){const r=this._atlas,{renderedWidth:a,renderedHeight:n,displayWidth:h,displayHeight:o}=e.textRenderer;e.placement.offset.x=r.cursor.x,e.placement.offset.y=r.cursor.y,e.placement.size.width=a,e.placement.size.height=n,e.placement.size.displayWidth=h,e.placement.size.displayHeight=o,e.placement.uvMinMax=[e.placement.offset.x/r.size.width,1-(e.placement.offset.y+n)/r.size.height,(e.placement.offset.x+a)/r.size.width,1-e.placement.offset.y/r.size.height],r.cursor.x+=s,r.lineHeight=Math.max(r.lineHeight,i),this._elements.set(t,e)}_removeAtlasElement(e){if(e&&this._elements.has(e.textId)){const t=e.placement.offset,s=e.placement.size;this._ctx.clearRect(t.x,t.y,s.width,s.height),this._elements.delete(e.textId)}}_ensureStageObjects(e){const t=this._stageObjects.get(e);if(t)return t;const s=new Set;return this._stageObjects.set(e,s),s}_addStageObject(e,t){this._ensureStageObjects(e).add(t)}_removeStageObject(e,t){const s=this._stageObjects.get(e);s&&s.delete(t)&&(t.geometries[0].vertexAttributes.get(_.SIZE).data=[0,0],t.geometryVertexAttrsUpdated(t.geometryRecords[0]))}_processAddition(e,t){const s=this._atlas,i=e.textId,r=e.textRenderer.renderedWidth,a=e.textRenderer.renderedHeight,n=r+O,h=a+O+j;if(s.cursor.x+n<s.size.width&&s.cursor.y+h<s.size.height)this._addAtlasElement(e,i,n,h),this._elementsToRender.set(i,e),this._elementsToAddOrUpdate.delete(i);else{if(!(s.cursor.y+h+s.lineHeight<s.size.height)){const e=this._getExpectedAtlasUsage(),i=e>R&&s.size.width<z;return i&&this._resizeAtlas(2*s.size.width,2*s.size.height),!t||!i&&e>w&&s.size.width===z?(this._processRemovals(),E.OK):(this._repack(),E.REPACK)}s.cursor.x=O,s.cursor.y+=s.lineHeight,s.lineHeight=0,this._addAtlasElement(e,i,n,h),this._elementsToRender.set(i,e),this._elementsToAddOrUpdate.delete(i)}return E.OK}_processRemovals(){this._elementsToRemove.forEach(((e,t)=>{const s=this._stageObjects.get(t);s&&0!==s.size||this._removeAtlasElement(e),s&&0===s.size&&this._stageObjects.delete(t)})),this._elementsToRemove.clear()}_repack(){this._processRemovals(),this._elements.forEach(((e,t)=>{e.rendered=!1,this._elementsToAddOrUpdate.set(t,e)})),this._elements.clear(),this._resetAtlasCursor(),this._elementsToRender.clear()}_processRenderingRequest(e){this._ctx.clearRect(e.placement.offset.x,e.placement.offset.y,e.placement.size.width,e.placement.size.height),e.textRenderer.render(this._ctx,e.placement.offset.x,e.placement.offset.y);const t=this._stageObjects.get(e.textId);t&&t.forEach((t=>{t.geometries[0].vertexAttributes.get(_.UV0).data=new Float32Array(e.placement.uvMinMax),t.geometries[0].vertexAttributes.get(_.SIZE).data=[e.placement.size.displayWidth,e.placement.size.displayHeight],t.geometryVertexAttrsUpdated(t.geometryRecords[0])})),e.rendered=!0}get running(){return this.updating}runTask(e,t=!0){if(!this._glTexture)return;let s=!1;if(i(this._elementsToAddOrUpdate,((e,i)=>{const r=this._elements.get(i);if(r&&r.rendered){const e=this._stageObjects.get(i);return e&&e.forEach((e=>{const t=e.geometries[0].vertexAttributes,s=this._elements.get(i);t.get(_.UV0).data=new Float32Array(s.placement.uvMinMax),t.get(_.SIZE).data=new Float32Array([s.placement.size.displayWidth,s.placement.size.displayHeight]),e.geometryVertexAttrsUpdated(e.geometryRecords[0])})),this._elementsToAddOrUpdate.delete(i),!1}return this._processAddition(this._elementsToAddOrUpdate.get(i),t)===E.REPACK&&(s=!0,!0)})),s)return void this.runTask(g,!1);let r=!1;this._elementsToRender.size>0&&this._needsClear&&(this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height),this._needsClear=!1),i(this._elementsToRender,((t,s)=>(this._processRenderingRequest(t),this._elementsToRender.delete(s),r=!0,e.madeProgress(),e.done))),r&&n(this._glTexture)&&this._glTexture.setData(this._canvas),this.updating=this._elementsToRender.size>0,!this.updating&&m.orderedRepackingEnabled&&this.repackOrdered()}addTextTexture(e,t){const s=e.key;this._elementsToAddOrUpdate.has(s)||this._elementsToAddOrUpdate.set(s,{textId:s,placement:{offset:{x:0,y:0},size:{width:0,height:0,displayWidth:0,displayHeight:0},uvMinMax:[]},textRenderer:e,rendered:!1}),this._addStageObject(s,t),this._elementsToRemove.delete(s),this.setDirty()}removeTextTexture(e,t){const s=e.key;this._elementsToRemove.set(s,this._elements.get(s)),this._removeStageObject(s,t)}setDirty(){this._glTexture&&(this.updating=!0)}repackOrdered(){if(0===this._elements.size)return;const e=[];this._elements.forEach(((t,s)=>e.push({element:t,key:s})));let t=!0;for(let s=0;s<e.length-1;s++)if(e[s].key.localeCompare(e[s+1].key)>0){t=!1;break}if(!t||this._elementsToRemove.size){e.sort(((e,t)=>e.key.localeCompare(t.key))),this._elements.clear();for(const{element:t,key:s}of e)this._elements.set(s,t);this._repack(),this.setDirty()}}get test(){const{_elements:e,_stageObjects:t,_elementsToRemove:s,_atlas:i}=this,r=this;return{elements:e,stageObjects:t,elementsToRemove:s,atlas:i,_resizeAtlas:(e,t)=>r._resizeAtlas(e,t),run:(e,t)=>r.runTask(e,t)}}};e([l({constructOnly:!0})],b.prototype,"view",void 0),e([l({type:Boolean})],b.prototype,"updating",void 0),b=e([d("esri.views.3d.webgl-engine.lib.TextTextureAtlas")],b);const O=2,j=2;var E;!function(e){e[e.OK=0]="OK",e[e.REPACK=1]="REPACK"}(E||(E={}));export{b as TextTextureAtlas};
