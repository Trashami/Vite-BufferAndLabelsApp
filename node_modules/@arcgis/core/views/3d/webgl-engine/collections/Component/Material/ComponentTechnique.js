/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{ViewingMode as e}from"../../../../../ViewingMode.js";import{IntegratedMeshMode as r}from"./ComponentTechniqueConfiguration.js";import{C as t}from"../../../../../../chunks/ComponentShader.glsl.js";import{ShaderOutput as i}from"../../../core/shaderLibrary/ShaderOutput.js";import{doublePrecisionRequiresObfuscation as o}from"../../../core/shaderLibrary/util/DoublePrecision.glsl.js";import{ReloadableShaderModule as n}from"../../../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as s}from"../../../core/shaderTechnique/ShaderTechnique.js";import{StencilBits as l}from"../../../lib/basicInterfaces.js";import{blendingDefault as a,oitBlending as c,oitDepthTest as u,OITPolygonOffset as p}from"../../../lib/OrderIndependentTransparency.js";import{Program as m}from"../../../lib/Program.js";import{stencilWriteMaskOn as d,replaceBitWhenDepthTestPasses as h,stencilBaseAllZerosParams as f}from"../../../lib/StencilUtils.js";import{TransparencyPassType as b}from"../../../lib/TransparencyPassType.js";import{VertexAttribute as g}from"../../../lib/VertexAttribute.js";import{ContextType as O}from"../../../../../webgl/context-util.js";import{makePipelineState as j,cullingParams as P,defaultDepthWriteParams as M,defaultColorWriteParams as S}from"../../../../../webgl/renderState.js";class T extends s{initializeConfiguration(r,t){t.hasWebGL2Context=r.rctx.type===O.WEBGL2,t.spherical=r.viewingMode===e.Global,t.doublePrecisionRequiresObfuscation=o(r.rctx)}initializeProgram(e){return new m(e.rctx,T.shader.get().build(this.configuration),C)}_setPipelineState(e){const t=this.configuration,o=t.integratedMeshMode!==r.None,n=e===b.NONE,s=e===b.FrontFace;return j({blending:t.output!==i.Color&&t.output!==i.Alpha||!t.blendingEnabled?null:n?a:c(e),culling:P(t.cullFace),depthTest:{func:u(e)},depthWrite:n||s?M:null,colorWrite:S,stencilWrite:o||t.hasOccludees?d:null,stencilTest:o?h(l.IntegratedMeshMaskExcluded):t.hasOccludees?f:null,polygonOffset:n||s?t.hasPolygonOffset?{factor:2,units:2}:null:p})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}}T.shader=new n(t,(()=>import("./shader/ComponentShader.glsl.js")));const C=new Map([[g.POSITION,0],[g.NORMAL,1],[g.NORMALCOMPRESSED,1],[g.COLOR,2],[g.UV0,3],[g.UVREGION,4],[g.COMPONENTINDEX,5]]);export{T as ComponentTechnique,C as attributeLocations};
