/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{ReloadableShaderModule as e}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as r}from"../core/shaderTechnique/ShaderTechnique.js";import{Default3D as t}from"../lib/DefaultVertexAttributeLocations.js";import{oitBlending as i,oitDepthTest as o,oitDepthWrite as n}from"../lib/OrderIndependentTransparency.js";import{Program as s}from"../lib/Program.js";import{TransparencyPassType as a}from"../lib/TransparencyPassType.js";import{C as l}from"../../../../chunks/CheckerBoard.glsl.js";import{BlendFactor as p}from"../../../webgl/enums.js";import{separateBlendingParams as c,makePipelineState as m,defaultDepthWriteParams as f,defaultColorWriteParams as d}from"../../../webgl/renderState.js";class h extends r{initializeProgram(e){return new s(e.rctx,h.shader.get().build(this.configuration),t)}_setPipelineState(e){const r=this.configuration,t=e===a.NONE,s=e===a.FrontFace;return m({blending:r.transparent?t?g:i(e):null,depthTest:{func:o(e)},depthWrite:t?r.writeDepth&&f:n(e),colorWrite:d,polygonOffset:t||s?r.polygonOffset&&u:{factor:-1,units:-25}})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}}h.shader=new e(l,(()=>import("./CheckerBoard.glsl.js")));const u={factor:0,units:-25},g=c(p.SRC_ALPHA,p.ONE,p.ONE_MINUS_SRC_ALPHA,p.ONE_MINUS_SRC_ALPHA);export{h as CheckerBoardTechnique};
