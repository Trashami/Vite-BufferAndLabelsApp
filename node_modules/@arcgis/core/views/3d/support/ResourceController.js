/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import r from"../../../core/Handles.js";import{destroyMaybe as s,removeMaybe as o}from"../../../core/maybe.js";import{watch as a,sync as i}from"../../../core/reactiveUtils.js";import{addFrameTask as l}from"../../../core/scheduling.js";import{secondsFromMilliseconds as h}from"../../../core/time.js";import{property as d}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as m}from"../../../core/accessorSupport/decorators/subclass.js";import{maxDownloadSlots as u,downloadSlotsPerClient as n}from"./index.js";import{newMemoryController as p}from"./MemoryController.js";import{StreamDataLoader as c}from"./StreamDataLoader.js";import{ImmediateTask as _,newScheduler as y,TaskPriority as g}from"../../support/Scheduler.js";let f=class extends t{constructor(){super(...arguments),this.updating=!1}};function C(e){return new v({view:e})}e([d({readOnly:!0})],f.prototype,"updating",void 0),f=e([m("esri.views.3d.support.ResourceControllerMain")],f);let v=class extends f{constructor(){super(...arguments),this._scheduler=null,this._memoryController=null,this._streamDataLoader=null,this._scheduleTask=_,this._handles=new r,this._frameTask=null}initialize(){this._scheduler=y(),this._memoryController=p(this.view),this._streamDataLoader=new c,this._streamDataLoader.setup(u,n,this._scheduler),this._handles.add([a((()=>this.view.state?.mode),(e=>this._scheduler.state=e),i),a((()=>this.view.stationary),(()=>this._stationaryChangedHandler()))]),this._frameTask=l({update:e=>this._frame(e)}),this._scheduleTask=this._scheduler.registerTask(g.RESOURCE_CONTROLLER)}destroy(){this._handles=s(this._handles),this._scheduleTask.remove(),this._frameTask=o(this._frameTask),this._streamDataLoader=s(this._streamDataLoader),this._memoryController=s(this._memoryController),this._scheduler=s(this._scheduler)}get updating(){return!!(this._memoryController?.updating||this._streamDataLoader?.updating||this._scheduleTask?.updating)}get scheduler(){return this._scheduler}get memoryController(){return this._memoryController}schedule(e,t,r){return this._scheduleTask.schedule(e,t,r)}createStreamDataRequester(e){const t=this._streamDataLoader;return{request:(r,s,o)=>t.request(r,s,e,o),get busy(){return!t.hasDownloadSlots(e)}}}_frame(e){this.view.suspended||this.view.stateManager&&(this.view.stateManager.step(h(e.deltaTime)),!this._scheduler)||(this._scheduler.updateBudget(e)?(this._memoryController.update(),this._scheduler.frame()):this._memoryController.updating&&this._memoryController.update())}_stationaryChangedHandler(){this.memoryController.resetStableQuality()}get test(){return{getQueueStats:e=>this._streamDataLoader.test.loadQueue.getStatsForType(e)}}};e([d({constructOnly:!0})],v.prototype,"view",void 0),e([d()],v.prototype,"_scheduler",void 0),e([d()],v.prototype,"_memoryController",void 0),e([d()],v.prototype,"_streamDataLoader",void 0),e([d()],v.prototype,"_scheduleTask",void 0),e([d({readOnly:!0})],v.prototype,"updating",null),v=e([m("esri.views.3d.support.ResourceControllerImpl")],v);const j=100;export{j as INTERACTING_TIMEOUT,C as newResourceController};
