/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import e from"../../../../Graphic.js";import t from"../../../../geometry/Polygon.js";import i from"../../../../symbols/FillSymbol3DLayer.js";import s from"../../../../symbols/PointSymbol3D.js";import a from"../../../../symbols/PolygonSymbol3D.js";import o from"../../../../symbols/TextSymbol3DLayer.js";import{TilingScheme as r}from"../../terrain/TilingScheme.js";const h=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];class l{constructor(e,t,s){this._loadingGraphics=new Map,this._loadedGraphics=new Map,this._pendingGraphics=new Map,this._enabled=!0,this._tileFetcher=e,this._view=s,this._tilingScheme=new r(t),this._loadedSymbols=h.map((e=>new a(new i({material:{color:[e[0],e[1],e[2],.6]},outline:{color:"black",size:1}})))),this._loadingSymbols=[new a(new i({material:{color:[200,200,200,.4]},outline:{color:[30,30,30],size:1}}))],this._pendingSymbols=[new a(new i({material:{color:[100,100,100,.4]},outline:{color:[30,30,30],size:1}}))],this._dataExtentSymbol=new a(new i({material:{color:[0,0,0,0]},outline:{color:"green",size:4}}))}destroy(){this.enabled=!1}get enabled(){return this._enabled}set enabled(e){this._enabled=e,this.update()}update(){this._enabled?(this._synchronizeMaps(this._loadingGraphics,{filter:e=>e.isFetching,symbols:this._loadingSymbols}),this._synchronizeMaps(this._loadedGraphics,{filter:e=>!e.isFetching,symbols:this._loadedSymbols}),this._synchronizeMaps(this._pendingGraphics,{filter:e=>!e.isFetching,symbols:this._pendingSymbols}),this.showDataExtent(this._tileFetcher.filterExtent)):(this._loadingGraphics.forEach((e=>{this._view.graphics.removeMany(e)})),this._loadingGraphics.clear(),this._loadedGraphics.forEach((e=>{this._view.graphics.removeMany(e)})),this._loadedGraphics.clear(),this._pendingGraphics.forEach((e=>{this._view.graphics.removeMany(e)})),this._pendingGraphics.clear(),this._dataExtentGraphic&&(this._view.graphics.remove(this._dataExtentGraphic),this._dataExtentGraphic=null))}showDataExtent(i){if(this._dataExtentGraphic&&(this._view.graphics.remove(this._dataExtentGraphic),this._dataExtentGraphic=null),!i)return;const s=t.fromExtent(i);this._dataExtentGraphic=new e({geometry:s,symbol:this._dataExtentSymbol}),this._view.graphics.add(this._dataExtentGraphic)}_synchronizeMaps(t,i){const a=[];t.forEach(((e,t)=>{const s=this._tileFetcher.test.getFeatureTileById(t);s&&i.filter(s)||(this._view.graphics.removeMany(e),a.push(t))})),a.forEach((e=>t.delete(e))),this._tileFetcher.test.forEachFeatureTile((a=>{if(i.filter(a)&&!t.has(a.id)){const[r,h,l]=a.descriptor.lij;this._tilingScheme.ensureMaxLod(r);const n=this._tilingScheme.getExtentGeometry(r,h,l),c=[new e({geometry:n,symbol:i.symbols[r%i.symbols.length]}),new e({geometry:n.center,symbol:new s({verticalOffset:{screenLength:40/.75},callout:{type:"line",color:"white",border:{color:"black"}},symbolLayers:[new o({text:`${r}/${h}/${l}`,halo:{color:"white",size:1/.75},material:{color:"black"},size:16})]})})];t.set(a.id,c),this._view.graphics.addMany(c)}}))}}export{l as FeatureTileFetcher3DDebugger};
