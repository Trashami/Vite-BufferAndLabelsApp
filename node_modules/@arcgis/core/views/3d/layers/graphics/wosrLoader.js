/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import e from"../../../../request.js";import{result as t}from"../../../../core/asyncUtils.js";import{estimateNestedObjectSize as r}from"../../../../core/byteSizeEstimations.js";import n from"../../../../core/Error.js";import s from"../../../../core/Logger.js";import{isSome as a,unwrap as o}from"../../../../core/maybe.js";import{throwIfAbortError as i}from"../../../../core/promiseUtils.js";import{Version as u}from"../../../../core/Version.js";import{d as l}from"../../../../chunks/vec3f64.js";import{empty as c,expandWithVec3 as m}from"../../../../geometry/support/aaBoundingBox.js";import{requestImage as p}from"../../../../support/requestImageUtils.js";import{CullFaceOptions as f,AlphaDiscardMode as d}from"../../webgl-engine/lib/basicInterfaces.js";import{Geometry as g}from"../../webgl-engine/lib/Geometry.js";import{Texture as y}from"../../webgl-engine/lib/Texture.js";import{DefaultMaterial as x}from"../../webgl-engine/materials/DefaultMaterial.js";import{TextureWrapMode as h}from"../../../webgl/enums.js";const w=s.getLogger("esri.views.3d.layers.graphics.objectResourceUtils");async function b(e,t){const n=await v(e,t),s=await E(n.textureDefinitions,t);let a=0;for(const r in s)if(s.hasOwnProperty(r)){const e=s[r];a+=e?.image?e.image.width*e.image.height*4:0}return{resource:n,textures:s,size:a+r(n)}}async function v(r,n){const s=a(n)&&n.streamDataRequester;if(s)return j(r,s,n);const u=await t(e(r,o(n)));if(!0===u.ok)return u.value.data;i(u.error),A(u.error)}async function j(e,r,n){const s=await t(r.request(e,"json",n));if(!0===s.ok)return s.value;i(s.error),A(s.error.details.url)}function A(e){throw new n("",`Request for object resource failed: ${e}`)}function M(e){const t=e.params,r=t.topology;let n=!0;switch(t.vertexAttributes||(w.warn("Geometry must specify vertex attributes"),n=!1),t.topology){case"PerAttributeArray":break;case"Indexed":case null:case void 0:{const e=t.faces;if(e){if(t.vertexAttributes)for(const r in t.vertexAttributes){const t=e[r];t&&t.values?(null!=t.valueType&&"UInt32"!==t.valueType&&(w.warn(`Unsupported indexed geometry indices type '${t.valueType}', only UInt32 is currently supported`),n=!1),null!=t.valuesPerElement&&1!==t.valuesPerElement&&(w.warn(`Unsupported indexed geometry values per element '${t.valuesPerElement}', only 1 is currently supported`),n=!1)):(w.warn(`Indexed geometry does not specify face indices for '${r}' attribute`),n=!1)}}else w.warn("Indexed geometries must specify faces"),n=!1;break}default:w.warn(`Unsupported topology '${r}'`),n=!1}e.params.material||(w.warn("Geometry requires material"),n=!1);const s=e.params.vertexAttributes;for(const a in s){s[a].values||(w.warn("Geometries with externally defined attributes are not yet supported"),n=!1)}return n}function P(e,t){const r=[],n=[],s=[],o=[],i=e.resource,c=u.parse(i.version||"1.0","wosr");k.validate(c);const m=i.model.name,p=i.model.geometries,d=i.materialDefinitions,h=e.textures;let w=0;const b=new Map;for(let u=0;u<p.length;u++){const e=p[u];if(!M(e))continue;const i=T(e),c=e.params.vertexAttributes,m=[];for(const t in c){const e=c[t],r=e.values;m.push([t,{data:r,size:e.valuesPerElement,exclusive:!0}])}const v=[];if("PerAttributeArray"!==e.params.topology){const t=e.params.faces;for(const e in t)v.push([e,t[e].values])}const j=h&&h[i.texture];if(j&&!b.has(i.texture)){const{image:e,params:t}=j,r=new y(e,t);o.push(r),b.set(i.texture,r)}const A=b.get(i.texture),P=A?A.id:void 0;let U=s[i.material]?s[i.material][i.texture]:null;if(!U){const e=d[i.material.substring(i.material.lastIndexOf("/")+1)].params;1===e.transparency&&(e.transparency=0);const r=j&&j.alphaChannelUsage,n=e.transparency>0||"transparency"===r||"maskAndTransparency"===r,o=j?I(j.alphaChannelUsage):void 0,u={ambient:l(e.diffuse),diffuse:l(e.diffuse),opacity:1-(e.transparency||0),transparent:n,textureAlphaMode:o,textureAlphaCutoff:.33,textureId:P,initTextureTransparent:!0,doubleSided:!0,cullFace:f.None,colorMixMode:e.externalColorMixMode||"tint",textureAlphaPremultiplied:!!j&&!!j.params.preMultiplyAlpha};a(t)&&t.materialParamsMixin&&Object.assign(u,t.materialParamsMixin),U=new x(u),s[i.material]||(s[i.material]={}),s[i.material][i.texture]=U}n.push(U);const E=new g(m,v);w+=v.position?v.position.length:0,r.push(E)}return{engineResources:[{name:m,stageResources:{textures:o,materials:n,geometries:r},pivotOffset:i.model.pivotOffset,numberOfVertices:w,lodThreshold:null}],referenceBoundingBox:U(r)}}function U(e){const t=c();return e.forEach((e=>{const r=e.boundingInfo;a(r)&&(m(t,r.getBBMin()),m(t,r.getBBMax()))})),t}async function E(e,t){const r=[];for(const o in e){const n=e[o],s=n.images[0].data;if(!s){w.warn("Externally referenced texture data is not yet supported");continue}const i=n.encoding+";base64,"+s,u="/textureDefinitions/"+o,l="rgba"===n.channels?n.alphaChannelUsage||"transparency":"none",c={noUnpackFlip:!0,wrap:{s:h.REPEAT,t:h.REPEAT},preMultiplyAlpha:I(l)!==d.Opaque},m=a(t)&&t.disableTextures?Promise.resolve(null):p(i,t);r.push(m.then((e=>({refId:u,image:e,params:c,alphaChannelUsage:l}))))}const n=await Promise.all(r),s={};for(const a of n)s[a.refId]=a;return s}function I(e){switch(e){case"mask":return d.Mask;case"maskAndTransparency":return d.MaskBlend;case"none":return d.Opaque;default:return d.Blend}}function T(e){const t=e.params;return{id:1,material:t.material,texture:t.texture,region:t.texture}}const k=new u(1,2,"wosr");export{E as createTextureResources,b as load,P as processLoadResult};
