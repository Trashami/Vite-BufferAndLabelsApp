/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{HandleOwner as i}from"../../../../core/HandleOwner.js";import t from"../../../../core/Logger.js";import{isSome as r,isNone as a}from"../../../../core/maybe.js";import{property as s}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as l}from"../../../../core/accessorSupport/decorators/subclass.js";import{projectBoundingRect as n}from"../../../../geometry/projection.js";import{create as c}from"../../../../geometry/support/aaBoundingRect.js";import{VisibilityFlag as h,VisibilityGroup as o}from"./enums.js";import{scaleBoundsPredicate as p}from"../../../support/layerViewUtils.js";import{TaskPriority as d}from"../../../support/Scheduler.js";const y=t.getLogger("esri.views.3d.layers.graphics.Graphics3DScaleVisibility");let g=class extends i{constructor(e){super(e),this._scaleRangeActive=!1,this._layerScaleRangeVisibilityQuery=!1,this._extent=null,this.graphicsCoreOwner=null,this.layer=null,this.queryGraphicUIDsInExtent=null,this.graphicsCore=null,this.basemapTerrain=null,this.layerScaleEnabled=!0,this.suspended=!1,this._dirty=!0}initialize(){this.updateScaleRangeActive();const e=this.graphicsCoreOwner.view.resourceController.scheduler;this.handles.add(e.registerTask(d.SCALE_VISIBILITY,this)),this.updatingHandles.add((()=>this.layer.effectiveScaleRange),(()=>this.layerMinMaxScaleChangeHandler()))}destroy(){this.updatingHandles.removeAll(),this.handles.removeAll(),this._dirty=!1,this._extent=null,this.graphicsCoreOwner=null,this.layer=null,this.queryGraphicUIDsInExtent=null,this.graphicsCore=null,this.basemapTerrain=null}get updating(){return this._dirty||this.updatingHandles.updating}_setDirty(){this._dirty=!0}setExtent(e){const i=this.graphicsCoreOwner.view.spatialReference,t=this.graphicsCoreOwner.view.basemapTerrain.spatialReference;if(i===t)this._extent=e;else{const r=c();n(e,i,r,t)?this._extent=r:this._extent=null}this._setDirty()}scaleRangeActive(){return this._scaleRangeActive}updateScaleRangeActive(){const e=this.layer,i=e.effectiveScaleRange;let t=this.layerScaleEnabled&&u(i.minScale,i.maxScale);e.labelingInfo&&!t&&(t=e.labelingInfo.some((e=>e&&u(e.minScale,e.maxScale))));const r=this._scaleRangeActive!==t;return this._scaleRangeActive=t,t&&!this.handles.has(b)&&this.basemapTerrain?(this.handles.add(this.basemapTerrain.on("scale-change",(e=>this._scaleUpdateHandler(e))),b),this.layerScaleEnabled&&this.handles.add(this.basemapTerrain.on("tiles-visibility-changed",(()=>this._setDirty())),b)):!t&&this.handles.has(b)&&this.handles.remove(b),r}get running(){return!(!this.graphicsCoreOwner.view.basemapTerrain||!this.updating)}runTask(){const e=this.graphicsCoreOwner.view.basemapTerrain;if(this._extent&&e&&e.ready&&this._scaleRangeActive&&this.layerScaleEnabled){if(!this._layerScaleRangeVisibilityQuery){this._layerScaleRangeVisibilityQuery=!0;const i=this.layer.effectiveScaleRange;e.queryVisibleScaleRange(this._extent,i.minScale,i.maxScale,(e=>this._finishUpdate(e)))}}else this._finishUpdate(!0)}_finishUpdate(e){this._layerScaleRangeVisibilityQuery=!1,this._set("suspended",!e),this._dirty=!1}_visibleAtLayerScale(e){const i=this.layer.effectiveScaleRange;return!this.layerScaleEnabled||p(e,i.minScale||0,i.maxScale||0)}_visibleAtLabelScale(e,i){return p(e,i.minScale||0,i.maxScale||0)}_graphicScale(e){let i;if(r(e.centroid)?i=e.centroid:r(e.graphic.geometry)&&"point"===e.graphic.geometry.type&&(i=e.graphic.geometry),i){return this.graphicsCoreOwner.view.basemapTerrain?this.graphicsCoreOwner.view.basemapTerrain.getScale(i):1}return null}_graphicVisible(e){if(!this.layerScaleEnabled)return!0;const i=this._graphicScale(e);return this._visibleAtLayerScale(i)}updateVisibility(e){if(this._scaleRangeActive){const i=this._graphicVisible(e);return e.setVisibilityFlag(h.SCALE_RANGE,i,o.GRAPHIC)}return!1}updateGraphicLabelScaleVisibility(e){if(!this._scaleRangeActive)return!1;if(!e.labelGraphics||0===e.labelGraphics.length)return!1;const i=this._graphicScale(e),t=this._updateLabelScaleVisibility(e,i);return t&&(this.graphicsCoreOwner.view.deconflictor.setDirty(),this.graphicsCoreOwner.view.labeler.setDirty()),t}_updateLabelScaleVisibility(e,i){if(!e.labelGraphics||0===e.labelGraphics.length)return!1;const t=e.labelGraphics[0]._labelClass;if(t&&null!=t.minScale&&null!=t.maxScale){const r=this._visibleAtLabelScale(i,t);if(e.setVisibilityFlag(h.SCALE_RANGE,r,o.LABEL))return!0}return!1}_scaleUpdateHandler(e){if(this._setDirty(),this.graphicsCoreOwner.suspended)return;const i=e.extent,t=e.scale,s=this._visibleAtLayerScale(t);let l=!1;const c=this.graphicsCoreOwner.view.spatialReference,p=e.spatialReference;if(a(p))return void y.error("scaleUpdate: Internal error, no SpatialReference given for tiles");const d=!p.equals(c);if(d){if(!n(i,p,m,c))return void y.error("scaleUpdate: Internal error, cannot project AABR from "+p+" to wkid "+c)}const g=d?m:i;this.queryGraphicUIDsInExtent(g,c,(e=>{const n=this.graphicsCore.getGraphics3DGraphicById(e);if(a(n))return;const c=n.centroid;r(c)&&(i[0]>c.x||i[1]>c.y||i[2]<c.x||i[3]<c.y)||(n.setVisibilityFlag(h.SCALE_RANGE,s,o.GRAPHIC)&&(l=!0),this._updateLabelScaleVisibility(n,t)&&(l=!0))})),l&&(this.graphicsCoreOwner.view.deconflictor.setDirty(),this.graphicsCoreOwner.view.labeler.setDirty())}layerMinMaxScaleChangeHandler(){this.updateScaleRangeActive()&&!this._scaleRangeActive?this.graphicsCore.modifyGraphics3DGraphicVisibilities((e=>e.clearVisibilityFlag(h.SCALE_RANGE))):this._scaleRangeActive&&this.graphicsCore.updateAllGraphicsVisibility(),this._setDirty()}};function u(e,i){return e>0||i>0}e([s()],g.prototype,"graphicsCoreOwner",void 0),e([s()],g.prototype,"layer",void 0),e([s()],g.prototype,"queryGraphicUIDsInExtent",void 0),e([s()],g.prototype,"graphicsCore",void 0),e([s()],g.prototype,"basemapTerrain",void 0),e([s({constructOnly:!0})],g.prototype,"layerScaleEnabled",void 0),e([s({readOnly:!0})],g.prototype,"suspended",void 0),e([s({readOnly:!0})],g.prototype,"updating",null),e([s()],g.prototype,"_dirty",void 0),g=e([l("esri.views.3d.layers.graphics.Graphics3DScaleVisibility")],g);const b="terrain-events",m=c(),S=g;export{S as default};
