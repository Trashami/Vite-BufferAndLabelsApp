/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{RasterColorizerType as r,RasterColorizerStretchType as o}from"../../2d/engine/imagery/enums.js";import{TileBlendTechniqueConfiguration as i}from"./TileBlendTechniqueConfiguration.js";import{R as t}from"../../../chunks/RasterColorizer.glsl.js";import{ReloadableShaderModule as n}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as s}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{parameter as l}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as a}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as p}from"../webgl-engine/lib/Program.js";import{ContextType as m}from"../../webgl/context-util.js";import{BlendFactor as c}from"../../webgl/enums.js";import{makePipelineState as g,simpleBlendingParams as h,defaultColorWriteParams as u}from"../../webgl/renderState.js";class d extends s{initializeConfiguration(e,r){r.hasWebGL2Context=e.rctx.type===m.WEBGL2}initializeProgram(e){return new p(e.rctx,d.shader.get().build(this.configuration),a)}initializePipeline(){return g({blending:h(c.ONE,c.ONE_MINUS_SRC_ALPHA),colorWrite:u})}}d.shader=new n(t,(()=>import("../webgl-engine/core/shaderLibrary/raster/RasterColorizer.glsl.js")));class b extends i{constructor(){super(...arguments),this.colorizerType=r.Stretch,this.stretchType=o.Noop,this.applyColormap=!0}}e([l({count:r.COUNT})],b.prototype,"colorizerType",void 0),e([l({count:o.COUNT})],b.prototype,"stretchType",void 0),e([l()],b.prototype,"applyColormap",void 0);export{d as RasterColorizerTechnique,b as RasterColorizerTechniqueConfiguration};
