/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import t from"../../../../core/Accessor.js";import i from"../../../../core/Handles.js";import o from"../../../../core/Logger.js";import{destroyMaybe as s,isNone as r,isSome as n}from"../../../../core/maybe.js";import{createQuantity as a}from"../../../../core/quantityUtils.js";import{watch as c,syncAndInitial as l}from"../../../../core/reactiveUtils.js";import{property as m}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as p}from"../../../../core/accessorSupport/decorators/subclass.js";import{i as d}from"../../../../chunks/vec3.js";import{c as h}from"../../../../chunks/vec3f64.js";import{geodesicLength as u}from"../../../../geometry/geometryEngine.js";import v from"../../../../geometry/Polyline.js";import{canProjectWithoutEngine as f,projectPointToVector as _,projectPointToWGS84ComparableLonLat as j}from"../../../../geometry/projection.js";import{getSphericalPCPF as g,SphericalECEFSpatialReference as P,WGS84ECEFSpatialReference as y}from"../../../../geometry/projectionEllipsoid.js";import{isSupported as D,geodesicLengths as w,InverseGeodeticSolverResult as z,inverseGeodeticSolver as A}from"../../../../geometry/support/geodesicUtils.js";import{MeasurementMode as R}from"../interfaces.js";import{applyProjectionAndElevationAlignment as E,logFailedGeometryProjectionError as b}from"../support/projectionUtils.js";import{UnitNormalizer as S}from"../support/UnitNormalizer.js";const U="esri.views.3d.analysis.DirectLineMeasurement.DirectLineMeasurementController",k=o.getLogger(U),C=1e5;let M=class extends t{constructor(e){super(e),this._unitNormalizer=new S,this._handles=new i,this._tempStartPosition=h(),this._tempEndPosition=h(),this._tempCornerPosition=h()}initialize(){const e=this.view.spatialReference,t=g(e),i=t===P?y:t;this._sphericalPCPF=i;const o=f(e,i);this._unitNormalizer.spatialReference=o?i:e,this._handles.add([c((()=>({viewData:this.viewData,startPoint:this.analysis.startPoint})),(({viewData:e,startPoint:t})=>{e.elevationAlignedStartPoint=this._applyProjectionAndElevationAlignment(t)}),l),c((()=>({viewData:this.viewData,endPoint:this.analysis.endPoint})),(({viewData:e,endPoint:t})=>{e.elevationAlignedEndPoint=this._applyProjectionAndElevationAlignment(t)}),l),c((()=>({result:this._computedResult,viewData:this.viewData})),(({result:e,viewData:t})=>{t.result=e}),l)])}destroy(){this._handles=s(this._handles)}_applyProjectionAndElevationAlignment(e){if(r(e))return e;const t=E(e,this.view.spatialReference,this.view.elevationProvider);return r(t)?(b(this.analysis,e.spatialReference,k),null):t}get _computedResult(){const{elevationAlignedStartPoint:e,elevationAlignedEndPoint:t,measurementMode:i}=this.viewData;if(r(e)||r(t))return null;const o=this._euclideanDistances(e,t),s=this._geodesicDistance(e,t,o.horizontal.value),n=i===R.Geodesic||i===R.Auto&&o.horizontal.value>C?"geodesic":"euclidean";return{mode:n,distance:"euclidean"===n?o.direct:s,directDistance:o.direct,horizontalDistance:o.horizontal,verticalDistance:o.vertical,geodesicDistance:s}}_euclideanDistances(e,t){const i=e.clone();i.z=t.z;const o=this._tempStartPosition,s=this._tempEndPosition,r=this._tempCornerPosition,n=this.view.spatialReference,c=this._sphericalPCPF,l=f(n,c)?c:n;_(e,o,l),_(t,s,l),_(i,r,l);const m=d(o,s),p=d(r,s),h=Math.abs(t.z-e.z),u=e=>this._unitNormalizer.normalizeDistance(e),v=u(m),j=u(p),g=u(h);return{direct:a(v,"meters"),horizontal:a(j,"meters"),vertical:a(g,"meters")}}_geodesicDistance(e,t,i){const o=e.spatialReference,s=new v({spatialReference:o});s.addPath([e,t]);const r=o.isGeographic&&D(o)?w([s],"meters")[0]:o.isWebMercator?u(s,"meters"):null,c=n(r)?r:this._fallbackGeodesicDistance(e,t,i);return a(c,"meters")}_fallbackGeodesicDistance(e,t,i){if(j(e,G)&&j(t,L)){const e=new z;return A(e,G,L),e.distance}return i}};e([m()],M.prototype,"view",void 0),e([m()],M.prototype,"analysis",void 0),e([m()],M.prototype,"viewData",void 0),e([m()],M.prototype,"_computedResult",null),M=e([p(U)],M);const G=h(),L=h();export{M as DirectLineMeasurementController};
