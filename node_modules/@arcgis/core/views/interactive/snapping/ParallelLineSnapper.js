/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{unwrap as e}from"../../../core/maybe.js";import{k as t}from"../../../chunks/vec2.js";import{a as r}from"../../../chunks/vec2f64.js";import{absoluteHeightElevationInfo as i}from"../../../support/elevationInfoUtils.js";import{defaults as s}from"./Settings.js";import{SnappingAlgorithm as o}from"./SnappingAlgorithm.js";import{convertPointElevation as n,editEdgeToSnappingEdge as l,squaredScreenDistance as a}from"./snappingUtils.js";import{ParallelLineSnappingCandidate as c}from"./candidates/ParallelLineSnappingCandidate.js";import{anyMapPointToScreenPoint as h}from"../support/viewUtils.js";import{projectPointToLine as d}from"../../support/geometry2dUtils.js";class p extends o{snapNewVertex(e,t){const r=t.editGeometryOperations.data.components[0],s=r.edges.length,o=r.vertices.length,a=[];if(s<2)return a;const{view:c}=this,d=h(e,t.coordinateHelper,i,c),p=n(r.vertices[o-1].pos,c,t),g=n(r.vertices[0].pos,c,t),f=r.edges[s-1];let m=f;do{if(this.edgeExceedsShortLineThreshold(m,t)){const r=l(m,c,t);this._checkEdgeForParalleLines(r,p,e,d,t,a),this._checkEdgeForParalleLines(r,g,e,d,t,a)}m=m.leftVertex.leftEdge}while(m&&m!==f);return a}snapExistingVertex(t,r){const s=[],o=e(r.vertexHandle),a=o.component;if(a.edges.length<3)return s;const{view:c}=this,d=h(t,r.coordinateHelper,i,c),p=o.leftEdge,g=o.rightEdge,f=a.vertices[0],m=n(f.pos,c,r),u=a.vertices.length,v=a.vertices[u-1],E=n(v.pos,c,r),L=a.edges[0];let x=L;do{if(x!==p&&x!==g&&this.edgeExceedsShortLineThreshold(x,r)){const e=l(x,c,r);p&&this._checkEdgeForParalleLines(e,n(p.leftVertex.pos,c,r),t,d,r,s),g&&this._checkEdgeForParalleLines(e,n(g.rightVertex.pos,c,r),t,d,r,s),o===f?this._checkEdgeForParalleLines(e,E,t,d,r,s):o===v&&this._checkEdgeForParalleLines(e,m,t,d,r,s)}x=x.rightVertex.rightEdge}while(x&&x!==L);return s}_checkEdgeForParalleLines(e,r,o,n,l,p){const f=e.left,m=e.right;if(d(g,r,f,m),t(g,r)<s.parallelLineThreshold)return;d(g,o,f,m,r);const{coordinateHelper:u,pointer:v}=l,E=u.fromXYZ(g,u.getZ(o,0));if(a(n,h(E,u,i,this.view))<this.squaredProximityThreshold(v)){if(this._parallelToPreviousCandidate(e,p))return;p.push(new c({coordinateHelper:u,referenceLine:e,lineStart:r,targetPoint:E,elevationInfo:u.hasZ()?i:null}))}}_parallelToPreviousCandidate(e,r){const i=e.left,o=e.right;for(const n of r)if(d(g,o,n.constraint.start,n.constraint.end,i),t(g,o)<s.parallelLineThreshold)return n.addReferenceLine(e),!0;return!1}}const g=r();export{p as ParallelLineSnapper};
