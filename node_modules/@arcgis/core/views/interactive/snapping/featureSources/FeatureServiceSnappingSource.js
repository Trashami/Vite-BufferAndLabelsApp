/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import t from"../../../../core/Accessor.js";import{HandleOwnerMixin as r}from"../../../../core/HandleOwner.js";import{destroyHandle as i}from"../../../../core/handleUtils.js";import{isSome as o,applySome as s,mapOr as n}from"../../../../core/maybe.js";import{throwIfAborted as a}from"../../../../core/promiseUtils.js";import{watch as l,initial as u,sync as p}from"../../../../core/reactiveUtils.js";import{property as c}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as d}from"../../../../core/accessorSupport/decorators/subclass.js";import{ObservableValue as h}from"../../../../core/accessorSupport/tracking/ObservableValue.js";import{elevationContextAffectsAlignment as y,absoluteHeightElevationInfo as f}from"../../../../support/elevationInfoUtils.js";import{FeatureServiceTiles2D as g}from"../../../2d/interactive/snapping/featureSources/featureServiceSource/FeatureServiceTiles2D.js";import{FeatureServiceTiles3D as m}from"../../../3d/interactive/snapping/featureSources/featureServiceSource/FeatureServiceTiles3D.js";import{convertSnappingCandidate as _,makeGetGroundElevation as S}from"./queryEngineUtils.js";import{WorkerTileTreeDebugger as v}from"./WorkerTileTreeDebugger.js";import{FeatureServiceSnappingSourceWorkerHandle as w}from"./featureServiceSource/FeatureServiceSnappingSourceWorkerHandle.js";import{FeatureServiceTilesSimple as b}from"./featureServiceSource/FeatureServiceTilesSimple.js";import H from"../../../support/debugFlags.js";let k=class extends(r(t)){constructor(e){super(e)}get _updateTilesParameters(){return{tiles:this._tilesOfInterest.tiles,tileInfo:this._tilesOfInterest.tileInfo,tileSize:this._tilesOfInterest.tileSize}}get updating(){return this._workerHandle.updating||this.updatingHandles.updating}get configuration(){const{view:e}=this,t=o(e)?e.type:"2d";return{filter:this._layer.createQuery(),customParameters:this._layer.customParameters,viewType:t}}get availability(){return this._workerHandle.availability}get _layer(){return this.layerSource.layer}initialize(){const e=this.view;if(o(e))switch(e.type){case"2d":this._tilesOfInterest=new g({view:e,layer:this._layer}),this._workerHandle=new w;break;case"3d":{const{resourceController:t}=e,r=this._layer,i=e.whenLayerView(r);this._tilesOfInterest=new m({view:e}),this._workerHandle=new w({schedule:e=>t.schedule(e),hasZ:this._layer.hasZ&&(this._layer.returnZ??!0),elevationAlignPointsInFeatures:async(e,t)=>{const r=await i;return a(t),r.elevationAlignPointsInFeatures(e,t)},queryForSymbologySnapping:async(e,t)=>{const r=await i;return a(t),r.queryForSymbologySnapping(e,t)}});const o=new h(null);i.then((e=>o.set(e))),this.addHandles([e.elevationProvider.on("elevation-change",(({context:e})=>{const{elevationInfo:t}=r;y(e,t)&&this._workerHandle?.notifyElevationSourceChange()})),l((()=>r.elevationInfo),(()=>this._workerHandle?.notifyElevationSourceChange()),u),l((()=>s(o.get(),(({processor:e})=>e?.renderer))),(()=>this._workerHandle?.notifySymbologyChange()),u),l((()=>n(o.get(),!1,(e=>e.symbologySnappingSupported))),(e=>this._workerHandle?.setSymbologySnappingSupported(e)),u)]);break}}else this._tilesOfInterest=new b({layer:this._layer}),this._workerHandle=new w;this.handles.add([i(this._workerHandle)]),this._workerHandle.setup({layer:this._layer,spatialReference:this.spatialReference,configuration:this.configuration},null),this.updatingHandles.add((()=>this._updateTilesParameters),(()=>this._workerHandle.updateTiles(this._updateTilesParameters,null)),u),this.handles.add([l((()=>this.configuration),(e=>this._workerHandle.configure(e,null)),p)]),o(e)&&this.handles.add(l((()=>H.FEATURE_SERVICE_SNAPPING_SOURCE_TILE_TREE_SHOW_TILES),(t=>{t&&!this._debug?(this._debug=new v({view:e,handle:this._workerHandle}),this.handles.add(i(this._debug),"debug")):!t&&this._debug&&this.handles.remove("debug")}),u)),this.handles.add(this.layerSource.layer.on("apply-edits",(e=>{this._workerHandle.applyEdits(e,null)})))}refresh(){this._workerHandle.refresh(null)}async fetchCandidates(e,t){const{coordinateHelper:r,elevationInfo:i,point:o}=e;this._tilesOfInterest.pointOfInterest=r.vectorToPoint(o);const s=r.hasZ()?f:i,n=this._getGroundElevation;return(await this._workerHandle.fetchCandidates({...e},t)).candidates.map((e=>_(e,r,s,n)))}getDebugInfo(e){return this._workerHandle.getDebugInfo(e)}get _getGroundElevation(){return S(this.view)}};e([c({constructOnly:!0})],k.prototype,"spatialReference",void 0),e([c({constructOnly:!0})],k.prototype,"layerSource",void 0),e([c({constructOnly:!0})],k.prototype,"view",void 0),e([c()],k.prototype,"_tilesOfInterest",void 0),e([c({readOnly:!0})],k.prototype,"_updateTilesParameters",null),e([c({readOnly:!0})],k.prototype,"updating",null),e([c({readOnly:!0})],k.prototype,"configuration",null),e([c({readOnly:!0})],k.prototype,"availability",null),e([c()],k.prototype,"_getGroundElevation",null),k=e([d("esri.views.interactive.snapping.featureSources.FeatureServiceSnappingSource")],k);export{k as FeatureServiceSnappingSource};
