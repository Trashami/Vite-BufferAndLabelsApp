/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import t from"../../../../core/Accessor.js";import{removeUnordered as o}from"../../../../core/arrayUtils.js";import{createTask as r}from"../../../../core/asyncUtils.js";import{HandleOwnerMixin as s}from"../../../../core/HandleOwner.js";import{isSome as i,isNone as n}from"../../../../core/maybe.js";import{eachAlwaysValues as a,throwIfAborted as p,whenOrAbort as l}from"../../../../core/promiseUtils.js";import{initial as c,watch as d}from"../../../../core/reactiveUtils.js";import{property as h}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as u}from"../../../../core/accessorSupport/decorators/subclass.js";import y from"../../../../geometry/Polygon.js";import{canProjectWithoutEngine as m,project as g,initializeProjection as f}from"../../../../geometry/projection.js";import{normalizeCentralMeridianForDisplay as _}from"../../../../geometry/support/normalizeUtilsSync.js";import{featureGeometryTypeKebabDictionary as v}from"../../../../geometry/support/typeUtils.js";import{convertFromGeometry as S}from"../../../../layers/graphics/featureConversionUtils.js";import{OptimizedFeature as w}from"../../../../layers/graphics/OptimizedFeature.js";import j from"../../../../layers/graphics/data/FeatureStore.js";import{QueryEngine as E}from"../../../../layers/graphics/data/QueryEngine.js";import{elevationContextAffectsAlignment as b,absoluteHeightElevationInfo as k}from"../../../../support/elevationInfoUtils.js";import{symbolHasExtrudeSymbolLayer as C}from"../../../../symbols/support/utils.js";import{sortCandidatesInPlace as F,makeSnappingQuery as A}from"../snappingUtils.js";import{convertSnappingCandidate as I,makeGetGroundElevation as P}from"./queryEngineUtils.js";import{getSnappingCandidateElevationAligner as R}from"./snappingCandidateElevationAlignment.js";import{getSnappingCandidateElevationFilter as G}from"./snappingCandidateElevationFilter.js";import{getSymbologySnappingCandidatesFetcher as O}from"./symbologySnappingCandidates.js";const U="graphics-collections";let x=class extends(s(t)){constructor(e){super(e),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0}get updating(){return this.updatingHandles.updating}get _hasZ(){const e=this.view;return i(e)&&"3d"===e.type&&"map-notes"!==this.layerSource.layer.type}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,o=i(e)&&"3d"===e.type;if(!o||"map-notes"===t.type)return R();const r=async(o,r)=>(await l(e.whenLayerView(t),r)).elevationAlignPointsInFeatures(o,r);return R(o,{elevationInfo:t.elevationInfo,alignPointsInFeatures:r,spatialReference:e.spatialReference})}get _snappingElevationFilter(){const{view:e}=this,t=i(e)&&"3d"===e.type&&"map-notes"!==this.layerSource.layer.type;return G(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource,o=i(e)&&"3d"===e.type,r=this._extrudedPolygonSymbolsCount>0;return o&&"map-notes"!==t.type&&r?O(r,(async(o,r)=>{const s=await e.whenLayerView(t);return p(r),s.queryForSymbologySnapping({candidates:o,spatialReference:e.spatialReference},r)})):O()}destroy(){for(const e of this._pendingAdds)e.task.abort();this._pendingAdds.length=0,this._mapSources((e=>this._destroySource(e)))}initialize(){this.updatingHandles.add((()=>this.getGraphicsLayers()),(e=>{this.updatingHandles.removeHandles(U);for(const t of e)this._addMany(t.graphics.toArray()),this.handles.add([t.on("graphic-update",(e=>this._onGraphicUpdate(e))),this.updatingHandles.addOnCollectionChange((()=>t.graphics),(e=>this._onGraphicsChanged(e)))],U)}),c);const{view:e}=this,{layer:t}=this.layerSource;i(e)&&"3d"===e.type&&"map-notes"!==t.type&&this.addHandles([e.elevationProvider.on("elevation-change",(({context:e})=>{b(e,t.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()})),d((()=>t.elevationInfo),(()=>this._snappingElevationAligner.notifyElevationSourceChange()),c)])}async fetchCandidates(e,t){const{point:o,coordinateHelper:r,elevationInfo:s}=e,i=await a(this._mapSources((o=>this._fetchCandidatesForSource(o,e,t))));p(t);const n=r.hasZ()?k:s,l=this._getGroundElevation,c=i.flat().map((e=>I(e,r,n,l)));return F(o,c,r),c}get _getGroundElevation(){return P(this.view)}async _fetchCandidatesForSource(e,t,o){const r=A(t),s=await e.queryEngine.executeQueryForSnapping(r,o);p(o);const i=await this._snappingElevationAligner.alignCandidates(s.candidates,o);p(o);const n=await this._symbologySnappingFetcher.fetch(i,o);p(o);const a=0===n.length?i:[...i,...n];return this._snappingElevationFilter.filter(r,a)}refresh(){}_onGraphicUpdate(e){if(this.getGraphicsLayers().some((t=>t.graphics.includes(e.graphic))))switch(e.property){case"geometry":case"visible":this._remove(e.graphic),this._addMany([e.graphic])}}_onGraphicsChanged(e){for(const t of e.removed)this._remove(t);this._addMany(e.added)}_addMany(e){const t=[],o=new Map;for(const r of e)n(r.geometry)||(this._needsInitializeProjection(r.geometry.spatialReference)?(t.push(r.geometry.spatialReference),o.set(r.uid,r)):this._add(r));this._createPendingAdd(t,o)}_createPendingAdd(e,t){if(!e.length)return;const s=r((async o=>{await f(e.map((e=>({source:e,dest:this.spatialReference}))),{signal:o}),this._markLoadedSpatialReferences(e);for(const[,e]of t)this._add(e)}));this.updatingHandles.addPromise(s.promise);const i={task:s,graphics:t},n=()=>o(this._pendingAdds,i);s.promise.then(n,n),this._pendingAdds.push(i)}_markLoadedSpatialReferences(e){for(const t of e)null!=t.wkid&&this._loadedWkids.add(t.wkid),null!=t.wkt&&this._loadedWkts.add(t.wkt)}_add(e){if(n(e.geometry)||!e.visible)return;let t=e.geometry;if("mesh"===t.type)return;"extent"===t.type&&(t=y.fromExtent(t));const o=this._ensureSource(t.type);if(n(o))return;const r=this._createOptimizedFeature(e.uid,t);n(r)||(o.featureStore.add(r),C(e.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(e){return(null==e.wkid||!this._loadedWkids.has(e.wkid))&&((null==e.wkt||!this._loadedWkts.has(e.wkt))&&!m(e,this.spatialReference))}_createOptimizedFeature(e,t){const o=g(_(t),this.spatialReference);if(!o)return null;const r=this._ensureGeometryHasZ(o),s=S(r,this._hasZ,!1);return new w(s,{[H]:e},null,e)}_ensureGeometryHasZ(e){if(!this._hasZ)return e;const t=e=>{for(;e.length<3;)e.push(0)},o=e.clone();switch(o.hasZ=!0,o.type){case"point":o.z=o.z??0;break;case"multipoint":o.points.forEach(t);break;case"polyline":o.paths.forEach((e=>e.forEach(t)));break;case"polygon":o.rings.forEach((e=>e.forEach(t)))}return o}_ensureSource(e){const t=this._sources[e];if(i(t))return t;const o=this._createSource(e);return this._sources[e]=o,o}_createSource(e){const t=v.toJSON(e),o=this._hasZ,r=new j({geometryType:t,hasZ:o,hasM:!1});return{featureStore:r,queryEngine:new E({featureStore:r,fields:[{name:H,type:"esriFieldTypeOID",alias:H}],geometryType:t,hasM:!1,hasZ:o,objectIdField:H,spatialReference:this.spatialReference,scheduler:i(this.view)&&"3d"===this.view.type?this.view.resourceController.scheduler:null}),type:e}}_remove(e){this._mapSources((t=>this._removeFromSource(t,e)));for(const t of this._pendingAdds)t.graphics.delete(e.uid),0===t.graphics.size&&t.task.abort()}_removeFromSource(e,t){const o=t.uid;e.featureStore.has(o)&&(e.featureStore.removeById(t.uid),C(t.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(e){e.queryEngine.destroy(),this._sources[e.type]=null}_mapSources(e){const{point:t,polygon:o,polyline:r,multipoint:s}=this._sources,n=[];return i(t)&&n.push(e(t)),i(o)&&n.push(e(o)),i(r)&&n.push(e(r)),i(s)&&n.push(e(s)),n}};e([h()],x.prototype,"getGraphicsLayers",void 0),e([h({constructOnly:!0})],x.prototype,"layerSource",void 0),e([h({constructOnly:!0})],x.prototype,"spatialReference",void 0),e([h({constructOnly:!0})],x.prototype,"view",void 0),e([h({readOnly:!0})],x.prototype,"updating",null),e([h({readOnly:!0})],x.prototype,"availability",void 0),e([h()],x.prototype,"_hasZ",null),e([h()],x.prototype,"_snappingElevationAligner",null),e([h()],x.prototype,"_snappingElevationFilter",null),e([h()],x.prototype,"_symbologySnappingFetcher",null),e([h()],x.prototype,"_extrudedPolygonSymbolsCount",void 0),e([h()],x.prototype,"_getGroundElevation",null),x=e([u("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],x);const H="OBJECTID";export{x as GraphicsSnappingSource};
