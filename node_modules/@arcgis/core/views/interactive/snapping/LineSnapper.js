/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{unwrap as e}from"../../../core/maybe.js";import{c as t}from"../../../chunks/vec3f64.js";import{absoluteHeightElevationInfo as o}from"../../../support/elevationInfoUtils.js";import{SnappingAlgorithm as r}from"./SnappingAlgorithm.js";import{editEdgeToSnappingEdge as s,convertPointElevation as i,squaredScreenDistance as n}from"./snappingUtils.js";import{LineSnappingCandidate as d}from"./candidates/LineSnappingCandidate.js";import{anyMapPointToScreenPoint as p}from"../support/viewUtils.js";import{projectPointToLineLike as h}from"../../support/geometry3dUtils.js";import{LineType as l}from"../../support/geometry2dUtils.js";class a extends r{snapNewVertex(e,t){const r=t.editGeometryOperations.data.components[0],i=r.edges.length,n=[];if(i<1)return n;const d=t.coordinateHelper,h=p(e,d,o,this.view),{view:l}=this,a=r.edges[i-1];let g=a;do{if(this.edgeExceedsShortLineThreshold(g,t)){const o=s(g,l,t);this._processCandidateProposal(o.left,o.right,e,h,t,n)}g=g.leftVertex.leftEdge}while(g&&g!==a);return n}snapExistingVertex(t,r){const n=[],d=e(r.vertexHandle),h=d.component;if(h.edges.length<2)return n;const{view:l}=this,{coordinateHelper:a}=r,g=p(t,a,o,l),c=d.leftEdge,m=d.rightEdge;c&&m&&this.edgeExceedsShortLineThreshold(c,r)&&this.edgeExceedsShortLineThreshold(m,r)&&this._processCandidateProposal(i(c.leftVertex.pos,l,r),i(m.rightVertex.pos,l,r),t,g,r,n);const f=h.edges[0];let x=f;do{if(x!==d.leftEdge&&x!==d.rightEdge&&this.edgeExceedsShortLineThreshold(x,r)){const e=s(x,l,r);this._processCandidateProposal(e.left,e.right,t,g,r,n)}x=x.rightVertex.rightEdge}while(x&&x!==f);return n}_processCandidateProposal(e,t,r,s,i,l){const{coordinateHelper:a,pointer:x}=i;a.toXYZ(e,g),a.toXYZ(t,c);const E=a.toXYZ(r,f),u=h(E,m),j=a.fromXYZ(u);n(s,p(j,a,o,this.view))<this.squaredProximityThreshold(x)&&l.push(new d({coordinateHelper:a,lineStart:e,lineEnd:t,targetPoint:j,elevationInfo:a.hasZ()?o:null}))}}const g=t(),c=t(),m={start:g,end:c,type:l.LINE},f=t();export{a as LineSnapper};
