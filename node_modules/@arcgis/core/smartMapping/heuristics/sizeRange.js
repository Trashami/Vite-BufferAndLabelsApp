/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import"../../core/has.js";import e from"../../core/Error.js";import{isSome as l}from"../../core/maybe.js";import{px2pt as s}from"../../core/screenUtils.js";import{getScale as n}from"../../geometry/support/scaleUtils.js";import i from"../../renderers/visualVariables/SizeVariable.js";import a from"./scaleRange.js";import{verifyBinningParams as o}from"../support/binningUtils.js";import{binningCapableLayerTypes as t,featureCapableLayerTypes as r,createLayerAdapter as c,getLayerTypeLabels as u}from"../support/adapters/support/layerUtils.js";const m=1e8,p=1128.497176,v=591657527.591555,f=[10,8,4,2],w=[100,100,60,30],g=[2,1,.75,.5],S=[32,18,12,6],h=[{level:0,resolution:156543.03392800014,scale:591657527.591555},{level:1,resolution:78271.51696399994,scale:295828763.795777},{level:2,resolution:39135.75848200009,scale:147914381.897889},{level:3,resolution:19567.87924099992,scale:73957190.948944},{level:4,resolution:9783.93962049996,scale:36978595.474472},{level:5,resolution:4891.96981024998,scale:18489297.737236},{level:6,resolution:2445.98490512499,scale:9244648.868618},{level:7,resolution:1222.992452562495,scale:4622324.434309},{level:8,resolution:611.4962262813797,scale:2311162.217155},{level:9,resolution:305.74811314055756,scale:1155581.108577},{level:10,resolution:152.87405657041106,scale:577790.554289},{level:11,resolution:76.43702828507324,scale:288895.277144},{level:12,resolution:38.21851414253662,scale:144447.638572},{level:13,resolution:19.10925707126831,scale:72223.819286},{level:14,resolution:9.554628535634155,scale:36111.909643},{level:15,resolution:4.77731426794937,scale:18055.954822},{level:16,resolution:2.388657133974685,scale:9027.977411},{level:17,resolution:1.1943285668550503,scale:4513.988705},{level:18,resolution:.5971642835598172,scale:2256.994353},{level:19,resolution:.29858214164761665,scale:1128.497176}];async function x(s){const{view:n}=s;if(!(s&&n&&s.layer))throw new e("size-range:missing-parameters","'view' and 'layer' parameters are required");s.forBinning&&o(s,"size-range");const{layer:i,...a}=s,m=s.forBinning?t:r,p=c(i,m,s.forBinning),v={layerAdapter:p,...a};if(!p)throw new e("size-range:invalid-parameters","'layer' must be one of these types: "+u(m).join(", "));await n.when();const f=l(v.signal)?{signal:v.signal}:null;await p.load(f);const w=p.geometryType;if("point"!==w&&"multipoint"!==w&&"polyline"!==w&&"polygon"!==w)throw new e("size-range:not-supported",`sizeRange is not supported for geometryType: ${w}`);return v}function y(e,l){const s=Math.ceil(e/l);let n=Math.ceil(s/4);n<4?n=4:n>16&&(n=16);const i=5*n;return{min:n,max:i<50?50:i}}function z(e,l){const{view:s}=e,n=l.minScale||m,i=s.constraints&&"effectiveLODs"in s.constraints&&s.constraints.effectiveLODs||h,a=[];for(const o in i){if(i[o].scale>n)continue;const e=Number(o),l=[e-3,e,e+3,e+6];for(const s of l)s>-1&&s<i.length&&a.push(i[s].scale);break}return a.sort(((e,l)=>e-l))}function d(e,s){const{view:i,layerAdapter:a}=e,o=a.fullExtent,t=a.minScale||p,r=a.maxScale||v,c=s.minScale||0,u=s.maxScale||0;let m=l(o)?n(i,o):0;m=m<t&&m>r?m:0;return{scales:[t,r,c,u,m].map(Math.round).sort(((e,l)=>e-l)).filter(((e,l,s)=>!!e&&s.indexOf(e)===l)).filter(((e,l,s)=>!l||Math.abs(e-s[l-1])>5)),fullExtentScale:m}}function E(l,n){const{minScale:a,maxScale:o}=n,t=z(l,{minScale:a,maxScale:o});if(!t.length)throw new e("scale-range:insufficient-info","not enough scale values");return{minSize:new i({valueExpression:"$view.scale",stops:t.map(((e,l)=>({value:e,size:s(f[l])})))}),maxSize:new i({valueExpression:"$view.scale",stops:t.map(((e,l)=>({value:e,size:s(w[l])})))})}}function j(l,n){const{minScale:a,maxScale:o}=n,t=z(l,{minScale:a,maxScale:o});if(!t.length)throw new e("scale-range:insufficient-info","not enough scale values");return{minSize:new i({valueExpression:"$view.scale",stops:t.map(((e,l)=>({value:e,size:s(g[l])})))}),maxSize:new i({valueExpression:"$view.scale",stops:t.map(((e,l)=>({value:e,size:s(S[l])})))})}}function b(l,n){const{spatialStatistics:a,minScale:o,maxScale:t}=n;if(!("avgSize"in a)||!a.avgSize)throw new e("size-range:insufficient-info","average polygon size is invalid");const r=a.avgSize,{resolution:c,scale:u}=l.view,m=c/u,{scales:p,fullExtentScale:v}=d(l,{minScale:o,maxScale:t}),f=[],w=[];p.forEach(((e,l)=>{const{min:n,max:i}=y(r,m*e),a=p.indexOf(v),o=a>-1&&l>a?2:1;f.push({value:e,size:s(n/o)}),w.push({value:e,size:s(i/o)})}));return{minSize:new i({valueExpression:"$view.scale",stops:f}),maxSize:new i({valueExpression:"$view.scale",stops:w})}}async function $(e){const l=await x(e),{view:s,layerAdapter:n,signal:i}=l,o=await a({layer:n,view:s,signal:i});switch(n.geometryType){case"point":case"multipoint":return E(l,o);case"polyline":return j(l,o);case"polygon":return b(l,o);case"mesh":case"multipatch":return null}return null}export{$ as default};
