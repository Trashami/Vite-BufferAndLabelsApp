/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{pickRandom as r}from"../../../core/arrayUtils.js";import t from"../../../core/Error.js";import{unwrap as s}from"../../../core/maybe.js";import{whenOnce as a}from"../../../core/reactiveUtils.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/has.js";import{subclass as i}from"../../../core/accessorSupport/decorators/subclass.js";import{isDateField as o}from"../../../layers/support/fieldUtils.js";import{getArcadeForPredominantCategory as n}from"../../statistics/support/predominanceUtils.js";import{mergeWhereClauses as u}from"../../statistics/support/utils.js";import{WorkerClient as p}from"../../statistics/support/WorkerClient.js";import{FIELD_DELIMITER as l}from"../utils.js";import c from"./FeatureLayerAdapter.js";import{getSummaryStatisticsFromFeatureSet as d,getUniqueValuesFromFeatureSet as m,getDomainsForFields as y,getPredominantCategoriesFromUVInfos as f,getMissingFields as h}from"./support/utils.js";import{processSummaryStatisticsResult as w,createUVResult as g}from"../../../statistics/utils.js";let F=class extends c{constructor(e){super(e)}async _waitForLayerViewUpdate(e){if(!e)throw new t("ogc-feature-layer-adapter:insufficient-data","layerView is required to fetch the features");await a((()=>!e.updating))}async _summaryStatsFromClientQuery(e,r){const{signal:i,view:o}=e;if(!o)throw new t("ogc-feature-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const n=this._getSummaryStatsQuery(e,r),u=await o.whenLayerView(this.layer);await a((()=>!u.updating),s(i));const p=await u.queryFeatures(n,{signal:i}),l=d(p,r);return w(l)}async _uvFromClientQuery(e,r){const{signal:i,view:o}=e;if(!o)throw new t("ogc-feature-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const n=this._getUVQuery(e),u=await o.whenLayerView(this.layer);await a((()=>!u.updating),s(i));const p=await u.queryFeatures(n,{signal:i}),c=await m(p,{layer:this,field:e.field,field2:e.field2,field3:e.field3,fieldDelimiter:l,view:e.view,signal:e.signal});return g(c,r,e.returnAllCodedValues,l)}summaryStatistics(e){const{field:r,valueExpression:s,sqlExpression:a,features:i,view:n}=e,u=r?this.getField(r):null,p=o(u),l=!!s,c="3d"===n?.type;if(!s&&a&&!this.supportsSQLExpression)throw new t("ogc-feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries");return l||i||c?this._summaryStatsFromMemory(e,u):this._summaryStatsFromClientQuery(e,p)}async uniqueValues(e){const{valueExpression:r,sqlExpression:s,features:a,view:i}=e,o=await y(e,this),n=!!r,u="3d"===i?.type;if(!r&&s&&!this.supportsSQLExpression)throw new t("ogc-feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries");return n||a||u?this._uvFromMemory(e,o):this._uvFromClientQuery(e,o)}histogram(e){const{features:r,valueExpression:s,normalizationType:a,sqlExpression:i}=e,o=r||!!s;if(!s&&i&&!this.supportsSQLExpression)throw new t("ogc-feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries");return o||a?this._histogramFromMemory(e):this._histogramForField(e)}classBreaks(e){return!1!==e.analyzeData?this._classBreaksFromMemory(e):this._classBreaksFromInterpolation(e)}async queryFeatureCount(e){const{whereClause:r,view:i,signal:o}=e;if(!i)throw new t("ogc-feature-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const n=this.layer.createQuery();n.where=u(n.where,r);const p=await i.whenLayerView(this.layer);return await a((()=>!p.updating),s(o)),p.queryFeatureCount(n,{signal:o})}generateRenderer(e,r){throw new t("ogc-feature-layer-adapter:not-supported","OGCFeatureLayer does not support generateRenderer operation")}async predominantCategories(e){const{fields:r,view:t,signal:s}=e,a=n(r),i=await this._uvFromMemory({valueExpression:a,view:t,signal:s});return f(i.uniqueValueInfos,r)}async getSampleFeatures(e,s){const{view:a,sampleSize:i,requiredFields:o,returnGeometry:n,signal:u}=e,p=this.layer.createQuery(),l=1;if(p.outSpatialReference=e.spatialReference||a&&a.spatialReference,p.returnGeometry=!!n,p.outFields=o,!a)throw new t("ogc-feature-layer-adapter:not-supported","view is required to get sample features for OGCFeatureLayer");const c=await a.whenLayerView(this.layer);if(h(this,o,c).length)throw new t("ogc-feature-layer-adapter:not-supported","Required fields need to be passed in the outFields for OGCFeatureLayer");const d=await this._fetchFeaturesFromMemory(c,p,u,s);return r(d,i>0&&i<=d.length?i:d.length,l)}load(e){const r=this.layer.load(e).then((async r=>{this.geometryType=r.geometryType,this.objectIdField=r.objectIdField,this.supportsSQLExpression=r.get("capabilities.query.supportsSqlExpression"),this.minScale=r.minScale,this.maxScale=r.maxScale,this.fullExtent=r.fullExtent,this.workerClient=p.getInstance(),await this.workerClient.open(s(s(e).signal))}));return this.addResolvingPromise(r),Promise.resolve(this)}};F=e([i("esri.smartMapping.support.adapters.OGCFeatureLayerAdapter")],F);const v=F;export{v as default};
