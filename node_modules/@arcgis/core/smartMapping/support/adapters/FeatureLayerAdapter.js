/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{pickRandom as t}from"../../../core/arrayUtils.js";import r from"../../../core/Error.js";import i from"../../../core/Logger.js";import{isSome as a,unwrap as s}from"../../../core/maybe.js";import{timeout as n,eachAlways as o,throwIfAborted as l}from"../../../core/promiseUtils.js";import{whenOnce as u}from"../../../core/reactiveUtils.js";import{property as m}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as c}from"../../../core/accessorSupport/decorators/subclass.js";import{toQuantizationTransform as d}from"../../../geometry/support/quantizationUtils.js";import{isHostedAgolService as p}from"../../../layers/support/arcgisLayerUrl.js";import{kebabDict as h}from"../../../layers/support/fieldType.js";import{isStringField as f,isNumericField as y,isDateField as F}from"../../../layers/support/fieldUtils.js";import g from"../../../rest/support/GenerateRendererParameters.js";import S from"../../../rest/support/QuantizationParameters.js";import w from"../../../rest/support/StatisticDefinition.js";import v from"../../../rest/support/UniqueValueDefinition.js";import{getArcadeForPredominantCategory as _,getSQLForPredominantCategoryName as x}from"../../statistics/support/predominanceUtils.js";import{summaryStatistics as z,uniqueValues as q,histogram as V,classBreaks as T,heatmapStatistics as E}from"../../statistics/support/statsWorker.js";import{getRangeExpr as Q,getSQLFilterForNormalization as L,mergeWhereClauses as j}from"../../statistics/support/utils.js";import{WorkerClient as C}from"../../statistics/support/WorkerClient.js";import{getFieldsList as M,FIELD_DELIMITER as I}from"../utils.js";import B from"./LayerAdapter.js";import{ensureFeaturesJSON as N,msSinceUnixEpochSQL as b,getFieldExpr as O,getSummaryStatisticsFromFeatureSet as k,getViewInfoParams as P,getMissingFields as R,getUniqueValuesFromFeatureSet as D,getHistogramFromFeatureSet as J,generateBinParams as G,getDomainsForFields as U,getPredominantCategoriesFromUVInfos as W}from"./support/utils.js";import{processSummaryStatisticsResult as A,isNullCountSupported as $,statisticTypes as H,createUVResult as Z,getEqualIntervalBins as K,createClassBreaksDefinition as X,resolveCBResult as Y}from"../../../statistics/utils.js";import ee from"../../../tasks/GenerateRendererTask.js";const te=5,re=10,ie=2e4,ae=4e5;let se,ne=class extends B{constructor(e){super(e)}destroy(){this._hasLocalSource=null,this.workerClient?.destroy()}_isStatsSupportedOnService(){const e=this.layer;return!e.get("capabilities.query.supportsStatistics")||"multipatch"===this.geometryType&&!p(e.url)&&e.version<10.5?Promise.reject(new r("feature-layer-adapter:not-supported","Layer does not support statistics query")):Promise.resolve()}async _waitForLayerViewUpdate(e){if(!e)throw new r("feature-layer-adapter:insufficient-data","layerView is required to fetch the features");const t=new AbortController,a=u((()=>!e.updating),t.signal);await n(a,5e3,t).catch((e=>{throw i.getLogger(this.declaredClass).warn("LayerView is taking too long to update. Aborting fetch from layerView."),e}))}async _fetchFeaturesFromMemory(e,t,r,i){const a=this.layer,s="json"===i;if(this._hasLocalSource){const e=await a.queryFeatures(t);return s?N(e.features):e.features}if(await this._waitForLayerViewUpdate(e),s&&"queryFeaturesJSON"in e&&e.queryFeaturesJSON){const{features:i}=await e.queryFeaturesJSON(t,{signal:r});return i}const n=await e.queryFeatures(t,{signal:r});return s?N(n.features):n.features}_fetchFeaturesFromService(e,t){return this.layer.queryFeatures(e,{signal:t}).then((e=>e.features))}_fetchFeaturesJSONFromService(e,t){return this._fetchFeaturesFromService(e,t).then(N)}_fetchFeaturesForStats(e,t){return M({field:e.field,field2:e.field2,field3:e.field3,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((r=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,filter:e.filter,requiredFields:r,signal:e.signal},t)))}_summaryStatsFromGenRend(e){const t=e.normalizationType,r=e.normalizationField;return this.classBreaks({field:e.field,numClasses:te,classificationMethod:"standard-deviation",standardDeviationInterval:.25,normalizationType:t,normalizationField:"field"===t?r:void 0,minValue:e.minValue,maxValue:e.maxValue,filter:e.filter,signal:e.signal}).then((e=>{let t,r,i;if(e.classBreakInfos.some((e=>(e.hasAvg&&(t=e),!!t))),t){const e=t.maxValue-t.minValue;r=t.minValue+e/2,i=4*e}const a={min:e.minValue,max:e.maxValue,avg:r,stddev:i};return A(a)}))}_getSummaryStatsQuery(e,t){const{field:r,normalizationType:i,normalizationField:a,normalizationTotal:s,minValue:n,maxValue:o,filter:l}=e,u=this.supportsSQLExpression&&t?b(this,r):e.sqlExpression,m=O({field:r,normalizationType:i,normalizationField:a,normalizationTotal:s,layer:this}),c=u||m,d=c?Q(c,n,o):null,p=L({field:r,normalizationField:a,normalizationType:i}),h=j(e.sqlWhere,p),y=j(h,d),F=$({normalizationField:a,normalizationType:i,sqlExpression:u,supportsSQLExpression:this.supportsSQLExpression,minValue:n,maxValue:o}),g=f(this.getField(r)),S=H.filter((e=>"nullcount"===e?F:!g||"count"===e)),v=this.layer.createQuery();return v.where=j(v.where,y),v.sqlFormat=u?"standard":null,v.outStatistics=S.map((e=>{const t=new w;let r=null,i=null,a=`${e}_value`;return"variance"===e?(r="var",i=c):"nullcount"===e?(r="count",i=this.layer.objectIdField,a="totalcount_value"):"median"===e?(r="percentile-continuous",i=c,t.statisticParameters={value:.5}):(r=e,i=c),t.statisticType=r,t.onStatisticField=i,t.outStatisticFieldName=a,t})),this._updateQueryWithFeatureFilter(v,l),v}async _summaryStatsFromServiceQuery(e,t){await this._isStatsSupportedOnService(),"percent-of-total"===e.normalizationType&&(e.normalizationTotal=await this._getNormalizationTotal(e.field,e.normalizationType,e.filter));const r=this._getSummaryStatsQuery(e,t),i=await this.layer.queryFeatures(r,{signal:e.signal}),a=k(i,t);return A(a)}async _summaryStatsFromClientQuery(e,t){const r=this._getSummaryStatsQuery(e,t),i=await this.layer.queryFeatures(r,{signal:e.signal}),a=k(i,t);return A(a)}async _getNormalizationTotalFromMemory(e,t,i){const{featuresJSON:a,graphics:s,layerView:n,query:o}=t,l=(!a&&!s&&n&&"querySummaryStatistics"in n?await n.querySummaryStatistics(o,{field:e},{signal:i}):a?await this.workerClient.summaryStatistics({field:e},a):await z({attribute:{field:e},features:s})).sum;if(null==l)throw new r("feature-layer-adapter:invalid","invalid normalizationTotal");return l}async _summaryStatsFromMemory(e,t){const{view:r,field:i,valueExpression:a,normalizationType:s,signal:n}=e,o={field:i,valueExpression:a,normalizationType:s,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue},{featuresJSON:l,graphics:u,layerView:m,query:c,fieldInfos:d}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"querySummaryStatistics"});return a&&r&&(l||u)&&(o.fieldType=t?.type?h.toJSON(t.type):null,o.viewInfoParams=P(r),o.fieldInfos=d),"percent-of-total"===s&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotalFromMemory(i,{featuresJSON:l,graphics:u,layerView:m,query:c},n)),!l&&!u&&m&&"querySummaryStatistics"in m?m.querySummaryStatistics(c,o,{signal:n}):l?this.workerClient.summaryStatistics(o,l):z({attribute:o,features:u})}async _getFilteredFeatures(e,t){let r=[];if("intersects"===t?.spatialRelationship){se||(se=await import("../../../geometry/geometryEngineAsync.js"));const i=a(t.geometry)?t.geometry:null;for(const t of e){const e=a(t.geometry)?t.geometry:null;if(e&&i){await se.intersect(e,i)&&r.push(t)}}}else r=e;return e.length&&"declaredClass"in e[0]&&"esri.Graphic"===e[0].declaredClass?{graphics:r}:{featuresJSON:r}}async _processStatsFromMemoryParams(e){const{features:t,filter:i}=e;if(t?.length)return this._getFilteredFeatures(t,i);const{view:a,field:s,field2:n,field3:o,normalizationField:l,valueExpression:u,returnGeometry:m,layerViewFunc:c,signal:d}=e;let p=null,h=null,f=null,y=null,F=null;if(a)try{p=await a.whenLayerView(this.layer),h=c in p&&"function"==typeof p[c]}catch{h=!1}if(h)try{await this._waitForLayerViewUpdate(p);const e=await M({field:s,field2:n,field3:o,normalizationField:l,valueExpression:u});R(this,e,p).length?h=!1:(f=this.layer.createQuery(),f.outFields=e,f.returnGeometry=!1,this._updateQueryWithFeatureFilter(f,i)),p.suspended&&(h=!1)}catch{h=!1}if(!h&&(y=await this._fetchFeaturesForStats({field:s,field2:n,field3:o,valueExpression:u,normalizationField:l,returnGeometry:m,filter:i,view:a,signal:d},"json"),F=(await M({valueExpression:u})).map((e=>this.getField(e)?.toJSON())).filter(Boolean),!y?.length))throw new r("feature-layer-adapter:insufficient-data","No features are available to calculate statistics");return{layerView:p,query:f,featuresJSON:y,fieldInfos:F}}_uvFromGenRenderer(e,t){const r=e.field,i=new v;i.attributeField=r;const a=new g;return a.classificationDefinition=i,this.generateRenderer(a,e.signal).then((e=>{const t={},i=this.getField(r);return e.uniqueValues.forEach((e=>{let r=e.value;null!=r&&""!==r&&("string"!=typeof r||""!==r.trim()&&"<null>"!==r.toLowerCase())||(r=null),null==t[r]?t[r]={count:e.count,data:y(i)&&r?Number(r):r}:t[r].count=t[r].count+e.count})),{count:t}})).then((r=>Z(r,[t],e.returnAllCodedValues)))}_getUVQueryOutStatistic(e,t){const r="countOF"+(e||"Expr"),i=new w;return i.statisticType="count",i.onStatisticField=t?"1":e,i.outStatisticFieldName=r,i}_getUVQuery(e){const{field:t,field2:r,field3:i,sqlExpression:a}=e,s=!(!t||!r),n=this.layer.createQuery();return n.where=j(n.where,e.sqlWhere),n.sqlFormat=a?"standard":null,n.outStatistics=[this._getUVQueryOutStatistic(s?null:t,s?"1":a)].filter(Boolean),n.groupByFieldsForStatistics=[t||a,r,i].filter(Boolean),this._updateQueryWithFeatureFilter(n,e.filter),n}async _uvFromServiceQuery(e,t){return this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(this._getUVQuery(e),{signal:e.signal}))).then((t=>D(t,{layer:this,field:e.field,field2:e.field2,field3:e.field3,fieldDelimiter:I,view:e.view,signal:e.signal}))).then((r=>Z(r,t,e.returnAllCodedValues,I)))}async _uvFromClientQuery(e,t){const{signal:r}=e,i=this._getUVQuery(e),a=await this.layer.queryFeatures(i,{signal:r}),s=await D(a,{layer:this,field:e.field,field2:e.field2,field3:e.field3,fieldDelimiter:I,view:e.view,signal:e.signal});return Z(s,t,e.returnAllCodedValues,I)}async _uvFromMemory(e,t){const{view:r,field:i,valueExpression:a,returnAllCodedValues:s,signal:n}=e,{featuresJSON:o,graphics:l,layerView:u,query:m,fieldInfos:c}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryUniqueValues"}),d={field:i,field2:e.field2,field3:e.field3,fieldDelimiter:I,valueExpression:a,domains:t,returnAllCodedValues:s};return a&&r&&(o||l)&&(d.viewInfoParams=P(r),d.fieldInfos=c),!o&&!l&&u&&"queryUniqueValues"in u?u.queryUniqueValues(m,d,{signal:n}):o?this.workerClient.uniqueValues(d,o):q({attribute:d,features:l})}_calcBinsSQL(e,t,r){const i=[],a=t.length;return t.forEach(((t,s)=>{const[n,o]=t;let l=null;l=0!==s||r?s!==a-1||r?j(`${e} >= ${n}`,`${e} ${s===a-1?" <= ":" < "} ${o}`):`${e} >= ${n}`:`${e} < ${o}`,i.push("WHEN ("+l+") THEN "+(s+1))})),["CASE",i.join(" "),"ELSE 0","END"].join(" ")}_getNormalizationTotal(e,t,r,i){return e&&"percent-of-total"===t?this.summaryStatistics({field:e,filter:r,signal:i}).then((e=>e.sum)):Promise.resolve(null)}_getQueryParamsForExpr(e,t){const r=e.valueExpression||e.sqlExpression,i=e.signal;if(!r){const{field:r,normalizationType:a,normalizationField:s}=e,n=r?this.getField(r):null,o=F(n),l={field:r,normalizationType:a,normalizationField:s,normalizationTotal:t,layer:this};return{sqlExpression:o?b(this,r):O(l),sqlWhere:o?null:e.sqlWhere||L({field:r,normalizationType:a,normalizationField:s}),filter:e.filter,signal:i}}return{valueExpression:e.valueExpression,sqlExpression:e.sqlExpression,sqlWhere:e.sqlWhere,filter:e.filter,signal:i}}_getDataRange(e,t,r){return null!=t&&null!=r?Promise.resolve({min:t,max:r}):this.summaryStatistics(e).then((e=>({min:e.min,max:e.max})))}_histogramForExpr(e){return this._getNormalizationTotal(e.field,e.normalizationType,e.filter,e.signal).then((t=>{const r=this._getQueryParamsForExpr(e,t);return this._getDataRange(r,e.minValue,e.maxValue).then((i=>{const{min:a,max:s}=i,n=e.numBins||re,o=K(a,s,n),l=this._calcBinsSQL(r.sqlExpression,o,null!=e.minValue&&null!=e.maxValue),u=new w({statisticType:"count",outStatisticFieldName:"countOFExpr",onStatisticField:"1"}),m=this.layer.createQuery();return m.where=j(m.where,r.sqlWhere),m.sqlFormat="standard",m.outStatistics=[u],m.groupByFieldsForStatistics=[l],m.orderByFields=[l],this._updateQueryWithFeatureFilter(m,e.filter),this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(m,{signal:r.signal}))).then((e=>J(e,a,s,n,t)))}))}))}_histogramForField(e){let t=null;return t=null!=e.minValue&&null!=e.maxValue?Promise.resolve({min:e.minValue,max:e.maxValue}):this.summaryStatistics(e).then((e=>{if(!e.count)throw new r("feature-layer-adapter:insufficient-data","Either the layer has no features or none of the features have data for the field");return{min:e.min,max:e.max}})),t.then((t=>this._getBins({min:t.min,max:t.max},e.field,e.numBins,e.view,e.filter,e.signal)))}_getBins(e,t,r=re,i,a,s){const{min:n,max:o,normTotal:l,excludeZerosExpr:u}=e,m=e.intervals||K(n,o,r),c=e.sqlExpr||t;return this._queryBins(m,c,u,i,a,s).then((e=>({bins:e.map(((e,t)=>({minValue:m[t][0],maxValue:m[t][1],count:e.value}))),minValue:n,maxValue:o,normalizationTotal:l})))}_queryBins(e,t,r,i,a,s){const n=[],l=e.length;for(let o=0;o<l;o++){const i=j(r,j(t+" >= "+e[o][0],null!==e[o][1]?t+(o===l-1?" <= ":" < ")+e[o][1]:""));n.push(i)}return o(n.map((e=>this.queryFeatureCount({whereClause:e,view:i,filter:a,signal:s}))))}_binParamsFromGenRend(e,t){const{field:r,normalizationType:i,normalizationField:a,signal:s}=e,n=L({field:r,normalizationType:i,normalizationField:a}),o=new g({classificationDefinition:X({field:r,normalizationType:i,normalizationField:a,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,breakCount:e.numBins||re}),where:j(n,t)});return this.generateRenderer(o,s).then((e=>{const{normalizationTotal:t,classBreaks:s}=e;return G({field:r,normalizationType:i,normalizationField:a,normalizationTotal:t,classBreaks:s,where:n,layer:this})}))}async _histogramFromMemory(e){const{view:t,field:r,valueExpression:i,signal:a}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryHistogram"}),m={field:r,valueExpression:i,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return i&&t&&(s||n)&&(m.viewInfoParams=P(t),m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(r,{featuresJSON:s,graphics:n,layerView:o,query:l},a)),!s&&!n&&o&&"queryHistogram"in o?o.queryHistogram(l,m,{signal:a}):s?this.workerClient.histogram(m,s):V({attribute:m,features:n})}_classBreaksFromGenRend(e){const{field:t,normalizationType:r,normalizationField:i,normalizationTotal:a,signal:s}=e,n=L({field:t,normalizationType:r,normalizationField:i}),o=O({field:t,normalizationType:r,normalizationField:i,normalizationTotal:a,layer:this}),l=Q(o,e.minValue,e.maxValue),u=X({field:t,normalizationType:r,normalizationField:i,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,breakCount:e.numClasses||te}),m=new g;return m.classificationDefinition=u,m.where=j(n,l),this.generateRenderer(m,s).then((t=>Y(t,e.classificationMethod)))}_classBreaksFromInterpolation(e){const{minValue:t,maxValue:r}=e,i=e.numClasses||te,a=[],s=(r-t)/i;for(let l=0;l<i;l++){const e=t+l*s;a.push({minValue:e,maxValue:e+s})}a[i-1].maxValue=r;const n={classBreaks:a,normalizationTotal:e.normalizationTotal},o=Y(n,e.classificationMethod);return Promise.resolve(o)}async _classBreaksFromMemory(e){const{view:t,field:r,valueExpression:i,signal:a}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryClassBreaks"}),m={field:r,valueExpression:i,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return i&&t&&(s||n)&&(m.viewInfoParams=P(t),m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(r,{featuresJSON:s,graphics:n,layerView:o,query:l},a)),!s&&!n&&o&&"queryClassBreaks"in o?o.queryClassBreaks(l,m,{signal:a}):s?this.workerClient.classBreaks(m,s):T({attribute:m,features:n})}async _heatmapStatsFromMemory(e,t){const{view:r,field:i,radius:a}=e,{featuresJSON:s,graphics:n}=await this._processStatsFromMemoryParams({...e,returnGeometry:!0}),o=new S({extent:r.extent,tolerance:"2d"===r.type?r.state.resolution:r.pixelSizeAt(r.center)}),l={field:i,fieldOffset:t,radius:a,transform:d(o),spatialReference:r.spatialReference?.toJSON(),size:r.size};return s?.length||n?.length?s?this.workerClient.heatmapStatistics(l,s):E({attribute:l,features:n}):{count:0,min:null,max:null,avg:null,stddev:null}}_updateQueryWithFeatureFilter(e,t){t&&(e.geometry=t.geometry,e.spatialRelationship=t.spatialRelationship)}getField(e=""){return this.layer.getField(e)}getFieldUsageInfo(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!0,supportsStatistics:!0}:null}getFieldDomain(e,t){return this.layer.getFieldDomain(e,t)}summaryStatistics(e){const{field:t,normalizationType:i,sqlExpression:a,view:s,features:n,useFeaturesInView:o}=e,u=t?this.getField(t):null,m=F(u),c=e.valueExpression||a,d=c&&!a,p=this._hasLocalSource||n||o,h=s&&"3d"===s.type;if(p||d)return d||n||o||h?this._summaryStatsFromMemory(e,u):this._summaryStatsFromClientQuery(e,m);if(!this.supportsSQLExpression&&(m||c||"natural-log"===i||"square-root"===i))return Promise.reject(new r("feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries"));return(i&&!this.supportsSQLExpression?this._summaryStatsFromGenRend(e):this._summaryStatsFromServiceQuery(e,m)).catch((()=>(l(e.signal),this._summaryStatsFromMemory(e,u))))}async uniqueValues(e){const{valueExpression:t,sqlExpression:r,features:i,useFeaturesInView:a,signal:s}=e,n=t&&(!r||!this.supportsSQLExpression),o=this._hasLocalSource||i||a||n,u=e.view,m=u&&"3d"===u.type,c=await U(e,this);return o?n||i||a||m?this._uvFromMemory(e,c):this._uvFromClientQuery(e,c):this._uvFromServiceQuery(e,c).catch((t=>(l(s),!e.field||e.field2||e.field3||e.filter?t:this._uvFromGenRenderer(e,c[0])))).catch((()=>(l(s),m?this._uvFromMemory(e,c):this._uvFromClientQuery(e,c))))}histogram(e){const{field:t,normalizationType:i,normalizationField:a,classificationMethod:s,view:n,filter:o,signal:l}=e,u=t?this.getField(t):null,m=F(u),c=e.valueExpression||e.sqlExpression,d=c&&!e.sqlExpression,p=this._hasLocalSource||e.features||e.useFeaturesInView||d,h=this.supportsSQLExpression,f=!s||"equal-interval"===s,y=e.minValue,g=e.maxValue,S=null!=y&&null!=g,w=e.numBins||re;return p?this._histogramFromMemory(e):(c||h)&&f?h||!c&&"natural-log"!==i&&"square-root"!==i?this._histogramForExpr(e):Promise.reject(new r("feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries")):m&&f?Promise.reject(new r("feature-layer-adapter:not-supported","Normalization and date field are not allowed when layer does not support standardized SQL expression for queries")):i||!f?this._binParamsFromGenRend(e).then((s=>{if(!S)return this._getBins(s,t,w,n,o,l);if(y>s.max||g<s.min)throw new r("histogram:insufficient-data","Range defined by 'minValue' and 'maxValue' does not intersect available data range of the field");if(f)return this._getBins({min:y,max:g,sqlExpr:s.sqlExpr,excludeZerosExpr:s.excludeZerosExpr},t,w,n,o,l);{const r={field:t,normalizationType:i,normalizationField:a,normalizationTotal:s.normTotal,layer:this},u=O(r),m=Q(u,y,g);return this._binParamsFromGenRend(e,m).then((e=>this._getBins(e,t,w,n,o,l)))}})):this._histogramForField(e)}classBreaks(e){const t=!1!==e.analyzeData,r=this._hasLocalSource||e.features||e.useFeaturesInView||e.valueExpression||e.filter;if(t&&r)return this._classBreaksFromMemory(e);return(t?this._classBreaksFromGenRend(e):this._classBreaksFromInterpolation(e)).catch((()=>(l(e.signal),this._classBreaksFromMemory(e))))}queryFeatureCount(e){if(this._hasLocalSource)return Promise.reject(new r("feature-layer-adapter:not-supported","Layer does not support count query"));const t=this.layer,i=t.createQuery();return i.where=j(i.where,e.whereClause),this._updateQueryWithFeatureFilter(i,e.filter),t.queryFeatureCount(i,{signal:e.signal})}generateRenderer(e,t){const i=this.layer;if(this._hasLocalSource||i.version<10.1)return Promise.reject(new r("feature-layer-adapter:not-supported","Layer does not support generateRenderer operation (requires ArcGIS Server version 10.1+)"));const a=new ee({url:i.parsedUrl.path,source:i.dynamicDataSource,gdbVersion:i.gdbVersion}),s=i.createQuery();return e.where=j(e.where,s.where),a.execute(e,{signal:t})}heatmapStatistics(e){const{field:t,fieldOffset:r,view:i,signal:a}=e;return(t&&null==r?this.summaryStatistics({field:t,view:i,signal:a}):Promise.resolve(null)).then((t=>{let i=r||0;if(t){const{count:e,min:r,max:a}=t;e?r===a&&0===r?i=1:a<=0?i="abs":r<0&&(i=-1.01*r):i=1}return this._heatmapStatsFromMemory(e,i).then((e=>({...e,summaryStatistics:t,fieldOffset:i})))}))}async predominantCategories(e){if(!this._hasLocalSource&&!this.supportsSQLExpression)throw new r("feature-layer-adapter:not-supported","Layer does not support advanced SQL expressions and standardized queries");const{fields:t,view:i,signal:a}=e,s=_(t),n=x(t),o=i&&this._hasLocalSource?await this._uvFromMemory({valueExpression:s,view:i,signal:a}):await this._uvFromServiceQuery({sqlExpression:n.expression,valueExpression:s,signal:a});return W(o.uniqueValueInfos,t)}async getSampleFeatures(e,r){const{view:i,sampleSize:a,requiredFields:s,returnGeometry:n,filter:o,signal:u}=e,m=this.layer.createQuery(),c=1,d="json"===r;m.outSpatialReference=e.spatialReference||i&&i.spatialReference,m.returnGeometry=!!n,m.outFields=s,this._updateQueryWithFeatureFilter(m,o);let p=[],h=!1;if(i)try{const e=await i.whenLayerView(this.layer);if(h=!R(this,s,e).length,h&&(p=await this._fetchFeaturesFromMemory(e,m,u,r),p.length&&a>0&&a<=p.length))return t(p,a,c)}catch(f){l(u)}try{if(this._hasLocalSource)return h?p:d?this._fetchFeaturesJSONFromService(m,u):this._fetchFeaturesFromService(m,u);const r=await this.queryFeatureCount({view:i,filter:o,signal:u}),s=this.layer.capabilities.query.maxRecordCount;let n=-1===a?r:a;if(n=s&&n>s?s:n,r<=p.length||p.length>=s)return p;const l=i.extent.width/i.width/i.scale*ae;if(m.maxAllowableOffset=e.resolution||l,r<=n)return d?this._fetchFeaturesJSONFromService(m,u):this._fetchFeaturesFromService(m,u);if(r<=ie){const e=this.layer.createQuery();this._updateQueryWithFeatureFilter(e,o);const r=await this.layer.queryObjectIds();return m.objectIds=t(r,n,c),d?this._fetchFeaturesJSONFromService(m,u):this._fetchFeaturesFromService(m,u)}return this.layer.get("capabilities.query.supportsPagination")&&(m.num=Math.min(n,ie)),d?this._fetchFeaturesJSONFromService(m,u):this._fetchFeaturesFromService(m,u)}catch(f){return l(u),p}}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=t.get("capabilities.query.supportsSqlExpression"),this._hasLocalSource=!t.url&&!!t.source,this.hasQueryEngine=this._hasLocalSource,this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent=t.fullExtent,this.workerClient=C.getInstance(),await this.workerClient.open(s(s(e).signal))}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([m({constructOnly:!0})],ne.prototype,"layer",void 0),ne=e([c("esri.smartMapping.support.adapters.FeatureLayerAdapter")],ne);const oe=ne;export{oe as default};
