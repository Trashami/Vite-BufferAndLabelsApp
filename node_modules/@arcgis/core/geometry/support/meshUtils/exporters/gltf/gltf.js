/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import e from"../../../../../core/Logger.js";import{getOrCreateMapValue as t}from"../../../../../core/MapUtils.js";import{isSome as s,isNone as i}from"../../../../../core/maybe.js";import{j as r}from"../../../../../chunks/quat.js";import{I as a,b as o}from"../../../../../chunks/quatf64.js";import{k as n}from"../../../../../chunks/vec3.js";import{Z as l,a as c,O as h}from"../../../../../chunks/vec3f64.js";import u from"../../../MeshMaterialMetallicRoughness.js";import{ungeoreferenceByTransform as f}from"../../georeference.js";import{Buffer as d}from"./buffer.js";import{computeOrigin as p,smoothNormals as m}from"./geometry.js";import{BufferOutputType as g,ImageOutputType as _,AttributeType as A,TargetBuffer as x,AlphaMode as R}from"./types.js";import{imageToArrayBuffer as T,imageToDataURI as E}from"./imageutils.js";import{DataType as b,TextureWrapMode as M}from"../../../../../views/webgl/enums.js";const O=e.getLogger("gltf");class w{constructor(e,t,s){this.params={},this._materialMap=new Array,this._imageMap=new Map,this._textureMap=new Map,this.gltf={asset:{version:"2.0",copyright:e.copyright,generator:e.generator},extras:{options:t,binChunkBuffer:null,promises:[]}},s&&(this.params=s),this._addScenes(e)}_addScenes(e){this.gltf.scene=e.defaultScene;const t=this.gltf.extras,s=t.options.bufferOutputType===g.GLB||t.options.imageOutputType===_.GLB;s&&(t.binChunkBuffer=new d(this.gltf)),e.forEachScene((e=>{this._addScene(e)})),s&&t.binChunkBuffer.finalize()}_addScene(e){this.gltf.scenes||(this.gltf.scenes=[]);const t={};e.name&&(t.name=e.name),e.forEachNode((e=>{t.nodes||(t.nodes=[]);const s=this._addNode(e);t.nodes.push(s)})),this.gltf.scenes.push(t)}_addNode(e){this.gltf.nodes||(this.gltf.nodes=[]);const t={};e.name&&(t.name=e.name);const s=e.translation;n(s,l)||(t.translation=c(s));const i=e.rotation;r(i,a)||(t.rotation=o(i));const u=e.scale;n(u,h)||(t.scale=c(u)),e.mesh&&e.mesh.vertexAttributes.position?t.mesh=this._addMesh(e.mesh):e.forEachNode((e=>{t.children||(t.children=[]);const s=this._addNode(e);t.children.push(s)}));const f=this.gltf.nodes.length;return this.gltf.nodes.push(t),f}_addMesh(e){this.gltf.meshes||(this.gltf.meshes=[]);const t={primitives:[]},i=this.gltf.extras,r=i.options.bufferOutputType===g.GLB;let a;a=r?i.binChunkBuffer:new d(this.gltf),this.params.origin||(this.params.origin=p(e));const o=f(e.vertexAttributes,e.transform,this.params.origin,{geographic:this.params.geographic,unit:"meters"});m(e,o),this._flipYZAxis(o);const n=a.addBufferView(b.FLOAT,A.VEC3,x.ARRAY_BUFFER);let l,c,h,u;o.normal&&(l=a.addBufferView(b.FLOAT,A.VEC3,x.ARRAY_BUFFER)),e.vertexAttributes.uv&&(c=a.addBufferView(b.FLOAT,A.VEC2,x.ARRAY_BUFFER)),o.tangent&&(h=a.addBufferView(b.FLOAT,A.VEC4,x.ARRAY_BUFFER)),e.vertexAttributes.color&&(u=a.addBufferView(b.UNSIGNED_BYTE,A.VEC4,x.ARRAY_BUFFER)),n.startAccessor("POSITION"),l&&l.startAccessor("NORMAL"),c&&c.startAccessor("TEXCOORD_0"),h&&h.startAccessor("TANGENT"),u&&u.startAccessor("COLOR_0");const _=o.position.length/3,{position:R,normal:T,tangent:E}=o,{color:M,uv:O}=e.vertexAttributes;for(let f=0;f<_;++f)n.push(R[3*f+0]),n.push(R[3*f+1]),n.push(R[3*f+2]),l&&s(T)&&(l.push(T[3*f+0]),l.push(T[3*f+1]),l.push(T[3*f+2])),c&&s(O)&&(c.push(O[2*f+0]),c.push(O[2*f+1])),h&&s(E)&&(h.push(E[4*f+0]),h.push(E[4*f+1]),h.push(E[4*f+2]),h.push(E[4*f+3])),u&&s(M)&&(u.push(M[4*f+0]),u.push(M[4*f+1]),u.push(M[4*f+2]),u.push(M[4*f+3]));const w=n.endAccessor(),N=this._addAccessor(n.index,w);let C,B,L,y,I;if(l){const e=l.endAccessor();C=this._addAccessor(l.index,e)}if(c){const e=c.endAccessor();B=this._addAccessor(c.index,e)}if(h){const e=h.endAccessor();L=this._addAccessor(h.index,e)}if(u){const e=u.endAccessor();y=this._addAccessor(u.index,e)}e.components&&e.components.length>0&&e.components[0].faces?(I=a.addBufferView(b.UNSIGNED_INT,A.SCALAR,x.ELEMENT_ARRAY_BUFFER),this._addMeshVertexIndexed(I,e.components,t,N,C,B,L,y)):this._addMeshVertexNonIndexed(e.components,t,N,C,B,L,y),n.finalize(),l&&l.finalize(),c&&c.finalize(),h&&h.finalize(),I&&I.finalize(),u&&u.finalize(),r||a.finalize();const S=this.gltf.meshes.length;return this.gltf.meshes.push(t),S}_flipYZAxis({position:e,normal:t,tangent:s}){this._flipYZBuffer(e,3),this._flipYZBuffer(t,3),this._flipYZBuffer(s,4)}_flipYZBuffer(e,t){if(!i(e))for(let s=1,i=2;s<e.length;s+=t,i+=t){const t=e[s],r=e[i];e[s]=r,e[i]=-t}}_addMaterial(e){if(null===e)return;const t=this._materialMap.indexOf(e);if(-1!==t)return t;this.gltf.materials||(this.gltf.materials=[]);const i={};switch(e.alphaMode){case"mask":i.alphaMode=R.MASK;break;case"auto":case"blend":i.alphaMode=R.BLEND}.5!==e.alphaCutoff&&(i.alphaCutoff=e.alphaCutoff),e.doubleSided&&(i.doubleSided=e.doubleSided),i.pbrMetallicRoughness={};const r=e=>e**2.1,a=e=>{const t=e.toRgba();return t[0]=r(t[0]/255),t[1]=r(t[1]/255),t[2]=r(t[2]/255),t};if(s(e.color)&&(i.pbrMetallicRoughness.baseColorFactor=a(e.color)),s(e.colorTexture)&&(i.pbrMetallicRoughness.baseColorTexture={index:this._addTexture(e.colorTexture)}),s(e.normalTexture)&&(i.normalTexture={index:this._addTexture(e.normalTexture)}),e instanceof u){if(s(e.emissiveTexture)&&(i.emissiveTexture={index:this._addTexture(e.emissiveTexture)}),s(e.emissiveColor)){const t=a(e.emissiveColor);i.emissiveFactor=[t[0],t[1],t[2]]}s(e.occlusionTexture)&&(i.occlusionTexture={index:this._addTexture(e.occlusionTexture)}),s(e.metallicRoughnessTexture)&&(i.pbrMetallicRoughness.metallicRoughnessTexture={index:this._addTexture(e.metallicRoughnessTexture)}),i.pbrMetallicRoughness.metallicFactor=e.metallic,i.pbrMetallicRoughness.roughnessFactor=e.roughness}else i.pbrMetallicRoughness.metallicFactor=1,i.pbrMetallicRoughness.roughnessFactor=1,O.warnOnce("Meshes exported to GLTF without MeshMaterialMetallicRoughness material will appear different when imported back.");const o=this.gltf.materials.length;return this.gltf.materials.push(i),this._materialMap.push(e),o}_addTexture(e){const s=this.gltf.textures??[];return this.gltf.textures=s,t(this._textureMap,e,(()=>{const t={sampler:this._addSampler(e),source:this._addImage(e)},i=s.length;return s.push(t),i}))}_addImage(e){const t=this._imageMap.get(e);if(null!=t)return t;this.gltf.images||(this.gltf.images=[]);const s={};if(e.url)s.uri=e.url;else{const t=e.data;s.extras=t;for(let e=0;e<this.gltf.images.length;++e)if(t===this.gltf.images[e].extras)return e;const i=this.gltf.extras;switch(i.options.imageOutputType){case _.GLB:{const e=i.binChunkBuffer.addBufferView(b.UNSIGNED_BYTE,A.SCALAR),r=T(t).then((({data:e,type:t})=>(s.mimeType=t,e)));e.writeAsync(r).then((()=>{e.finalize()})),s.bufferView=e.index;break}case _.DataURI:s.uri=E(t);break;default:i.promises.push(T(t).then((({data:e,type:t})=>{s.uri=e,s.mimeType=t})))}}const i=this.gltf.images.length;return this.gltf.images.push(s),this._imageMap.set(e,i),i}_addSampler(e){this.gltf.samplers||(this.gltf.samplers=[]);let t=M.REPEAT,s=M.REPEAT;if("string"==typeof e.wrap)switch(e.wrap){case"clamp":t=M.CLAMP_TO_EDGE,s=M.CLAMP_TO_EDGE;break;case"mirror":t=M.MIRRORED_REPEAT,s=M.MIRRORED_REPEAT}else{switch(e.wrap.vertical){case"clamp":s=M.CLAMP_TO_EDGE;break;case"mirror":s=M.MIRRORED_REPEAT}switch(e.wrap.horizontal){case"clamp":t=M.CLAMP_TO_EDGE;break;case"mirror":t=M.MIRRORED_REPEAT}}const i={wrapS:t,wrapT:s};for(let a=0;a<this.gltf.samplers.length;++a)if(JSON.stringify(i)===JSON.stringify(this.gltf.samplers[a]))return a;const r=this.gltf.samplers.length;return this.gltf.samplers.push(i),r}_addAccessor(e,t){this.gltf.accessors||(this.gltf.accessors=[]);const s={bufferView:e,byteOffset:t.byteOffset,componentType:t.componentType,count:t.count,type:t.type,min:t.min,max:t.max,name:t.name};t.normalized&&(s.normalized=!0);const i=this.gltf.accessors.length;return this.gltf.accessors.push(s),i}_addMeshVertexIndexed(e,t,s,i,r,a,o,n){for(const l of t){e.startAccessor("INDICES");for(let s=0;s<l.faces.length;++s)e.push(l.faces[s]);const t=e.endAccessor(),c={attributes:{POSITION:i},indices:this._addAccessor(e.index,t),material:this._addMaterial(l.material)};r&&"flat"!==l.shading&&(c.attributes.NORMAL=r),a&&(c.attributes.TEXCOORD_0=a),o&&"flat"!==l.shading&&(c.attributes.TANGENT=o),n&&(c.attributes.COLOR_0=n),s.primitives.push(c)}}_addMeshVertexNonIndexed(e,t,s,i,r,a,o){const n={attributes:{POSITION:s}};i&&(n.attributes.NORMAL=i),r&&(n.attributes.TEXCOORD_0=r),a&&(n.attributes.TANGENT=a),o&&(n.attributes.COLOR_0=o),e&&(n.material=this._addMaterial(e[0].material)),t.primitives.push(n)}}export{w as GLTF};
