/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import e from"../../core/Error.js";import{layerLookupMap as r}from"../../layers/support/lazyLayerLoader.js";import t from"../PortalItem.js";import{getNumLayersAndTables as a,preprocessFSItemData as n,getSubtypeGroupLayerIds as s,getFirstLayerOrTableId as o}from"./layersLoader.js";import{hasTypeKeyword as c}from"./portalItemUtils.js";import{requestArcGISServiceJSON as u}from"../../support/requestPresets.js";function i(e){return!e.portalItem||e.portalItem instanceof t||(e={...e,portalItem:new t(e.portalItem)}),l(e.portalItem).then((r=>{const t={portalItem:e.portalItem,...r.properties};return new(0,r.constructor)(t)}))}function l(e){return e.load().then(y).then(m)}function y(r){switch(r.type){case"Map Service":return p(r);case"Feature Service":return L(r);case"Feature Collection":return d(r);case"Scene Service":return f(r);case"Image Service":return N(r);case"Stream Service":return S();case"Vector Tile Service":return I();case"GeoJson":return h();case"CSV":return g();case"KML":return w();case"WFS":return M();case"WMTS":return j();case"WMS":return T();case"Feed":return v();default:return Promise.reject(new e("portal:unknown-item-type","Unknown item type '${type}'",{type:r.type}))}}function m(e){return(0,r[e.className])().then((r=>({constructor:r,properties:e.properties})))}function p(e){return G(e).then((e=>e?{className:"TileLayer"}:{className:"MapImageLayer"}))}function L(e){return c(e,"Oriented Imagery Layer")?C(e):P(e).then((e=>{if("object"==typeof e){const r={};return null!=e.id&&(r.layerId=e.id),{className:e.className||"FeatureLayer",properties:r}}return{className:"GroupLayer"}}))}function f(e){return P(e).then((r=>{if("object"==typeof r){const t={};let a;if(null!=r.id?(t.layerId=r.id,a=`${e.url}/layers/${r.id}`):a=e.url,Array.isArray(e.typeKeywords)&&e.typeKeywords.length>0){const r={IntegratedMesh:"IntegratedMeshLayer","3DObject":"SceneLayer",Point:"SceneLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};for(const t of Object.keys(r))if(e.typeKeywords.includes(t))return{className:r[t]}}return u(a).then((e=>{let r="SceneLayer";const a={Point:"SceneLayer","3DObject":"SceneLayer",IntegratedMesh:"IntegratedMeshLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};return e&&e.layerType&&a[e.layerType]&&(r=a[e.layerType]),{className:r,properties:t}}))}return!1===r?u(e.url).then((e=>"Voxel"===e?.layerType?{className:"VoxelLayer"}:{className:"GroupLayer"})):{className:"GroupLayer"}}))}async function d(e){await e.load();const r=c(e,"Map Notes"),t=c(e,"Markup");if(r||t)return{className:"MapNotesLayer"};if(c(e,"Route Layer"))return{className:"RouteLayer"};const n=await e.fetchData();return 1===a(n)?{className:"FeatureLayer"}:{className:"GroupLayer"}}async function N(e){await e.load();const r=e.typeKeywords?.map((e=>e.toLowerCase()))??[];if(r.includes("elevation 3d layer"))return{className:"ElevationLayer"};if(r.includes("tiled imagery"))return{className:"ImageryTileLayer"};const t=(await e.fetchData())?.layerType;if("ArcGISTiledImageServiceLayer"===t)return{className:"ImageryTileLayer"};if("ArcGISImageServiceLayer"===t)return{className:"ImageryLayer"};const a=await u(e.url),n=a.cacheType?.toLowerCase(),s=a.capabilities?.toLowerCase().includes("tilesonly");return"map"===n||s?{className:"ImageryTileLayer"}:{className:"ImageryLayer"}}function S(){return{className:"StreamLayer"}}function I(){return{className:"VectorTileLayer"}}function h(){return{className:"GeoJSONLayer"}}function g(){return{className:"CSVLayer"}}function w(){return{className:"KMLLayer"}}function M(){return{className:"WFSLayer"}}function T(){return{className:"WMSLayer"}}function j(){return{className:"WMTSLayer"}}function v(){return{className:"StreamLayer"}}function C(e){return e.load().then((()=>e.fetchData())).then((e=>e.coverage?{className:"GroupLayer"}:{className:"OrientedImageryLayer",properties:e}))}function G(e){return u(e.url).then((e=>e.tileInfo))}function P(e){return!e.url||e.url.match(/\/\d+$/)?Promise.resolve({}):e.load().then((()=>e.fetchData())).then((async r=>{if("Feature Service"===e.type){const t=F(await n(r,e.url));if("object"==typeof t){const e=s(r);t.className=e.includes(t.id)?"SubtypeGroupLayer":"FeatureLayer"}return t}return a(r)>0?F(r):u(e.url).then(F)}))}function F(e){return 1===a(e)&&{id:o(e)}}export{i as fromItem,y as selectLayerClassPath};
