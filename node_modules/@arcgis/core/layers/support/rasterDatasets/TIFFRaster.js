/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import t from"../../../core/Error.js";import{unwrap as r,isSome as i,isNone as s}from"../../../core/maybe.js";import{property as a}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as n}from"../../../core/accessorSupport/decorators/subclass.js";import o from"../RasterInfo.js";import f from"../RasterStorageInfo.js";import l from"./BaseRaster.js";import u from"./DBFParser.js";import{parseSpatialReference as p,parsePAMInfo as m}from"./pamParser.js";import{parseSignature as c,getImageInfo as h,parseIFD as d,parseFieldValues as y,isBSQConfig as g}from"../rasterFormats/TiffDecoder.js";import x from"../rasterFormats/TiffTags.js";import{estimateStatisticsFromHistograms as T}from"../rasterFunctions/stretchUtils.js";import I from"../rasterTransforms/PolynomialTransform.js";import w from"../../../rest/support/FeatureSet.js";import b from"../../../geometry/SpatialReference.js";import _ from"../../../geometry/Extent.js";import S from"../../../geometry/Point.js";const E=(e,t)=>e.get(t)?.values,F=(e,t)=>e.get(t)?.values?.[0];let R=class extends l{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){await this.init();const s=e?r(e.signal):null,{data:a}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:s});if(!a)throw new t("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:n,firstIFDPos:o,isBigTiff:f}=c(a),l=[];await this._readIFDs(l,a,n,o,0,f?8:4,s);const{imageInfo:u,rasterInfo:p}=this._parseIFDs(l);if(this._headerInfo={littleEndian:n,isBigTiff:f,ifds:l,...u},this._set("rasterInfo",p),!u.isSupported)throw new t("tiffraster:open","this tiff is not supported: "+u.message);if(!u.tileWidth)throw new t("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");const{skipExtensions:m=[]}=this.ioConfig;if(!m.includes("aux.xml")){const t=await this._fetchAuxiliaryMetaData(e);null!=t&&this._processPAMInfo(t,p)}m.includes("vat.dbf")||1!==p.bandCount||"u8"!==p.pixelType||(p.attributeTable=await this._fetchAuxiliaryTable(e),i(p.attributeTable)&&(p.keyProperties.DataType="thematic")),this.updateTileInfo()}async fetchRawTile(e,t,r,i={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,r))return null;const s=this._getTileLocation(e,t,r);if(!s)return null;const{ranges:a,actualTileWidth:n,actualTileHeight:o,ifd:f}=s,l=a.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:i.signal}))),u=await Promise.all(l),p=u.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),m=1===u.length?u[0].data:new ArrayBuffer(p),c=[0],h=[0];if(u.length>1){const e=new Uint8Array(m);for(let t=0,r=0;t<u.length;t++){const i=u[t].data;e.set(new Uint8Array(i),r),c[t]=r,r+=i.byteLength,h[t]=i.byteLength}}const{blockWidth:d,blockHeight:y}=this.getBlockWidthHeight(e),g=await this.decodePixelBlock(m,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:f,offsets:c,sizes:h},width:d,height:y,planes:null,pixelType:null});let x,T,I;if(n!==d||o!==y){let e=g.mask;if(e)for(x=0;x<y;x++)if(I=x*d,x<o)for(T=n;T<d;T++)e[I+T]=0;else for(T=0;T<d;T++)e[I+T]=0;else for(e=new Uint8Array(d*y),g.mask=e,x=0;x<o;x++)for(I=x*d,T=0;T<n;T++)e[I+T]=1}return g}_parseIFDs(e){const t=h(e),{width:r,height:i,tileWidth:s,tileHeight:a,planes:n,pixelType:l,compression:u,firstPyramidLevel:m,maximumPyramidLevel:c,pyramidBlockWidth:d,pyramidBlockHeight:y,tileBoundary:g,affine:x,metadata:T}=t,w=t.extent.spatialReference?.wkt||t.extent.spatialReference?.wkid;let R=p(w),v=!1;null==R&&(v=!0,R=new b({wkid:3857}));const k=new _({...t.extent,spatialReference:R}),D=new S(k?{x:k.xmin,y:k.ymax,spatialReference:R}:{x:0,y:0}),j=new f({blockWidth:s,blockHeight:a,pyramidBlockWidth:d,pyramidBlockHeight:y,compression:u,origin:D,firstPyramidLevel:m,maximumPyramidLevel:c,blockBoundary:g}),O=new S({x:(k.xmax-k.xmin)/r,y:(k.ymax-k.ymin)/i,spatialReference:R}),P=T?{BandProperties:T.bandProperties,DataType:T.dataType}:{};let B=null;const L=F(e[0],"PHOTOMETRICINTERPRETATION"),A=E(e[0],"COLORMAP");if(3===L&&A?.length>3&&A.length%3==0){B=[];const e=A.length/3;for(let t=0;t<e;t++)B.push([t,A[t]>>>8,A[t+e]>>>8,A[t+2*e]>>>8])}const z=new o({width:r,height:i,bandCount:n,pixelType:l,pixelSize:O,storageInfo:j,spatialReference:R,isPseudoSpatialReference:v,keyProperties:P,extent:k,colormap:B,statistics:T?T.statistics:null});return x?.length&&(z.nativeExtent=new _({xmin:-.5,ymin:.5-i,xmax:r-.5,ymax:.5,spatialReference:R}),z.transform=new I({polynomialOrder:1,forwardCoefficients:[x[2]+x[0]/2,x[5]-x[3]/2,x[0],x[3],-x[1],-x[4]]}),z.extent=z.transform.forwardTransform(z.nativeExtent),z.pixelSize=new S({x:(k.xmax-k.xmin)/r,y:(k.ymax-k.ymin)/i,spatialReference:R}),j.origin.x=-.5,j.origin.y=.5),{imageInfo:t,rasterInfo:z}}_processPAMInfo(e,t){if(t.statistics=e.statistics??t.statistics,t.histograms=e.histograms,e.histograms&&s(t.statistics)&&(t.statistics=T(e.histograms)),e.transform&&s(t.transform)){t.transform=e.transform,t.nativeExtent=t.extent;const r=t.transform.forwardTransform(t.nativeExtent);t.pixelSize=new S({x:(r.xmax-r.xmin)/t.width,y:(r.ymax-r.ymin)/t.height,spatialReference:t.spatialReference}),t.extent=r}t.spatialReference||(t.spatialReference=e.spatialReference)}async _readIFDs(e,t,r,i,s,a=4,n){if(!i)return null;if(i>=t.byteLength||i<0){t=(await this.request(this.url,{range:{from:i+s,to:i+s+this._bufferSize},responseType:"array-buffer",signal:n})).data,s=i+s,i=0}const o=await this._readIFD(t,r,i,s,x.TIFF_TAGS,a,n);if(e.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(e,t,r,o.nextIFD-s,s,a,n)}async _readIFD(e,t,r,s,a=x.TIFF_TAGS,n=4,o){if(!e)return null;const f=d(e,t,r,s,a,n);if(f.success){const r=[];if(f.ifd?.forEach((e=>{e.values||r.push(e)})),r.length>0){const a=r.map((e=>e.offlineOffsetSize)).filter(i),n=Math.min.apply(null,a.map((e=>e[0])));if(Math.min.apply(null,a.map((e=>e[0]+e[1])))-n<=this._bufferSize){const{data:i}=await this.request(this.url,{range:{from:n,to:n+this._bufferSize},responseType:"array-buffer",signal:o});e=i,s=n,r.forEach((r=>y(e,t,r,s)))}}if(f.ifd?.has("GEOKEYDIRECTORY")){const r=f.ifd.get("GEOKEYDIRECTORY"),i=r?.values;if(i&&i.length>4){const a=i[0]+"."+i[1]+"."+i[2],n=await this._readIFD(e,t,r.valueOffset+6-s,s,x.GEO_KEYS,2,o);r.data=n.ifd,r.data&&r.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[a]})}}return f}if(f.requiredBufferSize&&f.requiredBufferSize!==e.byteLength){const r=await this.request(this.url,{range:{from:s,to:s+f.requiredBufferSize+4},responseType:"array-buffer",signal:o});return(e=r.data).byteLength<f.requiredBufferSize?null:this._readIFD(e,t,0,s,x.TIFF_TAGS,4,o)}}_getTileLocation(e,t,r){const{firstPyramidLevel:i,blockBoundary:s}=this.rasterInfo.storageInfo,a=0===e?0:e-(i-1),n=this._headerInfo?.ifds[a];if(!n)return null;const o=g(n,this._headerInfo),f=E(n,"TILEOFFSETS");if(void 0===f)return null;const l=E(n,"TILEBYTECOUNTS"),{minRow:u,minCol:p,maxRow:m,maxCol:c}=s[a];if(t>m||r>c||t<u||r<p)return null;const h=F(n,"IMAGEWIDTH"),d=F(n,"IMAGELENGTH"),y=F(n,"TILEWIDTH"),x=F(n,"TILELENGTH"),T=o?this.rasterInfo.bandCount:1,I=T*t*(c+1)+r,w=[{from:f[I],to:f[I+T-1]+l[I+T-1]-1}];if(o){let e=!0;for(let t=0;t<T;t++)if(f[I+t]+l[I+t]!==f[I+t+1]){e=!1;break}if(!e)for(let t=0;t<T;t++)w[t]={from:f[I+t],to:f[I+t]+l[I+t]-1}}const b=f[I],_=l[I];if(null==b||null==_)return null;return{ranges:w,ifd:n,actualTileWidth:r===c&&h%y||y,actualTileHeight:t===m&&d%x||x}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return m(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e?.signal}),r=u.parse(t);return r?.recordSet?w.fromJSON(r.recordSet):null}catch{return null}}};e([a()],R.prototype,"_files",void 0),e([a()],R.prototype,"_headerInfo",void 0),e([a()],R.prototype,"_bufferSize",void 0),e([a({type:String,json:{write:!0}})],R.prototype,"datasetFormat",void 0),R=e([n("esri.layers.support.rasterDatasets.TIFFRaster")],R);const v=R;export{v as default};
