/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import e from"../../../request.js";import i from"../../../core/Error.js";import{JSONSupport as o}from"../../../core/JSONSupport.js";import r from"../../../core/Logger.js";import{isSome as n,unwrap as s,isNone as a,unwrapOrThrow as l}from"../../../core/maybe.js";import{EsriPromiseMixin as c}from"../../../core/Promise.js";import{onAbort as m}from"../../../core/promiseUtils.js";import{property as f}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import{ensureClass as h}from"../../../core/accessorSupport/ensureType.js";import{subclass as u}from"../../../core/accessorSupport/decorators/subclass.js";import{sanitizeUrl as p}from"../arcgisLayerUrl.js";import{url as d}from"../commonProperties.js";import x from"../DimensionalDefinition.js";import g from"../RasterStorageInfo.js";import y from"../TileInfo.js";import{isMultiSliceOrRangeDefinition as I,getSliceIndex as R,createSlices as w,getSliceIds as k}from"./multidimensionalUtils.js";import{getRasterId as b,getBlock as v,putBlock as S,deleteBlock as T,decreaseRefCount as B}from"./RawBlockCache.js";import{decode as P}from"../rasterFormats/RasterCodec.js";import{mosaic as W,approximateTransform as M,getLocalArithmeticNorthRotations as C}from"../rasterFunctions/pixelUtils.js";import{load as _,getWorldWidth as j,projectPoint as H,snapPyramid as E,snapExtent as L,getWorldWrapCount as D,projectExtent as z,getProjectionOffsetGrid as A,getRasterDatasetAlignmentInfo as F,projectResolution as O}from"../rasterFunctions/rasterProjectionHelper.js";import{convertToLocalDirections as q,uvComponentToVector as G}from"../rasterFunctions/vectorFieldUtils.js";import J from"../../../geometry/Extent.js";import N from"../../../geometry/Point.js";const V=8;let $=class extends(c(o)){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const t=_();this.addResolvingPromise(t),await this.when()}normalizeCtorArgs(t){return t&&t.ioConfig&&(t={...t,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:y.create(),...t.ioConfig}}),t}get _isGlobalWrappableSource(){const{rasterInfo:t}=this,e=j(t.spatialReference);return n(e)&&t.extent.width>=e/2}set url(t){this._set("url",p(t,r.getLogger(this.declaredClass)))}async open(t){throw new i("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(t,e,i,o={}){const r=o.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(t,e,i,r);return this.fetchPixels(n,r.size[0],r.size[1],o)}async identify(t,e={}){t=h(N,t).clone().normalize();const{multidimensionalDefinition:i,timeExtent:o}=e,{hasMultidimensionalTranspose:r,multidimensionalInfo:l}=this.rasterInfo;let{transposedVariableName:c}=e;const m=n(l)&&r&&(null!=o||I(i));if(m&&!c){c=n(i)&&i.length>0?i[0].variableName??void 0:l.variables[0].name,e={...e,transposedVariableName:c}}e=this._getRequestOptionsWithSliceId(e);const{spatialReference:f,extent:u}=this.rasterInfo,{datumTransformation:p}=e;let d=H(t,f,p);if(!u.intersects(d))return{location:d,value:null};if(n(this.rasterInfo.transform)){const t=this.rasterInfo.transform.inverseTransform(d);if(!this.rasterInfo.nativeExtent.intersects(t))return{location:t,value:null};d=t}let x=0;const g=n(c)&&n(l)&&this.rasterInfo.hasMultidimensionalTranspose;if(!g)if(e.srcResolution){x=E(e.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel}else if(x=await this.computeBestPyramidLevelForLocation(t,e),null==x)return{location:d,value:null};const y=this.identifyPixelLocation(d,x,null,g);if(null===y)return{location:d,value:null};const{row:R,col:w,rowOffset:k,colOffset:T,blockWidth:B}=y,P=c??s(e.sliceId),W=b(this.url,P),M=`${x}/${R}/${w}`;let C=v(W,null,M);a(C)&&(C=this.fetchRawTile(x,R,w,e),S(W,null,M,C));const _=await C;if(a(_)||!_.pixels?.length)return{location:d,value:null};const j=k*B+T;return this._processIdentifyResult(_,{srcLocation:d,position:j,pyramidLevel:x,useTransposedTile:!!g,requestSomeSlices:m,identifyOptions:e})}async fetchPixels(t,e,i,o={}){if(t=L(t),(o=this._getRequestOptionsWithSliceId(o)).requestRawData)return this._fetchPixels(t,e,i,o);const r=j(t.spatialReference),n=D(t);if(a(r)||0===n||1===n&&this._isGlobalWrappableSource)return this._fetchPixels(t,e,i,o);if(n>=3)return{extent:t,pixelBlock:null};const s=[],{xmin:l,xmax:c}=t,m=Math.round(r/(c-l)*e),f=m-Math.round((r/2-l)/(c-l)*e);let h=0;const u=[];for(let a=0;a<=n;a++){const p=new J({xmin:0===a?l:-r/2,xmax:a===n?c-r*a:r/2,ymin:t.ymin,ymax:t.ymax,spatialReference:t.spatialReference}),d=0===a?m-f:a===n?e-h:m;h+=d,u.push(d);const x=o.disableWrapAround&&a>0?null:this._fetchPixels(p,d,i,o);s.push(x)}const p=(await Promise.all(s)).map((t=>t?.pixelBlock));let d=null;const x={width:e,height:i};if(this.rasterJobHandler){d=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:p,srcMosaicSize:x,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:u},o)).pixelBlock}else d=W(p,x,{blockWidths:u});return{extent:t,srcExtent:z(t,this.rasterInfo.spatialReference,o.datumTransformation),pixelBlock:d}}async fetchRawPixels(t,e,i,o={}){e={x:Math.floor(e.x),y:Math.floor(e.y)};const r=await this._fetchRawTiles(t,e,i,o),{nativeExtent:s,nativePixelSize:a,storageInfo:l}=this.rasterInfo,c=2**t,m=a.x*c,f=a.y*c,h=new J({xmin:s.xmin+m*e.x,xmax:s.xmin+m*(e.x+i.width-1),ymin:s.ymax-f*(e.y+i.height-1),ymax:s.ymax-f*e.y,spatialReference:s.spatialReference});if(!r)return{extent:h,srcExtent:h,pixelBlock:null};const{pixelBlocks:u,mosaicSize:p}=r;if(1===u.length&&n(u[0])&&u[0].width===i.width&&u[0].height===i.height)return{extent:h,srcExtent:h,pixelBlock:r.pixelBlocks[0]};const d=t>0?l.pyramidBlockWidth:l.blockWidth,x=t>0?l.pyramidBlockHeight:l.blockHeight,g={x:e.x%d,y:e.y%x};let y;if(this.rasterJobHandler){y=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:u,srcMosaicSize:p,destDimension:i,clipOffset:g,clipSize:i,coefs:null,sampleSpacing:null,interpolation:o.interpolation,alignmentInfo:null,blockWidths:null},o)).pixelBlock}else y=W(u,p,{clipOffset:g,clipSize:i});return{extent:h,srcExtent:h,pixelBlock:y}}fetchRawTile(t,e,o,r){throw new i("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(t){return z(this.rasterInfo.extent,t)}decodePixelBlock(t,e){return!this.rasterJobHandler||e.useCanvas?P(t,e):this.rasterJobHandler.decode({data:t,options:e})}async request(t,i,o=0){const{customFetchParameters:r}=this.ioConfig,{range:n,query:s,headers:a}=i;o=o??i.retryCount??this.ioConfig.retryCount;const l=n?{Range:`bytes=${n.from}-${n.to}`}:null;try{return await e(t,{...i,query:{...s,...r},headers:{...a,...l}})}catch(c){if(o>0)return o--,this.request(t,i,o);throw c}}getSliceIndex(t){const{multidimensionalInfo:e}=this.rasterInfo;return a(e)||a(t)||0===t.length?null:R(t,e)}getTileExtentFromTileInfo(t,e,i,o){const r=l(o.lodAt(t));return this.getTileExtent({x:r.resolution,y:r.resolution},e,i,o.origin,o.spatialReference,o.size)}updateTileInfo(){const{storageInfo:t,spatialReference:e,extent:i,pixelSize:o}=this.rasterInfo;if(!t.tileInfo){const r=[],n=t.maximumPyramidLevel||0;let s=Math.max(o.x,o.y),a=1/.0254*96*s;for(let t=0;t<=n;t++)r.push({level:n-t,resolution:s,scale:a}),s*=2,a*=2;const l=new N({x:i.xmin,y:i.ymax,spatialReference:e});t.tileInfo=new y({origin:l,size:[t.blockWidth,t.blockHeight],spatialReference:e,lods:r}),t.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(t,e=512,i=512,o){const{width:r,height:n,nativeExtent:s,pixelSize:a,spatialReference:l}=t,c=new N({x:s.xmin,y:s.ymax,spatialReference:l});null==o&&(o=Math.max(0,Math.round(Math.log(Math.max(r,n))/Math.LN2-8)));const m=this.computeBlockBoundary(s,512,512,{x:s.xmin,y:s.ymax},[a],o);t.storageInfo=new g({blockWidth:e,blockHeight:i,pyramidBlockWidth:e,pyramidBlockHeight:i,origin:c,firstPyramidLevel:1,maximumPyramidLevel:o,blockBoundary:m})}async computeBestPyramidLevelForLocation(t,e={}){return 0}computeBlockBoundary(t,e,i,o,r,n=0,s=2){if(1===r.length&&n>0){r=[...r];let{x:t,y:e}=r[0];for(let i=0;i<n;i++)t*=s,e*=s,r.push({x:t,y:e})}const a=[],{x:l,y:c}=o;for(let m=0;m<r.length;m++){const{x:o,y:n}=r[m];a.push({minCol:Math.floor((t.xmin-l+.1*o)/e/o),maxCol:Math.floor((t.xmax-l-.1*o)/e/o),minRow:Math.floor((c-t.ymax+.1*n)/i/n),maxRow:Math.floor((c-t.ymin-.1*n)/i/n)})}return a}getPyramidPixelSize(t){const{nativePixelSize:e}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:o}=this.rasterInfo.storageInfo;if(0===t)return e;if(n(i)&&i.length)return i[t-1];const r=o**t;return{x:e.x*r,y:e.y*r}}identifyPixelLocation(t,e,i,o){const{spatialReference:r,nativeExtent:s,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:l,origin:c,transposeInfo:m}=a,f=o&&n(m)?m.tileSize[0]:a.blockWidth,h=o&&n(m)?m.tileSize[1]:a.blockHeight,u=H(t,r,i);if(!s.intersects(u))return null;if(e<0||e>l)return null;const p=this.getPyramidPixelSize(e),{x:d,y:x}=p,g=(c.y-u.y)/x/h,y=(u.x-c.x)/d/f,I=Math.min(h-1,Math.floor((g-Math.floor(g))*h)),R=Math.min(f-1,Math.floor((y-Math.floor(y))*f));return{pyramidLevel:e,row:Math.floor(g),col:Math.floor(y),rowOffset:I,colOffset:R,blockWidth:f,srcLocation:u}}getTileExtent(t,e,i,o,r,n){const[s,a]=n,l=o.x+i*s*t.x,c=l+s*t.x,m=o.y-e*a*t.y,f=m-a*t.y;return new J({xmin:l,xmax:c,ymin:f,ymax:m,spatialReference:r})}getBlockWidthHeight(t){return{blockWidth:t>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:t>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(t,e,i){const o=this.rasterInfo.storageInfo.blockBoundary[t];return!o||o.maxRow<e||o.maxCol<i||o.minRow>e||o.minCol>i}async _fetchPixels(t,e,i,o={}){let r=D(t);if(r>=2)return{extent:t,pixelBlock:null};const a=this._getSourceDataInfo(t,e,i,o),{pyramidLevel:l,pyramidResolution:c,srcResolution:m,srcExtent:f,srcWidth:h,srcHeight:u}=a;if(0===h||0===u)return{extent:t,srcExtent:f,pixelBlock:null};const p=s(this.rasterInfo.transform),d="gcs-shift"===p?.type,x=n(j(t.spatialReference));!d&&x||(r=D(a.srcExtent,d));const g=this.rasterInfo.storageInfo,y={x:Math.floor((f.xmin-g.origin.x)/c.x+.1),y:Math.floor((g.origin.y-f.ymax)/c.y+.1)},I=await this._fetchRawTiles(l,y,{width:h,height:u,wrapCount:r},o);if(!I)return{extent:t,srcExtent:f,pixelBlock:null};const R=l>0?g.pyramidBlockWidth:g.blockWidth,w=l>0?g.pyramidBlockHeight:g.blockHeight,k=R===h&&w===u&&y.x%R==0&&y.y%w==0,b=new N({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/i,spatialReference:t.spatialReference}),v=!t.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:S}=o;if(!v&&k&&1===I.pixelBlocks.length&&R===e&&w===i&&m.x===b.x&&m.y===b.y)return{extent:t,srcExtent:f,pixelBlock:I.pixelBlocks[0]};const T=x&&n(j(f.spatialReference)),B=o.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");B&&!this.rasterJobHandler&&await _();const P=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:t,srcBufferExtent:I.extent,pixelSize:b.toJSON(),datumTransformation:S,rasterTransform:p,hasWrapAround:r>0||T,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:B},o):A({projectedExtent:t,srcBufferExtent:I.extent,pixelSize:b,datumTransformation:S,rasterTransform:p,hasWrapAround:r>0||T,isAdaptive:!1,includeGCSGrid:B});let H;const E=!o.requestRawData,L={rows:P.spacing[0],cols:P.spacing[1]},z=s(this._getRasterTileAlignmentInfo(l,I.extent.xmin)),{pixelBlocks:F,mosaicSize:O,isPartiallyFilled:G}=I;let J=null;if(this.rasterJobHandler){const t=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:F,srcMosaicSize:O,destDimension:E?{width:e,height:i}:null,coefs:E?P.coefficients:null,sampleSpacing:E?L:null,projectDirections:B,gcsGrid:B?P.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:o.interpolation,alignmentInfo:z,blockWidths:null},o);({pixelBlock:H,localNorthDirections:J}=t)}else{const t=W(F,O,{alignmentInfo:z});H=E?M(t,{width:e,height:i},P.coefficients,L,o.interpolation):t,B&&P.gcsGrid&&(J=C({width:e,height:i},P.gcsGrid),H=q(H,this.rasterInfo.dataType,J))}return o.requestRawData||B?{srcExtent:f,pixelBlock:H,transformGrid:P,localNorthDirections:J,extent:t,isPartiallyFilled:G}:{srcExtent:f,extent:t,pixelBlock:H}}async _fetchRawTiles(t,e,i,o){const{origin:r,blockBoundary:s}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:l}=this.getBlockWidthHeight(t);let{x:c,y:m}=e,{width:f,height:h,wrapCount:u}=i;const p=this._getRasterTileAlignmentInfo(t,0);o.buffer&&(c-=o.buffer.cols,m-=o.buffer.rows,f+=2*o.buffer.cols,h+=2*o.buffer.rows);let d=0,x=0,g=0;if(u&&n(p)){({worldColumnCountFromOrigin:x,originColumnOffset:g,rightPadding:d}=p);x*p.blockWidth-d>=c+f&&(d=0)}const y=Math.floor(c/a),I=Math.floor(m/l),R=Math.floor((c+f+d-1)/a),w=Math.floor((m+h+d-1)/l),k=s[t];if(!k)return null;const{minRow:b,minCol:v,maxCol:S,maxRow:T}=k;if(0===u&&(w<b||R<v||I>T||y>S))return null;const B=new Array;let P=!1;const W=null==this.ioConfig.allowPartialFill?o.allowPartialFill:this.ioConfig.allowPartialFill;for(let L=I;L<=w;L++)for(let e=y;e<=R;e++){let i=e;if(!o.disableWrapAround&&u&&n(p)&&x<=e&&(i=e-x-g),L>=b&&i>=v&&T>=L&&S>=i){const e=this._fetchRawTile(t,L,i,o);W?B.push(new Promise((t=>{e.then((e=>t(e))).catch((()=>{P=!0,t(null)}))}))):B.push(e)}else B.push(Promise.resolve(null))}if(0===B.length)return null;const M=await Promise.all(B),C={height:(w-I+1)*l,width:(R-y+1)*a},{spatialReference:_}=this.rasterInfo,j=this.getPyramidPixelSize(t),{x:H,y:E}=j;return{extent:new J({xmin:r.x+y*a*H,xmax:r.x+(R+1)*a*H,ymin:r.y-(w+1)*l*E,ymax:r.y-I*l*E,spatialReference:_}),pixelBlocks:M,mosaicSize:C,isPartiallyFilled:P}}_fetchRawTile(t,e,i,o){const r=this.rasterInfo.storageInfo.blockBoundary[t];if(!r)return Promise.resolve(null);const{minRow:n,minCol:s,maxCol:l,maxRow:c}=r;if(e<n||i<s||e>c||i>l)return Promise.resolve(null);const f=b(this.url,o.sliceId),h=`${t}/${e}/${i}`;let u=v(f,o.registryId,h);if(a(u)){const r=new AbortController;u=this.fetchRawTile(t,e,i,{...o,signal:r.signal}),S(f,o.registryId,h,u,r),u.catch((()=>T(f,o.registryId,h)))}return o.signal&&m(o,(()=>{B(f,o.registryId,h)})),u}_computeMagDirValues(t){const{bandCount:e,dataType:i}=this.rasterInfo;if(!(2===e&&"vector-magdir"===i||"vector-uv"===i)||2!==t?.length||!t[0]?.length)return null;const o=t[0].length;if("vector-magdir"===i){const e=t[1].map((t=>(t+360)%360));return[t[0],e]}const[r,n]=t,s=[],a=[];for(let l=0;l<o;l++){const[t,e]=G([r[l],n[l]]);s.push(t),a.push(e)}return[s,a]}_getRasterTileAlignmentInfo(t,e){return null==this._rasterTileAlighmentInfo&&(this._rasterTileAlighmentInfo=F(this.rasterInfo)),a(this._rasterTileAlighmentInfo.pyramidsInfo)?null:{startX:e,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[t]}}_getSourceDataInfo(t,e,i,o={}){const r={datumTransformation:o.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};o.srcResolution&&(r.srcResolution=o.srcResolution,this._updateSourceDataInfo(t,r));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:s,srcHeight:a,pyramidLevel:l}=r,c=s/e,m=a/i,f=l<n&&c*m>=16;if(f||l===n&&(c>V||m>V)||(0===s||0===a)){const s=new N({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/i,spatialReference:t.spatialReference});let a=O(s,this.rasterInfo.spatialReference,t,r.datumTransformation);const h=!a||o.srcResolution&&a.x+a.y<o.srcResolution.x+o.srcResolution.y;if(f&&o.srcResolution&&h){const t=Math.round(Math.log(Math.max(c,m))/Math.LN2)-1;if(n-l+3>=t){const e=2**t;a={x:o.srcResolution.x*e,y:o.srcResolution.y*e}}}a&&(r.srcResolution=a,this._updateSourceDataInfo(t,r))}return(r.srcWidth/e>V||r.srcHeight/i>V)&&(r.srcWidth=0,r.srcHeight=0),r}_updateSourceDataInfo(t,e){e.srcWidth=0,e.srcHeight=0;const i=this.rasterInfo.spatialReference,{srcResolution:o,datumTransformation:r}=e,{pyramidLevel:n,pyramidResolution:a,excessiveReading:l}=E(o,this.rasterInfo,this.ioConfig.sampling);if(l)return;let c=e.srcExtent||z(t,i,r);if(null==c)return;const m=s(this.rasterInfo.transform);m&&(c=m.inverseTransform(c)),e.srcExtent=c;const f=Math.ceil((c.xmax-c.xmin)/a.x-.1),h=Math.ceil((c.ymax-c.ymin)/a.y-.1);e.pyramidLevel=n,e.pyramidResolution=a,e.srcWidth=f,e.srcHeight=h}_getRequestOptionsWithSliceId(t){return n(this.rasterInfo.multidimensionalInfo)&&null==t.sliceId&&(t={...t,sliceId:this.getSliceIndex(t.multidimensionalDefinition)}),t}_processIdentifyResult(t,e){const{srcLocation:i,position:o,pyramidLevel:r,useTransposedTile:n}=e,l=t.pixels[0].length/t.width/t.height;if(!(!t.mask||t.mask[o]))return{location:i,value:null};const{multidimensionalInfo:c}=this.rasterInfo;if(a(c)||!n){const e=t.pixels.map((t=>t[o])),n={location:i,value:e,pyramidLevel:r},s=this._computeMagDirValues(e.map((t=>[t])));return s?.length&&(n.magdirValue=s.map((t=>t[0]))),n}let m=t.pixels.map((t=>Array.prototype.slice.call(t,o*l,o*l+l))),f=this._computeMagDirValues(m);const{requestSomeSlices:h,identifyOptions:u}=e;let p=w(c,u.transposedVariableName);if(h){const t=k(p,s(u.multidimensionalDefinition),s(u.timeExtent));m=m.map((e=>t.map((t=>e[t])))),f=f?.map((e=>t.map((t=>e[t])))),p=t.map((t=>p[t]))}return{location:i,value:null,dataSeries:p.map(((t,e)=>{const i={value:m.map((t=>t[e])),multidimensionalDefinition:t.multidimensionalDefinition.map((t=>new x({...t,isSlice:!0})))};return f?.length&&(i.magdirValue=[f[0][e],f[1][e]]),i})),pyramidLevel:r}}};t([f()],$.prototype,"_rasterTileAlighmentInfo",void 0),t([f({readOnly:!0})],$.prototype,"_isGlobalWrappableSource",null),t([f(d)],$.prototype,"url",null),t([f({type:String,json:{write:!0}})],$.prototype,"datasetName",void 0),t([f({type:String,json:{write:!0}})],$.prototype,"datasetFormat",void 0),t([f()],$.prototype,"rasterInfo",void 0),t([f()],$.prototype,"ioConfig",void 0),t([f()],$.prototype,"sourceJSON",void 0),$=t([u("esri.layers.support.rasterDatasets.BaseRaster")],$);const U=$;export{U as default};
