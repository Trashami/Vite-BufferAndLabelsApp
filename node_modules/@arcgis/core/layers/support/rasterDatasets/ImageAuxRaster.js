/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import s from"../../../core/Error.js";import has from"../../../core/has.js";import{unwrap as e}from"../../../core/maybe.js";import{eachAlways as r,createAbortError as a}from"../../../core/promiseUtils.js";import{property as o}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as i}from"../../../core/accessorSupport/decorators/subclass.js";import n from"./BaseRaster.js";import m from"./InMemoryRaster.js";import{parsePAMInfo as l}from"./pamParser.js";import{getFormat as p}from"../rasterFormats/RasterCodec.js";import{estimateStatisticsFromHistograms as c}from"../rasterFunctions/stretchUtils.js";import f from"../rasterTransforms/PolynomialTransform.js";import u from"../../../geometry/SpatialReference.js";import h from"../../../geometry/Extent.js";let d=class extends n{async open(t){await this.init();const s=await this._fetchData(t);let{spatialReference:e,statistics:r,histograms:a,transform:o}=await this._fetchAuxiliaryData(t);const i=!e;i&&(e=new u({wkid:3857})),a?.length&&null==r&&(r=c(a));const{width:n,height:l}=s;let p=new h({xmin:-.5,ymin:.5-l,xmax:n-.5,ymax:.5,spatialReference:e});const f=o?o.forwardTransform(p):p;let d=!0;if(o){const t=o.forwardCoefficients;d=t&&0===t[1]&&0===t[2],d&&(o=null,p=f)}const y=new m({data:{extent:f,nativeExtent:p,transform:o,pixelBlock:s,statistics:r,histograms:a,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:i}});await y.open(),y.data=null,this._set("rasterInfo",y.rasterInfo),this._inMemoryRaster=y}fetchRawTile(t,s,e,r={}){return this._inMemoryRaster.fetchRawTile(t,s,e,r)}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),r=p(e).toUpperCase();if("JPG"!==r&&"PNG"!==r&&"GIF"!==r&&"BMP"!==r)throw new s("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",r);const a=r.toLowerCase(),o="gif"===a||"bmp"===a||!has("ios");return await this.decodePixelBlock(e,{format:a,useCanvas:o,hasNoZlibMask:!0})}async _fetchAuxiliaryData(t){const s=e(t?.signal),o=this.ioConfig.skipExtensions??[],i=o.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:s}),n=this.datasetFormat,m="JPG"===n?"jgw":"PNG"===n?"pgw":"BMP"===n?"bpw":null,p=m&&o.includes(m)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+m,{responseType:"text",signal:s}),c=await r([i,p]);if(s?.aborted)throw a();const u=l(c[0].value?.data);if(!u.transform){const t=c[1].value?c[1].value.data.split("\n").slice(0,6).map((t=>Number(t))):null;u.transform=6===t?.length?new f({forwardCoefficients:[t[4],t[5],t[0],-t[1],t[2],-t[3]]}):null}return u}};t([o({type:String,json:{write:!0}})],d.prototype,"datasetFormat",void 0),d=t([i("esri.layers.support.rasterDatasets.ImageAuxRaster")],d);const y=d;export{y as default};
