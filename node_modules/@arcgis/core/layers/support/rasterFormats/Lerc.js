/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{getAssetUrl as e}from"../../../assets.js";const t=[{pixelType:"S8",size:1,ctor:Int8Array,range:[-128,128]},{pixelType:"U8",size:1,ctor:Uint8Array,range:[0,255]},{pixelType:"S16",size:2,ctor:Int16Array,range:[-32768,32767]},{pixelType:"U16",size:2,ctor:Uint16Array,range:[0,65536]},{pixelType:"S32",size:4,ctor:Int32Array,range:[-2147483648,2147483647]},{pixelType:"U32",size:4,ctor:Uint32Array,range:[0,4294967296]},{pixelType:"F32",size:4,ctor:Float32Array,range:[-34027999387901484e22,34027999387901484e22]},{pixelType:"F64",size:8,ctor:Float64Array,range:[-17976931348623157e292,17976931348623157e292]}];let n=null,r=!1;function a(){return n||(n=import("../../../chunks/lerc-wasm.js").then((e=>e.l)).then((({default:t})=>t({locateFile:t=>e(`esri/layers/support/rasterFormats/${t}`)}))).then((e=>{u(e),r=!0})),n)}function o(){return r}const l={getBlobInfo:null,decode:null};function s(e){return 16+(e>>3<<3)}function i(e,t,n){n.set(e.slice(t,t+n.length))}function u(e){const{_malloc:n,_free:r,_lerc_getBlobInfo:a,_lerc_getDataRanges:o,_lerc_decode_4D:u,asm:f}=e;let c;const h=Object.values(f).find((t=>t&&"buffer"in t&&t.buffer===e.HEAPU8.buffer)),y=e=>{const t=e.map((e=>s(e))),r=t.reduce(((e,t)=>e+t)),a=n(r);c=new Uint8Array(h.buffer);let o=t[0];t[0]=a;for(let n=1;n<t.length;n++){const e=t[n];t[n]=t[n-1]+o,o=e}return t};l.getBlobInfo=e=>{const t=12,n=3,l=new Uint8Array(4*t),s=new Uint8Array(8*n),[u,f,p]=y([e.length,l.length,s.length]);c.set(e,u),c.set(l,f),c.set(s,p);let g=a(u,e.length,f,p,t,n);if(g)throw r(u),`lerc-getBlobInfo: error code is ${g}`;c=new Uint8Array(h.buffer),i(c,f,l),i(c,p,s);const d=new Uint32Array(l.buffer),b=new Float64Array(s.buffer),[A,w,,m,U,x,C,T,V,z,F]=d,I={version:A,depthCount:z,width:m,height:U,validPixelCount:C,bandCount:x,blobSize:T,maskCount:V,dataType:w,minValue:b[0],maxValue:b[1],maxZerror:b[2],statistics:[],bandCountWithNoData:F};if(F)return I;if(1===z&&1===x)return r(u),I.statistics.push({minValue:b[0],maxValue:b[1]}),I;const D=z*x*8,_=new Uint8Array(D),k=new Uint8Array(D);let B=u,S=0,v=0,O=!1;if(c.byteLength<u+2*D?(r(u),O=!0,[B,S,v]=y([e.length,D,D]),c.set(e,B)):[S,v]=y([D,D]),c.set(_,S),c.set(k,v),g=o(B,e.length,z,x,S,v),g)throw r(B),O||r(S),`lerc-getDataRanges: error code is ${g}`;c=new Uint8Array(h.buffer),i(c,S,_),i(c,v,k);const $=new Float64Array(_.buffer),j=new Float64Array(k.buffer),M=I.statistics;for(let r=0;r<x;r++)if(z>1){const e=$.slice(r*z,(r+1)*z),t=j.slice(r*z,(r+1)*z),n=Math.min.apply(null,e),a=Math.max.apply(null,t);M.push({minValue:n,maxValue:a,depthStats:{minValues:e,maxValues:t}})}else M.push({minValue:$[r],maxValue:j[r]});return r(B),O||r(S),I},l.decode=(e,n)=>{const{maskCount:a,depthCount:o,bandCount:l,width:s,height:f,dataType:p,bandCountWithNoData:g}=n,d=t[p],b=s*f,A=new Uint8Array(b*l),w=b*o*l*d.size,m=new Uint8Array(w),U=new Uint8Array(l),x=new Uint8Array(8*l),[C,T,V,z,F]=y([e.length,A.length,m.length,U.length,x.length]);c.set(e,C),c.set(A,T),c.set(m,V),c.set(U,z),c.set(x,F);const I=u(C,e.length,a,T,o,s,f,l,p,V,z,F);if(I)throw r(C),`lerc-decode: error code is ${I}`;c=new Uint8Array(h.buffer),i(c,V,m),i(c,T,A);let D=null;if(g){i(c,z,U),i(c,F,x),D=[];const e=new Float64Array(x.buffer);for(let t=0;t<U.length;t++)D.push(U[t]?e[t]:null)}return r(C),{data:m,maskData:A,noDataValues:D}}}function f(e,t,n,r,a){if(n<2)return e;const o=new r(t*n);if(a)for(let l=0,s=0;l<t;l++)for(let r=0,a=l;r<n;r++,a+=t)o[a]=e[s++];else for(let l=0,s=0;l<t;l++)for(let r=0,a=l;r<n;r++,a+=t)o[s++]=e[a];return o}function c(e,n={}){const r=n.inputOffset??0,a=e instanceof Uint8Array?e.subarray(r):new Uint8Array(e,r),o=l.getBlobInfo(a),{data:s,maskData:i}=l.decode(a,o),{width:u,height:c,bandCount:h,depthCount:y,dataType:p,maskCount:g,statistics:d}=o,b=t[p],A=new b.ctor(s.buffer),w=[],m=[],U=u*c,x=U*y;for(let t=0;t<h;t++){const e=A.subarray(t*x,(t+1)*x);if(n.returnInterleaved)w.push(e);else{const t=f(e,U,y,b.ctor,!0);w.push(t)}m.push(i.subarray(t*x,(t+1)*x))}const C=0===g?null:1===g?m[0]:new Uint8Array(U);if(g>1){C.set(m[0]);for(let e=1;e<m.length;e++){const t=m[e];for(let e=0;e<U;e++)C[e]=C[e]&t[e]}}const{noDataValue:T}=n,V=null!=T&&b.range[0]<=T&&b.range[1]>=T;if(g>0&&V)for(let t=0;t<h;t++){const e=w[t],n=m[t]||C;for(let t=0;t<U;t++)0===n[t]&&(e[t]=T)}const z=g===h&&h>1?m:null,{pixelType:F}=b;return{width:u,height:c,bandCount:h,pixelType:F,depthCount:y,statistics:d,pixels:w,mask:C,bandMasks:z}}function h(e,t={}){const n=e instanceof Uint8Array?e.subarray(t.inputOffset??0):new Uint8Array(e,t.inputOffset??0);return l.getBlobInfo(n)}export{c as decode,h as getBlobInfo,o as isLoaded,a as load};
