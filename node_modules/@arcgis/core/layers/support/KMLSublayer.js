/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../geometry.js";import t from"../../core/Collection.js";import r from"../../core/Evented.js";import{JSONSupportMixin as s}from"../../core/JSONSupport.js";import i from"../../core/Loadable.js";import{isSome as o}from"../../core/maybe.js";import{on as l,watch as a,whenOnce as n,sync as p}from"../../core/reactiveUtils.js";import{stripHTML as u}from"../../core/string.js";import{property as y}from"../../core/accessorSupport/decorators/property.js";import"../../core/arrayUtils.js";import{ensureType as h}from"../../core/accessorSupport/ensureType.js";import{reader as c}from"../../core/accessorSupport/decorators/reader.js";import{subclass as m}from"../../core/accessorSupport/decorators/subclass.js";import{computeExtent as d,sublayersFromJSON as f,fetchService as v,parseKML as b}from"./kmlUtils.js";import j from"../../geometry/Extent.js";var S;let k=S=class extends(r.EventedMixin(s(i))){constructor(...e){super(...e),this.description=null,this.id=null,this.networkLink=null,this.sublayers=null,this.title=null,this.sourceJSON=null,this.fullExtent=null,this.addHandles([l((()=>this.sublayers),"after-add",(({item:e})=>{e.parent=this,e.layer=this.layer}),p),l((()=>this.sublayers),"after-remove",(({item:e})=>{e.layer=e.parent=null}),p),a((()=>this.sublayers),((e,t)=>{if(t)for(const r of t)r.layer=r.parent=null;if(e)for(const r of e)r.parent=this,r.layer=this.layer}),p)])}initialize(){n((()=>this.networkLink)).then((()=>n((()=>!0===this.visible)))).then((()=>this.load()))}load(e){if(!this.networkLink)return;if(this.networkLink.viewFormat)return;const r=o(e)?e.signal:null,s=this._fetchService(this._get("networkLink")?.href??"",r).then((e=>{const r=d(e.sublayers);this.fullExtent=j.fromJSON(r),this.sourceJSON=e;const s=h(t.ofType(S),f(S,e));this.sublayers?this.sublayers.addMany(s):this.sublayers=s,this.layer?.emit("sublayer-update"),this.layer&&this.layer.notifyChange("visibleSublayers")}));return this.addResolvingPromise(s),Promise.resolve(this)}get visible(){return this._get("visible")}set visible(e){this._get("visible")!==e&&(this._set("visible",e),this.layer&&this.layer.notifyChange("visibleSublayers"))}readVisible(e,t){return!!t.visibility}set layer(e){this._set("layer",e),this.sublayers&&this.sublayers.forEach((t=>t.layer=e))}_fetchService(e,t){return v(e,this.layer.outSpatialReference,this.layer.refreshInterval,t).then((e=>b(e.data)))}};e([y()],k.prototype,"description",void 0),e([y()],k.prototype,"id",void 0),e([y({readOnly:!0,value:null})],k.prototype,"networkLink",void 0),e([y({json:{write:{allowNull:!0}}})],k.prototype,"parent",void 0),e([y({type:t.ofType(S),json:{write:{allowNull:!0}}})],k.prototype,"sublayers",void 0),e([y({value:null,json:{read:{source:"name",reader:e=>u(e)}}})],k.prototype,"title",void 0),e([y({value:!0})],k.prototype,"visible",null),e([c("visible",["visibility"])],k.prototype,"readVisible",null),e([y()],k.prototype,"sourceJSON",void 0),e([y({value:null})],k.prototype,"layer",null),e([y({type:j})],k.prototype,"fullExtent",void 0),k=S=e([m("esri.layers.support.KMLSublayer")],k);const g=k;export{g as default};
