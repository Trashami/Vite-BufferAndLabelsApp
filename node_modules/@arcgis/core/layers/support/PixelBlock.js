/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import e from"../../core/Error.js";import{JSONSupport as s}from"../../core/JSONSupport.js";import{clone as i}from"../../core/lang.js";import r from"../../core/Logger.js";import{isSome as l,isNone as a}from"../../core/maybe.js";import{property as o}from"../../core/accessorSupport/decorators/property.js";import{cast as h}from"../../core/accessorSupport/decorators/cast.js";import{subclass as n}from"../../core/accessorSupport/decorators/subclass.js";import{SimpleBandStatistics as c}from"./SimpleBandStatistics.js";var p;let u=p=class extends s{constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.statistics=null}static createEmptyBand(t,e){return new(p.getPixelArrayConstructor(t))(e)}static getPixelArrayConstructor(t){let e;switch(t){case"u1":case"u2":case"u4":case"u8":e=Uint8Array;break;case"u16":e=Uint16Array;break;case"u32":e=Uint32Array;break;case"s8":e=Int8Array;break;case"s16":e=Int16Array;break;case"s32":e=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":e=Float32Array;break;case"f64":e=Float64Array}return e}castPixelType(t){if(!t)return"f32";let e=t.toLowerCase();return["u1","u2","u4"].includes(e)?e="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].includes(e)||(e="f32"),e}getPlaneCount(){return this.pixels?.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new e("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics??new c)}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){if(!this.pixels)return;this.statistics=this.pixels.map((t=>this._calculateBandStatistics(t,this.mask)));const t=this.mask;let e=0;if(l(t))for(let s=0;s<t.length;s++)t[s]&&e++;else e=this.width*this.height;this.validPixelCount=e}clamp(t){if(!t||"f64"===t||"f32"===t||!this.pixels)return;let e;switch(t){case"u8":e=[0,255];break;case"u16":e=[0,65535];break;case"u32":e=[0,4294967295];break;case"s8":e=[-128,127];break;case"s16":e=[-32768,32767];break;case"s32":e=[-2147483648,2147483647];break;default:e=[-34e38,34e38]}const[s,i]=e,r=this.pixels,l=this.width*this.height,a=r.length;let o,h,n;const c=[];for(let u=0;u<a;u++){n=p.createEmptyBand(t,l),o=r[u];for(let t=0;t<l;t++)h=o[t],n[t]=h>i?i:h<s?s:h;c.push(n)}this.pixels=c,this.pixelType=t}extractBands(t){const{pixels:e,statistics:s}=this;if(a(t)||0===t.length||!e||0===e.length)return this;const i=e.length,r=t.some((t=>t>=e.length)),l=i===t.length&&!t.some(((t,e)=>t!==e));return r||l?this:new p({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:t.map((t=>e[t])),statistics:s&&t.map((t=>s[t]))})}clone(){const t=new p({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let e;l(this.mask)&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0));const s=p.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const i=!!this.pixels[0].slice;for(e=0;e<this.pixels.length;e++)t.pixels[e]=i?this.pixels[e].slice(0,this.pixels[e].length):new s(this.pixels[e])}if(this.statistics)for(t.statistics=[],e=0;e<this.statistics.length;e++)t.statistics[e]=i(this.statistics[e]);return t}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:s,pixels:i}=this;if(!t||!i||!i.length)return void r.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let a,o,h,n;a=o=h=i[0],i.length>=3?(o=i[1],h=i[2]):2===i.length&&(o=i[1]);const c=new Uint32Array(t),p=this.width*this.height;if(a.length===p)if(l(e)&&e.length===p)if(s)for(n=0;n<p;n++)e[n]&&(c[n]=e[n]<<24|h[n]<<16|o[n]<<8|a[n]);else for(n=0;n<p;n++)e[n]&&(c[n]=255<<24|h[n]<<16|o[n]<<8|a[n]);else for(n=0;n<p;n++)c[n]=255<<24|h[n]<<16|o[n]<<8|a[n];else r.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:e,mask:s,statistics:i}=this;if(!t||!e||!e.length)return void r.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const a=this.pixelType;let o=1,h=0,n=1;if(i&&i.length>0){for(const t of i)if(null!=t.minValue&&(h=Math.min(h,t.minValue)),null!=t.maxValue&&null!=t.minValue){const e=t.maxValue-t.minValue;n=Math.max(n,e)}o=255/n}else{let t=255;"s8"===a?(h=-128,t=127):"u16"===a?t=65535:"s16"===a?(h=-32768,t=32767):"u32"===a?t=4294967295:"s32"===a?(h=-2147483648,t=2147483647):"f32"===a?(h=-34e38,t=34e38):"f64"===a&&(h=-Number.MAX_VALUE,t=Number.MAX_VALUE),o=255/(t-h)}const c=new Uint32Array(t),p=this.width*this.height;let u,g,f,m,d;if(u=g=f=e[0],u.length!==p)return r.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(e.length>=2)if(g=e[1],e.length>=3&&(f=e[2]),l(s)&&s.length===p)for(m=0;m<p;m++)s[m]&&(c[m]=255<<24|(f[m]-h)*o<<16|(g[m]-h)*o<<8|(u[m]-h)*o);else for(m=0;m<p;m++)c[m]=255<<24|(f[m]-h)*o<<16|(g[m]-h)*o<<8|(u[m]-h)*o;else if(l(s)&&s.length===p)for(m=0;m<p;m++)d=(u[m]-h)*o,s[m]&&(c[m]=255<<24|d<<16|d<<8|d);else for(m=0;m<p;m++)d=(u[m]-h)*o,c[m]=255<<24|d<<16|d<<8|d}_fillFrom32Bit(t){const{pixels:e,mask:s}=this;if(!t||!e||!e.length)return r.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let i,a,o,h;i=a=o=e[0],e.length>=3?(a=e[1],o=e[2]):2===e.length&&(a=e[1]);const n=this.width*this.height;if(i.length!==n)return r.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let c=0;if(l(s)&&s.length===n)for(h=0;h<n;h++)t[c++]=i[h],t[c++]=a[h],t[c++]=o[h],t[c++]=1&s[h];else for(h=0;h<n;h++)t[c++]=i[h],t[c++]=a[h],t[c++]=o[h],t[c++]=1}_calculateBandStatistics(t,e){let s=1/0,i=-1/0;const r=t.length;let a,o=0;if(l(e))for(a=0;a<r;a++)e[a]&&(o=t[a],s=o<s?o:s,i=o>i?o:i);else for(a=0;a<r;a++)o=t[a],s=o<s?o:s,i=o>i?o:i;return new c(s,i)}};t([o({json:{write:!0}})],u.prototype,"width",void 0),t([o({json:{write:!0}})],u.prototype,"height",void 0),t([o({json:{write:!0}})],u.prototype,"pixelType",void 0),t([h("pixelType")],u.prototype,"castPixelType",null),t([o({json:{write:!0}})],u.prototype,"validPixelCount",void 0),t([o({json:{write:!0}})],u.prototype,"mask",void 0),t([o({json:{write:!0}})],u.prototype,"maskIsAlpha",void 0),t([o({json:{write:!0}})],u.prototype,"pixels",void 0),t([o({json:{write:!0}})],u.prototype,"statistics",void 0),u=p=t([n("esri.layers.support.PixelBlock")],u);const g=u;export{g as default};
