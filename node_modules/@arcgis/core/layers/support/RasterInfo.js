/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import{JSONSupport as e}from"../../core/JSONSupport.js";import{clone as i}from"../../core/lang.js";import{isNone as o}from"../../core/maybe.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import"../../core/accessorSupport/ensureType.js";import{subclass as r}from"../../core/accessorSupport/decorators/subclass.js";import n from"../../geometry/Extent.js";import a from"../../geometry/SpatialReference.js";import p from"./RasterStorageInfo.js";var l;let h=l=class extends e{constructor(t){super(t),this.attributeTable=null,this.bandCount=null,this.colormap=null,this.extent=null,this.format=void 0,this.height=null,this.width=null,this.histograms=null,this.keyProperties={},this.multidimensionalInfo=null,this.noDataValue=null,this.pixelSize=null,this.pixelType=null,this.isPseudoSpatialReference=!1,this.spatialReference=null,this.statistics=null,this.storageInfo=null,this.transform=null}get dataType(){const t=this.keyProperties?.DataType?.toLowerCase()??"generic";return"stdtime"===t?"standard-time":t}get nativeExtent(){return this._get("nativeExtent")||this.extent}set nativeExtent(t){t&&this._set("nativeExtent",t)}get nativePixelSize(){if(o(this.transform)||!this.transform.affectsPixelSize)return this.pixelSize;const t=this.nativeExtent;return{x:t.width/this.width,y:t.height/this.height}}get hasMultidimensionalTranspose(){return!!this.storageInfo?.transposeInfo}clone(){return new l({attributeTable:i(this.attributeTable),bandCount:this.bandCount,colormap:i(this.colormap),extent:i(this.extent),nativePixelSize:i(this.nativePixelSize),format:this.format,height:this.height,width:this.width,histograms:i(this.histograms),keyProperties:i(this.keyProperties),multidimensionalInfo:i(this.multidimensionalInfo),noDataValue:this.noDataValue,pixelSize:i(this.pixelSize),pixelType:this.pixelType,isPseudoSpatialReference:this.isPseudoSpatialReference,spatialReference:i(this.spatialReference),statistics:i(this.statistics),storageInfo:i(this.storageInfo),transform:i(this.transform)})}};t([s({json:{write:!0}})],h.prototype,"attributeTable",void 0),t([s({json:{write:!0}})],h.prototype,"bandCount",void 0),t([s({json:{write:!0}})],h.prototype,"colormap",void 0),t([s({type:String,readOnly:!0})],h.prototype,"dataType",null),t([s({type:n,json:{write:!0}})],h.prototype,"extent",void 0),t([s({type:n,json:{write:!0}})],h.prototype,"nativeExtent",null),t([s({json:{write:!0}})],h.prototype,"nativePixelSize",null),t([s({json:{write:!0}})],h.prototype,"format",void 0),t([s({json:{write:!0}})],h.prototype,"height",void 0),t([s({json:{write:!0}})],h.prototype,"width",void 0),t([s({json:{write:!0}})],h.prototype,"hasMultidimensionalTranspose",null),t([s({json:{write:!0}})],h.prototype,"histograms",void 0),t([s({json:{write:!0}})],h.prototype,"keyProperties",void 0),t([s({json:{write:!0}})],h.prototype,"multidimensionalInfo",void 0),t([s({json:{write:!0}})],h.prototype,"noDataValue",void 0),t([s({json:{write:!0}})],h.prototype,"pixelSize",void 0),t([s({json:{write:!0}})],h.prototype,"pixelType",void 0),t([s()],h.prototype,"isPseudoSpatialReference",void 0),t([s({type:a,json:{write:!0}})],h.prototype,"spatialReference",void 0),t([s({json:{write:!0}})],h.prototype,"statistics",void 0),t([s({type:p,json:{write:!0}})],h.prototype,"storageInfo",void 0),t([s({json:{write:!0}})],h.prototype,"transform",void 0),h=l=t([r("esri.layers.support.RasterInfo")],h);const u=h;export{u as default};
