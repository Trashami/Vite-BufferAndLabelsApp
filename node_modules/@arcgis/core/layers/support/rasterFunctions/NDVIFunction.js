/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import{isNone as s}from"../../../core/maybe.js";import{property as r}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as e}from"../../../core/accessorSupport/decorators/subclass.js";import{calculateNDVI as o}from"./bandIndexUtils.js";import n from"./BaseRasterFunction.js";import i from"./NDVIFunctionArguments.js";let c=class extends n{constructor(){super(...arguments),this.functionName="NDVI",this.functionArguments=null,this.rasterArgumentNames=["raster"]}_bindSourceRasters(){const{scaled:t}=this.functionArguments;this.outputPixelType=this._getOutputPixelType(t?"u8":"f32");const s=this.sourceRasterInfos[0].clone();s.pixelType=this.outputPixelType,s.colormap=null,s.histograms=null;const[r,e,o,n]=t?[0,200,100,10]:[-1,1,0,.1];return s.statistics=[{min:r,max:e,avg:o,stddev:n}],this.rasterInfo=s,{success:!0}}_processPixels(t){const r=t.pixelBlocks?.[0];if(s(r))return null;const{visibleBandID:e,infraredBandID:n,scaled:i}=this.functionArguments;return o(r,e,n,i)}};t([r({json:{write:!0,name:"rasterFunction"}})],c.prototype,"functionName",void 0),t([r({type:i,json:{write:!0,name:"rasterFunctionArguments"}})],c.prototype,"functionArguments",void 0),t([r()],c.prototype,"rasterArgumentNames",void 0),c=t([e("esri.layers.support.rasterFunctions.NDVIFunction")],c);const u=c;export{u as default};
