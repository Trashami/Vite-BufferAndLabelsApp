/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as r}from"../../../chunks/tslib.es6.js";import{JSONSupport as t}from"../../../core/JSONSupport.js";import{isNone as s}from"../../../core/maybe.js";import{property as e}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import{cast as o}from"../../../core/accessorSupport/decorators/cast.js";import{subclass as i}from"../../../core/accessorSupport/decorators/subclass.js";let n=class extends t{constructor(){super(...arguments),this.functionArguments=null,this.readingBufferSize=0}bind(r,t=!1){const s=this._getRasterValues();for(let e=0;e<s.length;e++){const o=s[e];if(o&&"object"==typeof o&&"bind"in o&&(!o.rasterInfo||t)){const s=o.bind(r,t);if(!s.success)return s}}return!this.rasterInfo||t?(this.sourceRasterInfos=this._getSourceRasterInfos(r),this._bindSourceRasters()):{success:!0}}process(r){const t=this._getRasterValues().map((t=>this._readRasterValue(t,r)));return this._processPixels({...r,pixelBlocks:t})}getPrimaryRasters(){const r=[],t=[];return this._getPrimaryRasters(this,r,t),{rasters:r,rasterIds:t}}_getOutputPixelType(r){return"unknown"===this.outputPixelType?r:this.outputPixelType??r}_getRasterValues(){const{rasterArgumentNames:r}=this;return"rasters"===r[0]&&Array.isArray(this.functionArguments.rasters)?this.functionArguments.rasters:r.map((r=>this.functionArguments[r]))}_getSourceRasterInfos(r){const t=this._getRasterValues(),{rasterInfos:s,rasterIds:e}=r;return t.map((r=>r&&"object"==typeof r&&"bind"in r&&r.rasterInfo?r.rasterInfo:"string"==typeof r&&e.includes(r)?s[e.indexOf(r)]:s[0]))}_getPrimaryRasterId(r){return r?.url}_getPrimaryRasters(r,t=[],s=[]){for(let e=0;e<r.sourceRasters.length;e++){const o=r.sourceRasters[e];if("number"!=typeof o)if("bind"in o)this._getPrimaryRasters(o,t,s);else{const r=o,e=this._getPrimaryRasterId(r);if(null==e)continue;s.includes(e)||(this.mainPrimaryRasterId===e?(t.unshift(r),s.unshift(e)):(t.push(r),s.push(e)))}}}_readRasterValue(r,t){const{primaryPixelBlocks:e}=t;if(s(r)||"$$"===r){const r=e[0];return s(r)?null:r.clone()}if("string"==typeof r){const s=t.primaryRasterIds.indexOf(r);return-1===s?null:e[s]}if("number"==typeof r){const t=e[0];if(s(t))return null;const o=new Float32Array(t.width*t.height);o.fill(r);const i=t.clone();return i.pixels=i.pixels.map((()=>o)),i}return r.process(t)}};r([e({json:{write:!0}})],n.prototype,"functionName",void 0),r([e({json:{write:!0}})],n.prototype,"functionArguments",void 0),r([e()],n.prototype,"rasterArgumentNames",void 0),r([e({json:{write:!0}}),o((r=>r?.toLowerCase()))],n.prototype,"outputPixelType",void 0),r([e({json:{write:!0}})],n.prototype,"mainPrimaryRasterId",void 0),r([e()],n.prototype,"sourceRasters",void 0),r([e({json:{write:!0}})],n.prototype,"sourceRasterInfos",void 0),r([e({json:{write:!0}})],n.prototype,"rasterInfo",void 0),r([e({json:{write:!0}})],n.prototype,"readingBufferSize",void 0),n=r([i("esri.layers.support.rasterFunctions.BaseRasterFunction")],n);const a=n;export{a as default};
