/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{isNone as t,assertIsSome as e,isSome as n,unwrap as i}from"../../../core/maybe.js";import r from"../PixelBlock.js";import{stretchTypeFunctionEnum as s}from"../../../renderers/support/stretchRendererUtils.js";const o={u1:[0,1],u2:[0,3],u4:[0,15],u8:[0,255],s8:[-128,127],u16:[0,65535],s16:[-32768,32767],u32:[0,4294967295],s32:[-2147483648,2147483647],f32:[-34e38,34e38],f64:[-Number.MAX_VALUE,Number.MAX_VALUE]},a=1,f=[.299,.587,.114];function l(t,e=256){e=Math.min(e,256);const{size:n,counts:i}=t,r=new Uint8Array(n),s=i.reduce(((t,n)=>t+n/e),0);let o=0,a=0,f=0,l=s;for(let u=0;u<n;u++)if(f+=i[u],!(u<n-1&&f+i[u+1]<l)){for(;o<e-1&&l<f;)o++,l+=s;for(let t=a;t<=u;t++)r[t]=o;a=u+1}for(let u=a;u<n;u++)r[u]=e-1;return r}function u(t){const{minCutOff:e,maxCutOff:n,gamma:i,pixelType:r}=t,s=t.outMin||0,o=t.outMax||255;if(!["u8","u16","s8","s16"].includes(r))return null;const a=e.length;let f,l,u=0;"s8"===r?u=-127:"s16"===r&&(u=-32767);let c=256;["u16","s16"].includes(r)&&(c=65536);const h=[],p=o-s;for(f=0;f<a;f++)h[f]=n[f]-e[f],n[f],e[f];const g=i&&i.length>=a,x=[];if(g)for(f=0;f<a;f++)i[f]>1?i[f]>2?x[f]=6.5+(i[f]-2)**2.5:x[f]=6.5+100*(2-i[f])**4:x[f]=1;let M;const d=[];let y,b,O;if(g)for(f=0;f<a;f++){for(O=[],l=0;l<c;l++)y=l+u,M=(y-e[f])/h[f],b=1,i[f]>1&&(b-=(1/p)**(M*x[f])),y<n[f]&&y>e[f]?O[l]=Math.floor(b*p*M**(1/i[f]))+s:y>=n[f]?O[l]=o:O[l]=s;d[f]=O}else for(f=0;f<a;f++){for(O=[],l=0;l<c;l++)y=l+u,y<=e[f]?O[l]=s:y>=n[f]?O[l]=o:O[l]=Math.floor((y-e[f])/h[f]*p)+s;d[f]=O}if(null!=t.contrastOffset){const e=m(t.contrastOffset,t.brightnessOffset);for(f=0;f<a;f++)for(O=d[f],l=0;l<c;l++)O[l]=e[O[l]]}return{lut:d,offset:u}}function m(t,e){const n=Math.min(Math.max(t,-100),100),i=Math.min(Math.max(e??0,-100),100),r=255,s=128;let o=0,a=0;const f=new Uint8Array(256);for(o=0;o<256;o++)n>0&&n<100?a=(200*o-100*r+2*r*i)/(2*(100-n))+s:n<=0&&n>-100?a=(200*o-100*r+2*r*i)*(100+n)/2e4+s:100===n?(a=200*o-100*r+(r+1)*(100-n)+2*r*i,a=a>0?r:0):-100===n&&(a=s),f[o]=a>r?r:a<0?0:a;return f}function c(t,e,n){const i=[];for(let r=0;r<e.length;r++){let s=0,o=0,a=0;"min"in e[r]?({min:s,max:o,avg:a}=e[r]):[s,o,a]=e[r];let l=a??0;"u8"!==t&&(l=255*(l-s)/(o-s)),n&&(l*=f[r]),i.push(h(l))}return i}function h(t){if(t<=0||t>=255)return a;let e=0;150!==t&&(e=t<=150?45*Math.cos(.01047*t):17*Math.sin(.021*t));const n=255,i=t+e,r=Math.log(t/n),s=Math.log(i/n);if(0===s)return a;const o=r/s;return isNaN(o)?a:Math.min(9.9,Math.max(.01,o))}function p(n){if(t(n)||!n.pixels?.length)return null;n.statistics||n.updateStatistics();const{pixels:i,mask:r,pixelType:s,statistics:o}=n,a=n.width*n.height,f=i.length;let l,u,m,c,h;const p=[],g=[];let x,M,d,y,b,O,C,k,z,A;const v=256;for(c=0;c<f;c++){if(x=new Uint32Array(v),d=i[c],"u8"===s)if(l=-.5,u=255.5,r)for(h=0;h<a;h++)r[h]&&x[d[h]]++;else for(h=0;h<a;h++)x[d[h]]++;else{if(e(o),l=o[c].minValue,u=o[c].maxValue,m=(u-l)/v,M=new Uint32Array(v+1),r)for(h=0;h<a;h++)r[h]&&M[Math.floor((d[h]-l)/m)]++;else for(h=0;h<a;h++)M[Math.floor((d[h]-l)/m)]++;for(h=0;h<255;h++)x[h]=M[h];x[255]=M[255]+M[256]}for(p.push({min:l,max:u,size:v,counts:x}),y=0,b=0,k=0,h=0;h<v;h++)y+=x[h],b+=h*x[h];for(z=b/y,h=0;h<v;h++)k+=x[h]*(h-z)**2;A=Math.sqrt(k/(y-1)),m=(u-l)/v,O=(z+.5)*m+l,C=A*m,g.push({min:l,max:u,avg:O,stddev:C})}return{statistics:g,histograms:p}}function g(t){const e=[];for(let n=0;n<t.length;n++){const{min:i,max:r,size:s,counts:o}=t[n];let a=0,f=0;for(let t=0;t<s;t++)a+=o[t],f+=t*o[t];const l=f/a;let u=0;for(let t=0;t<s;t++)u+=o[t]*(t-l)**2;const m=(r-i)/s,c=(l+.5)*m+i,h=Math.sqrt(u/(a-1))*m;e.push({min:i,max:r,avg:c,stddev:h})}return e}function x(t,r){const{pixelBlock:a,bandIds:f,returnHistogramLut:u,rasterInfo:m}=r;let c=null,h=null,g=t.stretchType;if("number"==typeof g&&(g=s[g]),t.dra)if("minMax"===g&&n(a)&&a.statistics)c=a.statistics.map((t=>[t.minValue,t.maxValue,0,0]));else{const t=p(a);c=n(t)?t.statistics:null,h=n(t)?t.histograms:null}else c=t.statistics?.length>0?t.statistics:i(m.statistics),h=t.histograms||i(m.histograms);"percentClip"!==g&&"histogramEqualization"!==g||h?.length||(g="minMax");const x=c?.length||h?.length||m.bandCount,d=[],y=[];let b,O,C,k,z,A,v,w,U,E,L,T;switch(c&&!Array.isArray(c[0])&&(c=c.map((t=>[t.min,t.max,t.avg,t.stddev]))),g){case"none":{const t=o[m.pixelType]||o.f32;for(w=0;w<x;w++)d[w]=t[0],y[w]=t[1]}break;case"minMax":for(e(c),w=0;w<x;w++)d[w]=c[w][0],y[w]=c[w][1];break;case"standardDeviation":for(e(c),w=0;w<x;w++)d[w]=c[w][2]-t.numberOfStandardDeviations*c[w][3],y[w]=c[w][2]+t.numberOfStandardDeviations*c[w][3],d[w]<c[w][0]&&(d[w]=c[w][0]),y[w]>c[w][1]&&(y[w]=c[w][1]);break;case"histogramEqualization":for(e(h),w=0;w<x;w++)d[w]=h[w].min,y[w]=h[w].max;break;case"percentClip":for(e(h),w=0;w<h.length;w++){for(b=h[w],z=new Uint32Array(b.size),k=[...b.counts],k.length>=20&&(k[0]=k[1]=k[2]=k[k.length-1]=k[k.length-2]=0),C=0,O=(b.max-b.min)/b.size,v=-.5===b.min&&1===O?.5:0,U=0;U<b.size;U++)C+=k[U],z[U]=C;for(A=(t.minPercent||0)*C/100,U=0;U<b.size;U++)if(z[U]>A){d[w]=b.min+O*(U+v);break}for(A=(1-(t.maxPercent||0)/100)*C,U=b.size-2;U>=0;U--)if(z[U]<A){y[w]=b.min+O*(U+2-v);break}}break;default:for(e(c),w=0;w<x;w++)d[w]=c[w][0],y[w]=c[w][1]}"histogramEqualization"===g?(e(h),L=h[0].size||256,E=0,u&&(T=h.map((t=>l(t))))):(L=t.max||255,E=t.min||0);return M({minCutOff:d,maxCutOff:y,outMax:L,outMin:E,histogramLut:T},f)}function M(t,e){if(null==e||0===e.length)return t;const n=Math.max.apply(null,e),{minCutOff:i,maxCutOff:r,outMin:s,outMax:o,histogramLut:a}=t;return i.length===e.length||i.length<=n?t:{minCutOff:e.map((t=>i[t])),maxCutOff:e.map((t=>r[t])),histogramLut:a?e.map((t=>a[t])):null,outMin:s,outMax:o}}function d(e,n){if(t(e)||!e.pixels?.length)return e;const{mask:i,width:s,height:o,pixels:a}=e,{minCutOff:f,maxCutOff:l,gamma:u}=n,m=n.outMin||0,c=n.outMax||255,h=s*o,p=n.outputPixelType||"u8",g=e.pixels.map((()=>r.createEmptyBand(p,h))),x=g.length;let M,d,y,b,O;const C=c-m,k=[];for(M=0;M<x;M++)k[M]=l[M]-f[M],l[M],f[M];const z=u&&u.length>=x,A=[];if(z)for(M=0;M<x;M++)u[M]>1?u[M]>2?A[M]=6.5+(u[M]-2)**2.5:A[M]=6.5+100*(2-u[M])**4:A[M]=1;if(z)if(null!=i){for(d=0;d<h;d++)if(i[d])for(M=0;M<x;M++)y=a[M][d],O=(y-f[M])/k[M],b=1,u[M]>1&&(b-=(1/C)**(O*A[M])),y<l[M]&&y>f[M]?g[M][d]=Math.floor(b*C*O**(1/u[M]))+m:y>=l[M]?g[M][d]=c:g[M][d]=m}else for(d=0;d<h;d++)for(M=0;M<x;M++)y=a[M][d],O=(y-f[M])/k[M],b=1,u[M]>1&&(b-=(1/C)**(O*A[M])),y<l[M]&&y>f[M]?g[M][d]=Math.floor(b*C*O**(1/u[M]))+m:y>=l[M]?g[M][d]=c:g[M][d]=m;else if(null!=i){for(d=0;d<h;d++)if(i[d])for(M=0;M<x;M++)y=a[M][d],y<l[M]&&y>f[M]?g[M][d]=Math.floor((y-f[M])/k[M]*C)+m:y>=l[M]?g[M][d]=c:g[M][d]=m}else for(d=0;d<h;d++)for(M=0;M<x;M++)y=a[M][d],y<l[M]&&y>f[M]?g[M][d]=Math.floor((y-f[M])/k[M]*C)+m:y>=l[M]?g[M][d]=c:g[M][d]=m;const v=new r({width:s,height:o,mask:i,pixels:g,pixelType:p});return v.updateStatistics(),v}export{c as computeGammaValues,m as createContrastBrightnessLUT,l as createHistogramEqualizationLUT,u as createStretchLUT,g as estimateStatisticsFromHistograms,p as estimateStatisticsHistograms,x as getStretchCutoff,d as stretch};
