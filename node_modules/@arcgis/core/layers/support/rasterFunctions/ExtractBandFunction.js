/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import{isSome as s,isNone as r}from"../../../core/maybe.js";import{property as e}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as o}from"../../../core/accessorSupport/decorators/subclass.js";import n from"./BaseRasterFunction.js";import i from"./ExtractBandFunctionArguments.js";import{MissingBandAction as a}from"./pixelUtils.js";let c=class extends n{constructor(){super(...arguments),this.functionName="ExtractBand",this.functionArguments=null,this.rasterArgumentNames=["raster"]}_bindSourceRasters(){const{sourceRasterInfos:t}=this,r=t[0],{bandCount:e}=r,{bandIDs:o,missingBandAction:n}=this.functionArguments;if(n===a.fail&&o.some((t=>t<0||t>=e)))return{success:!1,error:"extract-band-function: invalid bandIDs"};this.outputPixelType=this._getOutputPixelType("f32");const i=r.clone();i.pixelType=this.outputPixelType;const{statistics:c,histograms:u}=i;return s(c)&&c.length&&(i.statistics=o.map((t=>c[t]||c[c.length-1]))),s(u)&&u.length&&(i.histograms=o.map((t=>u[t]||u[u.length-1]))),this.rasterInfo=i,{success:!0}}_processPixels(t){const s=t.pixelBlocks?.[0];if(r(s))return null;const e=s.pixels.length,o=this.functionArguments.bandIDs.map((t=>t>=e?e-1:t));return s.extractBands(o)}};t([e({json:{write:!0,name:"rasterFunction"}})],c.prototype,"functionName",void 0),t([e({type:i,json:{write:!0,name:"rasterFunctionArguments"}})],c.prototype,"functionArguments",void 0),t([e()],c.prototype,"rasterArgumentNames",void 0),c=t([o("esri.layers.support.rasterFunctions.ExtractBandFunction")],c);const u=c;export{u as default};
