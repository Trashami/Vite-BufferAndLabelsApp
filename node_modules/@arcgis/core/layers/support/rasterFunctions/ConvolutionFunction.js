/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{isNone as t}from"../../../core/maybe.js";import{property as o}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as s}from"../../../core/accessorSupport/decorators/subclass.js";import r from"./BaseRasterFunction.js";import n from"./ConvolutionFunctionArguments.js";import{convolutionKernels as i,ConvolutionKernel as u,convolute as c}from"./convolutionUtils.js";let p=class extends r{constructor(){super(...arguments),this.functionName="Convolution",this.rasterArgumentNames=["raster"]}_bindSourceRasters(){const{kernelType:e,rows:t,cols:o,kernel:s}=this.functionArguments;if(!i.has(e))return{success:!1,error:`convolution-function: the specified kernel type is not supported ${e}`};if(e!==u.None&&t*o!==s.length)return{success:!1,error:"convolution-function: the specified rows and cols do not match the length of the kernel"};const r=this.sourceRasterInfos[0];this.outputPixelType=this._getOutputPixelType(r.pixelType);const n=r.clone();n.pixelType=this.outputPixelType;const c=[u.None,u.Sharpen,u.Sharpen2,u.Sharpening3x3,u.Sharpening5x5];return"u8"===this.outputPixelType||c.includes(e)||(n.statistics=null,n.histograms=null),this.rasterInfo=n,{success:!0}}_processPixels(e){const o=e.pixelBlocks?.[0];if(t(o)||this.functionArguments.kernelType===u.None)return o;let{kernel:s,rows:r,cols:n}=this.functionArguments;const i=s.reduce(((e,t)=>e+t));return 0!==i&&1!==i&&(s=s.map((e=>e/i))),c(o,{kernel:s,rows:r,cols:n,outputPixelType:this.outputPixelType})}};e([o({json:{write:!0,name:"rasterFunction"}})],p.prototype,"functionName",void 0),e([o({type:n,json:{write:!0,name:"rasterFunctionArguments"}})],p.prototype,"functionArguments",void 0),e([o()],p.prototype,"rasterArgumentNames",void 0),p=e([s("esri.layers.support.rasterFunctions.ConvolutionFunction")],p);const l=p;export{l as default};
