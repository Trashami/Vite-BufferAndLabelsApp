/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import{isNone as s}from"../../../core/maybe.js";import{property as o}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as r}from"../../../core/accessorSupport/decorators/subclass.js";import e from"./BaseRasterFunction.js";import n from"./LocalFunctionArguments.js";import{local as i}from"./localUtils.js";let u=class extends e{constructor(){super(...arguments),this.functionName="Local",this.functionArguments=null,this.rasterArgumentNames=["rasters"]}_bindSourceRasters(){const{sourceRasterInfos:t}=this,s=t[0],{bandCount:o}=s,{processAsMultiband:r}=this.functionArguments;if(r&&t.some((t=>t.bandCount!==o)))return{success:!1,error:"local-function: input rasters do not have same band count"};this.outputPixelType=this._getOutputPixelType("f32");const e=s.clone();return e.pixelType=this.outputPixelType,e.statistics=null,e.histograms=null,r||(e.bandCount=1),this.rasterInfo=e,{success:!0}}_processPixels(t){const{pixelBlocks:o}=t;return s(o)||o.some((t=>s(t)))?null:i(o,this.functionArguments.operation,{processAsMultiband:this.functionArguments.processAsMultiband,outputPixelType:this.outputPixelType??void 0})}};t([o({json:{write:!0,name:"rasterFunction"}})],u.prototype,"functionName",void 0),t([o({type:n,json:{write:!0,name:"rasterFunctionArguments"}})],u.prototype,"functionArguments",void 0),t([o()],u.prototype,"rasterArgumentNames",void 0),u=t([r("esri.layers.support.rasterFunctions.LocalFunction")],u);const c=u;export{c as default};
