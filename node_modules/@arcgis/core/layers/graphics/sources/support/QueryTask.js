/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import e from"../../../../core/Error.js";import has from"../../../../core/has.js";import{isNone as r,isSome as o}from"../../../../core/maybe.js";import{whenOrAbort as s}from"../../../../core/promiseUtils.js";import{property as i}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as u}from"../../../../core/accessorSupport/decorators/subclass.js";import{DataLayerSource as n}from"../../../support/source/DataLayerSource.js";import{executeRawQueryJSON as a}from"../../../../rest/query/executeQueryJSON.js";import{executeRawQueryPBF as c}from"../../../../rest/query/executeQueryPBF.js";import p from"../../../../rest/support/FeatureSet.js";import m from"../../../../rest/support/Query.js";import{executeAttachmentQuery as f}from"../../../../rest/query/executeAttachmentQuery.js";import{executeForCount as l}from"../../../../rest/query/executeForCount.js";import{executeForExtent as h}from"../../../../rest/query/executeForExtent.js";import{executeForIds as d}from"../../../../rest/query/executeForIds.js";import{executeRelationshipQuery as y,executeRelationshipQueryForCount as F}from"../../../../rest/query/executeRelationshipQuery.js";import{executeTopFeaturesQuery as S}from"../../../../rest/query/executeTopFeaturesQuery.js";import{executeForTopIds as j}from"../../../../rest/query/executeForTopIds.js";import{executeForTopExtents as D}from"../../../../rest/query/executeForTopExtents.js";import{executeForTopCount as x}from"../../../../rest/query/executeForTopCount.js";import O from"../../../../rest/support/RelationshipQuery.js";import b from"../../../../tasks/Task.js";let q=class extends b{constructor(t){super(t),this.dynamicDataSource=null,this.fieldsIndex=null,this.format="json",this.gdbVersion=null,this.infoFor3D=null,this.sourceSpatialReference=null}async execute(t,e){const r=await this.executeJSON(t,e);return this.featureSetFromJSON(t,r,e)}async executeJSON(t,e){const r={...this.requestOptions,...e},o=this._normalizeQuery(t),s=null!=t.outStatistics?.[0],i=has("featurelayer-pbf-statistics"),u=!s||i;let n;if("pbf"===this.format&&u)try{n=await c(this.url,o,r)}catch(p){if("query:parsing-pbf"!==p.name)throw p;this.format="json"}return"json"!==this.format&&u||(n=await a(this.url,o,r)),this._normalizeFields(n.fields),n}async featureSetFromJSON(t,e,o){if(!this._queryIs3DObjectFormat(t)||r(this.infoFor3D)||!e.assetMaps||!e.features||!e.features.length)return p.fromJSON(e);const{meshFeatureSetFromJSON:i}=await s(import("../../../../rest/support/meshFeatureSet.js"),o);return i(t,this.infoFor3D,e)}executeForCount(t,e){const r={...this.requestOptions,...e},o=this._normalizeQuery(t);return l(this.url,o,r)}executeForExtent(t,e){const r={...this.requestOptions,...e},o=this._normalizeQuery(t);return h(this.url,o,r)}executeForIds(t,e){const r={...this.requestOptions,...e},o=this._normalizeQuery(t);return d(this.url,o,r)}executeRelationshipQuery(t,e){t=O.from(t);const r={...this.requestOptions,...e};return(this.gdbVersion||this.dynamicDataSource)&&((t=t.clone()).gdbVersion=t.gdbVersion||this.gdbVersion,t.dynamicDataSource=t.dynamicDataSource||this.dynamicDataSource),y(this.url,t,r)}executeRelationshipQueryForCount(t,e){t=O.from(t);const r={...this.requestOptions,...e};return(this.gdbVersion||this.dynamicDataSource)&&((t=t.clone()).gdbVersion=t.gdbVersion||this.gdbVersion,t.dynamicDataSource=t.dynamicDataSource||this.dynamicDataSource),F(this.url,t,r)}executeAttachmentQuery(t,e){const r={...this.requestOptions,...e};return f(this.url,t,r)}executeTopFeaturesQuery(t,e){const r={...this.requestOptions,...e};return S(this.parsedUrl,t,this.sourceSpatialReference,r)}executeForTopIds(t,e){const r={...this.requestOptions,...e};return j(this.parsedUrl,t,r)}executeForTopExtents(t,e){const r={...this.requestOptions,...e};return D(this.parsedUrl,t,r)}executeForTopCount(t,e){const r={...this.requestOptions,...e};return x(this.parsedUrl,t,r)}_normalizeQuery(t){let s=m.from(t);if(s.sourceSpatialReference=s.sourceSpatialReference||this.sourceSpatialReference,(this.gdbVersion||this.dynamicDataSource)&&(s=s===t?s.clone():s,s.gdbVersion=t.gdbVersion||this.gdbVersion,s.dynamicDataSource=t.dynamicDataSource?n.from(t.dynamicDataSource):this.dynamicDataSource),o(this.infoFor3D)&&this._queryIs3DObjectFormat(t)){s=s===t?s.clone():s,s.formatOf3DObjects=null;for(const t of this.infoFor3D.queryFormats){if("3D_glb"===t){s.formatOf3DObjects=t;break}"3D_gltf"!==t||s.formatOf3DObjects||(s.formatOf3DObjects=t)}if(!s.formatOf3DObjects)throw new e("query:unsupported-3d-query-formats","Could not find any supported 3D object query format. Only supported formats are 3D_glb and 3D_gltf");if(r(s.outFields)||!s.outFields.includes("*")){s=s===t?s.clone():s,r(s.outFields)&&(s.outFields=[]);const{originX:e,originY:o,originZ:i,translationX:u,translationY:n,translationZ:a,scaleX:c,scaleY:p,scaleZ:m,rotationX:f,rotationY:l,rotationZ:h,rotationDeg:d}=this.infoFor3D.transformFieldRoles;s.outFields.push(e,o,i,u,n,a,c,p,m,f,l,h,d)}}return s}_normalizeFields(t){if(o(this.fieldsIndex)&&o(t))for(const e of t){const t=this.fieldsIndex.get(e.name);t&&Object.assign(e,t.toJSON())}}_queryIs3DObjectFormat(t){return o(this.infoFor3D)&&t.returnGeometry&&"xyFootprint"!==t.multipatchOption&&!t.outStatistics}};t([i({type:n})],q.prototype,"dynamicDataSource",void 0),t([i()],q.prototype,"fieldsIndex",void 0),t([i()],q.prototype,"format",void 0),t([i()],q.prototype,"gdbVersion",void 0),t([i()],q.prototype,"infoFor3D",void 0),t([i()],q.prototype,"sourceSpatialReference",void 0),q=t([u("esri.tasks.QueryTask")],q);const g=q;export{g as default};
