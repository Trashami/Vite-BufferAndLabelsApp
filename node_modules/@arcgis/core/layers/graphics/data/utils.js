/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{JSONMap as e}from"../../../core/jsonMap.js";import{isNone as t,isSome as i}from"../../../core/maybe.js";import{getUnitString as r}from"../../../core/unitUtils.js";import{canProjectWithoutEngine as n}from"../../../geometry/projection.js";import{getGeometryExtent as o}from"../../../geometry/support/extentUtils.js";import{fromJSON as s,isExtent as a,isPolygon as l,isPolyline as m}from"../../../geometry/support/jsonUtils.js";import{normalizeCentralMeridian as f}from"../../../geometry/support/normalizeUtils.js";import{equals as u,isGeographic as c,isWebMercator as p,WGS84 as y}from"../../../geometry/support/spatialReferenceUtils.js";import{quantizeOptimizedGeometry as g,convertToPoint as S,generalizeOptimizedGeometry as R,removeZMValues as w,convertToPolyline as j,convertToPolygon as h,convertToMultipoint as d}from"../featureConversionUtils.js";import x from"../OptimizedGeometry.js";import{checkProjectionSupport as U,project as M}from"./projectionSupport.js";const O=new e({esriSRUnit_Meter:"meters",esriSRUnit_Kilometer:"kilometers",esriSRUnit_Foot:"feet",esriSRUnit_StatuteMile:"miles",esriSRUnit_NauticalMile:"nautical-miles",esriSRUnit_USNauticalMile:"us-nautical-miles"}),F=Object.freeze({}),N=new x,_=new x,G=new x,P={esriGeometryPoint:S,esriGeometryPolyline:j,esriGeometryPolygon:h,esriGeometryMultipoint:d};function b(e,i,r,n=e.hasZ,o=e.hasM){if(t(i))return null;const s=e.hasZ&&n,a=e.hasM&&o;if(r){const t=g(G,i,e.hasZ,e.hasM,"esriGeometryPoint",r,n,o);return S(t,s,a)}return S(i,s,a)}function v(e,r,n,o,s,a,l=r,m=n){const f=r&&l,u=n&&m,c=i(o)?"coords"in o?o:o.geometry:null;if(t(c))return null;if(s){let t=R(_,c,r,n,e,s,l,m);return a&&(t=g(G,t,f,u,e,a)),P[e]?.(t,f,u)??null}if(a){const t=g(G,c,r,n,e,a,l,m);return P[e]?.(t,f,u)??null}return w(N,c,r,n,l,m),P[e]?.(N,f,u)??null}async function z(e,t,i){const{outFields:r,orderByFields:n,groupByFieldsForStatistics:o,outStatistics:s}=e;if(r)for(let a=0;a<r.length;a++)r[a]=r[a].trim();if(n)for(let a=0;a<n.length;a++)n[a]=n[a].trim();if(o)for(let a=0;a<o.length;a++)o[a]=o[a].trim();if(s)for(let a=0;a<s.length;a++)s[a].onStatisticField&&(s[a].onStatisticField=s[a].onStatisticField.trim());return e.geometry&&!e.outSR&&(e.outSR=e.geometry.spatialReference),J(e,t,i)}async function J(e,i,r){if(!e)return null;let{where:n}=e;if(e.where=n=n&&n.trim(),(!n||/^1 *= *1$/.test(n)||i&&i===n)&&(e.where=null),!e.geometry)return e;let a=await Z(e);if(e.distance=0,e.units=null,"esriSpatialRelEnvelopeIntersects"===e.spatialRel){const{spatialReference:t}=e.geometry;a=o(a),a.spatialReference=t}if(a){await U(a.spatialReference,r),a=B(a,r);const i=(await f(s(a)))[0];if(t(i))throw F;const n="quantizationParameters"in e&&e.quantizationParameters?.tolerance||"maxAllowableOffset"in e&&e.maxAllowableOffset||0,o=n&&A(a,r)?{densificationStep:8*n}:void 0,l=i.toJSON(),m=await M(l,l.spatialReference,r,o);if(!m)throw F;m.spatialReference=r,e.geometry=m}return e}function A(e,t){if(!e)return!1;const i=e.spatialReference;return(a(e)||l(e)||m(e))&&!u(i,t)&&!n(i,t)}function B(e,t){const i=e.spatialReference;return A(e,t)&&a(e)?{spatialReference:i,rings:[[[e.xmin,e.ymin],[e.xmin,e.ymax],[e.xmax,e.ymax],[e.xmax,e.ymin],[e.xmin,e.ymin]]]}:e}async function Z(e){const{distance:t,units:i}=e,n=e.geometry;if(null==t||"vertexAttributes"in n)return n;const o=n.spatialReference,s=i?O.fromJSON(i):r(o),a=o&&(c(o)||p(o))?n:await U(o,y).then((()=>M(n,y)));return(await q())(a.spatialReference,a,t,s)}async function q(){return(await import("../../../geometry/geometryEngineJSON.js")).geodesicBuffer}function E(e){return e&&k in e?JSON.parse(JSON.stringify(e,C)):e}const k="_geVersion",C=(e,t)=>e!==k?t:void 0;export{F as QUERY_ENGINE_EMPTY_RESULT,E as cleanFromGeometryEngine,v as getGeometry,z as normalizeQuery,J as normalizeQueryLike,b as transformCentroid};
